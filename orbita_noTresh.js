
        let F = 0
let FRAME = 0
let BLOCK_SIZE = 0
let SAMPLE_RATE = 0
let NULL_SIGNAL = 0
function SND_TO_NULL(m) {}
        
                const i32 = (v) => v
                const f32 = i32
                const f64 = i32
                
function toInt(v) {
                    return v
                }
function toFloat(v) {
                    return v
                }
function createFloatArray(length) {
                    return new Float64Array(length)
                }
function setFloatDataView(dataView, position, value) {
                    dataView.setFloat64(position, value)
                }
function getFloatDataView(dataView, position) {
                    return dataView.getFloat64(position)
                }
const SKED_ID_NULL = -1
const SKED_ID_COUNTER_INIT = 1
const _SKED_WAIT_IN_PROGRESS = 0
const _SKED_WAIT_OVER = 1
const _SKED_MODE_WAIT = 0
const _SKED_MODE_SUBSCRIBE = 1


function sked_create(isLoggingEvents) {
            return {
                eventLog: new Set(),
                events: new Map(),
                requests: new Map(),
                idCounter: SKED_ID_COUNTER_INIT,
                isLoggingEvents,
            }
        }
function sked_wait(skeduler, event, callback) {
            if (skeduler.isLoggingEvents === false) {
                throw new Error("Please activate skeduler's isLoggingEvents")
            }

            if (skeduler.eventLog.has(event)) {
                callback(event)
                return SKED_ID_NULL
            } else {
                return _sked_createRequest(skeduler, event, callback, _SKED_MODE_WAIT)
            }
        }
function sked_wait_future(skeduler, event, callback) {
            return _sked_createRequest(skeduler, event, callback, _SKED_MODE_WAIT)
        }
function sked_subscribe(skeduler, event, callback) {
            return _sked_createRequest(skeduler, event, callback, _SKED_MODE_SUBSCRIBE)
        }
function sked_emit(skeduler, event) {
            if (skeduler.isLoggingEvents === true) {
                skeduler.eventLog.add(event)
            }
            if (skeduler.events.has(event)) {
                const skedIds = skeduler.events.get(event)
                const skedIdsStaying = []
                for (let i = 0; i < skedIds.length; i++) {
                    if (skeduler.requests.has(skedIds[i])) {
                        const request = skeduler.requests.get(skedIds[i])
                        request.callback(event)
                        if (request.mode === _SKED_MODE_WAIT) {
                            skeduler.requests.delete(request.id)
                        } else {
                            skedIdsStaying.push(request.id)
                        }
                    }
                }
                skeduler.events.set(event, skedIdsStaying)
            }
        }
function sked_cancel(skeduler, id) {
            skeduler.requests.delete(id)
        }
function _sked_createRequest(skeduler, event, callback, mode) {
            const id = _sked_nextId(skeduler)
            const request = {
                id, 
                mode, 
                callback,
            }
            skeduler.requests.set(id, request)
            if (!skeduler.events.has(event)) {
                skeduler.events.set(event, [id])    
            } else {
                skeduler.events.get(event).push(id)
            }
            return id
        }
function _sked_nextId(skeduler) {
            return skeduler.idCounter++
        }
const _commons_ENGINE_LOGGED_SKEDULER = sked_create(true)
const _commons_FRAME_SKEDULER = sked_create(false)
function _commons_emitEngineConfigure() {
            sked_emit(_commons_ENGINE_LOGGED_SKEDULER, 'configure')
        }
function _commons_emitFrame(frame) {
            sked_emit(_commons_FRAME_SKEDULER, frame.toString())
        }
const MSG_FLOAT_TOKEN = "number"
const MSG_STRING_TOKEN = "string"
function msg_create(template) {
                    const m = []
                    let i = 0
                    while (i < template.length) {
                        if (template[i] === MSG_STRING_TOKEN) {
                            m.push('')
                            i += 2
                        } else if (template[i] === MSG_FLOAT_TOKEN) {
                            m.push(0)
                            i += 1
                        }
                    }
                    return m
                }
function msg_getLength(message) {
                    return message.length
                }
function msg_getTokenType(message, tokenIndex) {
                    return typeof message[tokenIndex]
                }
function msg_isStringToken(message, tokenIndex) {
                    return msg_getTokenType(message, tokenIndex) === 'string'
                }
function msg_isFloatToken(message, tokenIndex) {
                    return msg_getTokenType(message, tokenIndex) === 'number'
                }
function msg_isMatching(message, tokenTypes) {
                    return (message.length === tokenTypes.length) 
                        && message.every((v, i) => msg_getTokenType(message, i) === tokenTypes[i])
                }
function msg_writeFloatToken(message, tokenIndex, value) {
                    message[tokenIndex] = value
                }
function msg_writeStringToken(message, tokenIndex, value) {
                    message[tokenIndex] = value
                }
function msg_readFloatToken(message, tokenIndex) {
                    return message[tokenIndex]
                }
function msg_readStringToken(message, tokenIndex) {
                    return message[tokenIndex]
                }
function msg_floats(values) {
                    return values
                }
function msg_strings(values) {
                    return values
                }
function msg_display(message) {
                    return '[' + message
                        .map(t => typeof t === 'string' ? '"' + t + '"' : t.toString())
                        .join(', ') + ']'
                }
function msg_isBang(message) {
            return (
                msg_isStringToken(message, 0) 
                && msg_readStringToken(message, 0) === 'bang'
            )
        }
function msg_bang() {
            const message = msg_create([MSG_STRING_TOKEN, 4])
            msg_writeStringToken(message, 0, 'bang')
            return message
        }
function msg_emptyToBang(message) {
            if (msg_getLength(message) === 0) {
                return msg_bang()
            } else {
                return message
            }
        }
const MSG_BUSES = new Map()
function msgBusPublish(busName, message) {
            let i = 0
            const callbacks = MSG_BUSES.has(busName) ? MSG_BUSES.get(busName): []
            for (i = 0; i < callbacks.length; i++) {
                callbacks[i](message)
            }
        }
function msgBusSubscribe(busName, callback) {
            if (!MSG_BUSES.has(busName)) {
                MSG_BUSES.set(busName, [])
            }
            MSG_BUSES.get(busName).push(callback)
        }
function msgBusUnsubscribe(busName, callback) {
            if (!MSG_BUSES.has(busName)) {
                return
            }
            const callbacks = MSG_BUSES.get(busName)
            const found = callbacks.indexOf(callback) !== -1
            if (found !== -1) {
                callbacks.splice(found, 1)
            }
        }
function commons_waitEngineConfigure(callback) {
            sked_wait(_commons_ENGINE_LOGGED_SKEDULER, 'configure', callback)
        }
function commons_waitFrame(frame, callback) {
            return sked_wait_future(_commons_FRAME_SKEDULER, frame.toString(), callback)
        }
function commons_cancelWaitFrame(id) {
            sked_cancel(_commons_FRAME_SKEDULER, id)
        }

function n_control_setReceiveBusName(state, busName) {
        if (state.receiveBusName !== "empty") {
            msgBusUnsubscribe(state.receiveBusName, state.messageReceiver)
        }
        state.receiveBusName = busName
        if (state.receiveBusName !== "empty") {
            msgBusSubscribe(state.receiveBusName, state.messageReceiver)
        }
    }
function n_control_setSendReceiveFromMessage(state, m) {
        if (
            msg_isMatching(m, [MSG_STRING_TOKEN, MSG_STRING_TOKEN])
            && msg_readStringToken(m, 0) === 'receive'
        ) {
            n_control_setReceiveBusName(state, msg_readStringToken(m, 1))
            return true

        } else if (
            msg_isMatching(m, [MSG_STRING_TOKEN, MSG_STRING_TOKEN])
            && msg_readStringToken(m, 0) === 'send'
        ) {
            state.sendBusName = msg_readStringToken(m, 1)
            return true
        }
        return false
    }
function n_control_defaultMessageHandler(m) {}
function n_sl_receiveMessage(state, m) {
                    if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                        state.valueFloat = msg_readFloatToken(m, 0)
                        const outMessage = msg_floats([state.valueFloat])
                        state.messageSender(outMessage)
                        if (state.sendBusName !== "empty") {
                            msgBusPublish(state.sendBusName, outMessage)
                        }
                        return
        
                    } else if (msg_isBang(m)) {
                        
                        const outMessage = msg_floats([state.valueFloat])
                        state.messageSender(outMessage)
                        if (state.sendBusName !== "empty") {
                            msgBusPublish(state.sendBusName, outMessage)
                        }
                        return
        
                    } else if (
                        msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN]) 
                        && msg_readStringToken(m, 0) === 'set'
                    ) {
                        state.valueFloat = msg_readFloatToken(m, 1)
                        return
                    
                    } else if (n_control_setSendReceiveFromMessage(state, m) === true) {
                        return
                    }
                }

function msg_isAction(message, action) {
            return msg_isMatching(message, [MSG_STRING_TOKEN])
                && msg_readStringToken(message, 0) === action
        }
function computeUnitInSamples(sampleRate, amount, unit) {
        if (unit === 'msec' || unit === 'millisecond') {
            return amount / 1000 * sampleRate
        } else if (unit === 'sec' || unit === 'seconds' || unit === 'second') {
            return amount * sampleRate
        } else if (unit === 'min' || unit === 'minutes' || unit === 'minute') {
            return amount * 60 * sampleRate
        } else if (unit === 'samp' || unit === 'samples' || unit === 'sample') {
            return amount
        } else {
            throw new Error("invalid time unit : " + unit)
        }
    }

function interpolateLin(x, p0, p1) {
            return p0.y + (x - p0.x) * (p1.y - p0.y) / (p1.x - p0.x)
        }

function computeSlope(p0, p1) {
            return p1.x !== p0.x ? (p1.y - p0.y) / (p1.x - p0.x) : 0
        }
function removePointsBeforeFrame(points, frame) {
            const newPoints = []
            let i = 0
            while (i < points.length) {
                if (frame <= points[i].x) {
                    newPoints.push(points[i])
                }
                i++
            }
            return newPoints
        }
function insertNewLinePoints(points, p0, p1) {
            const newPoints = []
            let i = 0
            
            // Keep the points that are before the new points added
            while (i < points.length && points[i].x <= p0.x) {
                newPoints.push(points[i])
                i++
            }
            
            // Find the start value of the start point :
            
            // 1. If there is a previous point and that previous point
            // is on the same frame, we don't modify the start point value.
            // (represents a vertical line).
            if (0 < i - 1 && points[i - 1].x === p0.x) {

            // 2. If new points are inserted in between already existing points 
            // we need to interpolate the existing line to find the startValue.
            } else if (0 < i && i < points.length) {
                newPoints.push({
                    x: p0.x,
                    y: interpolateLin(p0.x, points[i - 1], points[i])
                })

            // 3. If new line is inserted after all existing points, 
            // we just take the value of the last point
            } else if (i >= points.length && points.length) {
                newPoints.push({
                    x: p0.x,
                    y: points[points.length - 1].y,
                })

            // 4. If new line placed in first position, we take the defaultStartValue.
            } else if (i === 0) {
                newPoints.push({
                    x: p0.x,
                    y: p0.y,
                })
            }
            
            newPoints.push({
                x: p1.x,
                y: p1.y,
            })
            return newPoints
        }
function computeFrameAjustedPoints(points) {
            if (points.length < 2) {
                throw new Error('invalid length for points')
            }

            const newPoints = []
            let i = 0
            let p = points[0]
            let frameLower = 0
            let frameUpper = 0
            
            while(i < points.length) {
                p = points[i]
                frameLower = Math.floor(p.x)
                frameUpper = frameLower + 1

                // I. Placing interpolated point at the lower bound of the current frame
                // ------------------------------------------------------------------------
                // 1. Point is already on an exact frame,
                if (p.x === frameLower) {
                    newPoints.push({ x: p.x, y: p.y })

                    // 1.a. if several of the next points are also on the same X,
                    // we find the last one to draw a vertical line.
                    while (
                        (i + 1) < points.length
                        && points[i + 1].x === frameLower
                    ) {
                        i++
                    }
                    if (points[i].y !== newPoints[newPoints.length - 1].y) {
                        newPoints.push({ x: points[i].x, y: points[i].y })
                    }

                    // 1.b. if last point, we quit
                    if (i + 1 >= points.length) {
                        break
                    }

                    // 1.c. if next point is in a different frame we can move on to next iteration
                    if (frameUpper <= points[i + 1].x) {
                        i++
                        continue
                    }
                
                // 2. Point isn't on an exact frame
                // 2.a. There's a previous point, the we use it to interpolate the value.
                } else if (newPoints.length) {
                    newPoints.push({
                        x: frameLower,
                        y: interpolateLin(frameLower, points[i - 1], p),
                    })
                
                // 2.b. It's the very first point, then we don't change its value.
                } else {
                    newPoints.push({ x: frameLower, y: p.y })
                }

                // II. Placing interpolated point at the upper bound of the current frame
                // ---------------------------------------------------------------------------
                // First, we find the closest point from the frame upper bound (could be the same p).
                // Or could be a point that is exactly placed on frameUpper.
                while (
                    (i + 1) < points.length 
                    && (
                        Math.ceil(points[i + 1].x) === frameUpper
                        || Math.floor(points[i + 1].x) === frameUpper
                    )
                ) {
                    i++
                }
                p = points[i]

                // 1. If the next point is directly in the next frame, 
                // we do nothing, as this corresponds with next iteration frameLower.
                if (Math.floor(p.x) === frameUpper) {
                    continue
                
                // 2. If there's still a point after p, we use it to interpolate the value
                } else if (i < points.length - 1) {
                    newPoints.push({
                        x: frameUpper,
                        y: interpolateLin(frameUpper, p, points[i + 1]),
                    })

                // 3. If it's the last point, we dont change the value
                } else {
                    newPoints.push({ x: frameUpper, y: p.y })
                }

                i++
            }

            return newPoints
        }
function computeLineSegments(points) {
            const lineSegments = []
            let i = 0
            let p0
            let p1

            while(i < points.length - 1) {
                p0 = points[i]
                p1 = points[i + 1]
                lineSegments.push({
                    p0, p1, 
                    dy: computeSlope(p0, p1),
                    dx: 1,
                })
                i++
            }
            return lineSegments
        }

const n_line_t_defaultLine = {
        p0: {x: -1, y: 0},
        p1: {x: -1, y: 0},
        dx: 1,
        dy: 0,
    }
function n_line_t_setNewLine(state, targetValue) {
        const startFrame = toFloat(FRAME)
        const endFrame = toFloat(FRAME) + state.nextDurationSamp
        if (endFrame === toFloat(FRAME)) {
            state.currentLine = n_line_t_defaultLine
            state.currentValue = targetValue
            state.nextDurationSamp = 0
        } else {
            state.currentLine = {
                p0: {
                    x: startFrame, 
                    y: state.currentValue,
                }, 
                p1: {
                    x: endFrame, 
                    y: targetValue,
                }, 
                dx: 1,
                dy: 0,
            }
            state.currentLine.dy = computeSlope(state.currentLine.p0, state.currentLine.p1)
            state.nextDurationSamp = 0
        }
    }
function n_line_t_setNextDuration(state, durationMsec) {
        state.nextDurationSamp = computeUnitInSamples(SAMPLE_RATE, durationMsec, 'msec')
    }
function n_line_t_stop(state) {
        state.currentLine.p1.x = -1
        state.currentLine.p1.y = state.currentValue
    }

function n_add_setLeft(state, value) {
                    state.leftOp = value
                }
function n_add_setRight(state, value) {
                    state.rightOp = value
                }
function msg_copyTemplate(src, start, end) {
            const template = []
            for (let i = start; i < end; i++) {
                const tokenType = msg_getTokenType(src, i)
                template.push(tokenType)
                if (tokenType === MSG_STRING_TOKEN) {
                    template.push(msg_readStringToken(src, i).length)
                }
            }
            return template
        }
function msg_copyMessage(src, dest, srcStart, srcEnd, destStart) {
            let i = srcStart
            let j = destStart
            for (i, j; i < srcEnd; i++, j++) {
                if (msg_getTokenType(src, i) === MSG_STRING_TOKEN) {
                    msg_writeStringToken(dest, j, msg_readStringToken(src, i))
                } else {
                    msg_writeFloatToken(dest, j, msg_readFloatToken(src, i))
                }
            }
        }
function msg_slice(message, start, end) {
            if (msg_getLength(message) <= start) {
                throw new Error('message empty')
            }
            const template = msg_copyTemplate(message, start, end)
            const newMessage = msg_create(template)
            msg_copyMessage(message, newMessage, start, end, 0)
            return newMessage
        }
function msg_concat(message1, message2) {
            const newMessage = msg_create(msg_copyTemplate(message1, 0, msg_getLength(message1)).concat(msg_copyTemplate(message2, 0, msg_getLength(message2))))
            msg_copyMessage(message1, newMessage, 0, msg_getLength(message1), 0)
            msg_copyMessage(message2, newMessage, 0, msg_getLength(message2), msg_getLength(message1))
            return newMessage
        }
function msg_shift(message) {
            switch (msg_getLength(message)) {
                case 0:
                    throw new Error('message empty')
                case 1:
                    return msg_create([])
                default:
                    return msg_slice(message, 1, msg_getLength(message))
            }
        }
function n_floatatom_receiveMessage(state, m) {
                    if (msg_isBang(m)) {
                        state.messageSender(state.value)
                        if (state.sendBusName !== "empty") {
                            msgBusPublish(state.sendBusName, state.value)
                        }
                        return
                    
                    } else if (
                        msg_getTokenType(m, 0) === MSG_STRING_TOKEN
                        && msg_readStringToken(m, 0) === 'set'
                    ) {
                        const setMessage = msg_slice(m, 1, msg_getLength(m))
                        if (msg_isMatching(setMessage, [MSG_FLOAT_TOKEN])) { 
                                state.value = setMessage    
                                return
                        }
        
                    } else if (n_control_setSendReceiveFromMessage(state, m) === true) {
                        return
                        
                    } else if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                    
                        state.value = m
                        state.messageSender(state.value)
                        if (state.sendBusName !== "empty") {
                            msgBusPublish(state.sendBusName, state.value)
                        }
                        return
        
                    }
                }
function n_bang_receiveMessage(state, m) {
                if (n_control_setSendReceiveFromMessage(state, m) === true) {
                    return
                }
                
                const outMessage = msg_bang()
                state.messageSender(outMessage)
                if (state.sendBusName !== "empty") {
                    msgBusPublish(state.sendBusName, outMessage)
                }
                return
            }

function messageTokenToFloat(m, i) {
        if (msg_isFloatToken(m, i)) {
            return msg_readFloatToken(m, i)
        } else {
            return 0
        }
    }
function messageTokenToString(m, i) {
        if (msg_isStringToken(m, i)) {
            const str = msg_readStringToken(m, i)
            if (str === 'bang') {
                return 'symbol'
            } else {
                return str
            }
        } else {
            return 'float'
        }
    }
function n_div_setLeft(state, value) {
                    state.leftOp = value
                }
function n_div_setRight(state, value) {
                    state.rightOp = value
                }
function n_mul_setLeft(state, value) {
                    state.leftOp = value
                }
function n_mul_setRight(state, value) {
                    state.rightOp = value
                }


function n_random_setMaxValue(state, maxValue) {
        state.maxValue = Math.max(maxValue, 0)
    }


function n_delay_setDelay(state, delay) {
                state.delay = Math.max(0, delay)
            }
function n_delay_scheduleDelay(state, callback, currentFrame) {
                if (state.scheduledBang !== SKED_ID_NULL) {
                    n_delay_stop(state)
                }
                state.scheduledBang = commons_waitFrame(toInt(
                    Math.round(
                        toFloat(currentFrame) + state.delay * state.sampleRatio)),
                    callback
                )
            }
function n_delay_stop(state) {
                commons_cancelWaitFrame(state.scheduledBang)
                state.scheduledBang = SKED_ID_NULL
            }
function n_tgl_receiveMessage(state, m) {
                    if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                        state.valueFloat = msg_readFloatToken(m, 0)
                        const outMessage = msg_floats([state.valueFloat])
                        state.messageSender(outMessage)
                        if (state.sendBusName !== "empty") {
                            msgBusPublish(state.sendBusName, outMessage)
                        }
                        return
        
                    } else if (msg_isBang(m)) {
                        state.valueFloat = state.valueFloat === 0 ? state.maxValue: 0
                        const outMessage = msg_floats([state.valueFloat])
                        state.messageSender(outMessage)
                        if (state.sendBusName !== "empty") {
                            msgBusPublish(state.sendBusName, outMessage)
                        }
                        return
        
                    } else if (
                        msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN]) 
                        && msg_readStringToken(m, 0) === 'set'
                    ) {
                        state.valueFloat = msg_readFloatToken(m, 1)
                        return
                    
                    } else if (n_control_setSendReceiveFromMessage(state, m) === true) {
                        return
                    }
                }

function n_metro_setRate(state, rate) {
        state.rate = Math.max(rate, 0)
    }
function n_metro_scheduleNextTick(state) {
        state.snd0(msg_bang())
        state.realNextTick = state.realNextTick + state.rate * state.sampleRatio
        state.skedId = commons_waitFrame(
            toInt(Math.round(state.realNextTick)), 
            state.tickCallback,
        )
    }
function n_metro_stop(state) {
        if (state.skedId !== SKED_ID_NULL) {
            commons_cancelWaitFrame(state.skedId)
            state.skedId = SKED_ID_NULL
        }
        state.realNextTick = 0
    }
function roundFloatAsPdInt(value) {
        return value > 0 ? Math.floor(value): Math.ceil(value)
    }
const _commons_ARRAYS = new Map()
const _commons_ARRAYS_SKEDULER = sked_create(false)
function commons_getArray(arrayName) {
            if (!_commons_ARRAYS.has(arrayName)) {
                throw new Error('Unknown array ' + arrayName)
            }
            return _commons_ARRAYS.get(arrayName)
        }
function commons_hasArray(arrayName) {
            return _commons_ARRAYS.has(arrayName)
        }
function commons_setArray(arrayName, array) {
            _commons_ARRAYS.set(arrayName, array)
            sked_emit(_commons_ARRAYS_SKEDULER, arrayName)
        }
function commons_subscribeArrayChanges(arrayName, callback) {
            const id = sked_subscribe(_commons_ARRAYS_SKEDULER, arrayName, callback)
            if (_commons_ARRAYS.has(arrayName)) {
                callback(arrayName)
            }
            return id
        }
function commons_cancelArrayChangesSubscription(id) {
            sked_cancel(_commons_ARRAYS_SKEDULER, id)
        }

const FS_OPERATION_SUCCESS = 0
const FS_OPERATION_FAILURE = 1
const _FS_OPERATIONS_IDS = new Set()
const _FS_OPERATIONS_CALLBACKS = new Map()
const _FS_OPERATIONS_SOUND_CALLBACKS = new Map()
let _FS_OPERATION_COUNTER = 1

function fs_soundInfoToMessage(soundInfo) {
                const info = msg_create([
                    MSG_FLOAT_TOKEN,
                    MSG_FLOAT_TOKEN,
                    MSG_FLOAT_TOKEN,
                    MSG_STRING_TOKEN,
                    soundInfo.encodingFormat.length,
                    MSG_STRING_TOKEN,
                    soundInfo.endianness.length,
                    MSG_STRING_TOKEN,
                    soundInfo.extraOptions.length
                ])
                msg_writeFloatToken(info, 0, toFloat(soundInfo.channelCount))
                msg_writeFloatToken(info, 1, toFloat(soundInfo.sampleRate))
                msg_writeFloatToken(info, 2, toFloat(soundInfo.bitDepth))
                msg_writeStringToken(info, 3, soundInfo.encodingFormat)
                msg_writeStringToken(info, 4, soundInfo.endianness)
                msg_writeStringToken(info, 5, soundInfo.extraOptions)
                return info
            }
function _fs_assertOperationExists(id, operationName) {
                if (!_FS_OPERATIONS_IDS.has(id)) {
                    throw new Error(operationName + ' operation unknown : ' + id.toString())
                }
            }
function _fs_createOperationId() {
                const id = _FS_OPERATION_COUNTER++
                _FS_OPERATIONS_IDS.add(id)
                return id
            }
function parseSoundFileOpenOpts(m, soundInfo) {
            const unhandled = new Set()
            let i = 0
            while (i < msg_getLength(m)) {
                if (msg_isStringToken(m, i)) {
                    const str = msg_readStringToken(m, i)
                    if (['-wave', '-aiff', '-caf', '-next', '-ascii'].includes(str)) {
                        soundInfo.encodingFormat = str.slice(1)

                    } else if (str === '-raw') {
                        console.log('-raw format not yet supported')
                        i += 4
                        
                    } else if (str === '-big') {
                        soundInfo.endianness = 'b'

                    } else if (str === '-little') {
                        soundInfo.endianness = 'l'

                    } else if (str === '-bytes') {
                        if (i < msg_getLength(m) && msg_isFloatToken(m, i + 1)) {
                            soundInfo.bitDepth = toInt(msg_readFloatToken(m, i + 1) * 8)
                            i++
                        } else {
                            console.log('failed to parse -bytes <value>')
                        }

                    } else if (str === '-rate') {
                        if (i < msg_getLength(m) && msg_isFloatToken(m, i + 1)) {
                            soundInfo.sampleRate = toInt(msg_readFloatToken(m, i + 1))
                            i++
                        } else {
                            console.log('failed to parse -rate <value>')
                        }

                    } else {
                        unhandled.add(i)
                    }
                    
                } else {
                    unhandled.add(i)
                }
                i++
            }
            return unhandled
        }
function fs_readSoundFile(url, soundInfo, callback) {
            const id = _fs_createOperationId()
            _FS_OPERATIONS_SOUND_CALLBACKS.set(id, callback)
            i_fs_readSoundFile(id, url, fs_soundInfoToMessage(soundInfo))
            return id
        }
function x_fs_onReadSoundFileResponse(id, status, sound) {
            _fs_assertOperationExists(id, 'x_fs_onReadSoundFileResponse')
            _FS_OPERATIONS_IDS.delete(id)
            // Finish cleaning before calling the callback in case it would throw an error.
            const callback = _FS_OPERATIONS_SOUND_CALLBACKS.get(id)
            callback(id, status, sound)
            _FS_OPERATIONS_SOUND_CALLBACKS.delete(id)
        }
function fs_writeSoundFile(sound, url, soundInfo, callback) {
            const id = _fs_createOperationId()
            _FS_OPERATIONS_CALLBACKS.set(id, callback)
            i_fs_writeSoundFile(id, sound, url, fs_soundInfoToMessage(soundInfo))
            return id
        }
function x_fs_onWriteSoundFileResponse(id, status) {
            _fs_assertOperationExists(id, 'x_fs_onWriteSoundFileResponse')
            _FS_OPERATIONS_IDS.delete(id)
            // Finish cleaning before calling the callback in case it would throw an error.
            const callback = _FS_OPERATIONS_CALLBACKS.get(id)
            callback(id, status)
            _FS_OPERATIONS_CALLBACKS.delete(id)
        }


function n_soundfiler_buildMessage1(soundInfo) {
        const m = msg_create([
            MSG_FLOAT_TOKEN,
            MSG_FLOAT_TOKEN,
            MSG_FLOAT_TOKEN,
            MSG_FLOAT_TOKEN,
            MSG_STRING_TOKEN,
            soundInfo.endianness.length,
        ])
        msg_writeFloatToken(m, 0, toFloat(soundInfo.sampleRate))
        msg_writeFloatToken(m, 1, -1) // TODO IMPLEMENT headersize
        msg_writeFloatToken(m, 2, toFloat(soundInfo.channelCount))
        msg_writeFloatToken(m, 3, Math.round(toFloat(soundInfo.bitDepth) / 8))
        msg_writeStringToken(m, 4, soundInfo.endianness)
        return m
    }
function n_modlegacy_setLeft(state, value) {
                    state.leftOp = value
                }
function n_modlegacy_setRight(state, value) {
                    state.rightOp = value
                }

function n_float_int_setValueInt(state, value) {
        state.value = roundFloatAsPdInt(value)
    }
function n_float_int_setValueFloat(state, value) {
        state.value = value
    }

function n_eq_setLeft(state, value) {
                    state.leftOp = value
                }
function n_eq_setRight(state, value) {
                    state.rightOp = value
                }
function n_sub_setLeft(state, value) {
                    state.leftOp = value
                }
function n_sub_setRight(state, value) {
                    state.rightOp = value
                }



function n_line_setNewLine(state, targetValue) {
        state.currentLine = {
            p0: {
                x: toFloat(FRAME), 
                y: state.currentValue,
            }, 
            p1: {
                x: toFloat(FRAME) + state.nextDurationSamp, 
                y: targetValue,
            }, 
            dx: state.grainSamp
        }
        state.nextDurationSamp = 0
        state.currentLine.dy = computeSlope(state.currentLine.p0, state.currentLine.p1) * state.grainSamp
    }
function n_line_setNextDuration(state, durationMsec) {
        state.nextDurationSamp = computeUnitInSamples(SAMPLE_RATE, durationMsec, 'msec')
    }
function n_line_setGrain(state, grainMsec) {
        state.grainSamp = computeUnitInSamples(SAMPLE_RATE, Math.max(grainMsec, 20), 'msec')
    }
function n_line_stopCurrentLine(state) {
        if (state.skedId !== SKED_ID_NULL) {
            commons_cancelWaitFrame(state.skedId)
            state.skedId = SKED_ID_NULL
        }
        if (FRAME < state.nextSampInt) {
            n_line_incrementTime(state, -1 * (state.nextSamp - toFloat(FRAME)))
        }
        n_line_setNextSamp(state, -1)
    }
function n_line_setNextSamp(state, currentSamp) {
        state.nextSamp = currentSamp
        state.nextSampInt = toInt(Math.round(currentSamp))
    }
function n_line_incrementTime(state, incrementSamp) {
        if (incrementSamp === state.currentLine.dx) {
            state.currentValue += state.currentLine.dy
        } else {
            state.currentValue += interpolateLin(
                incrementSamp,
                {x: 0, y: 0},
                {x: state.currentLine.dx, y: state.currentLine.dy},
            )
        }
        n_line_setNextSamp(
            state, 
            (state.nextSamp !== -1 ? state.nextSamp: toFloat(FRAME)) + incrementSamp
        )
    }
function n_line_tick(state) {
        state.snd0(msg_floats([state.currentValue]))
        if (toFloat(FRAME) >= state.currentLine.p1.x) {
            state.currentValue = state.currentLine.p1.y
            n_line_stopCurrentLine(state)
        } else {
            n_line_incrementTime(state, state.currentLine.dx)
            n_line_scheduleNextTick(state)
        }
    }
function n_line_scheduleNextTick(state) {
        state.skedId = commons_waitFrame(state.nextSampInt, state.tickCallback)
    }

function n_phasor_t_setPhase(state, phase) {
            state.phase = phase % 1.0
        }

function n_spigot_setIsClosed(state, value) {
        state.isClosed = (value === 0)
    }


const n_pipe_dummyScheduledMessage = {
        message: msg_create([]),
        frame: 0,
        skedId: SKED_ID_NULL,
    }
function n_pipe_prepareMessageScheduling(state, callback) {
        let insertIndex = 0
        let frame = FRAME + state.delay
        let skedId = SKED_ID_NULL

        while (
            insertIndex < state.scheduledMessages.length 
            && state.scheduledMessages[insertIndex].frame <= frame
        ) {
            insertIndex++
        }

        
        if (
            insertIndex === 0 || 
            (
                insertIndex > 0 
                && state.scheduledMessages[insertIndex - 1].frame !== frame
            )
        ) {
            skedId = commons_waitFrame(frame, callback)
        }

        
        for (let i = 0; i < state.snds.length; i++) {
            state.scheduledMessages.push(n_pipe_dummyScheduledMessage)
        }
        state.scheduledMessages.copyWithin(
            (insertIndex + 1) * state.snds.length, 
            insertIndex * state.snds.length
        )
        for (let i = 0; i < state.snds.length; i++) {
            state.scheduledMessages[insertIndex + i] = {
                message: n_pipe_dummyScheduledMessage.message,
                frame,
                skedId,
            }
        }

        return insertIndex
    }
function n_pipe_sendMessages(state, toFrame) {
        let i = 0
        while (
            state.scheduledMessages.length 
            && state.scheduledMessages[0].frame <= toFrame
        ) {
            for (i = 0; i < state.snds.length; i++) {
                // Snds are already reversed
                state.snds[i](state.scheduledMessages.shift().message)
            }
        }
    }
function n_pipe_clear(state) {
        let i = 0
        const length = state.scheduledMessages.length
        for (i; i < length; i++) {
            commons_cancelWaitFrame(state.scheduledMessages[i].skedId)
        }
        state.scheduledMessages = []
    }
function n_pipe_setDelay(state, delay) {
        state.delay = toInt(Math.round(delay / 1000 * SAMPLE_RATE))
    }

function n_list_setSplitPoint(state, value) {
        state.splitPoint = toInt(value)
    }
const n_tabbase_emptyArray = createFloatArray(1)

function n_tabbase_createState(arrayName) {
        return {
            array: n_tabbase_emptyArray,
            arrayName,
            arrayChangesSubscription: SKED_ID_NULL,
            readPosition: 0,
            readUntil: 0,
            writePosition: 0,
        }
    }
function n_tabbase_setArrayName(state, arrayName, callback) {
        if (state.arrayChangesSubscription != SKED_ID_NULL) {
            commons_cancelArrayChangesSubscription(state.arrayChangesSubscription)
        }
        state.arrayName = arrayName
        state.array = n_tabbase_emptyArray
        commons_subscribeArrayChanges(arrayName, callback)
    }
function n_tabbase_prepareIndex(index, arrayLength) {
        return toInt(Math.min(
            Math.max(
                0, Math.floor(index)
            ), toFloat(arrayLength - 1)
        ))
    }
function n_tabread_t_setArrayNameFinalize(state) {
                state.array = commons_getArray(state.arrayName)
            }

const SIGNAL_BUSES = new Map()
SIGNAL_BUSES.set('', 0)
function addAssignSignalBus(busName, value) {
            const newValue = SIGNAL_BUSES.get(busName) + value
            SIGNAL_BUSES.set(
                busName,
                newValue,
            )
            return newValue
        }
function setSignalBus(busName, value) {
            SIGNAL_BUSES.set(
                busName,
                value,
            )
        }
function resetSignalBus(busName) {
            SIGNAL_BUSES.set(busName, 0)
        }
function readSignalBus(busName) {
            return SIGNAL_BUSES.get(busName)
        }

function n_throw_catch_send_receive_t_setBusName(state, busName) {
        if (busName.length) {
            state.busName = busName
            resetSignalBus(state.busName)
        }
    }

function n_osc_t_setPhase(state, phase) {
            state.phase = phase % 1.0 * 2 * Math.PI
        }



function buf_clear(buffer) {
        buffer.data.fill(0)
    }
function buf_create(length) {
        return {
            data: createFloatArray(length),
            length: length,
            writeCursor: 0,
            pullAvailableLength: 0,
        }
    }
const DELAY_BUFFERS = new Map()
const DELAY_BUFFERS_SKEDULER = sked_create(true)
const DELAY_BUFFERS_NULL = buf_create(1)
function DELAY_BUFFERS_set(delayName, buffer) {
            DELAY_BUFFERS.set(delayName, buffer)
            sked_emit(DELAY_BUFFERS_SKEDULER, delayName)
        }
function DELAY_BUFFERS_get(delayName, callback) {
            sked_wait(DELAY_BUFFERS_SKEDULER, delayName, callback)
        }
function DELAY_BUFFERS_delete(delayName) {
            DELAY_BUFFERS.delete(delayName)
        }
function buf_writeSample(buffer, value) {
            buffer.data[buffer.writeCursor] = value
            buffer.writeCursor = (buffer.writeCursor + 1) % buffer.length
        }
function buf_readSample(buffer, offset) {
            // R = (buffer.writeCursor - 1 - offset) -> ideal read position
            // W = R % buffer.length -> wrap it so that its within buffer length bounds (but could be negative)
            // (W + buffer.length) % buffer.length -> if W negative, (W + buffer.length) shifts it back to positive.
            return buffer.data[(buffer.length + ((buffer.writeCursor - 1 - offset) % buffer.length)) % buffer.length]
        }

function n_delread_setDelayName(state, delayName, callback) {
                    if (state.delayName.length) {
                        state.buffer = DELAY_BUFFERS_NULL
                    }
                    state.delayName = delayName
                    if (state.delayName.length) {
                        DELAY_BUFFERS_get(state.delayName, callback)
                    }
                }

function n_lop_t_setFreq(state, freq) {
        state.coeff = Math.max(Math.min(freq * 2 * Math.PI / SAMPLE_RATE, 1), 0)
    }

function n_delwrite_setDelayName(state, delayName) {
                if (state.delayName.length) {
                    DELAY_BUFFERS_delete(state.delayName)
                }
                state.delayName = delayName
                if (state.delayName.length) {
                    DELAY_BUFFERS_set(state.delayName, state.buffer)
                }
            }

        
function n_0_65_RCVS_0(m) {
                                
                n_sl_receiveMessage(n_0_65_STATE, m)
                return
            
                                throw new Error('[hsl], id "n_0_65", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_0_67_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_0_67_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_0_67_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_0_67_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_0_67_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_0_67_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_0_67_STATE.outMessages[0] = message
                n_0_67_STATE.messageTransferFunctions.splice(0, n_0_67_STATE.messageTransferFunctions.length - 1)
                n_0_67_STATE.messageTransferFunctions[0] = function (m) {
                    return n_0_67_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_0_67_STATE.messageTransferFunctions.length; i++) {
                    n_0_66_RCVS_0(n_0_67_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_0_67", inlet "0", unsupported message : ' + msg_display(m))
                            }
let n_0_66_OUTS_0 = 0
function n_0_66_RCVS_0(m) {
                                
        if (
            msg_isMatching(m, [MSG_FLOAT_TOKEN])
            || msg_isMatching(m, [MSG_FLOAT_TOKEN, MSG_FLOAT_TOKEN])
        ) {
            switch (msg_getLength(m)) {
                case 2:
                    n_line_t_setNextDuration(n_0_66_STATE, msg_readFloatToken(m, 1))
                case 1:
                    n_line_t_setNewLine(n_0_66_STATE, msg_readFloatToken(m, 0))
            }
            return

        } else if (msg_isAction(m, 'stop')) {
            n_line_t_stop(n_0_66_STATE)
            return

        }
    
                                throw new Error('[line~], id "n_0_66", inlet "0", unsupported message : ' + msg_display(m))
                            }



function n_0_71_RCVS_0(m) {
                                
                if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                    n_add_setLeft(n_0_71_STATE, msg_readFloatToken(m, 0))
                    n_0_70_RCVS_0(msg_floats([n_0_71_STATE.leftOp + n_0_71_STATE.rightOp]))
                    return
                
                } else if (msg_isBang(m)) {
                    n_0_70_RCVS_0(msg_floats([n_0_71_STATE.leftOp + n_0_71_STATE.rightOp]))
                    return
                }
            
                                throw new Error('[+], id "n_0_71", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_0_70_RCVS_0(m) {
                                
                n_floatatom_receiveMessage(n_0_70_STATE, m)
                return
            
                                throw new Error('[floatatom], id "n_0_70", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_0_83_RCVS_0(m) {
                                
        console.log("musica: " + msg_display(m))
        return
    
                                throw new Error('[print], id "n_0_83", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_0_74_RCVS_0(m) {
                                
            n_bang_receiveMessage(n_0_74_STATE, m)
            return
        
                                throw new Error('[bang], id "n_0_74", inlet "0", unsupported message : ' + msg_display(m))
                            }

function m_n_0_73_0__routemsg_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                SND_TO_NULL(m)
                return
            } else {
                n_0_73_RCVS_0_message(m)
                return
            }
        
                                throw new Error('[_routemsg], id "m_n_0_73_0__routemsg", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_0_73_RCVS_0_message(m) {
                                
        if (msg_isBang(m)) {
            n_0_75_RCVS_0(msg_floats([n_0_73_STATE.currentValue]))
            return 
        }
    
                                throw new Error('[snapshot~], id "n_0_73", inlet "0_message", unsupported message : ' + msg_display(m))
                            }

function n_0_75_RCVS_0(m) {
                                
                n_floatatom_receiveMessage(n_0_75_STATE, m)
                return
            
                                throw new Error('[floatatom], id "n_0_75", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_0_82_RCVS_0(m) {
                                
        n_0_84_RCVS_0(msg_bang())
n_0_82_SNDS_1(msg_bang())
n_0_79_RCVS_0(msg_floats([messageTokenToFloat(m, 0)]))
        return
    
                                throw new Error('[trigger], id "n_0_82", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_0_79_RCVS_0(m) {
                                
                if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                    n_div_setLeft(n_0_79_STATE, msg_readFloatToken(m, 0))
                    n_0_85_RCVS_0(msg_floats([n_0_79_STATE.rightOp !== 0 ? n_0_79_STATE.leftOp / n_0_79_STATE.rightOp: 0]))
                    return
                
                } else if (msg_isBang(m)) {
                    n_0_85_RCVS_0(msg_floats([n_0_79_STATE.rightOp !== 0 ? n_0_79_STATE.leftOp / n_0_79_STATE.rightOp: 0]))
                    return
                }
            
                                throw new Error('[/], id "n_0_79", inlet "0", unsupported message : ' + msg_display(m))
                            }
function n_0_79_RCVS_1(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_div_setRight(n_0_79_STATE, msg_readFloatToken(m, 0))
            return
        }
    
                                throw new Error('[/], id "n_0_79", inlet "1", unsupported message : ' + msg_display(m))
                            }

function n_0_85_RCVS_0(m) {
                                
                if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                    n_mul_setLeft(n_0_85_STATE, msg_readFloatToken(m, 0))
                    n_0_86_RCVS_0(msg_floats([n_0_85_STATE.leftOp * n_0_85_STATE.rightOp]))
                    return
                
                } else if (msg_isBang(m)) {
                    n_0_86_RCVS_0(msg_floats([n_0_85_STATE.leftOp * n_0_85_STATE.rightOp]))
                    return
                }
            
                                throw new Error('[*], id "n_0_85", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_0_86_RCVS_0(m) {
                                
                if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                    n_add_setLeft(n_0_86_STATE, msg_readFloatToken(m, 0))
                    m_n_0_76_0__routemsg_RCVS_0(msg_floats([n_0_86_STATE.leftOp + n_0_86_STATE.rightOp]))
                    return
                
                } else if (msg_isBang(m)) {
                    m_n_0_76_0__routemsg_RCVS_0(msg_floats([n_0_86_STATE.leftOp + n_0_86_STATE.rightOp]))
                    return
                }
            
                                throw new Error('[+], id "n_0_86", inlet "0", unsupported message : ' + msg_display(m))
                            }

function m_n_0_76_0__routemsg_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                m_n_0_76_0_sig_RCVS_0(m)
                return
            } else {
                SND_TO_NULL(m)
                return
            }
        
                                throw new Error('[_routemsg], id "m_n_0_76_0__routemsg", inlet "0", unsupported message : ' + msg_display(m))
                            }

function m_n_0_76_0_sig_RCVS_0(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            m_n_0_76_0_sig_STATE.currentValue = msg_readFloatToken(m, 0)
            return
        }
    
                                throw new Error('[sig~], id "m_n_0_76_0_sig", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_0_77_RCVS_0(m) {
                                
        if (msg_isBang(m)) {
            n_0_78_RCVS_0(msg_floats([Math.floor(Math.random() * n_0_77_STATE.maxValue)]))
            return
        } else if (
            msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
            && msg_readStringToken(m, 0) === 'seed'
        ) {
            console.log('WARNING : seed not implemented yet for [random]')
            return
        }
    
                                throw new Error('[random], id "n_0_77", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_0_78_RCVS_0(m) {
                                
                if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                    n_add_setLeft(n_0_78_STATE, msg_readFloatToken(m, 0))
                    n_0_78_SNDS_0(msg_floats([n_0_78_STATE.leftOp + n_0_78_STATE.rightOp]))
                    return
                
                } else if (msg_isBang(m)) {
                    n_0_78_SNDS_0(msg_floats([n_0_78_STATE.leftOp + n_0_78_STATE.rightOp]))
                    return
                }
            
                                throw new Error('[+], id "n_0_78", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_0_80_RCVS_0(m) {
                                
                n_floatatom_receiveMessage(n_0_80_STATE, m)
                return
            
                                throw new Error('[floatatom], id "n_0_80", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_0_99_RCVS_0(m) {
                                
            msgBusPublish(n_0_99_STATE.busName, m)
            return
        
                                throw new Error('[send], id "n_0_99", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_0_84_RCVS_0(m) {
                                
            msgBusPublish(n_0_84_STATE.busName, m)
            return
        
                                throw new Error('[send], id "n_0_84", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_0_90_RCVS_0(m) {
                                
                if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                    n_mul_setLeft(n_0_90_STATE, msg_readFloatToken(m, 0))
                    n_0_65_RCVS_0(msg_floats([n_0_90_STATE.leftOp * n_0_90_STATE.rightOp]))
                    return
                
                } else if (msg_isBang(m)) {
                    n_0_65_RCVS_0(msg_floats([n_0_90_STATE.leftOp * n_0_90_STATE.rightOp]))
                    return
                }
            
                                throw new Error('[*], id "n_0_90", inlet "0", unsupported message : ' + msg_display(m))
                            }



function n_0_103_RCVS_0(m) {
                                
            if (msg_getLength(m) === 1) {
                if (msg_isStringToken(m, 0)) {
                    const action = msg_readStringToken(m, 0)
                    if (action === 'bang' || action === 'start') {
                        n_delay_scheduleDelay(
                            n_0_103_STATE, 
                            () => n_0_88_RCVS_0(msg_bang()),
                            FRAME,
                        )
                        return
                    } else if (action === 'stop') {
                        n_delay_stop(n_0_103_STATE)
                        return
                    }
                    
                } else if (msg_isFloatToken(m, 0)) {
                    n_delay_setDelay(n_0_103_STATE, msg_readFloatToken(m, 0))
                    n_delay_scheduleDelay(
                        n_0_103_STATE,
                        () => n_0_88_RCVS_0(msg_bang()),
                        FRAME,
                    )
                    return 
                }
            
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN, MSG_STRING_TOKEN])
                && msg_readStringToken(m, 0) === 'tempo'
            ) {
                n_0_103_STATE.sampleRatio = computeUnitInSamples(
                    SAMPLE_RATE, 
                    msg_readFloatToken(m, 1), 
                    msg_readStringToken(m, 2)
                )
                return
            }
        
                                throw new Error('[delay], id "n_0_103", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_0_88_RCVS_0(m) {
                                
            msgBusPublish(n_0_88_STATE.busName, m)
            return
        
                                throw new Error('[send], id "n_0_88", inlet "0", unsupported message : ' + msg_display(m))
                            }



function n_0_113_RCVS_0(m) {
                                
                n_tgl_receiveMessage(n_0_113_STATE, m)
                return
            
                                throw new Error('[tgl], id "n_0_113", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_0_120_RCVS_0(m) {
                                
        if (msg_getLength(m) === 1) {
            if (
                (msg_isFloatToken(m, 0) && msg_readFloatToken(m, 0) === 0)
                || msg_isAction(m, 'stop')
            ) {
                n_metro_stop(n_0_120_STATE)
                return

            } else if (
                msg_isFloatToken(m, 0)
                || msg_isBang(m)
            ) {
                n_0_120_STATE.realNextTick = toFloat(FRAME)
                n_metro_scheduleNextTick(n_0_120_STATE)
                return
            }
        }
    
                                throw new Error('[metro], id "n_0_120", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_0_114_RCVS_0(m) {
                                
            msgBusPublish(n_0_114_STATE.busName, m)
            return
        
                                throw new Error('[send], id "n_0_114", inlet "0", unsupported message : ' + msg_display(m))
                            }



function n_0_117_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_0_117_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_0_117_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_0_117_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_0_117_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_0_117_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_0_117_STATE.outMessages[0] = message
                n_0_117_STATE.messageTransferFunctions.splice(0, n_0_117_STATE.messageTransferFunctions.length - 1)
                n_0_117_STATE.messageTransferFunctions[0] = function (m) {
                    return n_0_117_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_0_117_STATE.messageTransferFunctions.length; i++) {
                    n_133_17_RCVS_1(n_0_117_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_0_117", inlet "0", unsupported message : ' + msg_display(m))
                            }
let n_133_17_OUTS_0 = 0
function n_133_17_RCVS_1(m) {
                                
                            n_133_17_STATE.floatInputs.set(1, messageTokenToFloat(m, 0))
                            return
                        
                                throw new Error('[expr~], id "n_133_17", inlet "1", unsupported message : ' + msg_display(m))
                            }



function n_1_5_RCVS_0(m) {
                                
        if (msg_getLength(m) === 1) {
            if (
                (msg_isFloatToken(m, 0) && msg_readFloatToken(m, 0) === 0)
                || msg_isAction(m, 'stop')
            ) {
                n_metro_stop(n_1_5_STATE)
                return

            } else if (
                msg_isFloatToken(m, 0)
                || msg_isBang(m)
            ) {
                n_1_5_STATE.realNextTick = toFloat(FRAME)
                n_metro_scheduleNextTick(n_1_5_STATE)
                return
            }
        }
    
                                throw new Error('[metro], id "n_1_5", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_2_RCVS_0(m) {
                                
            n_bang_receiveMessage(n_1_2_STATE, m)
            return
        
                                throw new Error('[bang], id "n_1_2", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_3_RCVS_0(m) {
                                
            msgBusPublish(n_1_3_STATE.busName, m)
            return
        
                                throw new Error('[send], id "n_1_3", inlet "0", unsupported message : ' + msg_display(m))
                            }



function n_1_9_RCVS_0(m) {
                                
        n_1_7_RCVS_0(msg_bang())
n_1_9_SNDS_0(msg_bang())
        return
    
                                throw new Error('[trigger], id "n_1_9", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_83_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_1_83_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_1_83_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_1_83_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_1_83_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_1_83_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_1_83_STATE.outMessages[0] = message
                n_1_83_STATE.messageTransferFunctions.splice(0, n_1_83_STATE.messageTransferFunctions.length - 1)
                n_1_83_STATE.messageTransferFunctions[0] = function (m) {
                    return n_1_83_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_1_83_STATE.messageTransferFunctions.length; i++) {
                    n_1_8_RCVS_0(n_1_83_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_1_83", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_8_RCVS_0(m) {
                                
        if (
            msg_getLength(m) >= 3 
            && msg_isStringToken(m, 0)
            && (
                msg_readStringToken(m, 0) === 'read'
                || msg_readStringToken(m, 0) === 'write'
            )
        ) {
            const operationType = msg_readStringToken(m, 0)
            const soundInfo = {
                channelCount: 0,
                sampleRate: toInt(SAMPLE_RATE),
                bitDepth: 32,
                encodingFormat: '',
                endianness: '',
                extraOptions: '',
            }
            const operation = {
                arrayNames: [],
                resize: false,
                maxSize: -1,
                skip: 0,
                framesToWrite: 0,
                url: '',
                soundInfo,
            }
            let unhandledOptions = parseSoundFileOpenOpts(
                m,
                soundInfo,
            )
            
            // Remove the operation type
            unhandledOptions.delete(0)
            
            let i = 1
            let str = ""
            while (i < msg_getLength(m)) {
                if (!unhandledOptions.has(i)) {

                } else if (msg_isStringToken(m, i)) {
                    str = msg_readStringToken(m, i)
                    if (str === '-resize') {
                        unhandledOptions.delete(i)
                        operation.resize = true

                    } else if (str === '-maxsize' || str === '-nframes') {
                        unhandledOptions.delete(i)
                        if (
                            i + 1 >= msg_getLength(m) 
                            || !msg_isFloatToken(m, i + 1)
                        ) {
                            console.log("invalid value for -maxsize")
                        }
                        operation.maxSize = msg_readFloatToken(m, i + 1)
                        unhandledOptions.delete(i + 1)
                        i++

                    } else if (str === '-skip') {
                        unhandledOptions.delete(i)
                        if (
                            i + 1 >= msg_getLength(m) 
                            || !msg_isFloatToken(m, i + 1)
                        ) {
                            console.log("invalid value for -skip")
                        }
                        operation.skip = msg_readFloatToken(m, i + 1)
                        unhandledOptions.delete(i + 1)
                        i++

                    } else if (str === '-normalize') {
                        unhandledOptions.delete(i)
                        console.log('-normalize not implemented')
                    }
                }
                i++
            }

            i = 1
            let urlFound = false
            while (i < msg_getLength(m)) {
                if (!unhandledOptions.has(i)) {

                } else if (msg_isStringToken(m, i)) {
                    str = msg_readStringToken(m, i)
                    if (!str.startsWith('-') && urlFound === false) {
                        operation.url = str
                        urlFound = true
                    } else {
                        operation.arrayNames.push(str)
                    }
                    unhandledOptions.delete(i)
                }
                i++
            }

            for (i = 0; i < operation.arrayNames.length; i++) {
                if (!commons_hasArray(operation.arrayNames[i])) {
                    console.log('[soundfiler] unknown array ' + operation.arrayNames[i])
                    return
                }
            }

            if (unhandledOptions.size) {
                console.log("soundfiler received invalid options")
            }

            soundInfo.channelCount = operation.arrayNames.length

            if (operationType === 'read') {
                const id = fs_readSoundFile(
                    operation.url, 
                    soundInfo,
                    function (id, status, sound) {
                        const operation = n_1_8_STATE.operations.get(id)
                        n_1_8_STATE.operations.delete(id)
                        let i = 0
                        let maxFramesRead = 0
                        let framesToRead = 0
                        let array = createFloatArray(0)
                        for (i = 0; i < sound.length; i++) {
                            if (operation.resize) {
                                if (operation.maxSize > 0) {
                                    framesToRead = Math.min(
                                        operation.maxSize, 
                                        toFloat(sound[i].length) - operation.skip
                                    )
    
                                } else {
                                    framesToRead = toFloat(sound[i].length) - operation.skip
                                }
    
                                commons_setArray(
                                    operation.arrayNames[i], 
                                    sound[i].subarray(
                                        toInt(operation.skip), 
                                        toInt(operation.skip + framesToRead)
                                    )
                                )
                                
                            } else {
                                array = commons_getArray(operation.arrayNames[i])
                                framesToRead = Math.min(
                                    toFloat(array.length),
                                    toFloat(sound[i].length) - operation.skip
                                )
                                array.set(sound[i].subarray(0, array.length))
                            }
                            maxFramesRead = Math.max(
                                maxFramesRead,
                                framesToRead
                            )
                        }
    
                        SND_TO_NULL(n_soundfiler_buildMessage1(operation.soundInfo))
                        n_1_12_RCVS_0(msg_floats([maxFramesRead]))
                    }
                )

                n_1_8_STATE.operations.set(id, operation)

            } else if (operationType === 'write') {
                let i = 0
                let framesToWrite = 0
                let array = createFloatArray(0)
                const sound = []
                
                for (i = 0; i < operation.arrayNames.length; i++) {
                    framesToWrite = Math.max(
                        framesToWrite,
                        toFloat(commons_getArray(operation.arrayNames[i]).length) - operation.skip,
                    )
                }

                if (operation.maxSize >= 0) {
                    framesToWrite = Math.min(
                        operation.maxSize, 
                        framesToWrite
                    )
                }
                operation.framesToWrite = framesToWrite

                if (framesToWrite < 1) {
                    console.log('[soundfiler] no frames to write')
                    return
                }

                for (i = 0; i < operation.arrayNames.length; i++) {
                    array = commons_getArray(operation.arrayNames[i])
                    if (framesToWrite > toFloat(array.length) - operation.skip) {
                        sound.push(createFloatArray(toInt(framesToWrite)))
                        sound[i].set(array.subarray(
                            toInt(operation.skip), 
                            toInt(operation.skip + framesToWrite)
                        ))
                    } else {
                        sound.push(array.subarray(
                            toInt(operation.skip), 
                            toInt(operation.skip + framesToWrite)
                        ))
                    }
                }

                function callback(id, status) {
                    const operation = n_1_8_STATE.operations.get(id)
                    n_1_8_STATE.operations.delete(id)
                    SND_TO_NULL(n_soundfiler_buildMessage1(operation.soundInfo))
                    n_1_12_RCVS_0(msg_floats([operation.framesToWrite]))
                }

                const id = fs_writeSoundFile(
                    sound, 
                    operation.url, 
                    soundInfo, 
                    callback
                )

                n_1_8_STATE.operations.set(id, operation)
            }

            return
        }
    
                                throw new Error('[soundfiler], id "n_1_8", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_12_RCVS_0(m) {
                                
                if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                    n_div_setLeft(n_1_12_STATE, msg_readFloatToken(m, 0))
                    n_1_13_RCVS_0(msg_floats([n_1_12_STATE.rightOp !== 0 ? n_1_12_STATE.leftOp / n_1_12_STATE.rightOp: 0]))
                    return
                
                } else if (msg_isBang(m)) {
                    n_1_13_RCVS_0(msg_floats([n_1_12_STATE.rightOp !== 0 ? n_1_12_STATE.leftOp / n_1_12_STATE.rightOp: 0]))
                    return
                }
            
                                throw new Error('[/], id "n_1_12", inlet "0", unsupported message : ' + msg_display(m))
                            }
function n_1_12_RCVS_1(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_div_setRight(n_1_12_STATE, msg_readFloatToken(m, 0))
            return
        }
    
                                throw new Error('[/], id "n_1_12", inlet "1", unsupported message : ' + msg_display(m))
                            }

function n_1_13_RCVS_0(m) {
                                
                if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                    n_mul_setLeft(n_1_13_STATE, msg_readFloatToken(m, 0))
                    n_1_14_RCVS_0(msg_floats([n_1_13_STATE.leftOp * n_1_13_STATE.rightOp]))
                    return
                
                } else if (msg_isBang(m)) {
                    n_1_14_RCVS_0(msg_floats([n_1_13_STATE.leftOp * n_1_13_STATE.rightOp]))
                    return
                }
            
                                throw new Error('[*], id "n_1_13", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_14_RCVS_0(m) {
                                
                n_floatatom_receiveMessage(n_1_14_STATE, m)
                return
            
                                throw new Error('[floatatom], id "n_1_14", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_27_RCVS_0(m) {
                                
            msgBusPublish(n_1_27_STATE.busName, m)
            return
        
                                throw new Error('[send], id "n_1_27", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_97_RCVS_0(m) {
                                
        n_1_99_RCVS_0(msg_bang())
SND_TO_NULL(msg_floats([messageTokenToFloat(m, 0)]))
        return
    
                                throw new Error('[trigger], id "n_1_97", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_99_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_1_99_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_1_99_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_1_99_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_1_99_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_1_99_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_1_99_STATE.outMessages[0] = message
                n_1_99_STATE.messageTransferFunctions.splice(0, n_1_99_STATE.messageTransferFunctions.length - 1)
                n_1_99_STATE.messageTransferFunctions[0] = function (m) {
                    return n_1_99_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_1_99_STATE.messageTransferFunctions.length; i++) {
                    SND_TO_NULL(n_1_99_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_1_99", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_84_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_1_84_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_1_84_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_1_84_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_1_84_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_1_84_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_1_84_STATE.outMessages[0] = message
                n_1_84_STATE.messageTransferFunctions.splice(0, n_1_84_STATE.messageTransferFunctions.length - 1)
                n_1_84_STATE.messageTransferFunctions[0] = function (m) {
                    return n_1_84_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_1_84_STATE.messageTransferFunctions.length; i++) {
                    n_1_28_RCVS_0(n_1_84_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_1_84", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_28_RCVS_0(m) {
                                
        if (
            msg_getLength(m) >= 3 
            && msg_isStringToken(m, 0)
            && (
                msg_readStringToken(m, 0) === 'read'
                || msg_readStringToken(m, 0) === 'write'
            )
        ) {
            const operationType = msg_readStringToken(m, 0)
            const soundInfo = {
                channelCount: 0,
                sampleRate: toInt(SAMPLE_RATE),
                bitDepth: 32,
                encodingFormat: '',
                endianness: '',
                extraOptions: '',
            }
            const operation = {
                arrayNames: [],
                resize: false,
                maxSize: -1,
                skip: 0,
                framesToWrite: 0,
                url: '',
                soundInfo,
            }
            let unhandledOptions = parseSoundFileOpenOpts(
                m,
                soundInfo,
            )
            
            // Remove the operation type
            unhandledOptions.delete(0)
            
            let i = 1
            let str = ""
            while (i < msg_getLength(m)) {
                if (!unhandledOptions.has(i)) {

                } else if (msg_isStringToken(m, i)) {
                    str = msg_readStringToken(m, i)
                    if (str === '-resize') {
                        unhandledOptions.delete(i)
                        operation.resize = true

                    } else if (str === '-maxsize' || str === '-nframes') {
                        unhandledOptions.delete(i)
                        if (
                            i + 1 >= msg_getLength(m) 
                            || !msg_isFloatToken(m, i + 1)
                        ) {
                            console.log("invalid value for -maxsize")
                        }
                        operation.maxSize = msg_readFloatToken(m, i + 1)
                        unhandledOptions.delete(i + 1)
                        i++

                    } else if (str === '-skip') {
                        unhandledOptions.delete(i)
                        if (
                            i + 1 >= msg_getLength(m) 
                            || !msg_isFloatToken(m, i + 1)
                        ) {
                            console.log("invalid value for -skip")
                        }
                        operation.skip = msg_readFloatToken(m, i + 1)
                        unhandledOptions.delete(i + 1)
                        i++

                    } else if (str === '-normalize') {
                        unhandledOptions.delete(i)
                        console.log('-normalize not implemented')
                    }
                }
                i++
            }

            i = 1
            let urlFound = false
            while (i < msg_getLength(m)) {
                if (!unhandledOptions.has(i)) {

                } else if (msg_isStringToken(m, i)) {
                    str = msg_readStringToken(m, i)
                    if (!str.startsWith('-') && urlFound === false) {
                        operation.url = str
                        urlFound = true
                    } else {
                        operation.arrayNames.push(str)
                    }
                    unhandledOptions.delete(i)
                }
                i++
            }

            for (i = 0; i < operation.arrayNames.length; i++) {
                if (!commons_hasArray(operation.arrayNames[i])) {
                    console.log('[soundfiler] unknown array ' + operation.arrayNames[i])
                    return
                }
            }

            if (unhandledOptions.size) {
                console.log("soundfiler received invalid options")
            }

            soundInfo.channelCount = operation.arrayNames.length

            if (operationType === 'read') {
                const id = fs_readSoundFile(
                    operation.url, 
                    soundInfo,
                    function (id, status, sound) {
                        const operation = n_1_28_STATE.operations.get(id)
                        n_1_28_STATE.operations.delete(id)
                        let i = 0
                        let maxFramesRead = 0
                        let framesToRead = 0
                        let array = createFloatArray(0)
                        for (i = 0; i < sound.length; i++) {
                            if (operation.resize) {
                                if (operation.maxSize > 0) {
                                    framesToRead = Math.min(
                                        operation.maxSize, 
                                        toFloat(sound[i].length) - operation.skip
                                    )
    
                                } else {
                                    framesToRead = toFloat(sound[i].length) - operation.skip
                                }
    
                                commons_setArray(
                                    operation.arrayNames[i], 
                                    sound[i].subarray(
                                        toInt(operation.skip), 
                                        toInt(operation.skip + framesToRead)
                                    )
                                )
                                
                            } else {
                                array = commons_getArray(operation.arrayNames[i])
                                framesToRead = Math.min(
                                    toFloat(array.length),
                                    toFloat(sound[i].length) - operation.skip
                                )
                                array.set(sound[i].subarray(0, array.length))
                            }
                            maxFramesRead = Math.max(
                                maxFramesRead,
                                framesToRead
                            )
                        }
    
                        SND_TO_NULL(n_soundfiler_buildMessage1(operation.soundInfo))
                        n_1_29_RCVS_0(msg_floats([maxFramesRead]))
                    }
                )

                n_1_28_STATE.operations.set(id, operation)

            } else if (operationType === 'write') {
                let i = 0
                let framesToWrite = 0
                let array = createFloatArray(0)
                const sound = []
                
                for (i = 0; i < operation.arrayNames.length; i++) {
                    framesToWrite = Math.max(
                        framesToWrite,
                        toFloat(commons_getArray(operation.arrayNames[i]).length) - operation.skip,
                    )
                }

                if (operation.maxSize >= 0) {
                    framesToWrite = Math.min(
                        operation.maxSize, 
                        framesToWrite
                    )
                }
                operation.framesToWrite = framesToWrite

                if (framesToWrite < 1) {
                    console.log('[soundfiler] no frames to write')
                    return
                }

                for (i = 0; i < operation.arrayNames.length; i++) {
                    array = commons_getArray(operation.arrayNames[i])
                    if (framesToWrite > toFloat(array.length) - operation.skip) {
                        sound.push(createFloatArray(toInt(framesToWrite)))
                        sound[i].set(array.subarray(
                            toInt(operation.skip), 
                            toInt(operation.skip + framesToWrite)
                        ))
                    } else {
                        sound.push(array.subarray(
                            toInt(operation.skip), 
                            toInt(operation.skip + framesToWrite)
                        ))
                    }
                }

                function callback(id, status) {
                    const operation = n_1_28_STATE.operations.get(id)
                    n_1_28_STATE.operations.delete(id)
                    SND_TO_NULL(n_soundfiler_buildMessage1(operation.soundInfo))
                    n_1_29_RCVS_0(msg_floats([operation.framesToWrite]))
                }

                const id = fs_writeSoundFile(
                    sound, 
                    operation.url, 
                    soundInfo, 
                    callback
                )

                n_1_28_STATE.operations.set(id, operation)
            }

            return
        }
    
                                throw new Error('[soundfiler], id "n_1_28", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_29_RCVS_0(m) {
                                
                if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                    n_div_setLeft(n_1_29_STATE, msg_readFloatToken(m, 0))
                    n_1_30_RCVS_0(msg_floats([n_1_29_STATE.rightOp !== 0 ? n_1_29_STATE.leftOp / n_1_29_STATE.rightOp: 0]))
                    return
                
                } else if (msg_isBang(m)) {
                    n_1_30_RCVS_0(msg_floats([n_1_29_STATE.rightOp !== 0 ? n_1_29_STATE.leftOp / n_1_29_STATE.rightOp: 0]))
                    return
                }
            
                                throw new Error('[/], id "n_1_29", inlet "0", unsupported message : ' + msg_display(m))
                            }
function n_1_29_RCVS_1(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_div_setRight(n_1_29_STATE, msg_readFloatToken(m, 0))
            return
        }
    
                                throw new Error('[/], id "n_1_29", inlet "1", unsupported message : ' + msg_display(m))
                            }

function n_1_30_RCVS_0(m) {
                                
                if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                    n_mul_setLeft(n_1_30_STATE, msg_readFloatToken(m, 0))
                    n_1_31_RCVS_0(msg_floats([n_1_30_STATE.leftOp * n_1_30_STATE.rightOp]))
                    return
                
                } else if (msg_isBang(m)) {
                    n_1_31_RCVS_0(msg_floats([n_1_30_STATE.leftOp * n_1_30_STATE.rightOp]))
                    return
                }
            
                                throw new Error('[*], id "n_1_30", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_31_RCVS_0(m) {
                                
                n_floatatom_receiveMessage(n_1_31_STATE, m)
                return
            
                                throw new Error('[floatatom], id "n_1_31", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_82_RCVS_0(m) {
                                
            msgBusPublish(n_1_82_STATE.busName, m)
            return
        
                                throw new Error('[send], id "n_1_82", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_100_RCVS_0(m) {
                                
        n_1_102_RCVS_0(msg_bang())
SND_TO_NULL(msg_floats([messageTokenToFloat(m, 0)]))
        return
    
                                throw new Error('[trigger], id "n_1_100", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_102_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_1_102_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_1_102_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_1_102_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_1_102_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_1_102_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_1_102_STATE.outMessages[0] = message
                n_1_102_STATE.messageTransferFunctions.splice(0, n_1_102_STATE.messageTransferFunctions.length - 1)
                n_1_102_STATE.messageTransferFunctions[0] = function (m) {
                    return n_1_102_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_1_102_STATE.messageTransferFunctions.length; i++) {
                    SND_TO_NULL(n_1_102_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_1_102", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_85_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_1_85_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_1_85_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_1_85_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_1_85_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_1_85_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_1_85_STATE.outMessages[0] = message
                n_1_85_STATE.messageTransferFunctions.splice(0, n_1_85_STATE.messageTransferFunctions.length - 1)
                n_1_85_STATE.messageTransferFunctions[0] = function (m) {
                    return n_1_85_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_1_85_STATE.messageTransferFunctions.length; i++) {
                    n_1_32_RCVS_0(n_1_85_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_1_85", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_32_RCVS_0(m) {
                                
        if (
            msg_getLength(m) >= 3 
            && msg_isStringToken(m, 0)
            && (
                msg_readStringToken(m, 0) === 'read'
                || msg_readStringToken(m, 0) === 'write'
            )
        ) {
            const operationType = msg_readStringToken(m, 0)
            const soundInfo = {
                channelCount: 0,
                sampleRate: toInt(SAMPLE_RATE),
                bitDepth: 32,
                encodingFormat: '',
                endianness: '',
                extraOptions: '',
            }
            const operation = {
                arrayNames: [],
                resize: false,
                maxSize: -1,
                skip: 0,
                framesToWrite: 0,
                url: '',
                soundInfo,
            }
            let unhandledOptions = parseSoundFileOpenOpts(
                m,
                soundInfo,
            )
            
            // Remove the operation type
            unhandledOptions.delete(0)
            
            let i = 1
            let str = ""
            while (i < msg_getLength(m)) {
                if (!unhandledOptions.has(i)) {

                } else if (msg_isStringToken(m, i)) {
                    str = msg_readStringToken(m, i)
                    if (str === '-resize') {
                        unhandledOptions.delete(i)
                        operation.resize = true

                    } else if (str === '-maxsize' || str === '-nframes') {
                        unhandledOptions.delete(i)
                        if (
                            i + 1 >= msg_getLength(m) 
                            || !msg_isFloatToken(m, i + 1)
                        ) {
                            console.log("invalid value for -maxsize")
                        }
                        operation.maxSize = msg_readFloatToken(m, i + 1)
                        unhandledOptions.delete(i + 1)
                        i++

                    } else if (str === '-skip') {
                        unhandledOptions.delete(i)
                        if (
                            i + 1 >= msg_getLength(m) 
                            || !msg_isFloatToken(m, i + 1)
                        ) {
                            console.log("invalid value for -skip")
                        }
                        operation.skip = msg_readFloatToken(m, i + 1)
                        unhandledOptions.delete(i + 1)
                        i++

                    } else if (str === '-normalize') {
                        unhandledOptions.delete(i)
                        console.log('-normalize not implemented')
                    }
                }
                i++
            }

            i = 1
            let urlFound = false
            while (i < msg_getLength(m)) {
                if (!unhandledOptions.has(i)) {

                } else if (msg_isStringToken(m, i)) {
                    str = msg_readStringToken(m, i)
                    if (!str.startsWith('-') && urlFound === false) {
                        operation.url = str
                        urlFound = true
                    } else {
                        operation.arrayNames.push(str)
                    }
                    unhandledOptions.delete(i)
                }
                i++
            }

            for (i = 0; i < operation.arrayNames.length; i++) {
                if (!commons_hasArray(operation.arrayNames[i])) {
                    console.log('[soundfiler] unknown array ' + operation.arrayNames[i])
                    return
                }
            }

            if (unhandledOptions.size) {
                console.log("soundfiler received invalid options")
            }

            soundInfo.channelCount = operation.arrayNames.length

            if (operationType === 'read') {
                const id = fs_readSoundFile(
                    operation.url, 
                    soundInfo,
                    function (id, status, sound) {
                        const operation = n_1_32_STATE.operations.get(id)
                        n_1_32_STATE.operations.delete(id)
                        let i = 0
                        let maxFramesRead = 0
                        let framesToRead = 0
                        let array = createFloatArray(0)
                        for (i = 0; i < sound.length; i++) {
                            if (operation.resize) {
                                if (operation.maxSize > 0) {
                                    framesToRead = Math.min(
                                        operation.maxSize, 
                                        toFloat(sound[i].length) - operation.skip
                                    )
    
                                } else {
                                    framesToRead = toFloat(sound[i].length) - operation.skip
                                }
    
                                commons_setArray(
                                    operation.arrayNames[i], 
                                    sound[i].subarray(
                                        toInt(operation.skip), 
                                        toInt(operation.skip + framesToRead)
                                    )
                                )
                                
                            } else {
                                array = commons_getArray(operation.arrayNames[i])
                                framesToRead = Math.min(
                                    toFloat(array.length),
                                    toFloat(sound[i].length) - operation.skip
                                )
                                array.set(sound[i].subarray(0, array.length))
                            }
                            maxFramesRead = Math.max(
                                maxFramesRead,
                                framesToRead
                            )
                        }
    
                        SND_TO_NULL(n_soundfiler_buildMessage1(operation.soundInfo))
                        n_1_33_RCVS_0(msg_floats([maxFramesRead]))
                    }
                )

                n_1_32_STATE.operations.set(id, operation)

            } else if (operationType === 'write') {
                let i = 0
                let framesToWrite = 0
                let array = createFloatArray(0)
                const sound = []
                
                for (i = 0; i < operation.arrayNames.length; i++) {
                    framesToWrite = Math.max(
                        framesToWrite,
                        toFloat(commons_getArray(operation.arrayNames[i]).length) - operation.skip,
                    )
                }

                if (operation.maxSize >= 0) {
                    framesToWrite = Math.min(
                        operation.maxSize, 
                        framesToWrite
                    )
                }
                operation.framesToWrite = framesToWrite

                if (framesToWrite < 1) {
                    console.log('[soundfiler] no frames to write')
                    return
                }

                for (i = 0; i < operation.arrayNames.length; i++) {
                    array = commons_getArray(operation.arrayNames[i])
                    if (framesToWrite > toFloat(array.length) - operation.skip) {
                        sound.push(createFloatArray(toInt(framesToWrite)))
                        sound[i].set(array.subarray(
                            toInt(operation.skip), 
                            toInt(operation.skip + framesToWrite)
                        ))
                    } else {
                        sound.push(array.subarray(
                            toInt(operation.skip), 
                            toInt(operation.skip + framesToWrite)
                        ))
                    }
                }

                function callback(id, status) {
                    const operation = n_1_32_STATE.operations.get(id)
                    n_1_32_STATE.operations.delete(id)
                    SND_TO_NULL(n_soundfiler_buildMessage1(operation.soundInfo))
                    n_1_33_RCVS_0(msg_floats([operation.framesToWrite]))
                }

                const id = fs_writeSoundFile(
                    sound, 
                    operation.url, 
                    soundInfo, 
                    callback
                )

                n_1_32_STATE.operations.set(id, operation)
            }

            return
        }
    
                                throw new Error('[soundfiler], id "n_1_32", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_33_RCVS_0(m) {
                                
                if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                    n_div_setLeft(n_1_33_STATE, msg_readFloatToken(m, 0))
                    n_1_34_RCVS_0(msg_floats([n_1_33_STATE.rightOp !== 0 ? n_1_33_STATE.leftOp / n_1_33_STATE.rightOp: 0]))
                    return
                
                } else if (msg_isBang(m)) {
                    n_1_34_RCVS_0(msg_floats([n_1_33_STATE.rightOp !== 0 ? n_1_33_STATE.leftOp / n_1_33_STATE.rightOp: 0]))
                    return
                }
            
                                throw new Error('[/], id "n_1_33", inlet "0", unsupported message : ' + msg_display(m))
                            }
function n_1_33_RCVS_1(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_div_setRight(n_1_33_STATE, msg_readFloatToken(m, 0))
            return
        }
    
                                throw new Error('[/], id "n_1_33", inlet "1", unsupported message : ' + msg_display(m))
                            }

function n_1_34_RCVS_0(m) {
                                
                if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                    n_mul_setLeft(n_1_34_STATE, msg_readFloatToken(m, 0))
                    n_1_35_RCVS_0(msg_floats([n_1_34_STATE.leftOp * n_1_34_STATE.rightOp]))
                    return
                
                } else if (msg_isBang(m)) {
                    n_1_35_RCVS_0(msg_floats([n_1_34_STATE.leftOp * n_1_34_STATE.rightOp]))
                    return
                }
            
                                throw new Error('[*], id "n_1_34", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_35_RCVS_0(m) {
                                
                n_floatatom_receiveMessage(n_1_35_STATE, m)
                return
            
                                throw new Error('[floatatom], id "n_1_35", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_81_RCVS_0(m) {
                                
            msgBusPublish(n_1_81_STATE.busName, m)
            return
        
                                throw new Error('[send], id "n_1_81", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_103_RCVS_0(m) {
                                
        n_1_107_RCVS_0(msg_bang())
SND_TO_NULL(msg_floats([messageTokenToFloat(m, 0)]))
        return
    
                                throw new Error('[trigger], id "n_1_103", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_107_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_1_107_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_1_107_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_1_107_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_1_107_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_1_107_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_1_107_STATE.outMessages[0] = message
                n_1_107_STATE.messageTransferFunctions.splice(0, n_1_107_STATE.messageTransferFunctions.length - 1)
                n_1_107_STATE.messageTransferFunctions[0] = function (m) {
                    return n_1_107_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_1_107_STATE.messageTransferFunctions.length; i++) {
                    SND_TO_NULL(n_1_107_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_1_107", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_86_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_1_86_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_1_86_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_1_86_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_1_86_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_1_86_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_1_86_STATE.outMessages[0] = message
                n_1_86_STATE.messageTransferFunctions.splice(0, n_1_86_STATE.messageTransferFunctions.length - 1)
                n_1_86_STATE.messageTransferFunctions[0] = function (m) {
                    return n_1_86_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_1_86_STATE.messageTransferFunctions.length; i++) {
                    n_1_36_RCVS_0(n_1_86_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_1_86", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_36_RCVS_0(m) {
                                
        if (
            msg_getLength(m) >= 3 
            && msg_isStringToken(m, 0)
            && (
                msg_readStringToken(m, 0) === 'read'
                || msg_readStringToken(m, 0) === 'write'
            )
        ) {
            const operationType = msg_readStringToken(m, 0)
            const soundInfo = {
                channelCount: 0,
                sampleRate: toInt(SAMPLE_RATE),
                bitDepth: 32,
                encodingFormat: '',
                endianness: '',
                extraOptions: '',
            }
            const operation = {
                arrayNames: [],
                resize: false,
                maxSize: -1,
                skip: 0,
                framesToWrite: 0,
                url: '',
                soundInfo,
            }
            let unhandledOptions = parseSoundFileOpenOpts(
                m,
                soundInfo,
            )
            
            // Remove the operation type
            unhandledOptions.delete(0)
            
            let i = 1
            let str = ""
            while (i < msg_getLength(m)) {
                if (!unhandledOptions.has(i)) {

                } else if (msg_isStringToken(m, i)) {
                    str = msg_readStringToken(m, i)
                    if (str === '-resize') {
                        unhandledOptions.delete(i)
                        operation.resize = true

                    } else if (str === '-maxsize' || str === '-nframes') {
                        unhandledOptions.delete(i)
                        if (
                            i + 1 >= msg_getLength(m) 
                            || !msg_isFloatToken(m, i + 1)
                        ) {
                            console.log("invalid value for -maxsize")
                        }
                        operation.maxSize = msg_readFloatToken(m, i + 1)
                        unhandledOptions.delete(i + 1)
                        i++

                    } else if (str === '-skip') {
                        unhandledOptions.delete(i)
                        if (
                            i + 1 >= msg_getLength(m) 
                            || !msg_isFloatToken(m, i + 1)
                        ) {
                            console.log("invalid value for -skip")
                        }
                        operation.skip = msg_readFloatToken(m, i + 1)
                        unhandledOptions.delete(i + 1)
                        i++

                    } else if (str === '-normalize') {
                        unhandledOptions.delete(i)
                        console.log('-normalize not implemented')
                    }
                }
                i++
            }

            i = 1
            let urlFound = false
            while (i < msg_getLength(m)) {
                if (!unhandledOptions.has(i)) {

                } else if (msg_isStringToken(m, i)) {
                    str = msg_readStringToken(m, i)
                    if (!str.startsWith('-') && urlFound === false) {
                        operation.url = str
                        urlFound = true
                    } else {
                        operation.arrayNames.push(str)
                    }
                    unhandledOptions.delete(i)
                }
                i++
            }

            for (i = 0; i < operation.arrayNames.length; i++) {
                if (!commons_hasArray(operation.arrayNames[i])) {
                    console.log('[soundfiler] unknown array ' + operation.arrayNames[i])
                    return
                }
            }

            if (unhandledOptions.size) {
                console.log("soundfiler received invalid options")
            }

            soundInfo.channelCount = operation.arrayNames.length

            if (operationType === 'read') {
                const id = fs_readSoundFile(
                    operation.url, 
                    soundInfo,
                    function (id, status, sound) {
                        const operation = n_1_36_STATE.operations.get(id)
                        n_1_36_STATE.operations.delete(id)
                        let i = 0
                        let maxFramesRead = 0
                        let framesToRead = 0
                        let array = createFloatArray(0)
                        for (i = 0; i < sound.length; i++) {
                            if (operation.resize) {
                                if (operation.maxSize > 0) {
                                    framesToRead = Math.min(
                                        operation.maxSize, 
                                        toFloat(sound[i].length) - operation.skip
                                    )
    
                                } else {
                                    framesToRead = toFloat(sound[i].length) - operation.skip
                                }
    
                                commons_setArray(
                                    operation.arrayNames[i], 
                                    sound[i].subarray(
                                        toInt(operation.skip), 
                                        toInt(operation.skip + framesToRead)
                                    )
                                )
                                
                            } else {
                                array = commons_getArray(operation.arrayNames[i])
                                framesToRead = Math.min(
                                    toFloat(array.length),
                                    toFloat(sound[i].length) - operation.skip
                                )
                                array.set(sound[i].subarray(0, array.length))
                            }
                            maxFramesRead = Math.max(
                                maxFramesRead,
                                framesToRead
                            )
                        }
    
                        SND_TO_NULL(n_soundfiler_buildMessage1(operation.soundInfo))
                        n_1_37_RCVS_0(msg_floats([maxFramesRead]))
                    }
                )

                n_1_36_STATE.operations.set(id, operation)

            } else if (operationType === 'write') {
                let i = 0
                let framesToWrite = 0
                let array = createFloatArray(0)
                const sound = []
                
                for (i = 0; i < operation.arrayNames.length; i++) {
                    framesToWrite = Math.max(
                        framesToWrite,
                        toFloat(commons_getArray(operation.arrayNames[i]).length) - operation.skip,
                    )
                }

                if (operation.maxSize >= 0) {
                    framesToWrite = Math.min(
                        operation.maxSize, 
                        framesToWrite
                    )
                }
                operation.framesToWrite = framesToWrite

                if (framesToWrite < 1) {
                    console.log('[soundfiler] no frames to write')
                    return
                }

                for (i = 0; i < operation.arrayNames.length; i++) {
                    array = commons_getArray(operation.arrayNames[i])
                    if (framesToWrite > toFloat(array.length) - operation.skip) {
                        sound.push(createFloatArray(toInt(framesToWrite)))
                        sound[i].set(array.subarray(
                            toInt(operation.skip), 
                            toInt(operation.skip + framesToWrite)
                        ))
                    } else {
                        sound.push(array.subarray(
                            toInt(operation.skip), 
                            toInt(operation.skip + framesToWrite)
                        ))
                    }
                }

                function callback(id, status) {
                    const operation = n_1_36_STATE.operations.get(id)
                    n_1_36_STATE.operations.delete(id)
                    SND_TO_NULL(n_soundfiler_buildMessage1(operation.soundInfo))
                    n_1_37_RCVS_0(msg_floats([operation.framesToWrite]))
                }

                const id = fs_writeSoundFile(
                    sound, 
                    operation.url, 
                    soundInfo, 
                    callback
                )

                n_1_36_STATE.operations.set(id, operation)
            }

            return
        }
    
                                throw new Error('[soundfiler], id "n_1_36", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_37_RCVS_0(m) {
                                
                if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                    n_div_setLeft(n_1_37_STATE, msg_readFloatToken(m, 0))
                    n_1_38_RCVS_0(msg_floats([n_1_37_STATE.rightOp !== 0 ? n_1_37_STATE.leftOp / n_1_37_STATE.rightOp: 0]))
                    return
                
                } else if (msg_isBang(m)) {
                    n_1_38_RCVS_0(msg_floats([n_1_37_STATE.rightOp !== 0 ? n_1_37_STATE.leftOp / n_1_37_STATE.rightOp: 0]))
                    return
                }
            
                                throw new Error('[/], id "n_1_37", inlet "0", unsupported message : ' + msg_display(m))
                            }
function n_1_37_RCVS_1(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_div_setRight(n_1_37_STATE, msg_readFloatToken(m, 0))
            return
        }
    
                                throw new Error('[/], id "n_1_37", inlet "1", unsupported message : ' + msg_display(m))
                            }

function n_1_38_RCVS_0(m) {
                                
                if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                    n_mul_setLeft(n_1_38_STATE, msg_readFloatToken(m, 0))
                    n_1_39_RCVS_0(msg_floats([n_1_38_STATE.leftOp * n_1_38_STATE.rightOp]))
                    return
                
                } else if (msg_isBang(m)) {
                    n_1_39_RCVS_0(msg_floats([n_1_38_STATE.leftOp * n_1_38_STATE.rightOp]))
                    return
                }
            
                                throw new Error('[*], id "n_1_38", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_39_RCVS_0(m) {
                                
                n_floatatom_receiveMessage(n_1_39_STATE, m)
                return
            
                                throw new Error('[floatatom], id "n_1_39", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_80_RCVS_0(m) {
                                
            msgBusPublish(n_1_80_STATE.busName, m)
            return
        
                                throw new Error('[send], id "n_1_80", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_105_RCVS_0(m) {
                                
        n_1_108_RCVS_0(msg_bang())
SND_TO_NULL(msg_floats([messageTokenToFloat(m, 0)]))
        return
    
                                throw new Error('[trigger], id "n_1_105", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_108_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_1_108_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_1_108_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_1_108_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_1_108_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_1_108_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_1_108_STATE.outMessages[0] = message
                n_1_108_STATE.messageTransferFunctions.splice(0, n_1_108_STATE.messageTransferFunctions.length - 1)
                n_1_108_STATE.messageTransferFunctions[0] = function (m) {
                    return n_1_108_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_1_108_STATE.messageTransferFunctions.length; i++) {
                    SND_TO_NULL(n_1_108_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_1_108", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_87_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_1_87_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_1_87_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_1_87_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_1_87_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_1_87_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_1_87_STATE.outMessages[0] = message
                n_1_87_STATE.messageTransferFunctions.splice(0, n_1_87_STATE.messageTransferFunctions.length - 1)
                n_1_87_STATE.messageTransferFunctions[0] = function (m) {
                    return n_1_87_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_1_87_STATE.messageTransferFunctions.length; i++) {
                    n_1_40_RCVS_0(n_1_87_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_1_87", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_40_RCVS_0(m) {
                                
        if (
            msg_getLength(m) >= 3 
            && msg_isStringToken(m, 0)
            && (
                msg_readStringToken(m, 0) === 'read'
                || msg_readStringToken(m, 0) === 'write'
            )
        ) {
            const operationType = msg_readStringToken(m, 0)
            const soundInfo = {
                channelCount: 0,
                sampleRate: toInt(SAMPLE_RATE),
                bitDepth: 32,
                encodingFormat: '',
                endianness: '',
                extraOptions: '',
            }
            const operation = {
                arrayNames: [],
                resize: false,
                maxSize: -1,
                skip: 0,
                framesToWrite: 0,
                url: '',
                soundInfo,
            }
            let unhandledOptions = parseSoundFileOpenOpts(
                m,
                soundInfo,
            )
            
            // Remove the operation type
            unhandledOptions.delete(0)
            
            let i = 1
            let str = ""
            while (i < msg_getLength(m)) {
                if (!unhandledOptions.has(i)) {

                } else if (msg_isStringToken(m, i)) {
                    str = msg_readStringToken(m, i)
                    if (str === '-resize') {
                        unhandledOptions.delete(i)
                        operation.resize = true

                    } else if (str === '-maxsize' || str === '-nframes') {
                        unhandledOptions.delete(i)
                        if (
                            i + 1 >= msg_getLength(m) 
                            || !msg_isFloatToken(m, i + 1)
                        ) {
                            console.log("invalid value for -maxsize")
                        }
                        operation.maxSize = msg_readFloatToken(m, i + 1)
                        unhandledOptions.delete(i + 1)
                        i++

                    } else if (str === '-skip') {
                        unhandledOptions.delete(i)
                        if (
                            i + 1 >= msg_getLength(m) 
                            || !msg_isFloatToken(m, i + 1)
                        ) {
                            console.log("invalid value for -skip")
                        }
                        operation.skip = msg_readFloatToken(m, i + 1)
                        unhandledOptions.delete(i + 1)
                        i++

                    } else if (str === '-normalize') {
                        unhandledOptions.delete(i)
                        console.log('-normalize not implemented')
                    }
                }
                i++
            }

            i = 1
            let urlFound = false
            while (i < msg_getLength(m)) {
                if (!unhandledOptions.has(i)) {

                } else if (msg_isStringToken(m, i)) {
                    str = msg_readStringToken(m, i)
                    if (!str.startsWith('-') && urlFound === false) {
                        operation.url = str
                        urlFound = true
                    } else {
                        operation.arrayNames.push(str)
                    }
                    unhandledOptions.delete(i)
                }
                i++
            }

            for (i = 0; i < operation.arrayNames.length; i++) {
                if (!commons_hasArray(operation.arrayNames[i])) {
                    console.log('[soundfiler] unknown array ' + operation.arrayNames[i])
                    return
                }
            }

            if (unhandledOptions.size) {
                console.log("soundfiler received invalid options")
            }

            soundInfo.channelCount = operation.arrayNames.length

            if (operationType === 'read') {
                const id = fs_readSoundFile(
                    operation.url, 
                    soundInfo,
                    function (id, status, sound) {
                        const operation = n_1_40_STATE.operations.get(id)
                        n_1_40_STATE.operations.delete(id)
                        let i = 0
                        let maxFramesRead = 0
                        let framesToRead = 0
                        let array = createFloatArray(0)
                        for (i = 0; i < sound.length; i++) {
                            if (operation.resize) {
                                if (operation.maxSize > 0) {
                                    framesToRead = Math.min(
                                        operation.maxSize, 
                                        toFloat(sound[i].length) - operation.skip
                                    )
    
                                } else {
                                    framesToRead = toFloat(sound[i].length) - operation.skip
                                }
    
                                commons_setArray(
                                    operation.arrayNames[i], 
                                    sound[i].subarray(
                                        toInt(operation.skip), 
                                        toInt(operation.skip + framesToRead)
                                    )
                                )
                                
                            } else {
                                array = commons_getArray(operation.arrayNames[i])
                                framesToRead = Math.min(
                                    toFloat(array.length),
                                    toFloat(sound[i].length) - operation.skip
                                )
                                array.set(sound[i].subarray(0, array.length))
                            }
                            maxFramesRead = Math.max(
                                maxFramesRead,
                                framesToRead
                            )
                        }
    
                        SND_TO_NULL(n_soundfiler_buildMessage1(operation.soundInfo))
                        n_1_41_RCVS_0(msg_floats([maxFramesRead]))
                    }
                )

                n_1_40_STATE.operations.set(id, operation)

            } else if (operationType === 'write') {
                let i = 0
                let framesToWrite = 0
                let array = createFloatArray(0)
                const sound = []
                
                for (i = 0; i < operation.arrayNames.length; i++) {
                    framesToWrite = Math.max(
                        framesToWrite,
                        toFloat(commons_getArray(operation.arrayNames[i]).length) - operation.skip,
                    )
                }

                if (operation.maxSize >= 0) {
                    framesToWrite = Math.min(
                        operation.maxSize, 
                        framesToWrite
                    )
                }
                operation.framesToWrite = framesToWrite

                if (framesToWrite < 1) {
                    console.log('[soundfiler] no frames to write')
                    return
                }

                for (i = 0; i < operation.arrayNames.length; i++) {
                    array = commons_getArray(operation.arrayNames[i])
                    if (framesToWrite > toFloat(array.length) - operation.skip) {
                        sound.push(createFloatArray(toInt(framesToWrite)))
                        sound[i].set(array.subarray(
                            toInt(operation.skip), 
                            toInt(operation.skip + framesToWrite)
                        ))
                    } else {
                        sound.push(array.subarray(
                            toInt(operation.skip), 
                            toInt(operation.skip + framesToWrite)
                        ))
                    }
                }

                function callback(id, status) {
                    const operation = n_1_40_STATE.operations.get(id)
                    n_1_40_STATE.operations.delete(id)
                    SND_TO_NULL(n_soundfiler_buildMessage1(operation.soundInfo))
                    n_1_41_RCVS_0(msg_floats([operation.framesToWrite]))
                }

                const id = fs_writeSoundFile(
                    sound, 
                    operation.url, 
                    soundInfo, 
                    callback
                )

                n_1_40_STATE.operations.set(id, operation)
            }

            return
        }
    
                                throw new Error('[soundfiler], id "n_1_40", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_41_RCVS_0(m) {
                                
                if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                    n_div_setLeft(n_1_41_STATE, msg_readFloatToken(m, 0))
                    n_1_42_RCVS_0(msg_floats([n_1_41_STATE.rightOp !== 0 ? n_1_41_STATE.leftOp / n_1_41_STATE.rightOp: 0]))
                    return
                
                } else if (msg_isBang(m)) {
                    n_1_42_RCVS_0(msg_floats([n_1_41_STATE.rightOp !== 0 ? n_1_41_STATE.leftOp / n_1_41_STATE.rightOp: 0]))
                    return
                }
            
                                throw new Error('[/], id "n_1_41", inlet "0", unsupported message : ' + msg_display(m))
                            }
function n_1_41_RCVS_1(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_div_setRight(n_1_41_STATE, msg_readFloatToken(m, 0))
            return
        }
    
                                throw new Error('[/], id "n_1_41", inlet "1", unsupported message : ' + msg_display(m))
                            }

function n_1_42_RCVS_0(m) {
                                
                if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                    n_mul_setLeft(n_1_42_STATE, msg_readFloatToken(m, 0))
                    n_1_43_RCVS_0(msg_floats([n_1_42_STATE.leftOp * n_1_42_STATE.rightOp]))
                    return
                
                } else if (msg_isBang(m)) {
                    n_1_43_RCVS_0(msg_floats([n_1_42_STATE.leftOp * n_1_42_STATE.rightOp]))
                    return
                }
            
                                throw new Error('[*], id "n_1_42", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_43_RCVS_0(m) {
                                
                n_floatatom_receiveMessage(n_1_43_STATE, m)
                return
            
                                throw new Error('[floatatom], id "n_1_43", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_79_RCVS_0(m) {
                                
            msgBusPublish(n_1_79_STATE.busName, m)
            return
        
                                throw new Error('[send], id "n_1_79", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_109_RCVS_0(m) {
                                
        n_1_117_RCVS_0(msg_bang())
SND_TO_NULL(msg_floats([messageTokenToFloat(m, 0)]))
        return
    
                                throw new Error('[trigger], id "n_1_109", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_117_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_1_117_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_1_117_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_1_117_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_1_117_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_1_117_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_1_117_STATE.outMessages[0] = message
                n_1_117_STATE.messageTransferFunctions.splice(0, n_1_117_STATE.messageTransferFunctions.length - 1)
                n_1_117_STATE.messageTransferFunctions[0] = function (m) {
                    return n_1_117_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_1_117_STATE.messageTransferFunctions.length; i++) {
                    SND_TO_NULL(n_1_117_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_1_117", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_88_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_1_88_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_1_88_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_1_88_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_1_88_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_1_88_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_1_88_STATE.outMessages[0] = message
                n_1_88_STATE.messageTransferFunctions.splice(0, n_1_88_STATE.messageTransferFunctions.length - 1)
                n_1_88_STATE.messageTransferFunctions[0] = function (m) {
                    return n_1_88_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_1_88_STATE.messageTransferFunctions.length; i++) {
                    n_1_44_RCVS_0(n_1_88_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_1_88", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_44_RCVS_0(m) {
                                
        if (
            msg_getLength(m) >= 3 
            && msg_isStringToken(m, 0)
            && (
                msg_readStringToken(m, 0) === 'read'
                || msg_readStringToken(m, 0) === 'write'
            )
        ) {
            const operationType = msg_readStringToken(m, 0)
            const soundInfo = {
                channelCount: 0,
                sampleRate: toInt(SAMPLE_RATE),
                bitDepth: 32,
                encodingFormat: '',
                endianness: '',
                extraOptions: '',
            }
            const operation = {
                arrayNames: [],
                resize: false,
                maxSize: -1,
                skip: 0,
                framesToWrite: 0,
                url: '',
                soundInfo,
            }
            let unhandledOptions = parseSoundFileOpenOpts(
                m,
                soundInfo,
            )
            
            // Remove the operation type
            unhandledOptions.delete(0)
            
            let i = 1
            let str = ""
            while (i < msg_getLength(m)) {
                if (!unhandledOptions.has(i)) {

                } else if (msg_isStringToken(m, i)) {
                    str = msg_readStringToken(m, i)
                    if (str === '-resize') {
                        unhandledOptions.delete(i)
                        operation.resize = true

                    } else if (str === '-maxsize' || str === '-nframes') {
                        unhandledOptions.delete(i)
                        if (
                            i + 1 >= msg_getLength(m) 
                            || !msg_isFloatToken(m, i + 1)
                        ) {
                            console.log("invalid value for -maxsize")
                        }
                        operation.maxSize = msg_readFloatToken(m, i + 1)
                        unhandledOptions.delete(i + 1)
                        i++

                    } else if (str === '-skip') {
                        unhandledOptions.delete(i)
                        if (
                            i + 1 >= msg_getLength(m) 
                            || !msg_isFloatToken(m, i + 1)
                        ) {
                            console.log("invalid value for -skip")
                        }
                        operation.skip = msg_readFloatToken(m, i + 1)
                        unhandledOptions.delete(i + 1)
                        i++

                    } else if (str === '-normalize') {
                        unhandledOptions.delete(i)
                        console.log('-normalize not implemented')
                    }
                }
                i++
            }

            i = 1
            let urlFound = false
            while (i < msg_getLength(m)) {
                if (!unhandledOptions.has(i)) {

                } else if (msg_isStringToken(m, i)) {
                    str = msg_readStringToken(m, i)
                    if (!str.startsWith('-') && urlFound === false) {
                        operation.url = str
                        urlFound = true
                    } else {
                        operation.arrayNames.push(str)
                    }
                    unhandledOptions.delete(i)
                }
                i++
            }

            for (i = 0; i < operation.arrayNames.length; i++) {
                if (!commons_hasArray(operation.arrayNames[i])) {
                    console.log('[soundfiler] unknown array ' + operation.arrayNames[i])
                    return
                }
            }

            if (unhandledOptions.size) {
                console.log("soundfiler received invalid options")
            }

            soundInfo.channelCount = operation.arrayNames.length

            if (operationType === 'read') {
                const id = fs_readSoundFile(
                    operation.url, 
                    soundInfo,
                    function (id, status, sound) {
                        const operation = n_1_44_STATE.operations.get(id)
                        n_1_44_STATE.operations.delete(id)
                        let i = 0
                        let maxFramesRead = 0
                        let framesToRead = 0
                        let array = createFloatArray(0)
                        for (i = 0; i < sound.length; i++) {
                            if (operation.resize) {
                                if (operation.maxSize > 0) {
                                    framesToRead = Math.min(
                                        operation.maxSize, 
                                        toFloat(sound[i].length) - operation.skip
                                    )
    
                                } else {
                                    framesToRead = toFloat(sound[i].length) - operation.skip
                                }
    
                                commons_setArray(
                                    operation.arrayNames[i], 
                                    sound[i].subarray(
                                        toInt(operation.skip), 
                                        toInt(operation.skip + framesToRead)
                                    )
                                )
                                
                            } else {
                                array = commons_getArray(operation.arrayNames[i])
                                framesToRead = Math.min(
                                    toFloat(array.length),
                                    toFloat(sound[i].length) - operation.skip
                                )
                                array.set(sound[i].subarray(0, array.length))
                            }
                            maxFramesRead = Math.max(
                                maxFramesRead,
                                framesToRead
                            )
                        }
    
                        SND_TO_NULL(n_soundfiler_buildMessage1(operation.soundInfo))
                        n_1_45_RCVS_0(msg_floats([maxFramesRead]))
                    }
                )

                n_1_44_STATE.operations.set(id, operation)

            } else if (operationType === 'write') {
                let i = 0
                let framesToWrite = 0
                let array = createFloatArray(0)
                const sound = []
                
                for (i = 0; i < operation.arrayNames.length; i++) {
                    framesToWrite = Math.max(
                        framesToWrite,
                        toFloat(commons_getArray(operation.arrayNames[i]).length) - operation.skip,
                    )
                }

                if (operation.maxSize >= 0) {
                    framesToWrite = Math.min(
                        operation.maxSize, 
                        framesToWrite
                    )
                }
                operation.framesToWrite = framesToWrite

                if (framesToWrite < 1) {
                    console.log('[soundfiler] no frames to write')
                    return
                }

                for (i = 0; i < operation.arrayNames.length; i++) {
                    array = commons_getArray(operation.arrayNames[i])
                    if (framesToWrite > toFloat(array.length) - operation.skip) {
                        sound.push(createFloatArray(toInt(framesToWrite)))
                        sound[i].set(array.subarray(
                            toInt(operation.skip), 
                            toInt(operation.skip + framesToWrite)
                        ))
                    } else {
                        sound.push(array.subarray(
                            toInt(operation.skip), 
                            toInt(operation.skip + framesToWrite)
                        ))
                    }
                }

                function callback(id, status) {
                    const operation = n_1_44_STATE.operations.get(id)
                    n_1_44_STATE.operations.delete(id)
                    SND_TO_NULL(n_soundfiler_buildMessage1(operation.soundInfo))
                    n_1_45_RCVS_0(msg_floats([operation.framesToWrite]))
                }

                const id = fs_writeSoundFile(
                    sound, 
                    operation.url, 
                    soundInfo, 
                    callback
                )

                n_1_44_STATE.operations.set(id, operation)
            }

            return
        }
    
                                throw new Error('[soundfiler], id "n_1_44", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_45_RCVS_0(m) {
                                
                if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                    n_div_setLeft(n_1_45_STATE, msg_readFloatToken(m, 0))
                    n_1_46_RCVS_0(msg_floats([n_1_45_STATE.rightOp !== 0 ? n_1_45_STATE.leftOp / n_1_45_STATE.rightOp: 0]))
                    return
                
                } else if (msg_isBang(m)) {
                    n_1_46_RCVS_0(msg_floats([n_1_45_STATE.rightOp !== 0 ? n_1_45_STATE.leftOp / n_1_45_STATE.rightOp: 0]))
                    return
                }
            
                                throw new Error('[/], id "n_1_45", inlet "0", unsupported message : ' + msg_display(m))
                            }
function n_1_45_RCVS_1(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_div_setRight(n_1_45_STATE, msg_readFloatToken(m, 0))
            return
        }
    
                                throw new Error('[/], id "n_1_45", inlet "1", unsupported message : ' + msg_display(m))
                            }

function n_1_46_RCVS_0(m) {
                                
                if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                    n_mul_setLeft(n_1_46_STATE, msg_readFloatToken(m, 0))
                    n_1_47_RCVS_0(msg_floats([n_1_46_STATE.leftOp * n_1_46_STATE.rightOp]))
                    return
                
                } else if (msg_isBang(m)) {
                    n_1_47_RCVS_0(msg_floats([n_1_46_STATE.leftOp * n_1_46_STATE.rightOp]))
                    return
                }
            
                                throw new Error('[*], id "n_1_46", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_47_RCVS_0(m) {
                                
                n_floatatom_receiveMessage(n_1_47_STATE, m)
                return
            
                                throw new Error('[floatatom], id "n_1_47", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_78_RCVS_0(m) {
                                
            msgBusPublish(n_1_78_STATE.busName, m)
            return
        
                                throw new Error('[send], id "n_1_78", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_111_RCVS_0(m) {
                                
        n_1_118_RCVS_0(msg_bang())
SND_TO_NULL(msg_floats([messageTokenToFloat(m, 0)]))
        return
    
                                throw new Error('[trigger], id "n_1_111", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_118_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_1_118_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_1_118_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_1_118_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_1_118_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_1_118_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_1_118_STATE.outMessages[0] = message
                n_1_118_STATE.messageTransferFunctions.splice(0, n_1_118_STATE.messageTransferFunctions.length - 1)
                n_1_118_STATE.messageTransferFunctions[0] = function (m) {
                    return n_1_118_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_1_118_STATE.messageTransferFunctions.length; i++) {
                    SND_TO_NULL(n_1_118_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_1_118", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_89_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_1_89_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_1_89_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_1_89_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_1_89_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_1_89_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_1_89_STATE.outMessages[0] = message
                n_1_89_STATE.messageTransferFunctions.splice(0, n_1_89_STATE.messageTransferFunctions.length - 1)
                n_1_89_STATE.messageTransferFunctions[0] = function (m) {
                    return n_1_89_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_1_89_STATE.messageTransferFunctions.length; i++) {
                    n_1_48_RCVS_0(n_1_89_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_1_89", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_48_RCVS_0(m) {
                                
        if (
            msg_getLength(m) >= 3 
            && msg_isStringToken(m, 0)
            && (
                msg_readStringToken(m, 0) === 'read'
                || msg_readStringToken(m, 0) === 'write'
            )
        ) {
            const operationType = msg_readStringToken(m, 0)
            const soundInfo = {
                channelCount: 0,
                sampleRate: toInt(SAMPLE_RATE),
                bitDepth: 32,
                encodingFormat: '',
                endianness: '',
                extraOptions: '',
            }
            const operation = {
                arrayNames: [],
                resize: false,
                maxSize: -1,
                skip: 0,
                framesToWrite: 0,
                url: '',
                soundInfo,
            }
            let unhandledOptions = parseSoundFileOpenOpts(
                m,
                soundInfo,
            )
            
            // Remove the operation type
            unhandledOptions.delete(0)
            
            let i = 1
            let str = ""
            while (i < msg_getLength(m)) {
                if (!unhandledOptions.has(i)) {

                } else if (msg_isStringToken(m, i)) {
                    str = msg_readStringToken(m, i)
                    if (str === '-resize') {
                        unhandledOptions.delete(i)
                        operation.resize = true

                    } else if (str === '-maxsize' || str === '-nframes') {
                        unhandledOptions.delete(i)
                        if (
                            i + 1 >= msg_getLength(m) 
                            || !msg_isFloatToken(m, i + 1)
                        ) {
                            console.log("invalid value for -maxsize")
                        }
                        operation.maxSize = msg_readFloatToken(m, i + 1)
                        unhandledOptions.delete(i + 1)
                        i++

                    } else if (str === '-skip') {
                        unhandledOptions.delete(i)
                        if (
                            i + 1 >= msg_getLength(m) 
                            || !msg_isFloatToken(m, i + 1)
                        ) {
                            console.log("invalid value for -skip")
                        }
                        operation.skip = msg_readFloatToken(m, i + 1)
                        unhandledOptions.delete(i + 1)
                        i++

                    } else if (str === '-normalize') {
                        unhandledOptions.delete(i)
                        console.log('-normalize not implemented')
                    }
                }
                i++
            }

            i = 1
            let urlFound = false
            while (i < msg_getLength(m)) {
                if (!unhandledOptions.has(i)) {

                } else if (msg_isStringToken(m, i)) {
                    str = msg_readStringToken(m, i)
                    if (!str.startsWith('-') && urlFound === false) {
                        operation.url = str
                        urlFound = true
                    } else {
                        operation.arrayNames.push(str)
                    }
                    unhandledOptions.delete(i)
                }
                i++
            }

            for (i = 0; i < operation.arrayNames.length; i++) {
                if (!commons_hasArray(operation.arrayNames[i])) {
                    console.log('[soundfiler] unknown array ' + operation.arrayNames[i])
                    return
                }
            }

            if (unhandledOptions.size) {
                console.log("soundfiler received invalid options")
            }

            soundInfo.channelCount = operation.arrayNames.length

            if (operationType === 'read') {
                const id = fs_readSoundFile(
                    operation.url, 
                    soundInfo,
                    function (id, status, sound) {
                        const operation = n_1_48_STATE.operations.get(id)
                        n_1_48_STATE.operations.delete(id)
                        let i = 0
                        let maxFramesRead = 0
                        let framesToRead = 0
                        let array = createFloatArray(0)
                        for (i = 0; i < sound.length; i++) {
                            if (operation.resize) {
                                if (operation.maxSize > 0) {
                                    framesToRead = Math.min(
                                        operation.maxSize, 
                                        toFloat(sound[i].length) - operation.skip
                                    )
    
                                } else {
                                    framesToRead = toFloat(sound[i].length) - operation.skip
                                }
    
                                commons_setArray(
                                    operation.arrayNames[i], 
                                    sound[i].subarray(
                                        toInt(operation.skip), 
                                        toInt(operation.skip + framesToRead)
                                    )
                                )
                                
                            } else {
                                array = commons_getArray(operation.arrayNames[i])
                                framesToRead = Math.min(
                                    toFloat(array.length),
                                    toFloat(sound[i].length) - operation.skip
                                )
                                array.set(sound[i].subarray(0, array.length))
                            }
                            maxFramesRead = Math.max(
                                maxFramesRead,
                                framesToRead
                            )
                        }
    
                        SND_TO_NULL(n_soundfiler_buildMessage1(operation.soundInfo))
                        n_1_49_RCVS_0(msg_floats([maxFramesRead]))
                    }
                )

                n_1_48_STATE.operations.set(id, operation)

            } else if (operationType === 'write') {
                let i = 0
                let framesToWrite = 0
                let array = createFloatArray(0)
                const sound = []
                
                for (i = 0; i < operation.arrayNames.length; i++) {
                    framesToWrite = Math.max(
                        framesToWrite,
                        toFloat(commons_getArray(operation.arrayNames[i]).length) - operation.skip,
                    )
                }

                if (operation.maxSize >= 0) {
                    framesToWrite = Math.min(
                        operation.maxSize, 
                        framesToWrite
                    )
                }
                operation.framesToWrite = framesToWrite

                if (framesToWrite < 1) {
                    console.log('[soundfiler] no frames to write')
                    return
                }

                for (i = 0; i < operation.arrayNames.length; i++) {
                    array = commons_getArray(operation.arrayNames[i])
                    if (framesToWrite > toFloat(array.length) - operation.skip) {
                        sound.push(createFloatArray(toInt(framesToWrite)))
                        sound[i].set(array.subarray(
                            toInt(operation.skip), 
                            toInt(operation.skip + framesToWrite)
                        ))
                    } else {
                        sound.push(array.subarray(
                            toInt(operation.skip), 
                            toInt(operation.skip + framesToWrite)
                        ))
                    }
                }

                function callback(id, status) {
                    const operation = n_1_48_STATE.operations.get(id)
                    n_1_48_STATE.operations.delete(id)
                    SND_TO_NULL(n_soundfiler_buildMessage1(operation.soundInfo))
                    n_1_49_RCVS_0(msg_floats([operation.framesToWrite]))
                }

                const id = fs_writeSoundFile(
                    sound, 
                    operation.url, 
                    soundInfo, 
                    callback
                )

                n_1_48_STATE.operations.set(id, operation)
            }

            return
        }
    
                                throw new Error('[soundfiler], id "n_1_48", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_49_RCVS_0(m) {
                                
                if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                    n_div_setLeft(n_1_49_STATE, msg_readFloatToken(m, 0))
                    n_1_50_RCVS_0(msg_floats([n_1_49_STATE.rightOp !== 0 ? n_1_49_STATE.leftOp / n_1_49_STATE.rightOp: 0]))
                    return
                
                } else if (msg_isBang(m)) {
                    n_1_50_RCVS_0(msg_floats([n_1_49_STATE.rightOp !== 0 ? n_1_49_STATE.leftOp / n_1_49_STATE.rightOp: 0]))
                    return
                }
            
                                throw new Error('[/], id "n_1_49", inlet "0", unsupported message : ' + msg_display(m))
                            }
function n_1_49_RCVS_1(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_div_setRight(n_1_49_STATE, msg_readFloatToken(m, 0))
            return
        }
    
                                throw new Error('[/], id "n_1_49", inlet "1", unsupported message : ' + msg_display(m))
                            }

function n_1_50_RCVS_0(m) {
                                
                if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                    n_mul_setLeft(n_1_50_STATE, msg_readFloatToken(m, 0))
                    n_1_51_RCVS_0(msg_floats([n_1_50_STATE.leftOp * n_1_50_STATE.rightOp]))
                    return
                
                } else if (msg_isBang(m)) {
                    n_1_51_RCVS_0(msg_floats([n_1_50_STATE.leftOp * n_1_50_STATE.rightOp]))
                    return
                }
            
                                throw new Error('[*], id "n_1_50", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_51_RCVS_0(m) {
                                
                n_floatatom_receiveMessage(n_1_51_STATE, m)
                return
            
                                throw new Error('[floatatom], id "n_1_51", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_77_RCVS_0(m) {
                                
            msgBusPublish(n_1_77_STATE.busName, m)
            return
        
                                throw new Error('[send], id "n_1_77", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_113_RCVS_0(m) {
                                
        n_1_119_RCVS_0(msg_bang())
SND_TO_NULL(msg_floats([messageTokenToFloat(m, 0)]))
        return
    
                                throw new Error('[trigger], id "n_1_113", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_119_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_1_119_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_1_119_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_1_119_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_1_119_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_1_119_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_1_119_STATE.outMessages[0] = message
                n_1_119_STATE.messageTransferFunctions.splice(0, n_1_119_STATE.messageTransferFunctions.length - 1)
                n_1_119_STATE.messageTransferFunctions[0] = function (m) {
                    return n_1_119_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_1_119_STATE.messageTransferFunctions.length; i++) {
                    SND_TO_NULL(n_1_119_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_1_119", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_90_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_1_90_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_1_90_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_1_90_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_1_90_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_1_90_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_1_90_STATE.outMessages[0] = message
                n_1_90_STATE.messageTransferFunctions.splice(0, n_1_90_STATE.messageTransferFunctions.length - 1)
                n_1_90_STATE.messageTransferFunctions[0] = function (m) {
                    return n_1_90_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_1_90_STATE.messageTransferFunctions.length; i++) {
                    n_1_52_RCVS_0(n_1_90_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_1_90", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_52_RCVS_0(m) {
                                
        if (
            msg_getLength(m) >= 3 
            && msg_isStringToken(m, 0)
            && (
                msg_readStringToken(m, 0) === 'read'
                || msg_readStringToken(m, 0) === 'write'
            )
        ) {
            const operationType = msg_readStringToken(m, 0)
            const soundInfo = {
                channelCount: 0,
                sampleRate: toInt(SAMPLE_RATE),
                bitDepth: 32,
                encodingFormat: '',
                endianness: '',
                extraOptions: '',
            }
            const operation = {
                arrayNames: [],
                resize: false,
                maxSize: -1,
                skip: 0,
                framesToWrite: 0,
                url: '',
                soundInfo,
            }
            let unhandledOptions = parseSoundFileOpenOpts(
                m,
                soundInfo,
            )
            
            // Remove the operation type
            unhandledOptions.delete(0)
            
            let i = 1
            let str = ""
            while (i < msg_getLength(m)) {
                if (!unhandledOptions.has(i)) {

                } else if (msg_isStringToken(m, i)) {
                    str = msg_readStringToken(m, i)
                    if (str === '-resize') {
                        unhandledOptions.delete(i)
                        operation.resize = true

                    } else if (str === '-maxsize' || str === '-nframes') {
                        unhandledOptions.delete(i)
                        if (
                            i + 1 >= msg_getLength(m) 
                            || !msg_isFloatToken(m, i + 1)
                        ) {
                            console.log("invalid value for -maxsize")
                        }
                        operation.maxSize = msg_readFloatToken(m, i + 1)
                        unhandledOptions.delete(i + 1)
                        i++

                    } else if (str === '-skip') {
                        unhandledOptions.delete(i)
                        if (
                            i + 1 >= msg_getLength(m) 
                            || !msg_isFloatToken(m, i + 1)
                        ) {
                            console.log("invalid value for -skip")
                        }
                        operation.skip = msg_readFloatToken(m, i + 1)
                        unhandledOptions.delete(i + 1)
                        i++

                    } else if (str === '-normalize') {
                        unhandledOptions.delete(i)
                        console.log('-normalize not implemented')
                    }
                }
                i++
            }

            i = 1
            let urlFound = false
            while (i < msg_getLength(m)) {
                if (!unhandledOptions.has(i)) {

                } else if (msg_isStringToken(m, i)) {
                    str = msg_readStringToken(m, i)
                    if (!str.startsWith('-') && urlFound === false) {
                        operation.url = str
                        urlFound = true
                    } else {
                        operation.arrayNames.push(str)
                    }
                    unhandledOptions.delete(i)
                }
                i++
            }

            for (i = 0; i < operation.arrayNames.length; i++) {
                if (!commons_hasArray(operation.arrayNames[i])) {
                    console.log('[soundfiler] unknown array ' + operation.arrayNames[i])
                    return
                }
            }

            if (unhandledOptions.size) {
                console.log("soundfiler received invalid options")
            }

            soundInfo.channelCount = operation.arrayNames.length

            if (operationType === 'read') {
                const id = fs_readSoundFile(
                    operation.url, 
                    soundInfo,
                    function (id, status, sound) {
                        const operation = n_1_52_STATE.operations.get(id)
                        n_1_52_STATE.operations.delete(id)
                        let i = 0
                        let maxFramesRead = 0
                        let framesToRead = 0
                        let array = createFloatArray(0)
                        for (i = 0; i < sound.length; i++) {
                            if (operation.resize) {
                                if (operation.maxSize > 0) {
                                    framesToRead = Math.min(
                                        operation.maxSize, 
                                        toFloat(sound[i].length) - operation.skip
                                    )
    
                                } else {
                                    framesToRead = toFloat(sound[i].length) - operation.skip
                                }
    
                                commons_setArray(
                                    operation.arrayNames[i], 
                                    sound[i].subarray(
                                        toInt(operation.skip), 
                                        toInt(operation.skip + framesToRead)
                                    )
                                )
                                
                            } else {
                                array = commons_getArray(operation.arrayNames[i])
                                framesToRead = Math.min(
                                    toFloat(array.length),
                                    toFloat(sound[i].length) - operation.skip
                                )
                                array.set(sound[i].subarray(0, array.length))
                            }
                            maxFramesRead = Math.max(
                                maxFramesRead,
                                framesToRead
                            )
                        }
    
                        SND_TO_NULL(n_soundfiler_buildMessage1(operation.soundInfo))
                        n_1_53_RCVS_0(msg_floats([maxFramesRead]))
                    }
                )

                n_1_52_STATE.operations.set(id, operation)

            } else if (operationType === 'write') {
                let i = 0
                let framesToWrite = 0
                let array = createFloatArray(0)
                const sound = []
                
                for (i = 0; i < operation.arrayNames.length; i++) {
                    framesToWrite = Math.max(
                        framesToWrite,
                        toFloat(commons_getArray(operation.arrayNames[i]).length) - operation.skip,
                    )
                }

                if (operation.maxSize >= 0) {
                    framesToWrite = Math.min(
                        operation.maxSize, 
                        framesToWrite
                    )
                }
                operation.framesToWrite = framesToWrite

                if (framesToWrite < 1) {
                    console.log('[soundfiler] no frames to write')
                    return
                }

                for (i = 0; i < operation.arrayNames.length; i++) {
                    array = commons_getArray(operation.arrayNames[i])
                    if (framesToWrite > toFloat(array.length) - operation.skip) {
                        sound.push(createFloatArray(toInt(framesToWrite)))
                        sound[i].set(array.subarray(
                            toInt(operation.skip), 
                            toInt(operation.skip + framesToWrite)
                        ))
                    } else {
                        sound.push(array.subarray(
                            toInt(operation.skip), 
                            toInt(operation.skip + framesToWrite)
                        ))
                    }
                }

                function callback(id, status) {
                    const operation = n_1_52_STATE.operations.get(id)
                    n_1_52_STATE.operations.delete(id)
                    SND_TO_NULL(n_soundfiler_buildMessage1(operation.soundInfo))
                    n_1_53_RCVS_0(msg_floats([operation.framesToWrite]))
                }

                const id = fs_writeSoundFile(
                    sound, 
                    operation.url, 
                    soundInfo, 
                    callback
                )

                n_1_52_STATE.operations.set(id, operation)
            }

            return
        }
    
                                throw new Error('[soundfiler], id "n_1_52", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_53_RCVS_0(m) {
                                
                if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                    n_div_setLeft(n_1_53_STATE, msg_readFloatToken(m, 0))
                    n_1_54_RCVS_0(msg_floats([n_1_53_STATE.rightOp !== 0 ? n_1_53_STATE.leftOp / n_1_53_STATE.rightOp: 0]))
                    return
                
                } else if (msg_isBang(m)) {
                    n_1_54_RCVS_0(msg_floats([n_1_53_STATE.rightOp !== 0 ? n_1_53_STATE.leftOp / n_1_53_STATE.rightOp: 0]))
                    return
                }
            
                                throw new Error('[/], id "n_1_53", inlet "0", unsupported message : ' + msg_display(m))
                            }
function n_1_53_RCVS_1(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_div_setRight(n_1_53_STATE, msg_readFloatToken(m, 0))
            return
        }
    
                                throw new Error('[/], id "n_1_53", inlet "1", unsupported message : ' + msg_display(m))
                            }

function n_1_54_RCVS_0(m) {
                                
                if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                    n_mul_setLeft(n_1_54_STATE, msg_readFloatToken(m, 0))
                    n_1_55_RCVS_0(msg_floats([n_1_54_STATE.leftOp * n_1_54_STATE.rightOp]))
                    return
                
                } else if (msg_isBang(m)) {
                    n_1_55_RCVS_0(msg_floats([n_1_54_STATE.leftOp * n_1_54_STATE.rightOp]))
                    return
                }
            
                                throw new Error('[*], id "n_1_54", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_55_RCVS_0(m) {
                                
                n_floatatom_receiveMessage(n_1_55_STATE, m)
                return
            
                                throw new Error('[floatatom], id "n_1_55", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_76_RCVS_0(m) {
                                
            msgBusPublish(n_1_76_STATE.busName, m)
            return
        
                                throw new Error('[send], id "n_1_76", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_115_RCVS_0(m) {
                                
        n_1_120_RCVS_0(msg_bang())
SND_TO_NULL(msg_floats([messageTokenToFloat(m, 0)]))
        return
    
                                throw new Error('[trigger], id "n_1_115", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_120_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_1_120_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_1_120_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_1_120_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_1_120_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_1_120_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_1_120_STATE.outMessages[0] = message
                n_1_120_STATE.messageTransferFunctions.splice(0, n_1_120_STATE.messageTransferFunctions.length - 1)
                n_1_120_STATE.messageTransferFunctions[0] = function (m) {
                    return n_1_120_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_1_120_STATE.messageTransferFunctions.length; i++) {
                    SND_TO_NULL(n_1_120_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_1_120", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_91_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_1_91_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_1_91_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_1_91_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_1_91_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_1_91_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_1_91_STATE.outMessages[0] = message
                n_1_91_STATE.messageTransferFunctions.splice(0, n_1_91_STATE.messageTransferFunctions.length - 1)
                n_1_91_STATE.messageTransferFunctions[0] = function (m) {
                    return n_1_91_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_1_91_STATE.messageTransferFunctions.length; i++) {
                    n_1_56_RCVS_0(n_1_91_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_1_91", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_56_RCVS_0(m) {
                                
        if (
            msg_getLength(m) >= 3 
            && msg_isStringToken(m, 0)
            && (
                msg_readStringToken(m, 0) === 'read'
                || msg_readStringToken(m, 0) === 'write'
            )
        ) {
            const operationType = msg_readStringToken(m, 0)
            const soundInfo = {
                channelCount: 0,
                sampleRate: toInt(SAMPLE_RATE),
                bitDepth: 32,
                encodingFormat: '',
                endianness: '',
                extraOptions: '',
            }
            const operation = {
                arrayNames: [],
                resize: false,
                maxSize: -1,
                skip: 0,
                framesToWrite: 0,
                url: '',
                soundInfo,
            }
            let unhandledOptions = parseSoundFileOpenOpts(
                m,
                soundInfo,
            )
            
            // Remove the operation type
            unhandledOptions.delete(0)
            
            let i = 1
            let str = ""
            while (i < msg_getLength(m)) {
                if (!unhandledOptions.has(i)) {

                } else if (msg_isStringToken(m, i)) {
                    str = msg_readStringToken(m, i)
                    if (str === '-resize') {
                        unhandledOptions.delete(i)
                        operation.resize = true

                    } else if (str === '-maxsize' || str === '-nframes') {
                        unhandledOptions.delete(i)
                        if (
                            i + 1 >= msg_getLength(m) 
                            || !msg_isFloatToken(m, i + 1)
                        ) {
                            console.log("invalid value for -maxsize")
                        }
                        operation.maxSize = msg_readFloatToken(m, i + 1)
                        unhandledOptions.delete(i + 1)
                        i++

                    } else if (str === '-skip') {
                        unhandledOptions.delete(i)
                        if (
                            i + 1 >= msg_getLength(m) 
                            || !msg_isFloatToken(m, i + 1)
                        ) {
                            console.log("invalid value for -skip")
                        }
                        operation.skip = msg_readFloatToken(m, i + 1)
                        unhandledOptions.delete(i + 1)
                        i++

                    } else if (str === '-normalize') {
                        unhandledOptions.delete(i)
                        console.log('-normalize not implemented')
                    }
                }
                i++
            }

            i = 1
            let urlFound = false
            while (i < msg_getLength(m)) {
                if (!unhandledOptions.has(i)) {

                } else if (msg_isStringToken(m, i)) {
                    str = msg_readStringToken(m, i)
                    if (!str.startsWith('-') && urlFound === false) {
                        operation.url = str
                        urlFound = true
                    } else {
                        operation.arrayNames.push(str)
                    }
                    unhandledOptions.delete(i)
                }
                i++
            }

            for (i = 0; i < operation.arrayNames.length; i++) {
                if (!commons_hasArray(operation.arrayNames[i])) {
                    console.log('[soundfiler] unknown array ' + operation.arrayNames[i])
                    return
                }
            }

            if (unhandledOptions.size) {
                console.log("soundfiler received invalid options")
            }

            soundInfo.channelCount = operation.arrayNames.length

            if (operationType === 'read') {
                const id = fs_readSoundFile(
                    operation.url, 
                    soundInfo,
                    function (id, status, sound) {
                        const operation = n_1_56_STATE.operations.get(id)
                        n_1_56_STATE.operations.delete(id)
                        let i = 0
                        let maxFramesRead = 0
                        let framesToRead = 0
                        let array = createFloatArray(0)
                        for (i = 0; i < sound.length; i++) {
                            if (operation.resize) {
                                if (operation.maxSize > 0) {
                                    framesToRead = Math.min(
                                        operation.maxSize, 
                                        toFloat(sound[i].length) - operation.skip
                                    )
    
                                } else {
                                    framesToRead = toFloat(sound[i].length) - operation.skip
                                }
    
                                commons_setArray(
                                    operation.arrayNames[i], 
                                    sound[i].subarray(
                                        toInt(operation.skip), 
                                        toInt(operation.skip + framesToRead)
                                    )
                                )
                                
                            } else {
                                array = commons_getArray(operation.arrayNames[i])
                                framesToRead = Math.min(
                                    toFloat(array.length),
                                    toFloat(sound[i].length) - operation.skip
                                )
                                array.set(sound[i].subarray(0, array.length))
                            }
                            maxFramesRead = Math.max(
                                maxFramesRead,
                                framesToRead
                            )
                        }
    
                        SND_TO_NULL(n_soundfiler_buildMessage1(operation.soundInfo))
                        n_1_57_RCVS_0(msg_floats([maxFramesRead]))
                    }
                )

                n_1_56_STATE.operations.set(id, operation)

            } else if (operationType === 'write') {
                let i = 0
                let framesToWrite = 0
                let array = createFloatArray(0)
                const sound = []
                
                for (i = 0; i < operation.arrayNames.length; i++) {
                    framesToWrite = Math.max(
                        framesToWrite,
                        toFloat(commons_getArray(operation.arrayNames[i]).length) - operation.skip,
                    )
                }

                if (operation.maxSize >= 0) {
                    framesToWrite = Math.min(
                        operation.maxSize, 
                        framesToWrite
                    )
                }
                operation.framesToWrite = framesToWrite

                if (framesToWrite < 1) {
                    console.log('[soundfiler] no frames to write')
                    return
                }

                for (i = 0; i < operation.arrayNames.length; i++) {
                    array = commons_getArray(operation.arrayNames[i])
                    if (framesToWrite > toFloat(array.length) - operation.skip) {
                        sound.push(createFloatArray(toInt(framesToWrite)))
                        sound[i].set(array.subarray(
                            toInt(operation.skip), 
                            toInt(operation.skip + framesToWrite)
                        ))
                    } else {
                        sound.push(array.subarray(
                            toInt(operation.skip), 
                            toInt(operation.skip + framesToWrite)
                        ))
                    }
                }

                function callback(id, status) {
                    const operation = n_1_56_STATE.operations.get(id)
                    n_1_56_STATE.operations.delete(id)
                    SND_TO_NULL(n_soundfiler_buildMessage1(operation.soundInfo))
                    n_1_57_RCVS_0(msg_floats([operation.framesToWrite]))
                }

                const id = fs_writeSoundFile(
                    sound, 
                    operation.url, 
                    soundInfo, 
                    callback
                )

                n_1_56_STATE.operations.set(id, operation)
            }

            return
        }
    
                                throw new Error('[soundfiler], id "n_1_56", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_57_RCVS_0(m) {
                                
                if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                    n_div_setLeft(n_1_57_STATE, msg_readFloatToken(m, 0))
                    n_1_58_RCVS_0(msg_floats([n_1_57_STATE.rightOp !== 0 ? n_1_57_STATE.leftOp / n_1_57_STATE.rightOp: 0]))
                    return
                
                } else if (msg_isBang(m)) {
                    n_1_58_RCVS_0(msg_floats([n_1_57_STATE.rightOp !== 0 ? n_1_57_STATE.leftOp / n_1_57_STATE.rightOp: 0]))
                    return
                }
            
                                throw new Error('[/], id "n_1_57", inlet "0", unsupported message : ' + msg_display(m))
                            }
function n_1_57_RCVS_1(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_div_setRight(n_1_57_STATE, msg_readFloatToken(m, 0))
            return
        }
    
                                throw new Error('[/], id "n_1_57", inlet "1", unsupported message : ' + msg_display(m))
                            }

function n_1_58_RCVS_0(m) {
                                
                if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                    n_mul_setLeft(n_1_58_STATE, msg_readFloatToken(m, 0))
                    n_1_59_RCVS_0(msg_floats([n_1_58_STATE.leftOp * n_1_58_STATE.rightOp]))
                    return
                
                } else if (msg_isBang(m)) {
                    n_1_59_RCVS_0(msg_floats([n_1_58_STATE.leftOp * n_1_58_STATE.rightOp]))
                    return
                }
            
                                throw new Error('[*], id "n_1_58", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_59_RCVS_0(m) {
                                
                n_floatatom_receiveMessage(n_1_59_STATE, m)
                return
            
                                throw new Error('[floatatom], id "n_1_59", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_75_RCVS_0(m) {
                                
            msgBusPublish(n_1_75_STATE.busName, m)
            return
        
                                throw new Error('[send], id "n_1_75", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_121_RCVS_0(m) {
                                
        n_1_129_RCVS_0(msg_bang())
SND_TO_NULL(msg_floats([messageTokenToFloat(m, 0)]))
        return
    
                                throw new Error('[trigger], id "n_1_121", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_129_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_1_129_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_1_129_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_1_129_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_1_129_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_1_129_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_1_129_STATE.outMessages[0] = message
                n_1_129_STATE.messageTransferFunctions.splice(0, n_1_129_STATE.messageTransferFunctions.length - 1)
                n_1_129_STATE.messageTransferFunctions[0] = function (m) {
                    return n_1_129_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_1_129_STATE.messageTransferFunctions.length; i++) {
                    SND_TO_NULL(n_1_129_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_1_129", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_92_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_1_92_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_1_92_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_1_92_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_1_92_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_1_92_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_1_92_STATE.outMessages[0] = message
                n_1_92_STATE.messageTransferFunctions.splice(0, n_1_92_STATE.messageTransferFunctions.length - 1)
                n_1_92_STATE.messageTransferFunctions[0] = function (m) {
                    return n_1_92_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_1_92_STATE.messageTransferFunctions.length; i++) {
                    n_1_60_RCVS_0(n_1_92_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_1_92", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_60_RCVS_0(m) {
                                
        if (
            msg_getLength(m) >= 3 
            && msg_isStringToken(m, 0)
            && (
                msg_readStringToken(m, 0) === 'read'
                || msg_readStringToken(m, 0) === 'write'
            )
        ) {
            const operationType = msg_readStringToken(m, 0)
            const soundInfo = {
                channelCount: 0,
                sampleRate: toInt(SAMPLE_RATE),
                bitDepth: 32,
                encodingFormat: '',
                endianness: '',
                extraOptions: '',
            }
            const operation = {
                arrayNames: [],
                resize: false,
                maxSize: -1,
                skip: 0,
                framesToWrite: 0,
                url: '',
                soundInfo,
            }
            let unhandledOptions = parseSoundFileOpenOpts(
                m,
                soundInfo,
            )
            
            // Remove the operation type
            unhandledOptions.delete(0)
            
            let i = 1
            let str = ""
            while (i < msg_getLength(m)) {
                if (!unhandledOptions.has(i)) {

                } else if (msg_isStringToken(m, i)) {
                    str = msg_readStringToken(m, i)
                    if (str === '-resize') {
                        unhandledOptions.delete(i)
                        operation.resize = true

                    } else if (str === '-maxsize' || str === '-nframes') {
                        unhandledOptions.delete(i)
                        if (
                            i + 1 >= msg_getLength(m) 
                            || !msg_isFloatToken(m, i + 1)
                        ) {
                            console.log("invalid value for -maxsize")
                        }
                        operation.maxSize = msg_readFloatToken(m, i + 1)
                        unhandledOptions.delete(i + 1)
                        i++

                    } else if (str === '-skip') {
                        unhandledOptions.delete(i)
                        if (
                            i + 1 >= msg_getLength(m) 
                            || !msg_isFloatToken(m, i + 1)
                        ) {
                            console.log("invalid value for -skip")
                        }
                        operation.skip = msg_readFloatToken(m, i + 1)
                        unhandledOptions.delete(i + 1)
                        i++

                    } else if (str === '-normalize') {
                        unhandledOptions.delete(i)
                        console.log('-normalize not implemented')
                    }
                }
                i++
            }

            i = 1
            let urlFound = false
            while (i < msg_getLength(m)) {
                if (!unhandledOptions.has(i)) {

                } else if (msg_isStringToken(m, i)) {
                    str = msg_readStringToken(m, i)
                    if (!str.startsWith('-') && urlFound === false) {
                        operation.url = str
                        urlFound = true
                    } else {
                        operation.arrayNames.push(str)
                    }
                    unhandledOptions.delete(i)
                }
                i++
            }

            for (i = 0; i < operation.arrayNames.length; i++) {
                if (!commons_hasArray(operation.arrayNames[i])) {
                    console.log('[soundfiler] unknown array ' + operation.arrayNames[i])
                    return
                }
            }

            if (unhandledOptions.size) {
                console.log("soundfiler received invalid options")
            }

            soundInfo.channelCount = operation.arrayNames.length

            if (operationType === 'read') {
                const id = fs_readSoundFile(
                    operation.url, 
                    soundInfo,
                    function (id, status, sound) {
                        const operation = n_1_60_STATE.operations.get(id)
                        n_1_60_STATE.operations.delete(id)
                        let i = 0
                        let maxFramesRead = 0
                        let framesToRead = 0
                        let array = createFloatArray(0)
                        for (i = 0; i < sound.length; i++) {
                            if (operation.resize) {
                                if (operation.maxSize > 0) {
                                    framesToRead = Math.min(
                                        operation.maxSize, 
                                        toFloat(sound[i].length) - operation.skip
                                    )
    
                                } else {
                                    framesToRead = toFloat(sound[i].length) - operation.skip
                                }
    
                                commons_setArray(
                                    operation.arrayNames[i], 
                                    sound[i].subarray(
                                        toInt(operation.skip), 
                                        toInt(operation.skip + framesToRead)
                                    )
                                )
                                
                            } else {
                                array = commons_getArray(operation.arrayNames[i])
                                framesToRead = Math.min(
                                    toFloat(array.length),
                                    toFloat(sound[i].length) - operation.skip
                                )
                                array.set(sound[i].subarray(0, array.length))
                            }
                            maxFramesRead = Math.max(
                                maxFramesRead,
                                framesToRead
                            )
                        }
    
                        SND_TO_NULL(n_soundfiler_buildMessage1(operation.soundInfo))
                        n_1_61_RCVS_0(msg_floats([maxFramesRead]))
                    }
                )

                n_1_60_STATE.operations.set(id, operation)

            } else if (operationType === 'write') {
                let i = 0
                let framesToWrite = 0
                let array = createFloatArray(0)
                const sound = []
                
                for (i = 0; i < operation.arrayNames.length; i++) {
                    framesToWrite = Math.max(
                        framesToWrite,
                        toFloat(commons_getArray(operation.arrayNames[i]).length) - operation.skip,
                    )
                }

                if (operation.maxSize >= 0) {
                    framesToWrite = Math.min(
                        operation.maxSize, 
                        framesToWrite
                    )
                }
                operation.framesToWrite = framesToWrite

                if (framesToWrite < 1) {
                    console.log('[soundfiler] no frames to write')
                    return
                }

                for (i = 0; i < operation.arrayNames.length; i++) {
                    array = commons_getArray(operation.arrayNames[i])
                    if (framesToWrite > toFloat(array.length) - operation.skip) {
                        sound.push(createFloatArray(toInt(framesToWrite)))
                        sound[i].set(array.subarray(
                            toInt(operation.skip), 
                            toInt(operation.skip + framesToWrite)
                        ))
                    } else {
                        sound.push(array.subarray(
                            toInt(operation.skip), 
                            toInt(operation.skip + framesToWrite)
                        ))
                    }
                }

                function callback(id, status) {
                    const operation = n_1_60_STATE.operations.get(id)
                    n_1_60_STATE.operations.delete(id)
                    SND_TO_NULL(n_soundfiler_buildMessage1(operation.soundInfo))
                    n_1_61_RCVS_0(msg_floats([operation.framesToWrite]))
                }

                const id = fs_writeSoundFile(
                    sound, 
                    operation.url, 
                    soundInfo, 
                    callback
                )

                n_1_60_STATE.operations.set(id, operation)
            }

            return
        }
    
                                throw new Error('[soundfiler], id "n_1_60", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_61_RCVS_0(m) {
                                
                if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                    n_div_setLeft(n_1_61_STATE, msg_readFloatToken(m, 0))
                    n_1_62_RCVS_0(msg_floats([n_1_61_STATE.rightOp !== 0 ? n_1_61_STATE.leftOp / n_1_61_STATE.rightOp: 0]))
                    return
                
                } else if (msg_isBang(m)) {
                    n_1_62_RCVS_0(msg_floats([n_1_61_STATE.rightOp !== 0 ? n_1_61_STATE.leftOp / n_1_61_STATE.rightOp: 0]))
                    return
                }
            
                                throw new Error('[/], id "n_1_61", inlet "0", unsupported message : ' + msg_display(m))
                            }
function n_1_61_RCVS_1(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_div_setRight(n_1_61_STATE, msg_readFloatToken(m, 0))
            return
        }
    
                                throw new Error('[/], id "n_1_61", inlet "1", unsupported message : ' + msg_display(m))
                            }

function n_1_62_RCVS_0(m) {
                                
                if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                    n_mul_setLeft(n_1_62_STATE, msg_readFloatToken(m, 0))
                    n_1_63_RCVS_0(msg_floats([n_1_62_STATE.leftOp * n_1_62_STATE.rightOp]))
                    return
                
                } else if (msg_isBang(m)) {
                    n_1_63_RCVS_0(msg_floats([n_1_62_STATE.leftOp * n_1_62_STATE.rightOp]))
                    return
                }
            
                                throw new Error('[*], id "n_1_62", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_63_RCVS_0(m) {
                                
                n_floatatom_receiveMessage(n_1_63_STATE, m)
                return
            
                                throw new Error('[floatatom], id "n_1_63", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_74_RCVS_0(m) {
                                
            msgBusPublish(n_1_74_STATE.busName, m)
            return
        
                                throw new Error('[send], id "n_1_74", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_123_RCVS_0(m) {
                                
        n_1_130_RCVS_0(msg_bang())
SND_TO_NULL(msg_floats([messageTokenToFloat(m, 0)]))
        return
    
                                throw new Error('[trigger], id "n_1_123", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_130_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_1_130_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_1_130_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_1_130_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_1_130_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_1_130_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_1_130_STATE.outMessages[0] = message
                n_1_130_STATE.messageTransferFunctions.splice(0, n_1_130_STATE.messageTransferFunctions.length - 1)
                n_1_130_STATE.messageTransferFunctions[0] = function (m) {
                    return n_1_130_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_1_130_STATE.messageTransferFunctions.length; i++) {
                    SND_TO_NULL(n_1_130_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_1_130", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_93_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_1_93_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_1_93_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_1_93_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_1_93_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_1_93_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_1_93_STATE.outMessages[0] = message
                n_1_93_STATE.messageTransferFunctions.splice(0, n_1_93_STATE.messageTransferFunctions.length - 1)
                n_1_93_STATE.messageTransferFunctions[0] = function (m) {
                    return n_1_93_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_1_93_STATE.messageTransferFunctions.length; i++) {
                    n_1_64_RCVS_0(n_1_93_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_1_93", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_64_RCVS_0(m) {
                                
        if (
            msg_getLength(m) >= 3 
            && msg_isStringToken(m, 0)
            && (
                msg_readStringToken(m, 0) === 'read'
                || msg_readStringToken(m, 0) === 'write'
            )
        ) {
            const operationType = msg_readStringToken(m, 0)
            const soundInfo = {
                channelCount: 0,
                sampleRate: toInt(SAMPLE_RATE),
                bitDepth: 32,
                encodingFormat: '',
                endianness: '',
                extraOptions: '',
            }
            const operation = {
                arrayNames: [],
                resize: false,
                maxSize: -1,
                skip: 0,
                framesToWrite: 0,
                url: '',
                soundInfo,
            }
            let unhandledOptions = parseSoundFileOpenOpts(
                m,
                soundInfo,
            )
            
            // Remove the operation type
            unhandledOptions.delete(0)
            
            let i = 1
            let str = ""
            while (i < msg_getLength(m)) {
                if (!unhandledOptions.has(i)) {

                } else if (msg_isStringToken(m, i)) {
                    str = msg_readStringToken(m, i)
                    if (str === '-resize') {
                        unhandledOptions.delete(i)
                        operation.resize = true

                    } else if (str === '-maxsize' || str === '-nframes') {
                        unhandledOptions.delete(i)
                        if (
                            i + 1 >= msg_getLength(m) 
                            || !msg_isFloatToken(m, i + 1)
                        ) {
                            console.log("invalid value for -maxsize")
                        }
                        operation.maxSize = msg_readFloatToken(m, i + 1)
                        unhandledOptions.delete(i + 1)
                        i++

                    } else if (str === '-skip') {
                        unhandledOptions.delete(i)
                        if (
                            i + 1 >= msg_getLength(m) 
                            || !msg_isFloatToken(m, i + 1)
                        ) {
                            console.log("invalid value for -skip")
                        }
                        operation.skip = msg_readFloatToken(m, i + 1)
                        unhandledOptions.delete(i + 1)
                        i++

                    } else if (str === '-normalize') {
                        unhandledOptions.delete(i)
                        console.log('-normalize not implemented')
                    }
                }
                i++
            }

            i = 1
            let urlFound = false
            while (i < msg_getLength(m)) {
                if (!unhandledOptions.has(i)) {

                } else if (msg_isStringToken(m, i)) {
                    str = msg_readStringToken(m, i)
                    if (!str.startsWith('-') && urlFound === false) {
                        operation.url = str
                        urlFound = true
                    } else {
                        operation.arrayNames.push(str)
                    }
                    unhandledOptions.delete(i)
                }
                i++
            }

            for (i = 0; i < operation.arrayNames.length; i++) {
                if (!commons_hasArray(operation.arrayNames[i])) {
                    console.log('[soundfiler] unknown array ' + operation.arrayNames[i])
                    return
                }
            }

            if (unhandledOptions.size) {
                console.log("soundfiler received invalid options")
            }

            soundInfo.channelCount = operation.arrayNames.length

            if (operationType === 'read') {
                const id = fs_readSoundFile(
                    operation.url, 
                    soundInfo,
                    function (id, status, sound) {
                        const operation = n_1_64_STATE.operations.get(id)
                        n_1_64_STATE.operations.delete(id)
                        let i = 0
                        let maxFramesRead = 0
                        let framesToRead = 0
                        let array = createFloatArray(0)
                        for (i = 0; i < sound.length; i++) {
                            if (operation.resize) {
                                if (operation.maxSize > 0) {
                                    framesToRead = Math.min(
                                        operation.maxSize, 
                                        toFloat(sound[i].length) - operation.skip
                                    )
    
                                } else {
                                    framesToRead = toFloat(sound[i].length) - operation.skip
                                }
    
                                commons_setArray(
                                    operation.arrayNames[i], 
                                    sound[i].subarray(
                                        toInt(operation.skip), 
                                        toInt(operation.skip + framesToRead)
                                    )
                                )
                                
                            } else {
                                array = commons_getArray(operation.arrayNames[i])
                                framesToRead = Math.min(
                                    toFloat(array.length),
                                    toFloat(sound[i].length) - operation.skip
                                )
                                array.set(sound[i].subarray(0, array.length))
                            }
                            maxFramesRead = Math.max(
                                maxFramesRead,
                                framesToRead
                            )
                        }
    
                        SND_TO_NULL(n_soundfiler_buildMessage1(operation.soundInfo))
                        n_1_65_RCVS_0(msg_floats([maxFramesRead]))
                    }
                )

                n_1_64_STATE.operations.set(id, operation)

            } else if (operationType === 'write') {
                let i = 0
                let framesToWrite = 0
                let array = createFloatArray(0)
                const sound = []
                
                for (i = 0; i < operation.arrayNames.length; i++) {
                    framesToWrite = Math.max(
                        framesToWrite,
                        toFloat(commons_getArray(operation.arrayNames[i]).length) - operation.skip,
                    )
                }

                if (operation.maxSize >= 0) {
                    framesToWrite = Math.min(
                        operation.maxSize, 
                        framesToWrite
                    )
                }
                operation.framesToWrite = framesToWrite

                if (framesToWrite < 1) {
                    console.log('[soundfiler] no frames to write')
                    return
                }

                for (i = 0; i < operation.arrayNames.length; i++) {
                    array = commons_getArray(operation.arrayNames[i])
                    if (framesToWrite > toFloat(array.length) - operation.skip) {
                        sound.push(createFloatArray(toInt(framesToWrite)))
                        sound[i].set(array.subarray(
                            toInt(operation.skip), 
                            toInt(operation.skip + framesToWrite)
                        ))
                    } else {
                        sound.push(array.subarray(
                            toInt(operation.skip), 
                            toInt(operation.skip + framesToWrite)
                        ))
                    }
                }

                function callback(id, status) {
                    const operation = n_1_64_STATE.operations.get(id)
                    n_1_64_STATE.operations.delete(id)
                    SND_TO_NULL(n_soundfiler_buildMessage1(operation.soundInfo))
                    n_1_65_RCVS_0(msg_floats([operation.framesToWrite]))
                }

                const id = fs_writeSoundFile(
                    sound, 
                    operation.url, 
                    soundInfo, 
                    callback
                )

                n_1_64_STATE.operations.set(id, operation)
            }

            return
        }
    
                                throw new Error('[soundfiler], id "n_1_64", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_65_RCVS_0(m) {
                                
                if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                    n_div_setLeft(n_1_65_STATE, msg_readFloatToken(m, 0))
                    n_1_66_RCVS_0(msg_floats([n_1_65_STATE.rightOp !== 0 ? n_1_65_STATE.leftOp / n_1_65_STATE.rightOp: 0]))
                    return
                
                } else if (msg_isBang(m)) {
                    n_1_66_RCVS_0(msg_floats([n_1_65_STATE.rightOp !== 0 ? n_1_65_STATE.leftOp / n_1_65_STATE.rightOp: 0]))
                    return
                }
            
                                throw new Error('[/], id "n_1_65", inlet "0", unsupported message : ' + msg_display(m))
                            }
function n_1_65_RCVS_1(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_div_setRight(n_1_65_STATE, msg_readFloatToken(m, 0))
            return
        }
    
                                throw new Error('[/], id "n_1_65", inlet "1", unsupported message : ' + msg_display(m))
                            }

function n_1_66_RCVS_0(m) {
                                
                if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                    n_mul_setLeft(n_1_66_STATE, msg_readFloatToken(m, 0))
                    n_1_67_RCVS_0(msg_floats([n_1_66_STATE.leftOp * n_1_66_STATE.rightOp]))
                    return
                
                } else if (msg_isBang(m)) {
                    n_1_67_RCVS_0(msg_floats([n_1_66_STATE.leftOp * n_1_66_STATE.rightOp]))
                    return
                }
            
                                throw new Error('[*], id "n_1_66", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_67_RCVS_0(m) {
                                
                n_floatatom_receiveMessage(n_1_67_STATE, m)
                return
            
                                throw new Error('[floatatom], id "n_1_67", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_73_RCVS_0(m) {
                                
            msgBusPublish(n_1_73_STATE.busName, m)
            return
        
                                throw new Error('[send], id "n_1_73", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_125_RCVS_0(m) {
                                
        n_1_131_RCVS_0(msg_bang())
SND_TO_NULL(msg_floats([messageTokenToFloat(m, 0)]))
        return
    
                                throw new Error('[trigger], id "n_1_125", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_131_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_1_131_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_1_131_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_1_131_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_1_131_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_1_131_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_1_131_STATE.outMessages[0] = message
                n_1_131_STATE.messageTransferFunctions.splice(0, n_1_131_STATE.messageTransferFunctions.length - 1)
                n_1_131_STATE.messageTransferFunctions[0] = function (m) {
                    return n_1_131_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_1_131_STATE.messageTransferFunctions.length; i++) {
                    SND_TO_NULL(n_1_131_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_1_131", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_94_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_1_94_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_1_94_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_1_94_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_1_94_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_1_94_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_1_94_STATE.outMessages[0] = message
                n_1_94_STATE.messageTransferFunctions.splice(0, n_1_94_STATE.messageTransferFunctions.length - 1)
                n_1_94_STATE.messageTransferFunctions[0] = function (m) {
                    return n_1_94_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_1_94_STATE.messageTransferFunctions.length; i++) {
                    n_1_68_RCVS_0(n_1_94_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_1_94", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_68_RCVS_0(m) {
                                
        if (
            msg_getLength(m) >= 3 
            && msg_isStringToken(m, 0)
            && (
                msg_readStringToken(m, 0) === 'read'
                || msg_readStringToken(m, 0) === 'write'
            )
        ) {
            const operationType = msg_readStringToken(m, 0)
            const soundInfo = {
                channelCount: 0,
                sampleRate: toInt(SAMPLE_RATE),
                bitDepth: 32,
                encodingFormat: '',
                endianness: '',
                extraOptions: '',
            }
            const operation = {
                arrayNames: [],
                resize: false,
                maxSize: -1,
                skip: 0,
                framesToWrite: 0,
                url: '',
                soundInfo,
            }
            let unhandledOptions = parseSoundFileOpenOpts(
                m,
                soundInfo,
            )
            
            // Remove the operation type
            unhandledOptions.delete(0)
            
            let i = 1
            let str = ""
            while (i < msg_getLength(m)) {
                if (!unhandledOptions.has(i)) {

                } else if (msg_isStringToken(m, i)) {
                    str = msg_readStringToken(m, i)
                    if (str === '-resize') {
                        unhandledOptions.delete(i)
                        operation.resize = true

                    } else if (str === '-maxsize' || str === '-nframes') {
                        unhandledOptions.delete(i)
                        if (
                            i + 1 >= msg_getLength(m) 
                            || !msg_isFloatToken(m, i + 1)
                        ) {
                            console.log("invalid value for -maxsize")
                        }
                        operation.maxSize = msg_readFloatToken(m, i + 1)
                        unhandledOptions.delete(i + 1)
                        i++

                    } else if (str === '-skip') {
                        unhandledOptions.delete(i)
                        if (
                            i + 1 >= msg_getLength(m) 
                            || !msg_isFloatToken(m, i + 1)
                        ) {
                            console.log("invalid value for -skip")
                        }
                        operation.skip = msg_readFloatToken(m, i + 1)
                        unhandledOptions.delete(i + 1)
                        i++

                    } else if (str === '-normalize') {
                        unhandledOptions.delete(i)
                        console.log('-normalize not implemented')
                    }
                }
                i++
            }

            i = 1
            let urlFound = false
            while (i < msg_getLength(m)) {
                if (!unhandledOptions.has(i)) {

                } else if (msg_isStringToken(m, i)) {
                    str = msg_readStringToken(m, i)
                    if (!str.startsWith('-') && urlFound === false) {
                        operation.url = str
                        urlFound = true
                    } else {
                        operation.arrayNames.push(str)
                    }
                    unhandledOptions.delete(i)
                }
                i++
            }

            for (i = 0; i < operation.arrayNames.length; i++) {
                if (!commons_hasArray(operation.arrayNames[i])) {
                    console.log('[soundfiler] unknown array ' + operation.arrayNames[i])
                    return
                }
            }

            if (unhandledOptions.size) {
                console.log("soundfiler received invalid options")
            }

            soundInfo.channelCount = operation.arrayNames.length

            if (operationType === 'read') {
                const id = fs_readSoundFile(
                    operation.url, 
                    soundInfo,
                    function (id, status, sound) {
                        const operation = n_1_68_STATE.operations.get(id)
                        n_1_68_STATE.operations.delete(id)
                        let i = 0
                        let maxFramesRead = 0
                        let framesToRead = 0
                        let array = createFloatArray(0)
                        for (i = 0; i < sound.length; i++) {
                            if (operation.resize) {
                                if (operation.maxSize > 0) {
                                    framesToRead = Math.min(
                                        operation.maxSize, 
                                        toFloat(sound[i].length) - operation.skip
                                    )
    
                                } else {
                                    framesToRead = toFloat(sound[i].length) - operation.skip
                                }
    
                                commons_setArray(
                                    operation.arrayNames[i], 
                                    sound[i].subarray(
                                        toInt(operation.skip), 
                                        toInt(operation.skip + framesToRead)
                                    )
                                )
                                
                            } else {
                                array = commons_getArray(operation.arrayNames[i])
                                framesToRead = Math.min(
                                    toFloat(array.length),
                                    toFloat(sound[i].length) - operation.skip
                                )
                                array.set(sound[i].subarray(0, array.length))
                            }
                            maxFramesRead = Math.max(
                                maxFramesRead,
                                framesToRead
                            )
                        }
    
                        SND_TO_NULL(n_soundfiler_buildMessage1(operation.soundInfo))
                        n_1_69_RCVS_0(msg_floats([maxFramesRead]))
                    }
                )

                n_1_68_STATE.operations.set(id, operation)

            } else if (operationType === 'write') {
                let i = 0
                let framesToWrite = 0
                let array = createFloatArray(0)
                const sound = []
                
                for (i = 0; i < operation.arrayNames.length; i++) {
                    framesToWrite = Math.max(
                        framesToWrite,
                        toFloat(commons_getArray(operation.arrayNames[i]).length) - operation.skip,
                    )
                }

                if (operation.maxSize >= 0) {
                    framesToWrite = Math.min(
                        operation.maxSize, 
                        framesToWrite
                    )
                }
                operation.framesToWrite = framesToWrite

                if (framesToWrite < 1) {
                    console.log('[soundfiler] no frames to write')
                    return
                }

                for (i = 0; i < operation.arrayNames.length; i++) {
                    array = commons_getArray(operation.arrayNames[i])
                    if (framesToWrite > toFloat(array.length) - operation.skip) {
                        sound.push(createFloatArray(toInt(framesToWrite)))
                        sound[i].set(array.subarray(
                            toInt(operation.skip), 
                            toInt(operation.skip + framesToWrite)
                        ))
                    } else {
                        sound.push(array.subarray(
                            toInt(operation.skip), 
                            toInt(operation.skip + framesToWrite)
                        ))
                    }
                }

                function callback(id, status) {
                    const operation = n_1_68_STATE.operations.get(id)
                    n_1_68_STATE.operations.delete(id)
                    SND_TO_NULL(n_soundfiler_buildMessage1(operation.soundInfo))
                    n_1_69_RCVS_0(msg_floats([operation.framesToWrite]))
                }

                const id = fs_writeSoundFile(
                    sound, 
                    operation.url, 
                    soundInfo, 
                    callback
                )

                n_1_68_STATE.operations.set(id, operation)
            }

            return
        }
    
                                throw new Error('[soundfiler], id "n_1_68", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_69_RCVS_0(m) {
                                
                if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                    n_div_setLeft(n_1_69_STATE, msg_readFloatToken(m, 0))
                    n_1_70_RCVS_0(msg_floats([n_1_69_STATE.rightOp !== 0 ? n_1_69_STATE.leftOp / n_1_69_STATE.rightOp: 0]))
                    return
                
                } else if (msg_isBang(m)) {
                    n_1_70_RCVS_0(msg_floats([n_1_69_STATE.rightOp !== 0 ? n_1_69_STATE.leftOp / n_1_69_STATE.rightOp: 0]))
                    return
                }
            
                                throw new Error('[/], id "n_1_69", inlet "0", unsupported message : ' + msg_display(m))
                            }
function n_1_69_RCVS_1(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_div_setRight(n_1_69_STATE, msg_readFloatToken(m, 0))
            return
        }
    
                                throw new Error('[/], id "n_1_69", inlet "1", unsupported message : ' + msg_display(m))
                            }

function n_1_70_RCVS_0(m) {
                                
                if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                    n_mul_setLeft(n_1_70_STATE, msg_readFloatToken(m, 0))
                    n_1_71_RCVS_0(msg_floats([n_1_70_STATE.leftOp * n_1_70_STATE.rightOp]))
                    return
                
                } else if (msg_isBang(m)) {
                    n_1_71_RCVS_0(msg_floats([n_1_70_STATE.leftOp * n_1_70_STATE.rightOp]))
                    return
                }
            
                                throw new Error('[*], id "n_1_70", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_71_RCVS_0(m) {
                                
                n_floatatom_receiveMessage(n_1_71_STATE, m)
                return
            
                                throw new Error('[floatatom], id "n_1_71", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_72_RCVS_0(m) {
                                
            msgBusPublish(n_1_72_STATE.busName, m)
            return
        
                                throw new Error('[send], id "n_1_72", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_127_RCVS_0(m) {
                                
        n_1_132_RCVS_0(msg_bang())
SND_TO_NULL(msg_floats([messageTokenToFloat(m, 0)]))
        return
    
                                throw new Error('[trigger], id "n_1_127", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_132_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_1_132_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_1_132_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_1_132_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_1_132_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_1_132_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_1_132_STATE.outMessages[0] = message
                n_1_132_STATE.messageTransferFunctions.splice(0, n_1_132_STATE.messageTransferFunctions.length - 1)
                n_1_132_STATE.messageTransferFunctions[0] = function (m) {
                    return n_1_132_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_1_132_STATE.messageTransferFunctions.length; i++) {
                    SND_TO_NULL(n_1_132_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_1_132", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_7_RCVS_0(m) {
                                
        if (msg_isBang(m)) { 
            n_1_7_SNDS_0(msg_floats([SAMPLE_RATE])) 
            return
        }
    
                                throw new Error('[samplerate~], id "n_1_7", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_10_RCVS_0(m) {
                                
                if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                    n_div_setLeft(n_1_10_STATE, msg_readFloatToken(m, 0))
                    n_1_11_RCVS_0(msg_floats([n_1_10_STATE.rightOp !== 0 ? n_1_10_STATE.leftOp / n_1_10_STATE.rightOp: 0]))
                    return
                
                } else if (msg_isBang(m)) {
                    n_1_11_RCVS_0(msg_floats([n_1_10_STATE.rightOp !== 0 ? n_1_10_STATE.leftOp / n_1_10_STATE.rightOp: 0]))
                    return
                }
            
                                throw new Error('[/], id "n_1_10", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_11_RCVS_0(m) {
                                
            msgBusPublish(n_1_11_STATE.busName, m)
            return
        
                                throw new Error('[send], id "n_1_11", inlet "0", unsupported message : ' + msg_display(m))
                            }





function n_1_138_RCVS_0(m) {
                                
            if (msg_getLength(m) === 1) {
                if (msg_isStringToken(m, 0)) {
                    const action = msg_readStringToken(m, 0)
                    if (action === 'bang' || action === 'start') {
                        n_delay_scheduleDelay(
                            n_1_138_STATE, 
                            () => n_1_140_RCVS_0(msg_bang()),
                            FRAME,
                        )
                        return
                    } else if (action === 'stop') {
                        n_delay_stop(n_1_138_STATE)
                        return
                    }
                    
                } else if (msg_isFloatToken(m, 0)) {
                    n_delay_setDelay(n_1_138_STATE, msg_readFloatToken(m, 0))
                    n_delay_scheduleDelay(
                        n_1_138_STATE,
                        () => n_1_140_RCVS_0(msg_bang()),
                        FRAME,
                    )
                    return 
                }
            
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN, MSG_STRING_TOKEN])
                && msg_readStringToken(m, 0) === 'tempo'
            ) {
                n_1_138_STATE.sampleRatio = computeUnitInSamples(
                    SAMPLE_RATE, 
                    msg_readFloatToken(m, 1), 
                    msg_readStringToken(m, 2)
                )
                return
            }
        
                                throw new Error('[delay], id "n_1_138", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_140_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_1_140_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_1_140_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_1_140_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_1_140_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_1_140_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_1_140_STATE.outMessages[0] = message
                n_1_140_STATE.messageTransferFunctions.splice(0, n_1_140_STATE.messageTransferFunctions.length - 1)
                n_1_140_STATE.messageTransferFunctions[0] = function (m) {
                    return n_1_140_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_1_140_STATE.messageTransferFunctions.length; i++) {
                    n_1_142_RCVS_0(n_1_140_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_1_140", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_142_RCVS_0(m) {
                                
                if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                    n_add_setLeft(n_1_142_STATE, msg_readFloatToken(m, 0))
                    n_1_141_RCVS_0(msg_floats([n_1_142_STATE.leftOp + n_1_142_STATE.rightOp]))
                    return
                
                } else if (msg_isBang(m)) {
                    n_1_141_RCVS_0(msg_floats([n_1_142_STATE.leftOp + n_1_142_STATE.rightOp]))
                    return
                }
            
                                throw new Error('[+], id "n_1_142", inlet "0", unsupported message : ' + msg_display(m))
                            }
function n_1_142_RCVS_1(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_add_setRight(n_1_142_STATE, msg_readFloatToken(m, 0))
            return
        }
    
                                throw new Error('[+], id "n_1_142", inlet "1", unsupported message : ' + msg_display(m))
                            }

function n_1_141_RCVS_0(m) {
                                
                n_floatatom_receiveMessage(n_1_141_STATE, m)
                return
            
                                throw new Error('[floatatom], id "n_1_141", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_143_RCVS_0(m) {
                                
                if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                    n_modlegacy_setLeft(n_1_143_STATE, msg_readFloatToken(m, 0))
                    n_1_144_RCVS_0(msg_floats([n_1_143_STATE.leftOp % n_1_143_STATE.rightOp]))
                    return
                
                } else if (msg_isBang(m)) {
                    n_1_144_RCVS_0(msg_floats([n_1_143_STATE.leftOp % n_1_143_STATE.rightOp]))
                    return
                }
            
                                throw new Error('[%], id "n_1_143", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_144_RCVS_0(m) {
                                
                n_floatatom_receiveMessage(n_1_144_STATE, m)
                return
            
                                throw new Error('[floatatom], id "n_1_144", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_145_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                n_float_int_setValueInt(n_1_145_STATE, msg_readFloatToken(m, 0))
                n_1_147_RCVS_0(msg_floats([n_1_145_STATE.value]))
                return 

            } else if (msg_isBang(m)) {
                n_1_147_RCVS_0(msg_floats([n_1_145_STATE.value]))
                return
                
            }
        
                                throw new Error('[int], id "n_1_145", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_147_RCVS_0(m) {
                                
        SND_TO_NULL(msg_floats([messageTokenToFloat(m, 0)]))
n_1_163_RCVS_0(msg_floats([messageTokenToFloat(m, 0)]))
n_69_10_RCVS_0(msg_bang())
        return
    
                                throw new Error('[trigger], id "n_1_147", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_69_10_RCVS_0(m) {
                                
                if (n_69_10_STATE.filterType === MSG_STRING_TOKEN) {
                    if (
                        (n_69_10_STATE.stringFilter === 'float'
                            && msg_isFloatToken(m, 0))
                        || (n_69_10_STATE.stringFilter === 'symbol'
                            && msg_isStringToken(m, 0))
                        || (n_69_10_STATE.stringFilter === 'list'
                            && msg_getLength(m) > 1)
                        || (n_69_10_STATE.stringFilter === 'bang' 
                            && msg_isBang(m))
                    ) {
                        n_69_11_RCVS_0(m)
                        return
                    
                    } else if (
                        msg_isStringToken(m, 0)
                        && msg_readStringToken(m, 0) === n_69_10_STATE.stringFilter
                    ) {
                        n_69_11_RCVS_0(msg_emptyToBang(msg_shift(m)))
                        return
                    }

                } else if (
                    msg_isFloatToken(m, 0)
                    && msg_readFloatToken(m, 0) === n_69_10_STATE.floatFilter
                ) {
                    n_69_11_RCVS_0(msg_emptyToBang(msg_shift(m)))
                    return
                }
            
                n_69_5_RCVS_0(m)
            return
            
                                throw new Error('[route], id "n_69_10", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_69_11_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_69_11_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_69_11_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_69_11_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_69_11_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_69_11_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_69_11_STATE.outMessages[0] = message
                n_69_11_STATE.messageTransferFunctions.splice(0, n_69_11_STATE.messageTransferFunctions.length - 1)
                n_69_11_STATE.messageTransferFunctions[0] = function (m) {
                    return n_69_11_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_69_11_STATE.messageTransferFunctions.length; i++) {
                    n_69_5_RCVS_0(n_69_11_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_69_11", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_69_5_RCVS_0(m) {
                                
        if (msg_isBang(m)) {
            n_1_164_RCVS_0(msg_floats([Math.floor(Math.random() * n_69_5_STATE.maxValue)]))
            return
        } else if (
            msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
            && msg_readStringToken(m, 0) === 'seed'
        ) {
            console.log('WARNING : seed not implemented yet for [random]')
            return
        }
    
                                throw new Error('[random], id "n_69_5", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_164_RCVS_0(m) {
                                
        n_1_161_RCVS_1(msg_floats([messageTokenToFloat(m, 0)]))
n_1_169_RCVS_0(msg_floats([messageTokenToFloat(m, 0)]))
n_1_165_RCVS_0(msg_floats([messageTokenToFloat(m, 0)]))
n_1_153_RCVS_0(msg_floats([messageTokenToFloat(m, 0)]))
n_1_150_RCVS_0(msg_floats([messageTokenToFloat(m, 0)]))
        return
    
                                throw new Error('[trigger], id "n_1_164", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_150_RCVS_0(m) {
                                
                if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                    n_eq_setLeft(n_1_150_STATE, msg_readFloatToken(m, 0))
                    n_1_156_RCVS_0(msg_floats([n_1_150_STATE.leftOp == n_1_150_STATE.rightOp ? 1: 0]))
                    return
                
                } else if (msg_isBang(m)) {
                    n_1_156_RCVS_0(msg_floats([n_1_150_STATE.leftOp == n_1_150_STATE.rightOp ? 1: 0]))
                    return
                }
            
                                throw new Error('[==], id "n_1_150", inlet "0", unsupported message : ' + msg_display(m))
                            }
function n_1_150_RCVS_1(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_eq_setRight(n_1_150_STATE, msg_readFloatToken(m, 0))
            return
        }
    
                                throw new Error('[==], id "n_1_150", inlet "1", unsupported message : ' + msg_display(m))
                            }

function n_1_156_RCVS_0(m) {
                                
                if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                    n_add_setLeft(n_1_156_STATE, msg_readFloatToken(m, 0))
                    n_1_176_RCVS_0(msg_floats([n_1_156_STATE.leftOp + n_1_156_STATE.rightOp]))
                    return
                
                } else if (msg_isBang(m)) {
                    n_1_176_RCVS_0(msg_floats([n_1_156_STATE.leftOp + n_1_156_STATE.rightOp]))
                    return
                }
            
                                throw new Error('[+], id "n_1_156", inlet "0", unsupported message : ' + msg_display(m))
                            }
function n_1_156_RCVS_1(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_add_setRight(n_1_156_STATE, msg_readFloatToken(m, 0))
            return
        }
    
                                throw new Error('[+], id "n_1_156", inlet "1", unsupported message : ' + msg_display(m))
                            }

function n_1_176_RCVS_0(m) {
                                
                if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                    n_add_setLeft(n_1_176_STATE, msg_readFloatToken(m, 0))
                    n_1_176_SNDS_0(msg_floats([n_1_176_STATE.leftOp + n_1_176_STATE.rightOp]))
                    return
                
                } else if (msg_isBang(m)) {
                    n_1_176_SNDS_0(msg_floats([n_1_176_STATE.leftOp + n_1_176_STATE.rightOp]))
                    return
                }
            
                                throw new Error('[+], id "n_1_176", inlet "0", unsupported message : ' + msg_display(m))
                            }
function n_1_176_RCVS_1(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_add_setRight(n_1_176_STATE, msg_readFloatToken(m, 0))
            return
        }
    
                                throw new Error('[+], id "n_1_176", inlet "1", unsupported message : ' + msg_display(m))
                            }

function n_1_157_RCVS_0(m) {
                                
                if (n_1_157_STATE.filterType === MSG_STRING_TOKEN) {
                    if (
                        (n_1_157_STATE.stringFilter === 'float'
                            && msg_isFloatToken(m, 0))
                        || (n_1_157_STATE.stringFilter === 'symbol'
                            && msg_isStringToken(m, 0))
                        || (n_1_157_STATE.stringFilter === 'list'
                            && msg_getLength(m) > 1)
                        || (n_1_157_STATE.stringFilter === 'bang' 
                            && msg_isBang(m))
                    ) {
                        n_1_158_RCVS_0(m)
                        return
                    
                    } else if (
                        msg_isStringToken(m, 0)
                        && msg_readStringToken(m, 0) === n_1_157_STATE.stringFilter
                    ) {
                        n_1_158_RCVS_0(msg_emptyToBang(msg_shift(m)))
                        return
                    }

                } else if (
                    msg_isFloatToken(m, 0)
                    && msg_readFloatToken(m, 0) === n_1_157_STATE.floatFilter
                ) {
                    n_1_158_RCVS_0(msg_emptyToBang(msg_shift(m)))
                    return
                }
            
                n_1_159_RCVS_0(m)
            return
            
                                throw new Error('[route], id "n_1_157", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_158_RCVS_0(m) {
                                
            n_bang_receiveMessage(n_1_158_STATE, m)
            return
        
                                throw new Error('[bang], id "n_1_158", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_161_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                n_float_int_setValueFloat(n_1_161_STATE, msg_readFloatToken(m, 0))
                n_1_162_RCVS_0(msg_floats([n_1_161_STATE.value]))
                return 

            } else if (msg_isBang(m)) {
                n_1_162_RCVS_0(msg_floats([n_1_161_STATE.value]))
                return
                
            }
        
                                throw new Error('[float], id "n_1_161", inlet "0", unsupported message : ' + msg_display(m))
                            }
function n_1_161_RCVS_1(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_float_int_setValueFloat(n_1_161_STATE, msg_readFloatToken(m, 0))
            return
        }
    
                                throw new Error('[float], id "n_1_161", inlet "1", unsupported message : ' + msg_display(m))
                            }

function n_1_162_RCVS_0(m) {
                                
            msgBusPublish(n_1_162_STATE.busName, m)
            return
        
                                throw new Error('[send], id "n_1_162", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_159_RCVS_0(m) {
                                
            n_bang_receiveMessage(n_1_159_STATE, m)
            return
        
                                throw new Error('[bang], id "n_1_159", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_160_RCVS_0(m) {
                                
            msgBusPublish(n_1_160_STATE.busName, m)
            return
        
                                throw new Error('[send], id "n_1_160", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_178_RCVS_0(m) {
                                
                n_floatatom_receiveMessage(n_1_178_STATE, m)
                return
            
                                throw new Error('[floatatom], id "n_1_178", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_153_RCVS_0(m) {
                                
                if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                    n_eq_setLeft(n_1_153_STATE, msg_readFloatToken(m, 0))
                    n_1_156_RCVS_1(msg_floats([n_1_153_STATE.leftOp == n_1_153_STATE.rightOp ? 1: 0]))
                    return
                
                } else if (msg_isBang(m)) {
                    n_1_156_RCVS_1(msg_floats([n_1_153_STATE.leftOp == n_1_153_STATE.rightOp ? 1: 0]))
                    return
                }
            
                                throw new Error('[==], id "n_1_153", inlet "0", unsupported message : ' + msg_display(m))
                            }
function n_1_153_RCVS_1(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_eq_setRight(n_1_153_STATE, msg_readFloatToken(m, 0))
            return
        }
    
                                throw new Error('[==], id "n_1_153", inlet "1", unsupported message : ' + msg_display(m))
                            }

function n_1_165_RCVS_0(m) {
                                
                if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                    n_eq_setLeft(n_1_165_STATE, msg_readFloatToken(m, 0))
                    n_1_173_RCVS_0(msg_floats([n_1_165_STATE.leftOp == n_1_165_STATE.rightOp ? 1: 0]))
                    return
                
                } else if (msg_isBang(m)) {
                    n_1_173_RCVS_0(msg_floats([n_1_165_STATE.leftOp == n_1_165_STATE.rightOp ? 1: 0]))
                    return
                }
            
                                throw new Error('[==], id "n_1_165", inlet "0", unsupported message : ' + msg_display(m))
                            }
function n_1_165_RCVS_1(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_eq_setRight(n_1_165_STATE, msg_readFloatToken(m, 0))
            return
        }
    
                                throw new Error('[==], id "n_1_165", inlet "1", unsupported message : ' + msg_display(m))
                            }

function n_1_173_RCVS_0(m) {
                                
                if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                    n_add_setLeft(n_1_173_STATE, msg_readFloatToken(m, 0))
                    n_1_173_SNDS_0(msg_floats([n_1_173_STATE.leftOp + n_1_173_STATE.rightOp]))
                    return
                
                } else if (msg_isBang(m)) {
                    n_1_173_SNDS_0(msg_floats([n_1_173_STATE.leftOp + n_1_173_STATE.rightOp]))
                    return
                }
            
                                throw new Error('[+], id "n_1_173", inlet "0", unsupported message : ' + msg_display(m))
                            }
function n_1_173_RCVS_1(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_add_setRight(n_1_173_STATE, msg_readFloatToken(m, 0))
            return
        }
    
                                throw new Error('[+], id "n_1_173", inlet "1", unsupported message : ' + msg_display(m))
                            }

function n_1_177_RCVS_0(m) {
                                
                n_floatatom_receiveMessage(n_1_177_STATE, m)
                return
            
                                throw new Error('[floatatom], id "n_1_177", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_169_RCVS_0(m) {
                                
                if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                    n_eq_setLeft(n_1_169_STATE, msg_readFloatToken(m, 0))
                    n_1_173_RCVS_1(msg_floats([n_1_169_STATE.leftOp == n_1_169_STATE.rightOp ? 1: 0]))
                    return
                
                } else if (msg_isBang(m)) {
                    n_1_173_RCVS_1(msg_floats([n_1_169_STATE.leftOp == n_1_169_STATE.rightOp ? 1: 0]))
                    return
                }
            
                                throw new Error('[==], id "n_1_169", inlet "0", unsupported message : ' + msg_display(m))
                            }
function n_1_169_RCVS_1(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_eq_setRight(n_1_169_STATE, msg_readFloatToken(m, 0))
            return
        }
    
                                throw new Error('[==], id "n_1_169", inlet "1", unsupported message : ' + msg_display(m))
                            }

function n_1_163_RCVS_0(m) {
                                
        n_1_172_RCVS_0(msg_floats([messageTokenToFloat(m, 0)]))
n_1_166_RCVS_0(msg_floats([messageTokenToFloat(m, 0)]))
n_1_174_RCVS_0(msg_floats([messageTokenToFloat(m, 0)]))
n_1_175_RCVS_0(msg_floats([messageTokenToFloat(m, 0)]))
        return
    
                                throw new Error('[trigger], id "n_1_163", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_175_RCVS_0(m) {
                                
                if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                    n_sub_setLeft(n_1_175_STATE, msg_readFloatToken(m, 0))
                    SND_TO_NULL(msg_floats([n_1_175_STATE.leftOp - n_1_175_STATE.rightOp]))
                    return
                
                } else if (msg_isBang(m)) {
                    SND_TO_NULL(msg_floats([n_1_175_STATE.leftOp - n_1_175_STATE.rightOp]))
                    return
                }
            
                                throw new Error('[-], id "n_1_175", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_174_RCVS_0(m) {
                                
                if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                    n_sub_setLeft(n_1_174_STATE, msg_readFloatToken(m, 0))
                    SND_TO_NULL(msg_floats([n_1_174_STATE.leftOp - n_1_174_STATE.rightOp]))
                    return
                
                } else if (msg_isBang(m)) {
                    SND_TO_NULL(msg_floats([n_1_174_STATE.leftOp - n_1_174_STATE.rightOp]))
                    return
                }
            
                                throw new Error('[-], id "n_1_174", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_166_RCVS_0(m) {
                                
                if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                    n_sub_setLeft(n_1_166_STATE, msg_readFloatToken(m, 0))
                    SND_TO_NULL(msg_floats([n_1_166_STATE.leftOp - n_1_166_STATE.rightOp]))
                    return
                
                } else if (msg_isBang(m)) {
                    SND_TO_NULL(msg_floats([n_1_166_STATE.leftOp - n_1_166_STATE.rightOp]))
                    return
                }
            
                                throw new Error('[-], id "n_1_166", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_172_RCVS_0(m) {
                                
                if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                    n_sub_setLeft(n_1_172_STATE, msg_readFloatToken(m, 0))
                    SND_TO_NULL(msg_floats([n_1_172_STATE.leftOp - n_1_172_STATE.rightOp]))
                    return
                
                } else if (msg_isBang(m)) {
                    SND_TO_NULL(msg_floats([n_1_172_STATE.leftOp - n_1_172_STATE.rightOp]))
                    return
                }
            
                                throw new Error('[-], id "n_1_172", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_1_135_RCVS_0(m) {
                                
            n_bang_receiveMessage(n_1_135_STATE, m)
            return
        
                                throw new Error('[bang], id "n_1_135", inlet "0", unsupported message : ' + msg_display(m))
                            }



function n_28_17_RCVS_0(m) {
                                
        if (msg_isBang(m)) {
            n_28_1_RCVS_0(msg_floats([Math.floor(Math.random() * n_28_17_STATE.maxValue)]))
            return
        } else if (
            msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
            && msg_readStringToken(m, 0) === 'seed'
        ) {
            console.log('WARNING : seed not implemented yet for [random]')
            return
        }
    
                                throw new Error('[random], id "n_28_17", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_28_1_RCVS_0(m) {
                                
                n_floatatom_receiveMessage(n_28_1_STATE, m)
                return
            
                                throw new Error('[floatatom], id "n_28_1", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_28_7_RCVS_0(m) {
                                
                
                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 0
                        ) {
                            n_28_7_SNDS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 1
                        ) {
                            n_28_7_SNDS_1(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 4
                        ) {
                            n_28_7_SNDS_2(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                n_28_11_RCVS_0(m)
                return
            
                                throw new Error('[route], id "n_28_7", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_28_2_RCVS_0(m) {
                                
            n_bang_receiveMessage(n_28_2_STATE, m)
            return
        
                                throw new Error('[bang], id "n_28_2", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_28_16_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_28_16_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_28_16_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_28_16_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_28_16_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_28_16_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_28_16_STATE.outMessages[0] = message
                n_28_16_STATE.messageTransferFunctions.splice(0, n_28_16_STATE.messageTransferFunctions.length - 1)
                n_28_16_STATE.messageTransferFunctions[0] = function (m) {
                    return n_28_16_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_28_16_STATE.messageTransferFunctions.length; i++) {
                    n_28_15_RCVS_1(n_28_16_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_28_16", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_28_15_RCVS_0(m) {
                                
                if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                    n_add_setLeft(n_28_15_STATE, msg_readFloatToken(m, 0))
                    n_28_12_RCVS_0(msg_floats([n_28_15_STATE.leftOp + n_28_15_STATE.rightOp]))
                    return
                
                } else if (msg_isBang(m)) {
                    n_28_12_RCVS_0(msg_floats([n_28_15_STATE.leftOp + n_28_15_STATE.rightOp]))
                    return
                }
            
                                throw new Error('[+], id "n_28_15", inlet "0", unsupported message : ' + msg_display(m))
                            }
function n_28_15_RCVS_1(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_add_setRight(n_28_15_STATE, msg_readFloatToken(m, 0))
            return
        }
    
                                throw new Error('[+], id "n_28_15", inlet "1", unsupported message : ' + msg_display(m))
                            }

function n_28_12_RCVS_0(m) {
                                
                n_floatatom_receiveMessage(n_28_12_STATE, m)
                return
            
                                throw new Error('[floatatom], id "n_28_12", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_28_18_RCVS_0(m) {
                                
                if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                    n_modlegacy_setLeft(n_28_18_STATE, msg_readFloatToken(m, 0))
                    n_28_13_RCVS_0(msg_floats([n_28_18_STATE.leftOp % n_28_18_STATE.rightOp]))
                    return
                
                } else if (msg_isBang(m)) {
                    n_28_13_RCVS_0(msg_floats([n_28_18_STATE.leftOp % n_28_18_STATE.rightOp]))
                    return
                }
            
                                throw new Error('[%], id "n_28_18", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_28_13_RCVS_0(m) {
                                
                n_floatatom_receiveMessage(n_28_13_STATE, m)
                return
            
                                throw new Error('[floatatom], id "n_28_13", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_28_14_RCVS_0(m) {
                                
                if (n_28_14_STATE.filterType === MSG_STRING_TOKEN) {
                    if (
                        (n_28_14_STATE.stringFilter === 'float'
                            && msg_isFloatToken(m, 0))
                        || (n_28_14_STATE.stringFilter === 'symbol'
                            && msg_isStringToken(m, 0))
                        || (n_28_14_STATE.stringFilter === 'list'
                            && msg_getLength(m) > 1)
                        || (n_28_14_STATE.stringFilter === 'bang' 
                            && msg_isBang(m))
                    ) {
                        n_28_2_RCVS_0(m)
                        return
                    
                    } else if (
                        msg_isStringToken(m, 0)
                        && msg_readStringToken(m, 0) === n_28_14_STATE.stringFilter
                    ) {
                        n_28_2_RCVS_0(msg_emptyToBang(msg_shift(m)))
                        return
                    }

                } else if (
                    msg_isFloatToken(m, 0)
                    && msg_readFloatToken(m, 0) === n_28_14_STATE.floatFilter
                ) {
                    n_28_2_RCVS_0(msg_emptyToBang(msg_shift(m)))
                    return
                }
            
                SND_TO_NULL(m)
            return
            
                                throw new Error('[route], id "n_28_14", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_28_9_RCVS_0(m) {
                                
        if (msg_isBang(m)) {
            n_28_10_RCVS_0(msg_floats([Math.floor(Math.random() * n_28_9_STATE.maxValue)]))
            return
        } else if (
            msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
            && msg_readStringToken(m, 0) === 'seed'
        ) {
            console.log('WARNING : seed not implemented yet for [random]')
            return
        }
    
                                throw new Error('[random], id "n_28_9", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_28_10_RCVS_0(m) {
                                
                if (n_28_10_STATE.filterType === MSG_STRING_TOKEN) {
                    if (
                        (n_28_10_STATE.stringFilter === 'float'
                            && msg_isFloatToken(m, 0))
                        || (n_28_10_STATE.stringFilter === 'symbol'
                            && msg_isStringToken(m, 0))
                        || (n_28_10_STATE.stringFilter === 'list'
                            && msg_getLength(m) > 1)
                        || (n_28_10_STATE.stringFilter === 'bang' 
                            && msg_isBang(m))
                    ) {
                        n_28_6_RCVS_0(m)
                        return
                    
                    } else if (
                        msg_isStringToken(m, 0)
                        && msg_readStringToken(m, 0) === n_28_10_STATE.stringFilter
                    ) {
                        n_28_6_RCVS_0(msg_emptyToBang(msg_shift(m)))
                        return
                    }

                } else if (
                    msg_isFloatToken(m, 0)
                    && msg_readFloatToken(m, 0) === n_28_10_STATE.floatFilter
                ) {
                    n_28_6_RCVS_0(msg_emptyToBang(msg_shift(m)))
                    return
                }
            
                SND_TO_NULL(m)
            return
            
                                throw new Error('[route], id "n_28_10", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_28_6_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_28_6_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_28_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_28_6_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_28_6_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_28_6_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_28_6_STATE.outMessages[0] = message
                n_28_6_STATE.messageTransferFunctions.splice(0, n_28_6_STATE.messageTransferFunctions.length - 1)
                n_28_6_STATE.messageTransferFunctions[0] = function (m) {
                    return n_28_6_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_28_6_STATE.messageTransferFunctions.length; i++) {
                    n_28_3_RCVS_0(n_28_6_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_28_6", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_28_3_RCVS_0(m) {
                                
        if (msg_isBang(m)) {
            n_28_3_STATE.continueIter = true
            while (n_28_3_STATE.continueIter) {
                n_28_3_SNDS_0(msg_bang())
            }
            return

        } else if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_28_3_STATE.continueIter = true
            let maxIterCount = toInt(msg_readFloatToken(m, 0))
            let iterCount = 0
            while (n_28_3_STATE.continueIter && iterCount++ < maxIterCount) {
                n_28_3_SNDS_0(msg_bang())
            }
            return
        }
    
                                throw new Error('[until], id "n_28_3", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_28_8_RCVS_0(m) {
                                
            if (msg_getLength(m) === 1) {
                if (msg_isStringToken(m, 0)) {
                    const action = msg_readStringToken(m, 0)
                    if (action === 'bang' || action === 'start') {
                        n_delay_scheduleDelay(
                            n_28_8_STATE, 
                            () => n_28_2_RCVS_0(msg_bang()),
                            FRAME,
                        )
                        return
                    } else if (action === 'stop') {
                        n_delay_stop(n_28_8_STATE)
                        return
                    }
                    
                } else if (msg_isFloatToken(m, 0)) {
                    n_delay_setDelay(n_28_8_STATE, msg_readFloatToken(m, 0))
                    n_delay_scheduleDelay(
                        n_28_8_STATE,
                        () => n_28_2_RCVS_0(msg_bang()),
                        FRAME,
                    )
                    return 
                }
            
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN, MSG_STRING_TOKEN])
                && msg_readStringToken(m, 0) === 'tempo'
            ) {
                n_28_8_STATE.sampleRatio = computeUnitInSamples(
                    SAMPLE_RATE, 
                    msg_readFloatToken(m, 1), 
                    msg_readStringToken(m, 2)
                )
                return
            }
        
                                throw new Error('[delay], id "n_28_8", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_28_11_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_28_11_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_28_11_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_28_11_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_28_11_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_28_11_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_28_11_STATE.outMessages[0] = message
                n_28_11_STATE.messageTransferFunctions.splice(0, n_28_11_STATE.messageTransferFunctions.length - 1)
                n_28_11_STATE.messageTransferFunctions[0] = function (m) {
                    return n_28_11_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_28_11_STATE.messageTransferFunctions.length; i++) {
                    n_28_15_RCVS_0(n_28_11_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_28_11", inlet "0", unsupported message : ' + msg_display(m))
                            }













function n_1_180_RCVS_0(m) {
                                
                n_floatatom_receiveMessage(n_1_180_STATE, m)
                return
            
                                throw new Error('[floatatom], id "n_1_180", inlet "0", unsupported message : ' + msg_display(m))
                            }



function n_1_179_RCVS_0(m) {
                                
                if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                    n_eq_setLeft(n_1_179_STATE, msg_readFloatToken(m, 0))
                    n_1_180_RCVS_0(msg_floats([n_1_179_STATE.leftOp == n_1_179_STATE.rightOp ? 1: 0]))
                    return
                
                } else if (msg_isBang(m)) {
                    n_1_180_RCVS_0(msg_floats([n_1_179_STATE.leftOp == n_1_179_STATE.rightOp ? 1: 0]))
                    return
                }
            
                                throw new Error('[==], id "n_1_179", inlet "0", unsupported message : ' + msg_display(m))
                            }
function n_1_179_RCVS_1(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_eq_setRight(n_1_179_STATE, msg_readFloatToken(m, 0))
            return
        }
    
                                throw new Error('[==], id "n_1_179", inlet "1", unsupported message : ' + msg_display(m))
                            }







function n_69_1_RCVS_0(m) {
                                
        n_69_17_RCVS_0(msg_bang())
n_69_4_RCVS_0(msg_bang())
        return
    
                                throw new Error('[trigger], id "n_69_1", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_69_4_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_69_4_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_69_4_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_69_4_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_69_4_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_69_4_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_69_4_STATE.outMessages[0] = message
                n_69_4_STATE.messageTransferFunctions.splice(0, n_69_4_STATE.messageTransferFunctions.length - 1)
                n_69_4_STATE.messageTransferFunctions[0] = function (m) {
                    return n_69_4_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_69_4_STATE.messageTransferFunctions.length; i++) {
                    SND_TO_NULL(n_69_4_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_69_4", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_69_17_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_69_17_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_69_17_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_69_17_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_69_17_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_69_17_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_69_17_STATE.outMessages[0] = message
                n_69_17_STATE.messageTransferFunctions.splice(0, n_69_17_STATE.messageTransferFunctions.length - 1)
                n_69_17_STATE.messageTransferFunctions[0] = function (m) {
                    return n_69_17_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_69_17_STATE.messageTransferFunctions.length; i++) {
                    n_69_20_RCVS_0(n_69_17_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_69_17", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_69_20_RCVS_0(m) {
                                
            msgBusPublish(n_69_20_STATE.busName, m)
            return
        
                                throw new Error('[send], id "n_69_20", inlet "0", unsupported message : ' + msg_display(m))
                            }





function n_29_3_RCVS_0(m) {
                                
            n_bang_receiveMessage(n_29_3_STATE, m)
            return
        
                                throw new Error('[bang], id "n_29_3", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_34_1_RCVS_0(m) {
                                
        if (msg_isBang(m)) {
            n_34_2_RCVS_0(msg_floats([Math.floor(Math.random() * n_34_1_STATE.maxValue)]))
            return
        } else if (
            msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
            && msg_readStringToken(m, 0) === 'seed'
        ) {
            console.log('WARNING : seed not implemented yet for [random]')
            return
        }
    
                                throw new Error('[random], id "n_34_1", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_34_2_RCVS_0(m) {
                                
                if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                    n_add_setLeft(n_34_2_STATE, msg_readFloatToken(m, 0))
                    n_79_7_RCVS_0(msg_floats([n_34_2_STATE.leftOp + n_34_2_STATE.rightOp]))
                    return
                
                } else if (msg_isBang(m)) {
                    n_79_7_RCVS_0(msg_floats([n_34_2_STATE.leftOp + n_34_2_STATE.rightOp]))
                    return
                }
            
                                throw new Error('[+], id "n_34_2", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_79_7_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                const newValue = msg_readFloatToken(m, 0)
                if (newValue !== n_79_7_STATE.currentValue) {
                    n_79_7_STATE.currentValue = newValue
                    n_79_18_RCVS_0(msg_floats([n_79_7_STATE.currentValue]))
                }
                return
    
            } else if (msg_isBang(m)) {
                n_79_18_RCVS_0(msg_floats([n_79_7_STATE.currentValue]))
                return 
    
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_79_7_STATE.currentValue = msg_readFloatToken(m, 1)
                return
            }
        
                                throw new Error('[change], id "n_79_7", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_79_18_RCVS_0(m) {
                                
        n_79_8_RCVS_0(msg_bang())
n_79_10_RCVS_0(msg_floats([messageTokenToFloat(m, 0)]))
n_79_11_RCVS_0(msg_floats([messageTokenToFloat(m, 0)]))
        return
    
                                throw new Error('[trigger], id "n_79_18", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_79_11_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_79_11_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_79_11_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_79_11_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_79_11_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_79_11_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_79_11_STATE.outMessages[0] = message
                n_79_11_STATE.messageTransferFunctions.splice(0, n_79_11_STATE.messageTransferFunctions.length - 1)
                n_79_11_STATE.messageTransferFunctions[0] = function (m) {
                    return n_79_11_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_79_11_STATE.messageTransferFunctions.length; i++) {
                    n_79_12_RCVS_0(n_79_11_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_79_11", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_79_12_RCVS_0(m) {
                                
        if (
            msg_isMatching(m, [MSG_FLOAT_TOKEN])
            || msg_isMatching(m, [MSG_FLOAT_TOKEN, MSG_FLOAT_TOKEN])
            || msg_isMatching(m, [MSG_FLOAT_TOKEN, MSG_FLOAT_TOKEN, MSG_FLOAT_TOKEN])
        ) {
            n_line_stopCurrentLine(n_79_12_STATE)
            switch (msg_getLength(m)) {
                case 3:
                    n_line_setGrain(n_79_12_STATE, msg_readFloatToken(m, 2))
                case 2:
                    n_line_setNextDuration(n_79_12_STATE, msg_readFloatToken(m, 1))
                case 1:
                    const targetValue = msg_readFloatToken(m, 0)
                    if (n_79_12_STATE.nextDurationSamp === 0) {
                        n_79_12_STATE.currentValue = targetValue
                        m_n_79_5_0__routemsg_RCVS_0(msg_floats([targetValue]))
                    } else {
                        m_n_79_5_0__routemsg_RCVS_0(msg_floats([n_79_12_STATE.currentValue]))
                        n_line_setNewLine(n_79_12_STATE, targetValue)
                        n_line_incrementTime(n_79_12_STATE, n_79_12_STATE.currentLine.dx)
                        n_line_scheduleNextTick(n_79_12_STATE)
                    }
                    
            }
            return

        } else if (msg_isAction(m, 'stop')) {
            n_line_stopCurrentLine(n_79_12_STATE)
            return

        } else if (
            msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
            && msg_readStringToken(m, 0) === 'set'
        ) {
            n_line_stopCurrentLine(n_79_12_STATE)
            n_79_12_STATE.currentValue = msg_readFloatToken(m, 1)
            return
        }
    
                                throw new Error('[line], id "n_79_12", inlet "0", unsupported message : ' + msg_display(m))
                            }

function m_n_79_5_0__routemsg_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                m_n_79_5_0_sig_RCVS_0(m)
                return
            } else {
                SND_TO_NULL(m)
                return
            }
        
                                throw new Error('[_routemsg], id "m_n_79_5_0__routemsg", inlet "0", unsupported message : ' + msg_display(m))
                            }

function m_n_79_5_0_sig_RCVS_0(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            m_n_79_5_0_sig_STATE.currentValue = msg_readFloatToken(m, 0)
            return
        }
    
                                throw new Error('[sig~], id "m_n_79_5_0_sig", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_79_10_RCVS_0(m) {
                                
                if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                    n_add_setLeft(n_79_10_STATE, msg_readFloatToken(m, 0))
                    n_79_13_RCVS_0(msg_floats([n_79_10_STATE.leftOp + n_79_10_STATE.rightOp]))
                    return
                
                } else if (msg_isBang(m)) {
                    n_79_13_RCVS_0(msg_floats([n_79_10_STATE.leftOp + n_79_10_STATE.rightOp]))
                    return
                }
            
                                throw new Error('[+], id "n_79_10", inlet "0", unsupported message : ' + msg_display(m))
                            }
function n_79_10_RCVS_1(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_add_setRight(n_79_10_STATE, msg_readFloatToken(m, 0))
            return
        }
    
                                throw new Error('[+], id "n_79_10", inlet "1", unsupported message : ' + msg_display(m))
                            }

function n_79_13_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_79_13_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_79_13_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_79_13_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_79_13_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_79_13_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_79_13_STATE.outMessages[0] = message
                n_79_13_STATE.messageTransferFunctions.splice(0, n_79_13_STATE.messageTransferFunctions.length - 1)
                n_79_13_STATE.messageTransferFunctions[0] = function (m) {
                    return n_79_13_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_79_13_STATE.messageTransferFunctions.length; i++) {
                    n_79_14_RCVS_0(n_79_13_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_79_13", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_79_14_RCVS_0(m) {
                                
        if (
            msg_isMatching(m, [MSG_FLOAT_TOKEN])
            || msg_isMatching(m, [MSG_FLOAT_TOKEN, MSG_FLOAT_TOKEN])
            || msg_isMatching(m, [MSG_FLOAT_TOKEN, MSG_FLOAT_TOKEN, MSG_FLOAT_TOKEN])
        ) {
            n_line_stopCurrentLine(n_79_14_STATE)
            switch (msg_getLength(m)) {
                case 3:
                    n_line_setGrain(n_79_14_STATE, msg_readFloatToken(m, 2))
                case 2:
                    n_line_setNextDuration(n_79_14_STATE, msg_readFloatToken(m, 1))
                case 1:
                    const targetValue = msg_readFloatToken(m, 0)
                    if (n_79_14_STATE.nextDurationSamp === 0) {
                        n_79_14_STATE.currentValue = targetValue
                        m_n_79_17_0__routemsg_RCVS_0(msg_floats([targetValue]))
                    } else {
                        m_n_79_17_0__routemsg_RCVS_0(msg_floats([n_79_14_STATE.currentValue]))
                        n_line_setNewLine(n_79_14_STATE, targetValue)
                        n_line_incrementTime(n_79_14_STATE, n_79_14_STATE.currentLine.dx)
                        n_line_scheduleNextTick(n_79_14_STATE)
                    }
                    
            }
            return

        } else if (msg_isAction(m, 'stop')) {
            n_line_stopCurrentLine(n_79_14_STATE)
            return

        } else if (
            msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
            && msg_readStringToken(m, 0) === 'set'
        ) {
            n_line_stopCurrentLine(n_79_14_STATE)
            n_79_14_STATE.currentValue = msg_readFloatToken(m, 1)
            return
        }
    
                                throw new Error('[line], id "n_79_14", inlet "0", unsupported message : ' + msg_display(m))
                            }

function m_n_79_17_0__routemsg_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                m_n_79_17_0_sig_RCVS_0(m)
                return
            } else {
                SND_TO_NULL(m)
                return
            }
        
                                throw new Error('[_routemsg], id "m_n_79_17_0__routemsg", inlet "0", unsupported message : ' + msg_display(m))
                            }

function m_n_79_17_0_sig_RCVS_0(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            m_n_79_17_0_sig_STATE.currentValue = msg_readFloatToken(m, 0)
            return
        }
    
                                throw new Error('[sig~], id "m_n_79_17_0_sig", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_79_8_RCVS_0(m) {
                                
        if (msg_isBang(m)) {
            n_79_9_RCVS_0(msg_floats([Math.floor(Math.random() * n_79_8_STATE.maxValue)]))
            return
        } else if (
            msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
            && msg_readStringToken(m, 0) === 'seed'
        ) {
            console.log('WARNING : seed not implemented yet for [random]')
            return
        }
    
                                throw new Error('[random], id "n_79_8", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_79_9_RCVS_0(m) {
                                
                if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                    n_sub_setLeft(n_79_9_STATE, msg_readFloatToken(m, 0))
                    n_79_10_RCVS_1(msg_floats([n_79_9_STATE.leftOp - n_79_9_STATE.rightOp]))
                    return
                
                } else if (msg_isBang(m)) {
                    n_79_10_RCVS_1(msg_floats([n_79_9_STATE.leftOp - n_79_9_STATE.rightOp]))
                    return
                }
            
                                throw new Error('[-], id "n_79_9", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_29_7_RCVS_0(m) {
                                
            n_bang_receiveMessage(n_29_7_STATE, m)
            return
        
                                throw new Error('[bang], id "n_29_7", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_37_1_RCVS_0(m) {
                                
        if (msg_isBang(m)) {
            n_37_2_RCVS_0(msg_floats([Math.floor(Math.random() * n_37_1_STATE.maxValue)]))
            return
        } else if (
            msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
            && msg_readStringToken(m, 0) === 'seed'
        ) {
            console.log('WARNING : seed not implemented yet for [random]')
            return
        }
    
                                throw new Error('[random], id "n_37_1", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_37_2_RCVS_0(m) {
                                
                if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                    n_add_setLeft(n_37_2_STATE, msg_readFloatToken(m, 0))
                    n_82_7_RCVS_0(msg_floats([n_37_2_STATE.leftOp + n_37_2_STATE.rightOp]))
                    return
                
                } else if (msg_isBang(m)) {
                    n_82_7_RCVS_0(msg_floats([n_37_2_STATE.leftOp + n_37_2_STATE.rightOp]))
                    return
                }
            
                                throw new Error('[+], id "n_37_2", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_82_7_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                const newValue = msg_readFloatToken(m, 0)
                if (newValue !== n_82_7_STATE.currentValue) {
                    n_82_7_STATE.currentValue = newValue
                    n_82_18_RCVS_0(msg_floats([n_82_7_STATE.currentValue]))
                }
                return
    
            } else if (msg_isBang(m)) {
                n_82_18_RCVS_0(msg_floats([n_82_7_STATE.currentValue]))
                return 
    
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_82_7_STATE.currentValue = msg_readFloatToken(m, 1)
                return
            }
        
                                throw new Error('[change], id "n_82_7", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_82_18_RCVS_0(m) {
                                
        n_82_8_RCVS_0(msg_bang())
n_82_10_RCVS_0(msg_floats([messageTokenToFloat(m, 0)]))
n_82_11_RCVS_0(msg_floats([messageTokenToFloat(m, 0)]))
        return
    
                                throw new Error('[trigger], id "n_82_18", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_82_11_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_82_11_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_82_11_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_82_11_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_82_11_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_82_11_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_82_11_STATE.outMessages[0] = message
                n_82_11_STATE.messageTransferFunctions.splice(0, n_82_11_STATE.messageTransferFunctions.length - 1)
                n_82_11_STATE.messageTransferFunctions[0] = function (m) {
                    return n_82_11_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_82_11_STATE.messageTransferFunctions.length; i++) {
                    n_82_12_RCVS_0(n_82_11_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_82_11", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_82_12_RCVS_0(m) {
                                
        if (
            msg_isMatching(m, [MSG_FLOAT_TOKEN])
            || msg_isMatching(m, [MSG_FLOAT_TOKEN, MSG_FLOAT_TOKEN])
            || msg_isMatching(m, [MSG_FLOAT_TOKEN, MSG_FLOAT_TOKEN, MSG_FLOAT_TOKEN])
        ) {
            n_line_stopCurrentLine(n_82_12_STATE)
            switch (msg_getLength(m)) {
                case 3:
                    n_line_setGrain(n_82_12_STATE, msg_readFloatToken(m, 2))
                case 2:
                    n_line_setNextDuration(n_82_12_STATE, msg_readFloatToken(m, 1))
                case 1:
                    const targetValue = msg_readFloatToken(m, 0)
                    if (n_82_12_STATE.nextDurationSamp === 0) {
                        n_82_12_STATE.currentValue = targetValue
                        m_n_82_5_0__routemsg_RCVS_0(msg_floats([targetValue]))
                    } else {
                        m_n_82_5_0__routemsg_RCVS_0(msg_floats([n_82_12_STATE.currentValue]))
                        n_line_setNewLine(n_82_12_STATE, targetValue)
                        n_line_incrementTime(n_82_12_STATE, n_82_12_STATE.currentLine.dx)
                        n_line_scheduleNextTick(n_82_12_STATE)
                    }
                    
            }
            return

        } else if (msg_isAction(m, 'stop')) {
            n_line_stopCurrentLine(n_82_12_STATE)
            return

        } else if (
            msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
            && msg_readStringToken(m, 0) === 'set'
        ) {
            n_line_stopCurrentLine(n_82_12_STATE)
            n_82_12_STATE.currentValue = msg_readFloatToken(m, 1)
            return
        }
    
                                throw new Error('[line], id "n_82_12", inlet "0", unsupported message : ' + msg_display(m))
                            }

function m_n_82_5_0__routemsg_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                m_n_82_5_0_sig_RCVS_0(m)
                return
            } else {
                SND_TO_NULL(m)
                return
            }
        
                                throw new Error('[_routemsg], id "m_n_82_5_0__routemsg", inlet "0", unsupported message : ' + msg_display(m))
                            }

function m_n_82_5_0_sig_RCVS_0(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            m_n_82_5_0_sig_STATE.currentValue = msg_readFloatToken(m, 0)
            return
        }
    
                                throw new Error('[sig~], id "m_n_82_5_0_sig", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_82_10_RCVS_0(m) {
                                
                if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                    n_add_setLeft(n_82_10_STATE, msg_readFloatToken(m, 0))
                    n_82_13_RCVS_0(msg_floats([n_82_10_STATE.leftOp + n_82_10_STATE.rightOp]))
                    return
                
                } else if (msg_isBang(m)) {
                    n_82_13_RCVS_0(msg_floats([n_82_10_STATE.leftOp + n_82_10_STATE.rightOp]))
                    return
                }
            
                                throw new Error('[+], id "n_82_10", inlet "0", unsupported message : ' + msg_display(m))
                            }
function n_82_10_RCVS_1(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_add_setRight(n_82_10_STATE, msg_readFloatToken(m, 0))
            return
        }
    
                                throw new Error('[+], id "n_82_10", inlet "1", unsupported message : ' + msg_display(m))
                            }

function n_82_13_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_82_13_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_82_13_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_82_13_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_82_13_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_82_13_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_82_13_STATE.outMessages[0] = message
                n_82_13_STATE.messageTransferFunctions.splice(0, n_82_13_STATE.messageTransferFunctions.length - 1)
                n_82_13_STATE.messageTransferFunctions[0] = function (m) {
                    return n_82_13_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_82_13_STATE.messageTransferFunctions.length; i++) {
                    n_82_14_RCVS_0(n_82_13_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_82_13", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_82_14_RCVS_0(m) {
                                
        if (
            msg_isMatching(m, [MSG_FLOAT_TOKEN])
            || msg_isMatching(m, [MSG_FLOAT_TOKEN, MSG_FLOAT_TOKEN])
            || msg_isMatching(m, [MSG_FLOAT_TOKEN, MSG_FLOAT_TOKEN, MSG_FLOAT_TOKEN])
        ) {
            n_line_stopCurrentLine(n_82_14_STATE)
            switch (msg_getLength(m)) {
                case 3:
                    n_line_setGrain(n_82_14_STATE, msg_readFloatToken(m, 2))
                case 2:
                    n_line_setNextDuration(n_82_14_STATE, msg_readFloatToken(m, 1))
                case 1:
                    const targetValue = msg_readFloatToken(m, 0)
                    if (n_82_14_STATE.nextDurationSamp === 0) {
                        n_82_14_STATE.currentValue = targetValue
                        m_n_82_17_0__routemsg_RCVS_0(msg_floats([targetValue]))
                    } else {
                        m_n_82_17_0__routemsg_RCVS_0(msg_floats([n_82_14_STATE.currentValue]))
                        n_line_setNewLine(n_82_14_STATE, targetValue)
                        n_line_incrementTime(n_82_14_STATE, n_82_14_STATE.currentLine.dx)
                        n_line_scheduleNextTick(n_82_14_STATE)
                    }
                    
            }
            return

        } else if (msg_isAction(m, 'stop')) {
            n_line_stopCurrentLine(n_82_14_STATE)
            return

        } else if (
            msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
            && msg_readStringToken(m, 0) === 'set'
        ) {
            n_line_stopCurrentLine(n_82_14_STATE)
            n_82_14_STATE.currentValue = msg_readFloatToken(m, 1)
            return
        }
    
                                throw new Error('[line], id "n_82_14", inlet "0", unsupported message : ' + msg_display(m))
                            }

function m_n_82_17_0__routemsg_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                m_n_82_17_0_sig_RCVS_0(m)
                return
            } else {
                SND_TO_NULL(m)
                return
            }
        
                                throw new Error('[_routemsg], id "m_n_82_17_0__routemsg", inlet "0", unsupported message : ' + msg_display(m))
                            }

function m_n_82_17_0_sig_RCVS_0(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            m_n_82_17_0_sig_STATE.currentValue = msg_readFloatToken(m, 0)
            return
        }
    
                                throw new Error('[sig~], id "m_n_82_17_0_sig", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_82_8_RCVS_0(m) {
                                
        if (msg_isBang(m)) {
            n_82_9_RCVS_0(msg_floats([Math.floor(Math.random() * n_82_8_STATE.maxValue)]))
            return
        } else if (
            msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
            && msg_readStringToken(m, 0) === 'seed'
        ) {
            console.log('WARNING : seed not implemented yet for [random]')
            return
        }
    
                                throw new Error('[random], id "n_82_8", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_82_9_RCVS_0(m) {
                                
                if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                    n_sub_setLeft(n_82_9_STATE, msg_readFloatToken(m, 0))
                    n_82_10_RCVS_1(msg_floats([n_82_9_STATE.leftOp - n_82_9_STATE.rightOp]))
                    return
                
                } else if (msg_isBang(m)) {
                    n_82_10_RCVS_1(msg_floats([n_82_9_STATE.leftOp - n_82_9_STATE.rightOp]))
                    return
                }
            
                                throw new Error('[-], id "n_82_9", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_29_8_RCVS_0(m) {
                                
            n_bang_receiveMessage(n_29_8_STATE, m)
            return
        
                                throw new Error('[bang], id "n_29_8", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_36_1_RCVS_0(m) {
                                
        if (msg_isBang(m)) {
            n_36_2_RCVS_0(msg_floats([Math.floor(Math.random() * n_36_1_STATE.maxValue)]))
            return
        } else if (
            msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
            && msg_readStringToken(m, 0) === 'seed'
        ) {
            console.log('WARNING : seed not implemented yet for [random]')
            return
        }
    
                                throw new Error('[random], id "n_36_1", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_36_2_RCVS_0(m) {
                                
                if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                    n_add_setLeft(n_36_2_STATE, msg_readFloatToken(m, 0))
                    n_81_7_RCVS_0(msg_floats([n_36_2_STATE.leftOp + n_36_2_STATE.rightOp]))
                    return
                
                } else if (msg_isBang(m)) {
                    n_81_7_RCVS_0(msg_floats([n_36_2_STATE.leftOp + n_36_2_STATE.rightOp]))
                    return
                }
            
                                throw new Error('[+], id "n_36_2", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_81_7_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                const newValue = msg_readFloatToken(m, 0)
                if (newValue !== n_81_7_STATE.currentValue) {
                    n_81_7_STATE.currentValue = newValue
                    n_81_18_RCVS_0(msg_floats([n_81_7_STATE.currentValue]))
                }
                return
    
            } else if (msg_isBang(m)) {
                n_81_18_RCVS_0(msg_floats([n_81_7_STATE.currentValue]))
                return 
    
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_81_7_STATE.currentValue = msg_readFloatToken(m, 1)
                return
            }
        
                                throw new Error('[change], id "n_81_7", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_81_18_RCVS_0(m) {
                                
        n_81_8_RCVS_0(msg_bang())
n_81_10_RCVS_0(msg_floats([messageTokenToFloat(m, 0)]))
n_81_11_RCVS_0(msg_floats([messageTokenToFloat(m, 0)]))
        return
    
                                throw new Error('[trigger], id "n_81_18", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_81_11_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_81_11_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_81_11_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_81_11_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_81_11_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_81_11_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_81_11_STATE.outMessages[0] = message
                n_81_11_STATE.messageTransferFunctions.splice(0, n_81_11_STATE.messageTransferFunctions.length - 1)
                n_81_11_STATE.messageTransferFunctions[0] = function (m) {
                    return n_81_11_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_81_11_STATE.messageTransferFunctions.length; i++) {
                    n_81_12_RCVS_0(n_81_11_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_81_11", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_81_12_RCVS_0(m) {
                                
        if (
            msg_isMatching(m, [MSG_FLOAT_TOKEN])
            || msg_isMatching(m, [MSG_FLOAT_TOKEN, MSG_FLOAT_TOKEN])
            || msg_isMatching(m, [MSG_FLOAT_TOKEN, MSG_FLOAT_TOKEN, MSG_FLOAT_TOKEN])
        ) {
            n_line_stopCurrentLine(n_81_12_STATE)
            switch (msg_getLength(m)) {
                case 3:
                    n_line_setGrain(n_81_12_STATE, msg_readFloatToken(m, 2))
                case 2:
                    n_line_setNextDuration(n_81_12_STATE, msg_readFloatToken(m, 1))
                case 1:
                    const targetValue = msg_readFloatToken(m, 0)
                    if (n_81_12_STATE.nextDurationSamp === 0) {
                        n_81_12_STATE.currentValue = targetValue
                        m_n_81_5_0__routemsg_RCVS_0(msg_floats([targetValue]))
                    } else {
                        m_n_81_5_0__routemsg_RCVS_0(msg_floats([n_81_12_STATE.currentValue]))
                        n_line_setNewLine(n_81_12_STATE, targetValue)
                        n_line_incrementTime(n_81_12_STATE, n_81_12_STATE.currentLine.dx)
                        n_line_scheduleNextTick(n_81_12_STATE)
                    }
                    
            }
            return

        } else if (msg_isAction(m, 'stop')) {
            n_line_stopCurrentLine(n_81_12_STATE)
            return

        } else if (
            msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
            && msg_readStringToken(m, 0) === 'set'
        ) {
            n_line_stopCurrentLine(n_81_12_STATE)
            n_81_12_STATE.currentValue = msg_readFloatToken(m, 1)
            return
        }
    
                                throw new Error('[line], id "n_81_12", inlet "0", unsupported message : ' + msg_display(m))
                            }

function m_n_81_5_0__routemsg_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                m_n_81_5_0_sig_RCVS_0(m)
                return
            } else {
                SND_TO_NULL(m)
                return
            }
        
                                throw new Error('[_routemsg], id "m_n_81_5_0__routemsg", inlet "0", unsupported message : ' + msg_display(m))
                            }

function m_n_81_5_0_sig_RCVS_0(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            m_n_81_5_0_sig_STATE.currentValue = msg_readFloatToken(m, 0)
            return
        }
    
                                throw new Error('[sig~], id "m_n_81_5_0_sig", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_81_10_RCVS_0(m) {
                                
                if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                    n_add_setLeft(n_81_10_STATE, msg_readFloatToken(m, 0))
                    n_81_13_RCVS_0(msg_floats([n_81_10_STATE.leftOp + n_81_10_STATE.rightOp]))
                    return
                
                } else if (msg_isBang(m)) {
                    n_81_13_RCVS_0(msg_floats([n_81_10_STATE.leftOp + n_81_10_STATE.rightOp]))
                    return
                }
            
                                throw new Error('[+], id "n_81_10", inlet "0", unsupported message : ' + msg_display(m))
                            }
function n_81_10_RCVS_1(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_add_setRight(n_81_10_STATE, msg_readFloatToken(m, 0))
            return
        }
    
                                throw new Error('[+], id "n_81_10", inlet "1", unsupported message : ' + msg_display(m))
                            }

function n_81_13_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_81_13_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_81_13_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_81_13_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_81_13_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_81_13_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_81_13_STATE.outMessages[0] = message
                n_81_13_STATE.messageTransferFunctions.splice(0, n_81_13_STATE.messageTransferFunctions.length - 1)
                n_81_13_STATE.messageTransferFunctions[0] = function (m) {
                    return n_81_13_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_81_13_STATE.messageTransferFunctions.length; i++) {
                    n_81_14_RCVS_0(n_81_13_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_81_13", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_81_14_RCVS_0(m) {
                                
        if (
            msg_isMatching(m, [MSG_FLOAT_TOKEN])
            || msg_isMatching(m, [MSG_FLOAT_TOKEN, MSG_FLOAT_TOKEN])
            || msg_isMatching(m, [MSG_FLOAT_TOKEN, MSG_FLOAT_TOKEN, MSG_FLOAT_TOKEN])
        ) {
            n_line_stopCurrentLine(n_81_14_STATE)
            switch (msg_getLength(m)) {
                case 3:
                    n_line_setGrain(n_81_14_STATE, msg_readFloatToken(m, 2))
                case 2:
                    n_line_setNextDuration(n_81_14_STATE, msg_readFloatToken(m, 1))
                case 1:
                    const targetValue = msg_readFloatToken(m, 0)
                    if (n_81_14_STATE.nextDurationSamp === 0) {
                        n_81_14_STATE.currentValue = targetValue
                        m_n_81_17_0__routemsg_RCVS_0(msg_floats([targetValue]))
                    } else {
                        m_n_81_17_0__routemsg_RCVS_0(msg_floats([n_81_14_STATE.currentValue]))
                        n_line_setNewLine(n_81_14_STATE, targetValue)
                        n_line_incrementTime(n_81_14_STATE, n_81_14_STATE.currentLine.dx)
                        n_line_scheduleNextTick(n_81_14_STATE)
                    }
                    
            }
            return

        } else if (msg_isAction(m, 'stop')) {
            n_line_stopCurrentLine(n_81_14_STATE)
            return

        } else if (
            msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
            && msg_readStringToken(m, 0) === 'set'
        ) {
            n_line_stopCurrentLine(n_81_14_STATE)
            n_81_14_STATE.currentValue = msg_readFloatToken(m, 1)
            return
        }
    
                                throw new Error('[line], id "n_81_14", inlet "0", unsupported message : ' + msg_display(m))
                            }

function m_n_81_17_0__routemsg_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                m_n_81_17_0_sig_RCVS_0(m)
                return
            } else {
                SND_TO_NULL(m)
                return
            }
        
                                throw new Error('[_routemsg], id "m_n_81_17_0__routemsg", inlet "0", unsupported message : ' + msg_display(m))
                            }

function m_n_81_17_0_sig_RCVS_0(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            m_n_81_17_0_sig_STATE.currentValue = msg_readFloatToken(m, 0)
            return
        }
    
                                throw new Error('[sig~], id "m_n_81_17_0_sig", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_81_8_RCVS_0(m) {
                                
        if (msg_isBang(m)) {
            n_81_9_RCVS_0(msg_floats([Math.floor(Math.random() * n_81_8_STATE.maxValue)]))
            return
        } else if (
            msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
            && msg_readStringToken(m, 0) === 'seed'
        ) {
            console.log('WARNING : seed not implemented yet for [random]')
            return
        }
    
                                throw new Error('[random], id "n_81_8", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_81_9_RCVS_0(m) {
                                
                if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                    n_sub_setLeft(n_81_9_STATE, msg_readFloatToken(m, 0))
                    n_81_10_RCVS_1(msg_floats([n_81_9_STATE.leftOp - n_81_9_STATE.rightOp]))
                    return
                
                } else if (msg_isBang(m)) {
                    n_81_10_RCVS_1(msg_floats([n_81_9_STATE.leftOp - n_81_9_STATE.rightOp]))
                    return
                }
            
                                throw new Error('[-], id "n_81_9", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_29_9_RCVS_0(m) {
                                
            n_bang_receiveMessage(n_29_9_STATE, m)
            return
        
                                throw new Error('[bang], id "n_29_9", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_35_1_RCVS_0(m) {
                                
        if (msg_isBang(m)) {
            n_35_2_RCVS_0(msg_floats([Math.floor(Math.random() * n_35_1_STATE.maxValue)]))
            return
        } else if (
            msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
            && msg_readStringToken(m, 0) === 'seed'
        ) {
            console.log('WARNING : seed not implemented yet for [random]')
            return
        }
    
                                throw new Error('[random], id "n_35_1", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_35_2_RCVS_0(m) {
                                
                if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                    n_add_setLeft(n_35_2_STATE, msg_readFloatToken(m, 0))
                    n_80_7_RCVS_0(msg_floats([n_35_2_STATE.leftOp + n_35_2_STATE.rightOp]))
                    return
                
                } else if (msg_isBang(m)) {
                    n_80_7_RCVS_0(msg_floats([n_35_2_STATE.leftOp + n_35_2_STATE.rightOp]))
                    return
                }
            
                                throw new Error('[+], id "n_35_2", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_80_7_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                const newValue = msg_readFloatToken(m, 0)
                if (newValue !== n_80_7_STATE.currentValue) {
                    n_80_7_STATE.currentValue = newValue
                    n_80_18_RCVS_0(msg_floats([n_80_7_STATE.currentValue]))
                }
                return
    
            } else if (msg_isBang(m)) {
                n_80_18_RCVS_0(msg_floats([n_80_7_STATE.currentValue]))
                return 
    
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_80_7_STATE.currentValue = msg_readFloatToken(m, 1)
                return
            }
        
                                throw new Error('[change], id "n_80_7", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_80_18_RCVS_0(m) {
                                
        n_80_8_RCVS_0(msg_bang())
n_80_10_RCVS_0(msg_floats([messageTokenToFloat(m, 0)]))
n_80_11_RCVS_0(msg_floats([messageTokenToFloat(m, 0)]))
        return
    
                                throw new Error('[trigger], id "n_80_18", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_80_11_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_80_11_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_80_11_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_80_11_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_80_11_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_80_11_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_80_11_STATE.outMessages[0] = message
                n_80_11_STATE.messageTransferFunctions.splice(0, n_80_11_STATE.messageTransferFunctions.length - 1)
                n_80_11_STATE.messageTransferFunctions[0] = function (m) {
                    return n_80_11_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_80_11_STATE.messageTransferFunctions.length; i++) {
                    n_80_12_RCVS_0(n_80_11_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_80_11", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_80_12_RCVS_0(m) {
                                
        if (
            msg_isMatching(m, [MSG_FLOAT_TOKEN])
            || msg_isMatching(m, [MSG_FLOAT_TOKEN, MSG_FLOAT_TOKEN])
            || msg_isMatching(m, [MSG_FLOAT_TOKEN, MSG_FLOAT_TOKEN, MSG_FLOAT_TOKEN])
        ) {
            n_line_stopCurrentLine(n_80_12_STATE)
            switch (msg_getLength(m)) {
                case 3:
                    n_line_setGrain(n_80_12_STATE, msg_readFloatToken(m, 2))
                case 2:
                    n_line_setNextDuration(n_80_12_STATE, msg_readFloatToken(m, 1))
                case 1:
                    const targetValue = msg_readFloatToken(m, 0)
                    if (n_80_12_STATE.nextDurationSamp === 0) {
                        n_80_12_STATE.currentValue = targetValue
                        m_n_80_5_0__routemsg_RCVS_0(msg_floats([targetValue]))
                    } else {
                        m_n_80_5_0__routemsg_RCVS_0(msg_floats([n_80_12_STATE.currentValue]))
                        n_line_setNewLine(n_80_12_STATE, targetValue)
                        n_line_incrementTime(n_80_12_STATE, n_80_12_STATE.currentLine.dx)
                        n_line_scheduleNextTick(n_80_12_STATE)
                    }
                    
            }
            return

        } else if (msg_isAction(m, 'stop')) {
            n_line_stopCurrentLine(n_80_12_STATE)
            return

        } else if (
            msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
            && msg_readStringToken(m, 0) === 'set'
        ) {
            n_line_stopCurrentLine(n_80_12_STATE)
            n_80_12_STATE.currentValue = msg_readFloatToken(m, 1)
            return
        }
    
                                throw new Error('[line], id "n_80_12", inlet "0", unsupported message : ' + msg_display(m))
                            }

function m_n_80_5_0__routemsg_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                m_n_80_5_0_sig_RCVS_0(m)
                return
            } else {
                SND_TO_NULL(m)
                return
            }
        
                                throw new Error('[_routemsg], id "m_n_80_5_0__routemsg", inlet "0", unsupported message : ' + msg_display(m))
                            }

function m_n_80_5_0_sig_RCVS_0(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            m_n_80_5_0_sig_STATE.currentValue = msg_readFloatToken(m, 0)
            return
        }
    
                                throw new Error('[sig~], id "m_n_80_5_0_sig", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_80_10_RCVS_0(m) {
                                
                if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                    n_add_setLeft(n_80_10_STATE, msg_readFloatToken(m, 0))
                    n_80_13_RCVS_0(msg_floats([n_80_10_STATE.leftOp + n_80_10_STATE.rightOp]))
                    return
                
                } else if (msg_isBang(m)) {
                    n_80_13_RCVS_0(msg_floats([n_80_10_STATE.leftOp + n_80_10_STATE.rightOp]))
                    return
                }
            
                                throw new Error('[+], id "n_80_10", inlet "0", unsupported message : ' + msg_display(m))
                            }
function n_80_10_RCVS_1(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_add_setRight(n_80_10_STATE, msg_readFloatToken(m, 0))
            return
        }
    
                                throw new Error('[+], id "n_80_10", inlet "1", unsupported message : ' + msg_display(m))
                            }

function n_80_13_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_80_13_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_80_13_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_80_13_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_80_13_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_80_13_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_80_13_STATE.outMessages[0] = message
                n_80_13_STATE.messageTransferFunctions.splice(0, n_80_13_STATE.messageTransferFunctions.length - 1)
                n_80_13_STATE.messageTransferFunctions[0] = function (m) {
                    return n_80_13_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_80_13_STATE.messageTransferFunctions.length; i++) {
                    n_80_14_RCVS_0(n_80_13_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_80_13", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_80_14_RCVS_0(m) {
                                
        if (
            msg_isMatching(m, [MSG_FLOAT_TOKEN])
            || msg_isMatching(m, [MSG_FLOAT_TOKEN, MSG_FLOAT_TOKEN])
            || msg_isMatching(m, [MSG_FLOAT_TOKEN, MSG_FLOAT_TOKEN, MSG_FLOAT_TOKEN])
        ) {
            n_line_stopCurrentLine(n_80_14_STATE)
            switch (msg_getLength(m)) {
                case 3:
                    n_line_setGrain(n_80_14_STATE, msg_readFloatToken(m, 2))
                case 2:
                    n_line_setNextDuration(n_80_14_STATE, msg_readFloatToken(m, 1))
                case 1:
                    const targetValue = msg_readFloatToken(m, 0)
                    if (n_80_14_STATE.nextDurationSamp === 0) {
                        n_80_14_STATE.currentValue = targetValue
                        m_n_80_17_0__routemsg_RCVS_0(msg_floats([targetValue]))
                    } else {
                        m_n_80_17_0__routemsg_RCVS_0(msg_floats([n_80_14_STATE.currentValue]))
                        n_line_setNewLine(n_80_14_STATE, targetValue)
                        n_line_incrementTime(n_80_14_STATE, n_80_14_STATE.currentLine.dx)
                        n_line_scheduleNextTick(n_80_14_STATE)
                    }
                    
            }
            return

        } else if (msg_isAction(m, 'stop')) {
            n_line_stopCurrentLine(n_80_14_STATE)
            return

        } else if (
            msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
            && msg_readStringToken(m, 0) === 'set'
        ) {
            n_line_stopCurrentLine(n_80_14_STATE)
            n_80_14_STATE.currentValue = msg_readFloatToken(m, 1)
            return
        }
    
                                throw new Error('[line], id "n_80_14", inlet "0", unsupported message : ' + msg_display(m))
                            }

function m_n_80_17_0__routemsg_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                m_n_80_17_0_sig_RCVS_0(m)
                return
            } else {
                SND_TO_NULL(m)
                return
            }
        
                                throw new Error('[_routemsg], id "m_n_80_17_0__routemsg", inlet "0", unsupported message : ' + msg_display(m))
                            }

function m_n_80_17_0_sig_RCVS_0(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            m_n_80_17_0_sig_STATE.currentValue = msg_readFloatToken(m, 0)
            return
        }
    
                                throw new Error('[sig~], id "m_n_80_17_0_sig", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_80_8_RCVS_0(m) {
                                
        if (msg_isBang(m)) {
            n_80_9_RCVS_0(msg_floats([Math.floor(Math.random() * n_80_8_STATE.maxValue)]))
            return
        } else if (
            msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
            && msg_readStringToken(m, 0) === 'seed'
        ) {
            console.log('WARNING : seed not implemented yet for [random]')
            return
        }
    
                                throw new Error('[random], id "n_80_8", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_80_9_RCVS_0(m) {
                                
                if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                    n_sub_setLeft(n_80_9_STATE, msg_readFloatToken(m, 0))
                    n_80_10_RCVS_1(msg_floats([n_80_9_STATE.leftOp - n_80_9_STATE.rightOp]))
                    return
                
                } else if (msg_isBang(m)) {
                    n_80_10_RCVS_1(msg_floats([n_80_9_STATE.leftOp - n_80_9_STATE.rightOp]))
                    return
                }
            
                                throw new Error('[-], id "n_80_9", inlet "0", unsupported message : ' + msg_display(m))
                            }





function n_79_23_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_79_23_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_79_23_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_79_23_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_79_23_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_79_23_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_79_23_STATE.outMessages[0] = message
                n_79_23_STATE.messageTransferFunctions.splice(0, n_79_23_STATE.messageTransferFunctions.length - 1)
                n_79_23_STATE.messageTransferFunctions[0] = function (m) {
                    return n_79_23_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_79_23_STATE.messageTransferFunctions.length; i++) {
                    n_79_24_RCVS_0(n_79_23_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_79_23", inlet "0", unsupported message : ' + msg_display(m))
                            }
let n_79_24_OUTS_0 = 0
function n_79_24_RCVS_0(m) {
                                
        if (
            msg_isMatching(m, [MSG_FLOAT_TOKEN])
            || msg_isMatching(m, [MSG_FLOAT_TOKEN, MSG_FLOAT_TOKEN])
        ) {
            switch (msg_getLength(m)) {
                case 2:
                    n_line_t_setNextDuration(n_79_24_STATE, msg_readFloatToken(m, 1))
                case 1:
                    n_line_t_setNewLine(n_79_24_STATE, msg_readFloatToken(m, 0))
            }
            return

        } else if (msg_isAction(m, 'stop')) {
            n_line_t_stop(n_79_24_STATE)
            return

        }
    
                                throw new Error('[line~], id "n_79_24", inlet "0", unsupported message : ' + msg_display(m))
                            }





function n_82_23_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_82_23_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_82_23_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_82_23_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_82_23_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_82_23_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_82_23_STATE.outMessages[0] = message
                n_82_23_STATE.messageTransferFunctions.splice(0, n_82_23_STATE.messageTransferFunctions.length - 1)
                n_82_23_STATE.messageTransferFunctions[0] = function (m) {
                    return n_82_23_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_82_23_STATE.messageTransferFunctions.length; i++) {
                    n_82_24_RCVS_0(n_82_23_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_82_23", inlet "0", unsupported message : ' + msg_display(m))
                            }
let n_82_24_OUTS_0 = 0
function n_82_24_RCVS_0(m) {
                                
        if (
            msg_isMatching(m, [MSG_FLOAT_TOKEN])
            || msg_isMatching(m, [MSG_FLOAT_TOKEN, MSG_FLOAT_TOKEN])
        ) {
            switch (msg_getLength(m)) {
                case 2:
                    n_line_t_setNextDuration(n_82_24_STATE, msg_readFloatToken(m, 1))
                case 1:
                    n_line_t_setNewLine(n_82_24_STATE, msg_readFloatToken(m, 0))
            }
            return

        } else if (msg_isAction(m, 'stop')) {
            n_line_t_stop(n_82_24_STATE)
            return

        }
    
                                throw new Error('[line~], id "n_82_24", inlet "0", unsupported message : ' + msg_display(m))
                            }







function n_80_23_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_80_23_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_80_23_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_80_23_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_80_23_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_80_23_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_80_23_STATE.outMessages[0] = message
                n_80_23_STATE.messageTransferFunctions.splice(0, n_80_23_STATE.messageTransferFunctions.length - 1)
                n_80_23_STATE.messageTransferFunctions[0] = function (m) {
                    return n_80_23_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_80_23_STATE.messageTransferFunctions.length; i++) {
                    n_80_24_RCVS_0(n_80_23_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_80_23", inlet "0", unsupported message : ' + msg_display(m))
                            }
let n_80_24_OUTS_0 = 0
function n_80_24_RCVS_0(m) {
                                
        if (
            msg_isMatching(m, [MSG_FLOAT_TOKEN])
            || msg_isMatching(m, [MSG_FLOAT_TOKEN, MSG_FLOAT_TOKEN])
        ) {
            switch (msg_getLength(m)) {
                case 2:
                    n_line_t_setNextDuration(n_80_24_STATE, msg_readFloatToken(m, 1))
                case 1:
                    n_line_t_setNewLine(n_80_24_STATE, msg_readFloatToken(m, 0))
            }
            return

        } else if (msg_isAction(m, 'stop')) {
            n_line_t_stop(n_80_24_STATE)
            return

        }
    
                                throw new Error('[line~], id "n_80_24", inlet "0", unsupported message : ' + msg_display(m))
                            }





function m_n_29_16_1__routemsg_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                m_n_29_16_1_sig_RCVS_0(m)
                return
            } else {
                SND_TO_NULL(m)
                return
            }
        
                                throw new Error('[_routemsg], id "m_n_29_16_1__routemsg", inlet "0", unsupported message : ' + msg_display(m))
                            }

function m_n_29_16_1_sig_RCVS_0(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            m_n_29_16_1_sig_STATE.currentValue = msg_readFloatToken(m, 0)
            return
        }
    
                                throw new Error('[sig~], id "m_n_29_16_1_sig", inlet "0", unsupported message : ' + msg_display(m))
                            }



function m_n_29_20_1__routemsg_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                m_n_29_20_1_sig_RCVS_0(m)
                return
            } else {
                SND_TO_NULL(m)
                return
            }
        
                                throw new Error('[_routemsg], id "m_n_29_20_1__routemsg", inlet "0", unsupported message : ' + msg_display(m))
                            }

function m_n_29_20_1_sig_RCVS_0(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            m_n_29_20_1_sig_STATE.currentValue = msg_readFloatToken(m, 0)
            return
        }
    
                                throw new Error('[sig~], id "m_n_29_20_1_sig", inlet "0", unsupported message : ' + msg_display(m))
                            }



function m_n_29_23_1__routemsg_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                m_n_29_23_1_sig_RCVS_0(m)
                return
            } else {
                SND_TO_NULL(m)
                return
            }
        
                                throw new Error('[_routemsg], id "m_n_29_23_1__routemsg", inlet "0", unsupported message : ' + msg_display(m))
                            }

function m_n_29_23_1_sig_RCVS_0(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            m_n_29_23_1_sig_STATE.currentValue = msg_readFloatToken(m, 0)
            return
        }
    
                                throw new Error('[sig~], id "m_n_29_23_1_sig", inlet "0", unsupported message : ' + msg_display(m))
                            }



function m_n_29_26_1__routemsg_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                m_n_29_26_1_sig_RCVS_0(m)
                return
            } else {
                SND_TO_NULL(m)
                return
            }
        
                                throw new Error('[_routemsg], id "m_n_29_26_1__routemsg", inlet "0", unsupported message : ' + msg_display(m))
                            }

function m_n_29_26_1_sig_RCVS_0(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            m_n_29_26_1_sig_STATE.currentValue = msg_readFloatToken(m, 0)
            return
        }
    
                                throw new Error('[sig~], id "m_n_29_26_1_sig", inlet "0", unsupported message : ' + msg_display(m))
                            }



function m_n_29_38_1__routemsg_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                m_n_29_38_1_sig_RCVS_0(m)
                return
            } else {
                SND_TO_NULL(m)
                return
            }
        
                                throw new Error('[_routemsg], id "m_n_29_38_1__routemsg", inlet "0", unsupported message : ' + msg_display(m))
                            }

function m_n_29_38_1_sig_RCVS_0(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            m_n_29_38_1_sig_STATE.currentValue = msg_readFloatToken(m, 0)
            return
        }
    
                                throw new Error('[sig~], id "m_n_29_38_1_sig", inlet "0", unsupported message : ' + msg_display(m))
                            }

function m_n_29_40_1__routemsg_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                m_n_29_40_1_sig_RCVS_0(m)
                return
            } else {
                SND_TO_NULL(m)
                return
            }
        
                                throw new Error('[_routemsg], id "m_n_29_40_1__routemsg", inlet "0", unsupported message : ' + msg_display(m))
                            }

function m_n_29_40_1_sig_RCVS_0(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            m_n_29_40_1_sig_STATE.currentValue = msg_readFloatToken(m, 0)
            return
        }
    
                                throw new Error('[sig~], id "m_n_29_40_1_sig", inlet "0", unsupported message : ' + msg_display(m))
                            }



function n_29_65_RCVS_0(m) {
                                
            if (msg_getLength(m) === 1) {
                if (msg_isStringToken(m, 0)) {
                    const action = msg_readStringToken(m, 0)
                    if (action === 'bang' || action === 'start') {
                        n_delay_scheduleDelay(
                            n_29_65_STATE, 
                            () => n_29_68_RCVS_0(msg_bang()),
                            FRAME,
                        )
                        return
                    } else if (action === 'stop') {
                        n_delay_stop(n_29_65_STATE)
                        return
                    }
                    
                } else if (msg_isFloatToken(m, 0)) {
                    n_delay_setDelay(n_29_65_STATE, msg_readFloatToken(m, 0))
                    n_delay_scheduleDelay(
                        n_29_65_STATE,
                        () => n_29_68_RCVS_0(msg_bang()),
                        FRAME,
                    )
                    return 
                }
            
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN, MSG_STRING_TOKEN])
                && msg_readStringToken(m, 0) === 'tempo'
            ) {
                n_29_65_STATE.sampleRatio = computeUnitInSamples(
                    SAMPLE_RATE, 
                    msg_readFloatToken(m, 1), 
                    msg_readStringToken(m, 2)
                )
                return
            }
        
                                throw new Error('[delay], id "n_29_65", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_29_68_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_29_68_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_29_68_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_29_68_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_29_68_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_29_68_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_29_68_STATE.outMessages[0] = message
                n_29_68_STATE.messageTransferFunctions.splice(0, n_29_68_STATE.messageTransferFunctions.length - 1)
                n_29_68_STATE.messageTransferFunctions[0] = function (m) {
                    return n_29_68_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_29_68_STATE.messageTransferFunctions.length; i++) {
                    n_29_66_RCVS_0(n_29_68_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_29_68", inlet "0", unsupported message : ' + msg_display(m))
                            }
let n_29_66_OUTS_0 = 0
function n_29_66_RCVS_0(m) {
                                
        if (
            msg_isMatching(m, [MSG_FLOAT_TOKEN])
            || msg_isMatching(m, [MSG_FLOAT_TOKEN, MSG_FLOAT_TOKEN])
        ) {
            switch (msg_getLength(m)) {
                case 2:
                    n_line_t_setNextDuration(n_29_66_STATE, msg_readFloatToken(m, 1))
                case 1:
                    n_line_t_setNewLine(n_29_66_STATE, msg_readFloatToken(m, 0))
            }
            return

        } else if (msg_isAction(m, 'stop')) {
            n_line_t_stop(n_29_66_STATE)
            return

        }
    
                                throw new Error('[line~], id "n_29_66", inlet "0", unsupported message : ' + msg_display(m))
                            }



function n_71_24_RCVS_0(m) {
                                
                if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                    n_mul_setLeft(n_71_24_STATE, msg_readFloatToken(m, 0))
                    m_n_71_23_1__routemsg_RCVS_0(msg_floats([n_71_24_STATE.leftOp * n_71_24_STATE.rightOp]))
                    return
                
                } else if (msg_isBang(m)) {
                    m_n_71_23_1__routemsg_RCVS_0(msg_floats([n_71_24_STATE.leftOp * n_71_24_STATE.rightOp]))
                    return
                }
            
                                throw new Error('[*], id "n_71_24", inlet "0", unsupported message : ' + msg_display(m))
                            }

function m_n_71_23_1__routemsg_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                m_n_71_23_1_sig_RCVS_0(m)
                return
            } else {
                SND_TO_NULL(m)
                return
            }
        
                                throw new Error('[_routemsg], id "m_n_71_23_1__routemsg", inlet "0", unsupported message : ' + msg_display(m))
                            }

function m_n_71_23_1_sig_RCVS_0(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            m_n_71_23_1_sig_STATE.currentValue = msg_readFloatToken(m, 0)
            return
        }
    
                                throw new Error('[sig~], id "m_n_71_23_1_sig", inlet "0", unsupported message : ' + msg_display(m))
                            }





function n_31_24_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_31_24_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_31_24_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_31_24_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_31_24_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_31_24_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_31_24_STATE.outMessages[0] = message
                n_31_24_STATE.messageTransferFunctions.splice(0, n_31_24_STATE.messageTransferFunctions.length - 1)
                n_31_24_STATE.messageTransferFunctions[0] = function (m) {
                    return n_31_24_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_31_24_STATE.messageTransferFunctions.length; i++) {
                    n_31_101_RCVS_0(n_31_24_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_31_24", inlet "0", unsupported message : ' + msg_display(m))
                            }
let n_31_101_OUTS_0 = 0
function n_31_101_RCVS_0(m) {
                                
        if (
            msg_isMatching(m, [MSG_FLOAT_TOKEN])
            || msg_isMatching(m, [MSG_FLOAT_TOKEN, MSG_FLOAT_TOKEN])
        ) {
            switch (msg_getLength(m)) {
                case 2:
                    n_line_t_setNextDuration(n_31_101_STATE, msg_readFloatToken(m, 1))
                case 1:
                    n_line_t_setNewLine(n_31_101_STATE, msg_readFloatToken(m, 0))
            }
            return

        } else if (msg_isAction(m, 'stop')) {
            n_line_t_stop(n_31_101_STATE)
            return

        }
    
                                throw new Error('[line~], id "n_31_101", inlet "0", unsupported message : ' + msg_display(m))
                            }



function n_31_25_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_31_25_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_31_25_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_31_25_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_31_25_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_31_25_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_31_25_STATE.outMessages[0] = message
                n_31_25_STATE.messageTransferFunctions.splice(0, n_31_25_STATE.messageTransferFunctions.length - 1)
                n_31_25_STATE.messageTransferFunctions[0] = function (m) {
                    return n_31_25_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_31_25_STATE.messageTransferFunctions.length; i++) {
                    n_31_99_RCVS_0(n_31_25_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_31_25", inlet "0", unsupported message : ' + msg_display(m))
                            }
let n_31_99_OUTS_0 = 0
function n_31_99_RCVS_0(m) {
                                
        if (
            msg_isMatching(m, [MSG_FLOAT_TOKEN])
            || msg_isMatching(m, [MSG_FLOAT_TOKEN, MSG_FLOAT_TOKEN])
        ) {
            switch (msg_getLength(m)) {
                case 2:
                    n_line_t_setNextDuration(n_31_99_STATE, msg_readFloatToken(m, 1))
                case 1:
                    n_line_t_setNewLine(n_31_99_STATE, msg_readFloatToken(m, 0))
            }
            return

        } else if (msg_isAction(m, 'stop')) {
            n_line_t_stop(n_31_99_STATE)
            return

        }
    
                                throw new Error('[line~], id "n_31_99", inlet "0", unsupported message : ' + msg_display(m))
                            }


let n_31_14_OUTS_0 = 0
function n_31_14_RCVS_1(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_phasor_t_setPhase(n_31_14_STATE, msg_readFloatToken(m, 0))
            return
        }
    
                                throw new Error('[phasor~], id "n_31_14", inlet "1", unsupported message : ' + msg_display(m))
                            }
let n_31_15_OUTS_0 = 0
function n_31_15_RCVS_1(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_phasor_t_setPhase(n_31_15_STATE, msg_readFloatToken(m, 0))
            return
        }
    
                                throw new Error('[phasor~], id "n_31_15", inlet "1", unsupported message : ' + msg_display(m))
                            }
let n_31_16_OUTS_0 = 0
function n_31_16_RCVS_1(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_phasor_t_setPhase(n_31_16_STATE, msg_readFloatToken(m, 0))
            return
        }
    
                                throw new Error('[phasor~], id "n_31_16", inlet "1", unsupported message : ' + msg_display(m))
                            }



function n_71_48_RCVS_0(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_71_48_STATE.currentValue = msg_readFloatToken(m, 0)
            return
        }
    
                                throw new Error('[sig~], id "n_71_48", inlet "0", unsupported message : ' + msg_display(m))
                            }



function n_31_26_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_31_26_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_31_26_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_31_26_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_31_26_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_31_26_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_31_26_STATE.outMessages[0] = message
                n_31_26_STATE.messageTransferFunctions.splice(0, n_31_26_STATE.messageTransferFunctions.length - 1)
                n_31_26_STATE.messageTransferFunctions[0] = function (m) {
                    return n_31_26_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_31_26_STATE.messageTransferFunctions.length; i++) {
                    n_31_96_RCVS_0(n_31_26_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_31_26", inlet "0", unsupported message : ' + msg_display(m))
                            }
let n_31_96_OUTS_0 = 0
function n_31_96_RCVS_0(m) {
                                
        if (
            msg_isMatching(m, [MSG_FLOAT_TOKEN])
            || msg_isMatching(m, [MSG_FLOAT_TOKEN, MSG_FLOAT_TOKEN])
        ) {
            switch (msg_getLength(m)) {
                case 2:
                    n_line_t_setNextDuration(n_31_96_STATE, msg_readFloatToken(m, 1))
                case 1:
                    n_line_t_setNewLine(n_31_96_STATE, msg_readFloatToken(m, 0))
            }
            return

        } else if (msg_isAction(m, 'stop')) {
            n_line_t_stop(n_31_96_STATE)
            return

        }
    
                                throw new Error('[line~], id "n_31_96", inlet "0", unsupported message : ' + msg_display(m))
                            }



function n_31_92_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_31_92_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_31_92_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_31_92_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_31_92_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_31_92_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_31_92_STATE.outMessages[0] = message
                n_31_92_STATE.messageTransferFunctions.splice(0, n_31_92_STATE.messageTransferFunctions.length - 1)
                n_31_92_STATE.messageTransferFunctions[0] = function (m) {
                    return n_31_92_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_31_92_STATE.messageTransferFunctions.length; i++) {
                    n_31_106_RCVS_0(n_31_92_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_31_92", inlet "0", unsupported message : ' + msg_display(m))
                            }
let n_31_106_OUTS_0 = 0
function n_31_106_RCVS_0(m) {
                                
        if (
            msg_isMatching(m, [MSG_FLOAT_TOKEN])
            || msg_isMatching(m, [MSG_FLOAT_TOKEN, MSG_FLOAT_TOKEN])
        ) {
            switch (msg_getLength(m)) {
                case 2:
                    n_line_t_setNextDuration(n_31_106_STATE, msg_readFloatToken(m, 1))
                case 1:
                    n_line_t_setNewLine(n_31_106_STATE, msg_readFloatToken(m, 0))
            }
            return

        } else if (msg_isAction(m, 'stop')) {
            n_line_t_stop(n_31_106_STATE)
            return

        }
    
                                throw new Error('[line~], id "n_31_106", inlet "0", unsupported message : ' + msg_display(m))
                            }



function n_71_29_RCVS_0(m) {
                                
                n_sl_receiveMessage(n_71_29_STATE, m)
                return
            
                                throw new Error('[hsl], id "n_71_29", inlet "0", unsupported message : ' + msg_display(m))
                            }

function m_n_71_40_1__routemsg_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                m_n_71_40_1_sig_RCVS_0(m)
                return
            } else {
                SND_TO_NULL(m)
                return
            }
        
                                throw new Error('[_routemsg], id "m_n_71_40_1__routemsg", inlet "0", unsupported message : ' + msg_display(m))
                            }

function m_n_71_40_1_sig_RCVS_0(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            m_n_71_40_1_sig_STATE.currentValue = msg_readFloatToken(m, 0)
            return
        }
    
                                throw new Error('[sig~], id "m_n_71_40_1_sig", inlet "0", unsupported message : ' + msg_display(m))
                            }



function n_31_93_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_31_93_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_31_93_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_31_93_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_31_93_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_31_93_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_31_93_STATE.outMessages[0] = message
                n_31_93_STATE.messageTransferFunctions.splice(0, n_31_93_STATE.messageTransferFunctions.length - 1)
                n_31_93_STATE.messageTransferFunctions[0] = function (m) {
                    return n_31_93_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_31_93_STATE.messageTransferFunctions.length; i++) {
                    n_31_107_RCVS_0(n_31_93_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_31_93", inlet "0", unsupported message : ' + msg_display(m))
                            }
let n_31_107_OUTS_0 = 0
function n_31_107_RCVS_0(m) {
                                
        if (
            msg_isMatching(m, [MSG_FLOAT_TOKEN])
            || msg_isMatching(m, [MSG_FLOAT_TOKEN, MSG_FLOAT_TOKEN])
        ) {
            switch (msg_getLength(m)) {
                case 2:
                    n_line_t_setNextDuration(n_31_107_STATE, msg_readFloatToken(m, 1))
                case 1:
                    n_line_t_setNewLine(n_31_107_STATE, msg_readFloatToken(m, 0))
            }
            return

        } else if (msg_isAction(m, 'stop')) {
            n_line_t_stop(n_31_107_STATE)
            return

        }
    
                                throw new Error('[line~], id "n_31_107", inlet "0", unsupported message : ' + msg_display(m))
                            }



function n_73_24_RCVS_0(m) {
                                
                if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                    n_mul_setLeft(n_73_24_STATE, msg_readFloatToken(m, 0))
                    m_n_73_23_1__routemsg_RCVS_0(msg_floats([n_73_24_STATE.leftOp * n_73_24_STATE.rightOp]))
                    return
                
                } else if (msg_isBang(m)) {
                    m_n_73_23_1__routemsg_RCVS_0(msg_floats([n_73_24_STATE.leftOp * n_73_24_STATE.rightOp]))
                    return
                }
            
                                throw new Error('[*], id "n_73_24", inlet "0", unsupported message : ' + msg_display(m))
                            }

function m_n_73_23_1__routemsg_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                m_n_73_23_1_sig_RCVS_0(m)
                return
            } else {
                SND_TO_NULL(m)
                return
            }
        
                                throw new Error('[_routemsg], id "m_n_73_23_1__routemsg", inlet "0", unsupported message : ' + msg_display(m))
                            }

function m_n_73_23_1_sig_RCVS_0(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            m_n_73_23_1_sig_STATE.currentValue = msg_readFloatToken(m, 0)
            return
        }
    
                                throw new Error('[sig~], id "m_n_73_23_1_sig", inlet "0", unsupported message : ' + msg_display(m))
                            }



function n_73_48_RCVS_0(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_73_48_STATE.currentValue = msg_readFloatToken(m, 0)
            return
        }
    
                                throw new Error('[sig~], id "n_73_48", inlet "0", unsupported message : ' + msg_display(m))
                            }



function n_73_29_RCVS_0(m) {
                                
                n_sl_receiveMessage(n_73_29_STATE, m)
                return
            
                                throw new Error('[hsl], id "n_73_29", inlet "0", unsupported message : ' + msg_display(m))
                            }

function m_n_73_40_1__routemsg_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                m_n_73_40_1_sig_RCVS_0(m)
                return
            } else {
                SND_TO_NULL(m)
                return
            }
        
                                throw new Error('[_routemsg], id "m_n_73_40_1__routemsg", inlet "0", unsupported message : ' + msg_display(m))
                            }

function m_n_73_40_1_sig_RCVS_0(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            m_n_73_40_1_sig_STATE.currentValue = msg_readFloatToken(m, 0)
            return
        }
    
                                throw new Error('[sig~], id "m_n_73_40_1_sig", inlet "0", unsupported message : ' + msg_display(m))
                            }





function n_75_29_RCVS_0(m) {
                                
                n_sl_receiveMessage(n_75_29_STATE, m)
                return
            
                                throw new Error('[hsl], id "n_75_29", inlet "0", unsupported message : ' + msg_display(m))
                            }

function m_n_75_40_1__routemsg_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                m_n_75_40_1_sig_RCVS_0(m)
                return
            } else {
                SND_TO_NULL(m)
                return
            }
        
                                throw new Error('[_routemsg], id "m_n_75_40_1__routemsg", inlet "0", unsupported message : ' + msg_display(m))
                            }

function m_n_75_40_1_sig_RCVS_0(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            m_n_75_40_1_sig_STATE.currentValue = msg_readFloatToken(m, 0)
            return
        }
    
                                throw new Error('[sig~], id "m_n_75_40_1_sig", inlet "0", unsupported message : ' + msg_display(m))
                            }





function n_75_48_RCVS_0(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_75_48_STATE.currentValue = msg_readFloatToken(m, 0)
            return
        }
    
                                throw new Error('[sig~], id "n_75_48", inlet "0", unsupported message : ' + msg_display(m))
                            }



function n_75_24_RCVS_0(m) {
                                
                if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                    n_mul_setLeft(n_75_24_STATE, msg_readFloatToken(m, 0))
                    m_n_75_23_1__routemsg_RCVS_0(msg_floats([n_75_24_STATE.leftOp * n_75_24_STATE.rightOp]))
                    return
                
                } else if (msg_isBang(m)) {
                    m_n_75_23_1__routemsg_RCVS_0(msg_floats([n_75_24_STATE.leftOp * n_75_24_STATE.rightOp]))
                    return
                }
            
                                throw new Error('[*], id "n_75_24", inlet "0", unsupported message : ' + msg_display(m))
                            }

function m_n_75_23_1__routemsg_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                m_n_75_23_1_sig_RCVS_0(m)
                return
            } else {
                SND_TO_NULL(m)
                return
            }
        
                                throw new Error('[_routemsg], id "m_n_75_23_1__routemsg", inlet "0", unsupported message : ' + msg_display(m))
                            }

function m_n_75_23_1_sig_RCVS_0(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            m_n_75_23_1_sig_STATE.currentValue = msg_readFloatToken(m, 0)
            return
        }
    
                                throw new Error('[sig~], id "m_n_75_23_1_sig", inlet "0", unsupported message : ' + msg_display(m))
                            }



function n_31_94_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_31_94_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_31_94_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_31_94_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_31_94_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_31_94_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_31_94_STATE.outMessages[0] = message
                n_31_94_STATE.messageTransferFunctions.splice(0, n_31_94_STATE.messageTransferFunctions.length - 1)
                n_31_94_STATE.messageTransferFunctions[0] = function (m) {
                    return n_31_94_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_31_94_STATE.messageTransferFunctions.length; i++) {
                    n_31_108_RCVS_0(n_31_94_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_31_94", inlet "0", unsupported message : ' + msg_display(m))
                            }
let n_31_108_OUTS_0 = 0
function n_31_108_RCVS_0(m) {
                                
        if (
            msg_isMatching(m, [MSG_FLOAT_TOKEN])
            || msg_isMatching(m, [MSG_FLOAT_TOKEN, MSG_FLOAT_TOKEN])
        ) {
            switch (msg_getLength(m)) {
                case 2:
                    n_line_t_setNextDuration(n_31_108_STATE, msg_readFloatToken(m, 1))
                case 1:
                    n_line_t_setNewLine(n_31_108_STATE, msg_readFloatToken(m, 0))
            }
            return

        } else if (msg_isAction(m, 'stop')) {
            n_line_t_stop(n_31_108_STATE)
            return

        }
    
                                throw new Error('[line~], id "n_31_108", inlet "0", unsupported message : ' + msg_display(m))
                            }



function n_77_29_RCVS_0(m) {
                                
                n_sl_receiveMessage(n_77_29_STATE, m)
                return
            
                                throw new Error('[hsl], id "n_77_29", inlet "0", unsupported message : ' + msg_display(m))
                            }

function m_n_77_40_1__routemsg_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                m_n_77_40_1_sig_RCVS_0(m)
                return
            } else {
                SND_TO_NULL(m)
                return
            }
        
                                throw new Error('[_routemsg], id "m_n_77_40_1__routemsg", inlet "0", unsupported message : ' + msg_display(m))
                            }
let m_n_77_40_1_sig_OUTS_0 = 0
function m_n_77_40_1_sig_RCVS_0(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            m_n_77_40_1_sig_STATE.currentValue = msg_readFloatToken(m, 0)
            return
        }
    
                                throw new Error('[sig~], id "m_n_77_40_1_sig", inlet "0", unsupported message : ' + msg_display(m))
                            }




let n_77_48_OUTS_0 = 0
function n_77_48_RCVS_0(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_77_48_STATE.currentValue = msg_readFloatToken(m, 0)
            return
        }
    
                                throw new Error('[sig~], id "n_77_48", inlet "0", unsupported message : ' + msg_display(m))
                            }



function n_77_24_RCVS_0(m) {
                                
                if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                    n_mul_setLeft(n_77_24_STATE, msg_readFloatToken(m, 0))
                    m_n_77_23_1__routemsg_RCVS_0(msg_floats([n_77_24_STATE.leftOp * n_77_24_STATE.rightOp]))
                    return
                
                } else if (msg_isBang(m)) {
                    m_n_77_23_1__routemsg_RCVS_0(msg_floats([n_77_24_STATE.leftOp * n_77_24_STATE.rightOp]))
                    return
                }
            
                                throw new Error('[*], id "n_77_24", inlet "0", unsupported message : ' + msg_display(m))
                            }

function m_n_77_23_1__routemsg_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                m_n_77_23_1_sig_RCVS_0(m)
                return
            } else {
                SND_TO_NULL(m)
                return
            }
        
                                throw new Error('[_routemsg], id "m_n_77_23_1__routemsg", inlet "0", unsupported message : ' + msg_display(m))
                            }
let m_n_77_23_1_sig_OUTS_0 = 0
function m_n_77_23_1_sig_RCVS_0(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            m_n_77_23_1_sig_STATE.currentValue = msg_readFloatToken(m, 0)
            return
        }
    
                                throw new Error('[sig~], id "m_n_77_23_1_sig", inlet "0", unsupported message : ' + msg_display(m))
                            }



function n_31_95_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_31_95_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_31_95_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_31_95_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_31_95_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_31_95_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_31_95_STATE.outMessages[0] = message
                n_31_95_STATE.messageTransferFunctions.splice(0, n_31_95_STATE.messageTransferFunctions.length - 1)
                n_31_95_STATE.messageTransferFunctions[0] = function (m) {
                    return n_31_95_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_31_95_STATE.messageTransferFunctions.length; i++) {
                    n_31_109_RCVS_0(n_31_95_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_31_95", inlet "0", unsupported message : ' + msg_display(m))
                            }
let n_31_109_OUTS_0 = 0
function n_31_109_RCVS_0(m) {
                                
        if (
            msg_isMatching(m, [MSG_FLOAT_TOKEN])
            || msg_isMatching(m, [MSG_FLOAT_TOKEN, MSG_FLOAT_TOKEN])
        ) {
            switch (msg_getLength(m)) {
                case 2:
                    n_line_t_setNextDuration(n_31_109_STATE, msg_readFloatToken(m, 1))
                case 1:
                    n_line_t_setNewLine(n_31_109_STATE, msg_readFloatToken(m, 0))
            }
            return

        } else if (msg_isAction(m, 'stop')) {
            n_line_t_stop(n_31_109_STATE)
            return

        }
    
                                throw new Error('[line~], id "n_31_109", inlet "0", unsupported message : ' + msg_display(m))
                            }



function n_33_10_RCVS_0(m) {
                                
        n_33_1_RCVS_0(msg_floats([messageTokenToFloat(m, 0)]))
n_33_0_RCVS_0(msg_floats([messageTokenToFloat(m, 0)]))
        return
    
                                throw new Error('[trigger], id "n_33_10", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_33_0_RCVS_0(m) {
                                
        if (!n_33_0_STATE.isClosed) {
            n_33_7_RCVS_0(m)
        }
        return
    
                                throw new Error('[spigot], id "n_33_0", inlet "0", unsupported message : ' + msg_display(m))
                            }
function n_33_0_RCVS_1(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_spigot_setIsClosed(n_33_0_STATE, msg_readFloatToken(m, 0))
            return
        }
    
                                throw new Error('[spigot], id "n_33_0", inlet "1", unsupported message : ' + msg_display(m))
                            }

function n_33_7_RCVS_0(m) {
                                
        n_33_6_RCVS_0(msg_bang())
n_33_8_RCVS_0(msg_bang())
n_33_16_RCVS_1(msg_floats([messageTokenToFloat(m, 0)]))
        return
    
                                throw new Error('[trigger], id "n_33_7", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_33_16_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                n_float_int_setValueFloat(n_33_16_STATE, msg_readFloatToken(m, 0))
                n_33_16_SNDS_0(msg_floats([n_33_16_STATE.value]))
                return 

            } else if (msg_isBang(m)) {
                n_33_16_SNDS_0(msg_floats([n_33_16_STATE.value]))
                return
                
            }
        
                                throw new Error('[float], id "n_33_16", inlet "0", unsupported message : ' + msg_display(m))
                            }
function n_33_16_RCVS_1(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_float_int_setValueFloat(n_33_16_STATE, msg_readFloatToken(m, 0))
            return
        }
    
                                throw new Error('[float], id "n_33_16", inlet "1", unsupported message : ' + msg_display(m))
                            }

function n_31_67_RCVS_0(m) {
                                
            msgBusPublish(n_31_67_STATE.busName, m)
            return
        
                                throw new Error('[send], id "n_31_67", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_31_68_RCVS_0(m) {
                                
            msgBusPublish(n_31_68_STATE.busName, m)
            return
        
                                throw new Error('[send], id "n_31_68", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_31_69_RCVS_0(m) {
                                
            msgBusPublish(n_31_69_STATE.busName, m)
            return
        
                                throw new Error('[send], id "n_31_69", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_31_70_RCVS_0(m) {
                                
            msgBusPublish(n_31_70_STATE.busName, m)
            return
        
                                throw new Error('[send], id "n_31_70", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_33_8_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_33_8_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_33_8_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_33_8_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_33_8_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_33_8_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_33_8_STATE.outMessages[0] = message
                n_33_8_STATE.messageTransferFunctions.splice(0, n_33_8_STATE.messageTransferFunctions.length - 1)
                n_33_8_STATE.messageTransferFunctions[0] = function (m) {
                    return n_33_8_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_33_8_STATE.messageTransferFunctions.length; i++) {
                    n_33_1_RCVS_1(n_33_8_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_33_8", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_33_1_RCVS_0(m) {
                                
        if (!n_33_1_STATE.isClosed) {
            n_31_61_RCVS_0(m)
        }
        return
    
                                throw new Error('[spigot], id "n_33_1", inlet "0", unsupported message : ' + msg_display(m))
                            }
function n_33_1_RCVS_1(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_spigot_setIsClosed(n_33_1_STATE, msg_readFloatToken(m, 0))
            return
        }
    
                                throw new Error('[spigot], id "n_33_1", inlet "1", unsupported message : ' + msg_display(m))
                            }

function n_31_61_RCVS_0(m) {
                                
        n_31_61_SNDS_1(msg_bang())
n_31_66_RCVS_0(msg_floats([messageTokenToFloat(m, 0)]))
        return
    
                                throw new Error('[trigger], id "n_31_61", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_31_66_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                n_float_int_setValueFloat(n_31_66_STATE, msg_readFloatToken(m, 0))
                n_31_66_SNDS_0(msg_floats([n_31_66_STATE.value]))
                return 

            } else if (msg_isBang(m)) {
                n_31_66_SNDS_0(msg_floats([n_31_66_STATE.value]))
                return
                
            }
        
                                throw new Error('[float], id "n_31_66", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_31_62_RCVS_0(m) {
                                
        if (msg_isAction(m, 'clear')) {
            n_pipe_clear(n_31_62_STATE)
            return 

        } else if (msg_isAction(m, 'flush')) {
            if (n_31_62_STATE.scheduledMessages.length) {
                n_pipe_sendMessages(
                    n_31_62_STATE, 
                    n_31_62_STATE.scheduledMessages[n_31_62_STATE.scheduledMessages.length - 1].frame
                )
            }
            return

        } else {
            const inMessage = msg_isBang(m) ? msg_create([]): m
            const insertIndex = n_pipe_prepareMessageScheduling(
                n_31_62_STATE, 
                () => {
                    n_pipe_sendMessages(n_31_62_STATE, FRAME)
                },
            )

            
                        if (msg_getLength(inMessage) > 0) {
                            n_31_62_STATE.scheduledMessages[insertIndex + 0].message = 
                                msg_floats([messageTokenToFloat(inMessage, 0)])
                            n_31_62_STATE.outputMessages[0] 
                                = n_31_62_STATE.scheduledMessages[insertIndex + 0].message
                        } else {
                            n_31_62_STATE.scheduledMessages[insertIndex + 0].message 
                                = n_31_62_STATE.outputMessages[0]
                        }
                    

            return
        }
    
                                throw new Error('[pipe], id "n_31_62", inlet "0", unsupported message : ' + msg_display(m))
                            }
function n_31_62_RCVS_1(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_pipe_setDelay(n_31_62_STATE, msg_readFloatToken(m, 0))
            return
        }
    
                                throw new Error('[pipe], id "n_31_62", inlet "1", unsupported message : ' + msg_display(m))
                            }

function n_31_63_RCVS_0(m) {
                                
        if (msg_isAction(m, 'clear')) {
            n_pipe_clear(n_31_63_STATE)
            return 

        } else if (msg_isAction(m, 'flush')) {
            if (n_31_63_STATE.scheduledMessages.length) {
                n_pipe_sendMessages(
                    n_31_63_STATE, 
                    n_31_63_STATE.scheduledMessages[n_31_63_STATE.scheduledMessages.length - 1].frame
                )
            }
            return

        } else {
            const inMessage = msg_isBang(m) ? msg_create([]): m
            const insertIndex = n_pipe_prepareMessageScheduling(
                n_31_63_STATE, 
                () => {
                    n_pipe_sendMessages(n_31_63_STATE, FRAME)
                },
            )

            
                        if (msg_getLength(inMessage) > 0) {
                            n_31_63_STATE.scheduledMessages[insertIndex + 0].message = 
                                msg_floats([messageTokenToFloat(inMessage, 0)])
                            n_31_63_STATE.outputMessages[0] 
                                = n_31_63_STATE.scheduledMessages[insertIndex + 0].message
                        } else {
                            n_31_63_STATE.scheduledMessages[insertIndex + 0].message 
                                = n_31_63_STATE.outputMessages[0]
                        }
                    

            return
        }
    
                                throw new Error('[pipe], id "n_31_63", inlet "0", unsupported message : ' + msg_display(m))
                            }
function n_31_63_RCVS_1(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_pipe_setDelay(n_31_63_STATE, msg_readFloatToken(m, 0))
            return
        }
    
                                throw new Error('[pipe], id "n_31_63", inlet "1", unsupported message : ' + msg_display(m))
                            }

function n_31_64_RCVS_0(m) {
                                
        if (msg_isAction(m, 'clear')) {
            n_pipe_clear(n_31_64_STATE)
            return 

        } else if (msg_isAction(m, 'flush')) {
            if (n_31_64_STATE.scheduledMessages.length) {
                n_pipe_sendMessages(
                    n_31_64_STATE, 
                    n_31_64_STATE.scheduledMessages[n_31_64_STATE.scheduledMessages.length - 1].frame
                )
            }
            return

        } else {
            const inMessage = msg_isBang(m) ? msg_create([]): m
            const insertIndex = n_pipe_prepareMessageScheduling(
                n_31_64_STATE, 
                () => {
                    n_pipe_sendMessages(n_31_64_STATE, FRAME)
                },
            )

            
                        if (msg_getLength(inMessage) > 0) {
                            n_31_64_STATE.scheduledMessages[insertIndex + 0].message = 
                                msg_floats([messageTokenToFloat(inMessage, 0)])
                            n_31_64_STATE.outputMessages[0] 
                                = n_31_64_STATE.scheduledMessages[insertIndex + 0].message
                        } else {
                            n_31_64_STATE.scheduledMessages[insertIndex + 0].message 
                                = n_31_64_STATE.outputMessages[0]
                        }
                    

            return
        }
    
                                throw new Error('[pipe], id "n_31_64", inlet "0", unsupported message : ' + msg_display(m))
                            }
function n_31_64_RCVS_1(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_pipe_setDelay(n_31_64_STATE, msg_readFloatToken(m, 0))
            return
        }
    
                                throw new Error('[pipe], id "n_31_64", inlet "1", unsupported message : ' + msg_display(m))
                            }

function n_31_65_RCVS_0(m) {
                                
        if (msg_isAction(m, 'clear')) {
            n_pipe_clear(n_31_65_STATE)
            return 

        } else if (msg_isAction(m, 'flush')) {
            if (n_31_65_STATE.scheduledMessages.length) {
                n_pipe_sendMessages(
                    n_31_65_STATE, 
                    n_31_65_STATE.scheduledMessages[n_31_65_STATE.scheduledMessages.length - 1].frame
                )
            }
            return

        } else {
            const inMessage = msg_isBang(m) ? msg_create([]): m
            const insertIndex = n_pipe_prepareMessageScheduling(
                n_31_65_STATE, 
                () => {
                    n_pipe_sendMessages(n_31_65_STATE, FRAME)
                },
            )

            
                        if (msg_getLength(inMessage) > 0) {
                            n_31_65_STATE.scheduledMessages[insertIndex + 0].message = 
                                msg_floats([messageTokenToFloat(inMessage, 0)])
                            n_31_65_STATE.outputMessages[0] 
                                = n_31_65_STATE.scheduledMessages[insertIndex + 0].message
                        } else {
                            n_31_65_STATE.scheduledMessages[insertIndex + 0].message 
                                = n_31_65_STATE.outputMessages[0]
                        }
                    

            return
        }
    
                                throw new Error('[pipe], id "n_31_65", inlet "0", unsupported message : ' + msg_display(m))
                            }
function n_31_65_RCVS_1(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_pipe_setDelay(n_31_65_STATE, msg_readFloatToken(m, 0))
            return
        }
    
                                throw new Error('[pipe], id "n_31_65", inlet "1", unsupported message : ' + msg_display(m))
                            }

function n_31_80_RCVS_0(m) {
                                
        if (msg_isBang(m)) {
            n_31_79_RCVS_0(msg_floats([Math.floor(Math.random() * n_31_80_STATE.maxValue)]))
            return
        } else if (
            msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
            && msg_readStringToken(m, 0) === 'seed'
        ) {
            console.log('WARNING : seed not implemented yet for [random]')
            return
        }
    
                                throw new Error('[random], id "n_31_80", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_31_79_RCVS_0(m) {
                                
                if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                    n_add_setLeft(n_31_79_STATE, msg_readFloatToken(m, 0))
                    n_31_62_RCVS_1(msg_floats([n_31_79_STATE.leftOp + n_31_79_STATE.rightOp]))
                    return
                
                } else if (msg_isBang(m)) {
                    n_31_62_RCVS_1(msg_floats([n_31_79_STATE.leftOp + n_31_79_STATE.rightOp]))
                    return
                }
            
                                throw new Error('[+], id "n_31_79", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_31_84_RCVS_0(m) {
                                
        if (msg_isBang(m)) {
            n_31_81_RCVS_0(msg_floats([Math.floor(Math.random() * n_31_84_STATE.maxValue)]))
            return
        } else if (
            msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
            && msg_readStringToken(m, 0) === 'seed'
        ) {
            console.log('WARNING : seed not implemented yet for [random]')
            return
        }
    
                                throw new Error('[random], id "n_31_84", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_31_81_RCVS_0(m) {
                                
                if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                    n_add_setLeft(n_31_81_STATE, msg_readFloatToken(m, 0))
                    n_31_63_RCVS_1(msg_floats([n_31_81_STATE.leftOp + n_31_81_STATE.rightOp]))
                    return
                
                } else if (msg_isBang(m)) {
                    n_31_63_RCVS_1(msg_floats([n_31_81_STATE.leftOp + n_31_81_STATE.rightOp]))
                    return
                }
            
                                throw new Error('[+], id "n_31_81", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_31_85_RCVS_0(m) {
                                
        if (msg_isBang(m)) {
            n_31_82_RCVS_0(msg_floats([Math.floor(Math.random() * n_31_85_STATE.maxValue)]))
            return
        } else if (
            msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
            && msg_readStringToken(m, 0) === 'seed'
        ) {
            console.log('WARNING : seed not implemented yet for [random]')
            return
        }
    
                                throw new Error('[random], id "n_31_85", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_31_82_RCVS_0(m) {
                                
                if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                    n_add_setLeft(n_31_82_STATE, msg_readFloatToken(m, 0))
                    n_31_64_RCVS_1(msg_floats([n_31_82_STATE.leftOp + n_31_82_STATE.rightOp]))
                    return
                
                } else if (msg_isBang(m)) {
                    n_31_64_RCVS_1(msg_floats([n_31_82_STATE.leftOp + n_31_82_STATE.rightOp]))
                    return
                }
            
                                throw new Error('[+], id "n_31_82", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_31_86_RCVS_0(m) {
                                
        if (msg_isBang(m)) {
            n_31_83_RCVS_0(msg_floats([Math.floor(Math.random() * n_31_86_STATE.maxValue)]))
            return
        } else if (
            msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
            && msg_readStringToken(m, 0) === 'seed'
        ) {
            console.log('WARNING : seed not implemented yet for [random]')
            return
        }
    
                                throw new Error('[random], id "n_31_86", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_31_83_RCVS_0(m) {
                                
                if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                    n_add_setLeft(n_31_83_STATE, msg_readFloatToken(m, 0))
                    n_31_65_RCVS_1(msg_floats([n_31_83_STATE.leftOp + n_31_83_STATE.rightOp]))
                    return
                
                } else if (msg_isBang(m)) {
                    n_31_65_RCVS_1(msg_floats([n_31_83_STATE.leftOp + n_31_83_STATE.rightOp]))
                    return
                }
            
                                throw new Error('[+], id "n_31_83", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_33_6_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_33_6_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_33_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_33_6_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_33_6_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_33_6_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_33_6_STATE.outMessages[0] = message
                n_33_6_STATE.messageTransferFunctions.splice(0, n_33_6_STATE.messageTransferFunctions.length - 1)
                n_33_6_STATE.messageTransferFunctions[0] = function (m) {
                    return n_33_6_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_33_6_STATE.messageTransferFunctions.length; i++) {
                    n_33_0_RCVS_1(n_33_6_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_33_6", inlet "0", unsupported message : ' + msg_display(m))
                            }



function n_71_45_RCVS_0(m) {
                                
        n_71_46_RCVS_0(msg_bang())
n_71_44_RCVS_1(msg_floats([messageTokenToFloat(m, 0)]))
        return
    
                                throw new Error('[trigger], id "n_71_45", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_71_44_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                n_float_int_setValueFloat(n_71_44_STATE, msg_readFloatToken(m, 0))
                n_72_0_RCVS_0(msg_floats([n_71_44_STATE.value]))
                return 

            } else if (msg_isBang(m)) {
                n_72_0_RCVS_0(msg_floats([n_71_44_STATE.value]))
                return
                
            }
        
                                throw new Error('[float], id "n_71_44", inlet "0", unsupported message : ' + msg_display(m))
                            }
function n_71_44_RCVS_1(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_float_int_setValueFloat(n_71_44_STATE, msg_readFloatToken(m, 0))
            return
        }
    
                                throw new Error('[float], id "n_71_44", inlet "1", unsupported message : ' + msg_display(m))
                            }

function n_72_0_RCVS_0(m) {
                                
                
                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 0
                        ) {
                            n_72_10_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 1
                        ) {
                            n_72_1_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 2
                        ) {
                            n_72_2_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 3
                        ) {
                            n_72_3_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 4
                        ) {
                            n_72_12_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 5
                        ) {
                            n_72_4_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 6
                        ) {
                            n_72_5_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 7
                        ) {
                            n_72_6_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 8
                        ) {
                            n_72_7_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 9
                        ) {
                            n_72_8_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 10
                        ) {
                            n_72_9_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 11
                        ) {
                            n_72_11_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                SND_TO_NULL(m)
                return
            
                                throw new Error('[route], id "n_72_0", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_72_10_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_72_10_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_72_10_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_72_10_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_72_10_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_72_10_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_72_10_STATE.outMessages[0] = message
                n_72_10_STATE.messageTransferFunctions.splice(0, n_72_10_STATE.messageTransferFunctions.length - 1)
                n_72_10_STATE.messageTransferFunctions[0] = function (m) {
                    return n_72_10_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_72_10_STATE.messageTransferFunctions.length; i++) {
                    n_71_36_RCVS_0(n_72_10_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_72_10", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_71_36_RCVS_0(m) {
                                
                    if (msg_isBang(m)) {
                        n_71_35_RCVS_0(msg_getLength(n_71_36_STATE.currentList) === 0 ? msg_bang(): n_71_36_STATE.currentList)
                    } else {
                        n_71_35_RCVS_0(msg_getLength(n_71_36_STATE.currentList) === 0 && msg_getLength(m) === 0 ? msg_bang(): msg_concat(n_71_36_STATE.currentList, m))
                    }
                    return
                
                                throw new Error('[list], id "n_71_36", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_71_35_RCVS_0(m) {
                                
                if (n_71_35_STATE.filterType === MSG_STRING_TOKEN) {
                    if (
                        (n_71_35_STATE.stringFilter === 'float'
                            && msg_isFloatToken(m, 0))
                        || (n_71_35_STATE.stringFilter === 'symbol'
                            && msg_isStringToken(m, 0))
                        || (n_71_35_STATE.stringFilter === 'list'
                            && msg_getLength(m) > 1)
                        || (n_71_35_STATE.stringFilter === 'bang' 
                            && msg_isBang(m))
                    ) {
                        m_n_71_53_0__routemsg_RCVS_0(m)
                        return
                    
                    } else if (
                        msg_isStringToken(m, 0)
                        && msg_readStringToken(m, 0) === n_71_35_STATE.stringFilter
                    ) {
                        m_n_71_53_0__routemsg_RCVS_0(msg_emptyToBang(msg_shift(m)))
                        return
                    }

                } else if (
                    msg_isFloatToken(m, 0)
                    && msg_readFloatToken(m, 0) === n_71_35_STATE.floatFilter
                ) {
                    m_n_71_53_0__routemsg_RCVS_0(msg_emptyToBang(msg_shift(m)))
                    return
                }
            
                SND_TO_NULL(m)
            return
            
                                throw new Error('[route], id "n_71_35", inlet "0", unsupported message : ' + msg_display(m))
                            }

function m_n_71_53_0__routemsg_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                SND_TO_NULL(m)
                return
            } else {
                n_71_53_RCVS_0_message(m)
                return
            }
        
                                throw new Error('[_routemsg], id "m_n_71_53_0__routemsg", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_71_53_RCVS_0_message(m) {
                                
            if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_STRING_TOKEN])
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_tabbase_setArrayName(
                    n_71_53_STATE,
                    msg_readStringToken(m, 1),
                    () => n_tabread_t_setArrayNameFinalize(n_71_53_STATE),
                )
                return
    
            }
        
                                throw new Error('[tabread~], id "n_71_53", inlet "0_message", unsupported message : ' + msg_display(m))
                            }

function n_72_1_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_72_1_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_72_1_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_72_1_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_72_1_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_72_1_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_72_1_STATE.outMessages[0] = message
                n_72_1_STATE.messageTransferFunctions.splice(0, n_72_1_STATE.messageTransferFunctions.length - 1)
                n_72_1_STATE.messageTransferFunctions[0] = function (m) {
                    return n_72_1_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_72_1_STATE.messageTransferFunctions.length; i++) {
                    n_71_36_RCVS_0(n_72_1_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_72_1", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_72_2_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_72_2_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_72_2_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_72_2_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_72_2_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_72_2_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_72_2_STATE.outMessages[0] = message
                n_72_2_STATE.messageTransferFunctions.splice(0, n_72_2_STATE.messageTransferFunctions.length - 1)
                n_72_2_STATE.messageTransferFunctions[0] = function (m) {
                    return n_72_2_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_72_2_STATE.messageTransferFunctions.length; i++) {
                    n_71_36_RCVS_0(n_72_2_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_72_2", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_72_3_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_72_3_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_72_3_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_72_3_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_72_3_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_72_3_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_72_3_STATE.outMessages[0] = message
                n_72_3_STATE.messageTransferFunctions.splice(0, n_72_3_STATE.messageTransferFunctions.length - 1)
                n_72_3_STATE.messageTransferFunctions[0] = function (m) {
                    return n_72_3_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_72_3_STATE.messageTransferFunctions.length; i++) {
                    n_71_36_RCVS_0(n_72_3_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_72_3", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_72_12_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_72_12_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_72_12_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_72_12_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_72_12_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_72_12_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_72_12_STATE.outMessages[0] = message
                n_72_12_STATE.messageTransferFunctions.splice(0, n_72_12_STATE.messageTransferFunctions.length - 1)
                n_72_12_STATE.messageTransferFunctions[0] = function (m) {
                    return n_72_12_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_72_12_STATE.messageTransferFunctions.length; i++) {
                    n_71_36_RCVS_0(n_72_12_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_72_12", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_72_4_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_72_4_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_72_4_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_72_4_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_72_4_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_72_4_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_72_4_STATE.outMessages[0] = message
                n_72_4_STATE.messageTransferFunctions.splice(0, n_72_4_STATE.messageTransferFunctions.length - 1)
                n_72_4_STATE.messageTransferFunctions[0] = function (m) {
                    return n_72_4_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_72_4_STATE.messageTransferFunctions.length; i++) {
                    n_71_36_RCVS_0(n_72_4_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_72_4", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_72_5_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_72_5_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_72_5_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_72_5_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_72_5_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_72_5_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_72_5_STATE.outMessages[0] = message
                n_72_5_STATE.messageTransferFunctions.splice(0, n_72_5_STATE.messageTransferFunctions.length - 1)
                n_72_5_STATE.messageTransferFunctions[0] = function (m) {
                    return n_72_5_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_72_5_STATE.messageTransferFunctions.length; i++) {
                    n_71_36_RCVS_0(n_72_5_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_72_5", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_72_6_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_72_6_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_72_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_72_6_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_72_6_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_72_6_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_72_6_STATE.outMessages[0] = message
                n_72_6_STATE.messageTransferFunctions.splice(0, n_72_6_STATE.messageTransferFunctions.length - 1)
                n_72_6_STATE.messageTransferFunctions[0] = function (m) {
                    return n_72_6_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_72_6_STATE.messageTransferFunctions.length; i++) {
                    n_71_36_RCVS_0(n_72_6_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_72_6", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_72_7_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_72_7_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_72_7_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_72_7_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_72_7_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_72_7_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_72_7_STATE.outMessages[0] = message
                n_72_7_STATE.messageTransferFunctions.splice(0, n_72_7_STATE.messageTransferFunctions.length - 1)
                n_72_7_STATE.messageTransferFunctions[0] = function (m) {
                    return n_72_7_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_72_7_STATE.messageTransferFunctions.length; i++) {
                    n_71_36_RCVS_0(n_72_7_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_72_7", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_72_8_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_72_8_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_72_8_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_72_8_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_72_8_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_72_8_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_72_8_STATE.outMessages[0] = message
                n_72_8_STATE.messageTransferFunctions.splice(0, n_72_8_STATE.messageTransferFunctions.length - 1)
                n_72_8_STATE.messageTransferFunctions[0] = function (m) {
                    return n_72_8_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_72_8_STATE.messageTransferFunctions.length; i++) {
                    n_71_36_RCVS_0(n_72_8_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_72_8", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_72_9_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_72_9_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_72_9_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_72_9_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_72_9_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_72_9_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_72_9_STATE.outMessages[0] = message
                n_72_9_STATE.messageTransferFunctions.splice(0, n_72_9_STATE.messageTransferFunctions.length - 1)
                n_72_9_STATE.messageTransferFunctions[0] = function (m) {
                    return n_72_9_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_72_9_STATE.messageTransferFunctions.length; i++) {
                    n_71_36_RCVS_0(n_72_9_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_72_9", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_72_11_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_72_11_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_72_11_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_72_11_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_72_11_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_72_11_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_72_11_STATE.outMessages[0] = message
                n_72_11_STATE.messageTransferFunctions.splice(0, n_72_11_STATE.messageTransferFunctions.length - 1)
                n_72_11_STATE.messageTransferFunctions[0] = function (m) {
                    return n_72_11_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_72_11_STATE.messageTransferFunctions.length; i++) {
                    n_71_36_RCVS_0(n_72_11_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_72_11", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_71_46_RCVS_0(m) {
                                
            if (msg_getLength(m) === 1) {
                if (msg_isStringToken(m, 0)) {
                    const action = msg_readStringToken(m, 0)
                    if (action === 'bang' || action === 'start') {
                        n_delay_scheduleDelay(
                            n_71_46_STATE, 
                            () => n_71_44_RCVS_0(msg_bang()),
                            FRAME,
                        )
                        return
                    } else if (action === 'stop') {
                        n_delay_stop(n_71_46_STATE)
                        return
                    }
                    
                } else if (msg_isFloatToken(m, 0)) {
                    n_delay_setDelay(n_71_46_STATE, msg_readFloatToken(m, 0))
                    n_delay_scheduleDelay(
                        n_71_46_STATE,
                        () => n_71_44_RCVS_0(msg_bang()),
                        FRAME,
                    )
                    return 
                }
            
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN, MSG_STRING_TOKEN])
                && msg_readStringToken(m, 0) === 'tempo'
            ) {
                n_71_46_STATE.sampleRatio = computeUnitInSamples(
                    SAMPLE_RATE, 
                    msg_readFloatToken(m, 1), 
                    msg_readStringToken(m, 2)
                )
                return
            }
        
                                throw new Error('[delay], id "n_71_46", inlet "0", unsupported message : ' + msg_display(m))
                            }



function n_73_45_RCVS_0(m) {
                                
        n_73_46_RCVS_0(msg_bang())
n_73_44_RCVS_1(msg_floats([messageTokenToFloat(m, 0)]))
        return
    
                                throw new Error('[trigger], id "n_73_45", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_73_44_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                n_float_int_setValueFloat(n_73_44_STATE, msg_readFloatToken(m, 0))
                n_74_0_RCVS_0(msg_floats([n_73_44_STATE.value]))
                return 

            } else if (msg_isBang(m)) {
                n_74_0_RCVS_0(msg_floats([n_73_44_STATE.value]))
                return
                
            }
        
                                throw new Error('[float], id "n_73_44", inlet "0", unsupported message : ' + msg_display(m))
                            }
function n_73_44_RCVS_1(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_float_int_setValueFloat(n_73_44_STATE, msg_readFloatToken(m, 0))
            return
        }
    
                                throw new Error('[float], id "n_73_44", inlet "1", unsupported message : ' + msg_display(m))
                            }

function n_74_0_RCVS_0(m) {
                                
                
                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 0
                        ) {
                            n_74_10_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 1
                        ) {
                            n_74_1_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 2
                        ) {
                            n_74_2_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 3
                        ) {
                            n_74_3_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 4
                        ) {
                            n_74_12_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 5
                        ) {
                            n_74_4_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 6
                        ) {
                            n_74_5_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 7
                        ) {
                            n_74_6_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 8
                        ) {
                            n_74_7_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 9
                        ) {
                            n_74_8_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 10
                        ) {
                            n_74_9_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 11
                        ) {
                            n_74_11_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                SND_TO_NULL(m)
                return
            
                                throw new Error('[route], id "n_74_0", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_74_10_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_74_10_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_74_10_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_74_10_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_74_10_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_74_10_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_74_10_STATE.outMessages[0] = message
                n_74_10_STATE.messageTransferFunctions.splice(0, n_74_10_STATE.messageTransferFunctions.length - 1)
                n_74_10_STATE.messageTransferFunctions[0] = function (m) {
                    return n_74_10_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_74_10_STATE.messageTransferFunctions.length; i++) {
                    n_73_36_RCVS_0(n_74_10_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_74_10", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_73_36_RCVS_0(m) {
                                
                    if (msg_isBang(m)) {
                        n_73_35_RCVS_0(msg_getLength(n_73_36_STATE.currentList) === 0 ? msg_bang(): n_73_36_STATE.currentList)
                    } else {
                        n_73_35_RCVS_0(msg_getLength(n_73_36_STATE.currentList) === 0 && msg_getLength(m) === 0 ? msg_bang(): msg_concat(n_73_36_STATE.currentList, m))
                    }
                    return
                
                                throw new Error('[list], id "n_73_36", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_73_35_RCVS_0(m) {
                                
                if (n_73_35_STATE.filterType === MSG_STRING_TOKEN) {
                    if (
                        (n_73_35_STATE.stringFilter === 'float'
                            && msg_isFloatToken(m, 0))
                        || (n_73_35_STATE.stringFilter === 'symbol'
                            && msg_isStringToken(m, 0))
                        || (n_73_35_STATE.stringFilter === 'list'
                            && msg_getLength(m) > 1)
                        || (n_73_35_STATE.stringFilter === 'bang' 
                            && msg_isBang(m))
                    ) {
                        m_n_73_53_0__routemsg_RCVS_0(m)
                        return
                    
                    } else if (
                        msg_isStringToken(m, 0)
                        && msg_readStringToken(m, 0) === n_73_35_STATE.stringFilter
                    ) {
                        m_n_73_53_0__routemsg_RCVS_0(msg_emptyToBang(msg_shift(m)))
                        return
                    }

                } else if (
                    msg_isFloatToken(m, 0)
                    && msg_readFloatToken(m, 0) === n_73_35_STATE.floatFilter
                ) {
                    m_n_73_53_0__routemsg_RCVS_0(msg_emptyToBang(msg_shift(m)))
                    return
                }
            
                SND_TO_NULL(m)
            return
            
                                throw new Error('[route], id "n_73_35", inlet "0", unsupported message : ' + msg_display(m))
                            }

function m_n_73_53_0__routemsg_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                SND_TO_NULL(m)
                return
            } else {
                n_73_53_RCVS_0_message(m)
                return
            }
        
                                throw new Error('[_routemsg], id "m_n_73_53_0__routemsg", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_73_53_RCVS_0_message(m) {
                                
            if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_STRING_TOKEN])
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_tabbase_setArrayName(
                    n_73_53_STATE,
                    msg_readStringToken(m, 1),
                    () => n_tabread_t_setArrayNameFinalize(n_73_53_STATE),
                )
                return
    
            }
        
                                throw new Error('[tabread~], id "n_73_53", inlet "0_message", unsupported message : ' + msg_display(m))
                            }

function n_74_1_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_74_1_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_74_1_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_74_1_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_74_1_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_74_1_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_74_1_STATE.outMessages[0] = message
                n_74_1_STATE.messageTransferFunctions.splice(0, n_74_1_STATE.messageTransferFunctions.length - 1)
                n_74_1_STATE.messageTransferFunctions[0] = function (m) {
                    return n_74_1_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_74_1_STATE.messageTransferFunctions.length; i++) {
                    n_73_36_RCVS_0(n_74_1_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_74_1", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_74_2_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_74_2_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_74_2_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_74_2_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_74_2_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_74_2_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_74_2_STATE.outMessages[0] = message
                n_74_2_STATE.messageTransferFunctions.splice(0, n_74_2_STATE.messageTransferFunctions.length - 1)
                n_74_2_STATE.messageTransferFunctions[0] = function (m) {
                    return n_74_2_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_74_2_STATE.messageTransferFunctions.length; i++) {
                    n_73_36_RCVS_0(n_74_2_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_74_2", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_74_3_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_74_3_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_74_3_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_74_3_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_74_3_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_74_3_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_74_3_STATE.outMessages[0] = message
                n_74_3_STATE.messageTransferFunctions.splice(0, n_74_3_STATE.messageTransferFunctions.length - 1)
                n_74_3_STATE.messageTransferFunctions[0] = function (m) {
                    return n_74_3_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_74_3_STATE.messageTransferFunctions.length; i++) {
                    n_73_36_RCVS_0(n_74_3_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_74_3", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_74_12_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_74_12_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_74_12_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_74_12_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_74_12_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_74_12_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_74_12_STATE.outMessages[0] = message
                n_74_12_STATE.messageTransferFunctions.splice(0, n_74_12_STATE.messageTransferFunctions.length - 1)
                n_74_12_STATE.messageTransferFunctions[0] = function (m) {
                    return n_74_12_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_74_12_STATE.messageTransferFunctions.length; i++) {
                    n_73_36_RCVS_0(n_74_12_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_74_12", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_74_4_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_74_4_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_74_4_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_74_4_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_74_4_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_74_4_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_74_4_STATE.outMessages[0] = message
                n_74_4_STATE.messageTransferFunctions.splice(0, n_74_4_STATE.messageTransferFunctions.length - 1)
                n_74_4_STATE.messageTransferFunctions[0] = function (m) {
                    return n_74_4_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_74_4_STATE.messageTransferFunctions.length; i++) {
                    n_73_36_RCVS_0(n_74_4_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_74_4", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_74_5_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_74_5_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_74_5_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_74_5_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_74_5_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_74_5_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_74_5_STATE.outMessages[0] = message
                n_74_5_STATE.messageTransferFunctions.splice(0, n_74_5_STATE.messageTransferFunctions.length - 1)
                n_74_5_STATE.messageTransferFunctions[0] = function (m) {
                    return n_74_5_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_74_5_STATE.messageTransferFunctions.length; i++) {
                    n_73_36_RCVS_0(n_74_5_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_74_5", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_74_6_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_74_6_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_74_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_74_6_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_74_6_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_74_6_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_74_6_STATE.outMessages[0] = message
                n_74_6_STATE.messageTransferFunctions.splice(0, n_74_6_STATE.messageTransferFunctions.length - 1)
                n_74_6_STATE.messageTransferFunctions[0] = function (m) {
                    return n_74_6_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_74_6_STATE.messageTransferFunctions.length; i++) {
                    n_73_36_RCVS_0(n_74_6_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_74_6", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_74_7_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_74_7_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_74_7_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_74_7_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_74_7_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_74_7_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_74_7_STATE.outMessages[0] = message
                n_74_7_STATE.messageTransferFunctions.splice(0, n_74_7_STATE.messageTransferFunctions.length - 1)
                n_74_7_STATE.messageTransferFunctions[0] = function (m) {
                    return n_74_7_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_74_7_STATE.messageTransferFunctions.length; i++) {
                    n_73_36_RCVS_0(n_74_7_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_74_7", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_74_8_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_74_8_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_74_8_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_74_8_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_74_8_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_74_8_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_74_8_STATE.outMessages[0] = message
                n_74_8_STATE.messageTransferFunctions.splice(0, n_74_8_STATE.messageTransferFunctions.length - 1)
                n_74_8_STATE.messageTransferFunctions[0] = function (m) {
                    return n_74_8_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_74_8_STATE.messageTransferFunctions.length; i++) {
                    n_73_36_RCVS_0(n_74_8_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_74_8", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_74_9_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_74_9_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_74_9_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_74_9_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_74_9_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_74_9_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_74_9_STATE.outMessages[0] = message
                n_74_9_STATE.messageTransferFunctions.splice(0, n_74_9_STATE.messageTransferFunctions.length - 1)
                n_74_9_STATE.messageTransferFunctions[0] = function (m) {
                    return n_74_9_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_74_9_STATE.messageTransferFunctions.length; i++) {
                    n_73_36_RCVS_0(n_74_9_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_74_9", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_74_11_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_74_11_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_74_11_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_74_11_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_74_11_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_74_11_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_74_11_STATE.outMessages[0] = message
                n_74_11_STATE.messageTransferFunctions.splice(0, n_74_11_STATE.messageTransferFunctions.length - 1)
                n_74_11_STATE.messageTransferFunctions[0] = function (m) {
                    return n_74_11_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_74_11_STATE.messageTransferFunctions.length; i++) {
                    n_73_36_RCVS_0(n_74_11_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_74_11", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_73_46_RCVS_0(m) {
                                
            if (msg_getLength(m) === 1) {
                if (msg_isStringToken(m, 0)) {
                    const action = msg_readStringToken(m, 0)
                    if (action === 'bang' || action === 'start') {
                        n_delay_scheduleDelay(
                            n_73_46_STATE, 
                            () => n_73_44_RCVS_0(msg_bang()),
                            FRAME,
                        )
                        return
                    } else if (action === 'stop') {
                        n_delay_stop(n_73_46_STATE)
                        return
                    }
                    
                } else if (msg_isFloatToken(m, 0)) {
                    n_delay_setDelay(n_73_46_STATE, msg_readFloatToken(m, 0))
                    n_delay_scheduleDelay(
                        n_73_46_STATE,
                        () => n_73_44_RCVS_0(msg_bang()),
                        FRAME,
                    )
                    return 
                }
            
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN, MSG_STRING_TOKEN])
                && msg_readStringToken(m, 0) === 'tempo'
            ) {
                n_73_46_STATE.sampleRatio = computeUnitInSamples(
                    SAMPLE_RATE, 
                    msg_readFloatToken(m, 1), 
                    msg_readStringToken(m, 2)
                )
                return
            }
        
                                throw new Error('[delay], id "n_73_46", inlet "0", unsupported message : ' + msg_display(m))
                            }



function n_75_45_RCVS_0(m) {
                                
        n_75_46_RCVS_0(msg_bang())
n_75_44_RCVS_1(msg_floats([messageTokenToFloat(m, 0)]))
        return
    
                                throw new Error('[trigger], id "n_75_45", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_75_44_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                n_float_int_setValueFloat(n_75_44_STATE, msg_readFloatToken(m, 0))
                n_76_0_RCVS_0(msg_floats([n_75_44_STATE.value]))
                return 

            } else if (msg_isBang(m)) {
                n_76_0_RCVS_0(msg_floats([n_75_44_STATE.value]))
                return
                
            }
        
                                throw new Error('[float], id "n_75_44", inlet "0", unsupported message : ' + msg_display(m))
                            }
function n_75_44_RCVS_1(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_float_int_setValueFloat(n_75_44_STATE, msg_readFloatToken(m, 0))
            return
        }
    
                                throw new Error('[float], id "n_75_44", inlet "1", unsupported message : ' + msg_display(m))
                            }

function n_76_0_RCVS_0(m) {
                                
                
                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 0
                        ) {
                            n_76_10_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 1
                        ) {
                            n_76_1_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 2
                        ) {
                            n_76_2_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 3
                        ) {
                            n_76_3_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 4
                        ) {
                            n_76_12_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 5
                        ) {
                            n_76_4_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 6
                        ) {
                            n_76_5_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 7
                        ) {
                            n_76_6_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 8
                        ) {
                            n_76_7_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 9
                        ) {
                            n_76_8_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 10
                        ) {
                            n_76_9_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 11
                        ) {
                            n_76_11_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                SND_TO_NULL(m)
                return
            
                                throw new Error('[route], id "n_76_0", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_76_10_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_76_10_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_76_10_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_76_10_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_76_10_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_76_10_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_76_10_STATE.outMessages[0] = message
                n_76_10_STATE.messageTransferFunctions.splice(0, n_76_10_STATE.messageTransferFunctions.length - 1)
                n_76_10_STATE.messageTransferFunctions[0] = function (m) {
                    return n_76_10_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_76_10_STATE.messageTransferFunctions.length; i++) {
                    n_75_36_RCVS_0(n_76_10_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_76_10", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_75_36_RCVS_0(m) {
                                
                    if (msg_isBang(m)) {
                        n_75_35_RCVS_0(msg_getLength(n_75_36_STATE.currentList) === 0 ? msg_bang(): n_75_36_STATE.currentList)
                    } else {
                        n_75_35_RCVS_0(msg_getLength(n_75_36_STATE.currentList) === 0 && msg_getLength(m) === 0 ? msg_bang(): msg_concat(n_75_36_STATE.currentList, m))
                    }
                    return
                
                                throw new Error('[list], id "n_75_36", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_75_35_RCVS_0(m) {
                                
                if (n_75_35_STATE.filterType === MSG_STRING_TOKEN) {
                    if (
                        (n_75_35_STATE.stringFilter === 'float'
                            && msg_isFloatToken(m, 0))
                        || (n_75_35_STATE.stringFilter === 'symbol'
                            && msg_isStringToken(m, 0))
                        || (n_75_35_STATE.stringFilter === 'list'
                            && msg_getLength(m) > 1)
                        || (n_75_35_STATE.stringFilter === 'bang' 
                            && msg_isBang(m))
                    ) {
                        m_n_75_53_0__routemsg_RCVS_0(m)
                        return
                    
                    } else if (
                        msg_isStringToken(m, 0)
                        && msg_readStringToken(m, 0) === n_75_35_STATE.stringFilter
                    ) {
                        m_n_75_53_0__routemsg_RCVS_0(msg_emptyToBang(msg_shift(m)))
                        return
                    }

                } else if (
                    msg_isFloatToken(m, 0)
                    && msg_readFloatToken(m, 0) === n_75_35_STATE.floatFilter
                ) {
                    m_n_75_53_0__routemsg_RCVS_0(msg_emptyToBang(msg_shift(m)))
                    return
                }
            
                SND_TO_NULL(m)
            return
            
                                throw new Error('[route], id "n_75_35", inlet "0", unsupported message : ' + msg_display(m))
                            }

function m_n_75_53_0__routemsg_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                SND_TO_NULL(m)
                return
            } else {
                n_75_53_RCVS_0_message(m)
                return
            }
        
                                throw new Error('[_routemsg], id "m_n_75_53_0__routemsg", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_75_53_RCVS_0_message(m) {
                                
            if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_STRING_TOKEN])
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_tabbase_setArrayName(
                    n_75_53_STATE,
                    msg_readStringToken(m, 1),
                    () => n_tabread_t_setArrayNameFinalize(n_75_53_STATE),
                )
                return
    
            }
        
                                throw new Error('[tabread~], id "n_75_53", inlet "0_message", unsupported message : ' + msg_display(m))
                            }

function n_76_1_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_76_1_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_76_1_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_76_1_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_76_1_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_76_1_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_76_1_STATE.outMessages[0] = message
                n_76_1_STATE.messageTransferFunctions.splice(0, n_76_1_STATE.messageTransferFunctions.length - 1)
                n_76_1_STATE.messageTransferFunctions[0] = function (m) {
                    return n_76_1_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_76_1_STATE.messageTransferFunctions.length; i++) {
                    n_75_36_RCVS_0(n_76_1_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_76_1", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_76_2_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_76_2_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_76_2_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_76_2_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_76_2_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_76_2_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_76_2_STATE.outMessages[0] = message
                n_76_2_STATE.messageTransferFunctions.splice(0, n_76_2_STATE.messageTransferFunctions.length - 1)
                n_76_2_STATE.messageTransferFunctions[0] = function (m) {
                    return n_76_2_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_76_2_STATE.messageTransferFunctions.length; i++) {
                    n_75_36_RCVS_0(n_76_2_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_76_2", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_76_3_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_76_3_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_76_3_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_76_3_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_76_3_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_76_3_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_76_3_STATE.outMessages[0] = message
                n_76_3_STATE.messageTransferFunctions.splice(0, n_76_3_STATE.messageTransferFunctions.length - 1)
                n_76_3_STATE.messageTransferFunctions[0] = function (m) {
                    return n_76_3_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_76_3_STATE.messageTransferFunctions.length; i++) {
                    n_75_36_RCVS_0(n_76_3_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_76_3", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_76_12_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_76_12_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_76_12_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_76_12_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_76_12_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_76_12_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_76_12_STATE.outMessages[0] = message
                n_76_12_STATE.messageTransferFunctions.splice(0, n_76_12_STATE.messageTransferFunctions.length - 1)
                n_76_12_STATE.messageTransferFunctions[0] = function (m) {
                    return n_76_12_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_76_12_STATE.messageTransferFunctions.length; i++) {
                    n_75_36_RCVS_0(n_76_12_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_76_12", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_76_4_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_76_4_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_76_4_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_76_4_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_76_4_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_76_4_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_76_4_STATE.outMessages[0] = message
                n_76_4_STATE.messageTransferFunctions.splice(0, n_76_4_STATE.messageTransferFunctions.length - 1)
                n_76_4_STATE.messageTransferFunctions[0] = function (m) {
                    return n_76_4_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_76_4_STATE.messageTransferFunctions.length; i++) {
                    n_75_36_RCVS_0(n_76_4_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_76_4", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_76_5_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_76_5_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_76_5_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_76_5_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_76_5_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_76_5_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_76_5_STATE.outMessages[0] = message
                n_76_5_STATE.messageTransferFunctions.splice(0, n_76_5_STATE.messageTransferFunctions.length - 1)
                n_76_5_STATE.messageTransferFunctions[0] = function (m) {
                    return n_76_5_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_76_5_STATE.messageTransferFunctions.length; i++) {
                    n_75_36_RCVS_0(n_76_5_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_76_5", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_76_6_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_76_6_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_76_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_76_6_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_76_6_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_76_6_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_76_6_STATE.outMessages[0] = message
                n_76_6_STATE.messageTransferFunctions.splice(0, n_76_6_STATE.messageTransferFunctions.length - 1)
                n_76_6_STATE.messageTransferFunctions[0] = function (m) {
                    return n_76_6_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_76_6_STATE.messageTransferFunctions.length; i++) {
                    n_75_36_RCVS_0(n_76_6_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_76_6", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_76_7_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_76_7_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_76_7_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_76_7_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_76_7_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_76_7_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_76_7_STATE.outMessages[0] = message
                n_76_7_STATE.messageTransferFunctions.splice(0, n_76_7_STATE.messageTransferFunctions.length - 1)
                n_76_7_STATE.messageTransferFunctions[0] = function (m) {
                    return n_76_7_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_76_7_STATE.messageTransferFunctions.length; i++) {
                    n_75_36_RCVS_0(n_76_7_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_76_7", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_76_8_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_76_8_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_76_8_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_76_8_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_76_8_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_76_8_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_76_8_STATE.outMessages[0] = message
                n_76_8_STATE.messageTransferFunctions.splice(0, n_76_8_STATE.messageTransferFunctions.length - 1)
                n_76_8_STATE.messageTransferFunctions[0] = function (m) {
                    return n_76_8_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_76_8_STATE.messageTransferFunctions.length; i++) {
                    n_75_36_RCVS_0(n_76_8_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_76_8", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_76_9_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_76_9_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_76_9_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_76_9_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_76_9_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_76_9_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_76_9_STATE.outMessages[0] = message
                n_76_9_STATE.messageTransferFunctions.splice(0, n_76_9_STATE.messageTransferFunctions.length - 1)
                n_76_9_STATE.messageTransferFunctions[0] = function (m) {
                    return n_76_9_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_76_9_STATE.messageTransferFunctions.length; i++) {
                    n_75_36_RCVS_0(n_76_9_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_76_9", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_76_11_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_76_11_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_76_11_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_76_11_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_76_11_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_76_11_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_76_11_STATE.outMessages[0] = message
                n_76_11_STATE.messageTransferFunctions.splice(0, n_76_11_STATE.messageTransferFunctions.length - 1)
                n_76_11_STATE.messageTransferFunctions[0] = function (m) {
                    return n_76_11_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_76_11_STATE.messageTransferFunctions.length; i++) {
                    n_75_36_RCVS_0(n_76_11_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_76_11", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_75_46_RCVS_0(m) {
                                
            if (msg_getLength(m) === 1) {
                if (msg_isStringToken(m, 0)) {
                    const action = msg_readStringToken(m, 0)
                    if (action === 'bang' || action === 'start') {
                        n_delay_scheduleDelay(
                            n_75_46_STATE, 
                            () => n_75_44_RCVS_0(msg_bang()),
                            FRAME,
                        )
                        return
                    } else if (action === 'stop') {
                        n_delay_stop(n_75_46_STATE)
                        return
                    }
                    
                } else if (msg_isFloatToken(m, 0)) {
                    n_delay_setDelay(n_75_46_STATE, msg_readFloatToken(m, 0))
                    n_delay_scheduleDelay(
                        n_75_46_STATE,
                        () => n_75_44_RCVS_0(msg_bang()),
                        FRAME,
                    )
                    return 
                }
            
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN, MSG_STRING_TOKEN])
                && msg_readStringToken(m, 0) === 'tempo'
            ) {
                n_75_46_STATE.sampleRatio = computeUnitInSamples(
                    SAMPLE_RATE, 
                    msg_readFloatToken(m, 1), 
                    msg_readStringToken(m, 2)
                )
                return
            }
        
                                throw new Error('[delay], id "n_75_46", inlet "0", unsupported message : ' + msg_display(m))
                            }



function n_77_45_RCVS_0(m) {
                                
        n_77_46_RCVS_0(msg_bang())
n_77_44_RCVS_1(msg_floats([messageTokenToFloat(m, 0)]))
        return
    
                                throw new Error('[trigger], id "n_77_45", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_77_44_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                n_float_int_setValueFloat(n_77_44_STATE, msg_readFloatToken(m, 0))
                n_78_0_RCVS_0(msg_floats([n_77_44_STATE.value]))
                return 

            } else if (msg_isBang(m)) {
                n_78_0_RCVS_0(msg_floats([n_77_44_STATE.value]))
                return
                
            }
        
                                throw new Error('[float], id "n_77_44", inlet "0", unsupported message : ' + msg_display(m))
                            }
function n_77_44_RCVS_1(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_float_int_setValueFloat(n_77_44_STATE, msg_readFloatToken(m, 0))
            return
        }
    
                                throw new Error('[float], id "n_77_44", inlet "1", unsupported message : ' + msg_display(m))
                            }

function n_78_0_RCVS_0(m) {
                                
                
                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 0
                        ) {
                            n_78_10_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 1
                        ) {
                            n_78_1_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 2
                        ) {
                            n_78_2_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 3
                        ) {
                            n_78_3_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 4
                        ) {
                            n_78_12_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 5
                        ) {
                            n_78_4_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 6
                        ) {
                            n_78_5_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 7
                        ) {
                            n_78_6_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 8
                        ) {
                            n_78_7_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 9
                        ) {
                            n_78_8_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 10
                        ) {
                            n_78_9_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 11
                        ) {
                            n_78_11_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                SND_TO_NULL(m)
                return
            
                                throw new Error('[route], id "n_78_0", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_78_10_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_78_10_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_78_10_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_78_10_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_78_10_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_78_10_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_78_10_STATE.outMessages[0] = message
                n_78_10_STATE.messageTransferFunctions.splice(0, n_78_10_STATE.messageTransferFunctions.length - 1)
                n_78_10_STATE.messageTransferFunctions[0] = function (m) {
                    return n_78_10_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_78_10_STATE.messageTransferFunctions.length; i++) {
                    n_77_36_RCVS_0(n_78_10_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_78_10", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_77_36_RCVS_0(m) {
                                
                    if (msg_isBang(m)) {
                        n_77_35_RCVS_0(msg_getLength(n_77_36_STATE.currentList) === 0 ? msg_bang(): n_77_36_STATE.currentList)
                    } else {
                        n_77_35_RCVS_0(msg_getLength(n_77_36_STATE.currentList) === 0 && msg_getLength(m) === 0 ? msg_bang(): msg_concat(n_77_36_STATE.currentList, m))
                    }
                    return
                
                                throw new Error('[list], id "n_77_36", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_77_35_RCVS_0(m) {
                                
                if (n_77_35_STATE.filterType === MSG_STRING_TOKEN) {
                    if (
                        (n_77_35_STATE.stringFilter === 'float'
                            && msg_isFloatToken(m, 0))
                        || (n_77_35_STATE.stringFilter === 'symbol'
                            && msg_isStringToken(m, 0))
                        || (n_77_35_STATE.stringFilter === 'list'
                            && msg_getLength(m) > 1)
                        || (n_77_35_STATE.stringFilter === 'bang' 
                            && msg_isBang(m))
                    ) {
                        m_n_77_53_0__routemsg_RCVS_0(m)
                        return
                    
                    } else if (
                        msg_isStringToken(m, 0)
                        && msg_readStringToken(m, 0) === n_77_35_STATE.stringFilter
                    ) {
                        m_n_77_53_0__routemsg_RCVS_0(msg_emptyToBang(msg_shift(m)))
                        return
                    }

                } else if (
                    msg_isFloatToken(m, 0)
                    && msg_readFloatToken(m, 0) === n_77_35_STATE.floatFilter
                ) {
                    m_n_77_53_0__routemsg_RCVS_0(msg_emptyToBang(msg_shift(m)))
                    return
                }
            
                SND_TO_NULL(m)
            return
            
                                throw new Error('[route], id "n_77_35", inlet "0", unsupported message : ' + msg_display(m))
                            }

function m_n_77_53_0__routemsg_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                SND_TO_NULL(m)
                return
            } else {
                n_77_53_RCVS_0_message(m)
                return
            }
        
                                throw new Error('[_routemsg], id "m_n_77_53_0__routemsg", inlet "0", unsupported message : ' + msg_display(m))
                            }
let n_77_53_OUTS_0 = 0
function n_77_53_RCVS_0_message(m) {
                                
            if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_STRING_TOKEN])
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_tabbase_setArrayName(
                    n_77_53_STATE,
                    msg_readStringToken(m, 1),
                    () => n_tabread_t_setArrayNameFinalize(n_77_53_STATE),
                )
                return
    
            }
        
                                throw new Error('[tabread~], id "n_77_53", inlet "0_message", unsupported message : ' + msg_display(m))
                            }

function n_78_1_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_78_1_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_78_1_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_78_1_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_78_1_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_78_1_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_78_1_STATE.outMessages[0] = message
                n_78_1_STATE.messageTransferFunctions.splice(0, n_78_1_STATE.messageTransferFunctions.length - 1)
                n_78_1_STATE.messageTransferFunctions[0] = function (m) {
                    return n_78_1_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_78_1_STATE.messageTransferFunctions.length; i++) {
                    n_77_36_RCVS_0(n_78_1_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_78_1", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_78_2_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_78_2_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_78_2_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_78_2_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_78_2_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_78_2_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_78_2_STATE.outMessages[0] = message
                n_78_2_STATE.messageTransferFunctions.splice(0, n_78_2_STATE.messageTransferFunctions.length - 1)
                n_78_2_STATE.messageTransferFunctions[0] = function (m) {
                    return n_78_2_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_78_2_STATE.messageTransferFunctions.length; i++) {
                    n_77_36_RCVS_0(n_78_2_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_78_2", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_78_3_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_78_3_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_78_3_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_78_3_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_78_3_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_78_3_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_78_3_STATE.outMessages[0] = message
                n_78_3_STATE.messageTransferFunctions.splice(0, n_78_3_STATE.messageTransferFunctions.length - 1)
                n_78_3_STATE.messageTransferFunctions[0] = function (m) {
                    return n_78_3_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_78_3_STATE.messageTransferFunctions.length; i++) {
                    n_77_36_RCVS_0(n_78_3_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_78_3", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_78_12_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_78_12_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_78_12_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_78_12_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_78_12_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_78_12_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_78_12_STATE.outMessages[0] = message
                n_78_12_STATE.messageTransferFunctions.splice(0, n_78_12_STATE.messageTransferFunctions.length - 1)
                n_78_12_STATE.messageTransferFunctions[0] = function (m) {
                    return n_78_12_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_78_12_STATE.messageTransferFunctions.length; i++) {
                    n_77_36_RCVS_0(n_78_12_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_78_12", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_78_4_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_78_4_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_78_4_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_78_4_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_78_4_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_78_4_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_78_4_STATE.outMessages[0] = message
                n_78_4_STATE.messageTransferFunctions.splice(0, n_78_4_STATE.messageTransferFunctions.length - 1)
                n_78_4_STATE.messageTransferFunctions[0] = function (m) {
                    return n_78_4_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_78_4_STATE.messageTransferFunctions.length; i++) {
                    n_77_36_RCVS_0(n_78_4_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_78_4", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_78_5_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_78_5_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_78_5_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_78_5_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_78_5_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_78_5_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_78_5_STATE.outMessages[0] = message
                n_78_5_STATE.messageTransferFunctions.splice(0, n_78_5_STATE.messageTransferFunctions.length - 1)
                n_78_5_STATE.messageTransferFunctions[0] = function (m) {
                    return n_78_5_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_78_5_STATE.messageTransferFunctions.length; i++) {
                    n_77_36_RCVS_0(n_78_5_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_78_5", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_78_6_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_78_6_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_78_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_78_6_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_78_6_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_78_6_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_78_6_STATE.outMessages[0] = message
                n_78_6_STATE.messageTransferFunctions.splice(0, n_78_6_STATE.messageTransferFunctions.length - 1)
                n_78_6_STATE.messageTransferFunctions[0] = function (m) {
                    return n_78_6_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_78_6_STATE.messageTransferFunctions.length; i++) {
                    n_77_36_RCVS_0(n_78_6_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_78_6", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_78_7_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_78_7_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_78_7_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_78_7_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_78_7_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_78_7_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_78_7_STATE.outMessages[0] = message
                n_78_7_STATE.messageTransferFunctions.splice(0, n_78_7_STATE.messageTransferFunctions.length - 1)
                n_78_7_STATE.messageTransferFunctions[0] = function (m) {
                    return n_78_7_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_78_7_STATE.messageTransferFunctions.length; i++) {
                    n_77_36_RCVS_0(n_78_7_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_78_7", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_78_8_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_78_8_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_78_8_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_78_8_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_78_8_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_78_8_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_78_8_STATE.outMessages[0] = message
                n_78_8_STATE.messageTransferFunctions.splice(0, n_78_8_STATE.messageTransferFunctions.length - 1)
                n_78_8_STATE.messageTransferFunctions[0] = function (m) {
                    return n_78_8_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_78_8_STATE.messageTransferFunctions.length; i++) {
                    n_77_36_RCVS_0(n_78_8_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_78_8", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_78_9_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_78_9_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_78_9_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_78_9_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_78_9_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_78_9_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_78_9_STATE.outMessages[0] = message
                n_78_9_STATE.messageTransferFunctions.splice(0, n_78_9_STATE.messageTransferFunctions.length - 1)
                n_78_9_STATE.messageTransferFunctions[0] = function (m) {
                    return n_78_9_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_78_9_STATE.messageTransferFunctions.length; i++) {
                    n_77_36_RCVS_0(n_78_9_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_78_9", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_78_11_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_78_11_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_78_11_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_78_11_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_78_11_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_78_11_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_78_11_STATE.outMessages[0] = message
                n_78_11_STATE.messageTransferFunctions.splice(0, n_78_11_STATE.messageTransferFunctions.length - 1)
                n_78_11_STATE.messageTransferFunctions[0] = function (m) {
                    return n_78_11_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_78_11_STATE.messageTransferFunctions.length; i++) {
                    n_77_36_RCVS_0(n_78_11_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_78_11", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_77_46_RCVS_0(m) {
                                
            if (msg_getLength(m) === 1) {
                if (msg_isStringToken(m, 0)) {
                    const action = msg_readStringToken(m, 0)
                    if (action === 'bang' || action === 'start') {
                        n_delay_scheduleDelay(
                            n_77_46_STATE, 
                            () => n_77_44_RCVS_0(msg_bang()),
                            FRAME,
                        )
                        return
                    } else if (action === 'stop') {
                        n_delay_stop(n_77_46_STATE)
                        return
                    }
                    
                } else if (msg_isFloatToken(m, 0)) {
                    n_delay_setDelay(n_77_46_STATE, msg_readFloatToken(m, 0))
                    n_delay_scheduleDelay(
                        n_77_46_STATE,
                        () => n_77_44_RCVS_0(msg_bang()),
                        FRAME,
                    )
                    return 
                }
            
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN, MSG_STRING_TOKEN])
                && msg_readStringToken(m, 0) === 'tempo'
            ) {
                n_77_46_STATE.sampleRatio = computeUnitInSamples(
                    SAMPLE_RATE, 
                    msg_readFloatToken(m, 1), 
                    msg_readStringToken(m, 2)
                )
                return
            }
        
                                throw new Error('[delay], id "n_77_46", inlet "0", unsupported message : ' + msg_display(m))
                            }



function n_31_78_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_31_78_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_31_78_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_31_78_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_31_78_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_31_78_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_31_78_STATE.outMessages[0] = message
                n_31_78_STATE.messageTransferFunctions.splice(0, n_31_78_STATE.messageTransferFunctions.length - 1)
                n_31_78_STATE.messageTransferFunctions[0] = function (m) {
                    return n_31_78_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_31_78_STATE.messageTransferFunctions.length; i++) {
                    n_31_78_SNDS_0(n_31_78_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_31_78", inlet "0", unsupported message : ' + msg_display(m))
                            }

function m_n_71_38_1__routemsg_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                m_n_71_38_1_sig_RCVS_0(m)
                return
            } else {
                SND_TO_NULL(m)
                return
            }
        
                                throw new Error('[_routemsg], id "m_n_71_38_1__routemsg", inlet "0", unsupported message : ' + msg_display(m))
                            }

function m_n_71_38_1_sig_RCVS_0(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            m_n_71_38_1_sig_STATE.currentValue = msg_readFloatToken(m, 0)
            return
        }
    
                                throw new Error('[sig~], id "m_n_71_38_1_sig", inlet "0", unsupported message : ' + msg_display(m))
                            }

function m_n_73_38_1__routemsg_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                m_n_73_38_1_sig_RCVS_0(m)
                return
            } else {
                SND_TO_NULL(m)
                return
            }
        
                                throw new Error('[_routemsg], id "m_n_73_38_1__routemsg", inlet "0", unsupported message : ' + msg_display(m))
                            }

function m_n_73_38_1_sig_RCVS_0(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            m_n_73_38_1_sig_STATE.currentValue = msg_readFloatToken(m, 0)
            return
        }
    
                                throw new Error('[sig~], id "m_n_73_38_1_sig", inlet "0", unsupported message : ' + msg_display(m))
                            }

function m_n_75_38_1__routemsg_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                m_n_75_38_1_sig_RCVS_0(m)
                return
            } else {
                SND_TO_NULL(m)
                return
            }
        
                                throw new Error('[_routemsg], id "m_n_75_38_1__routemsg", inlet "0", unsupported message : ' + msg_display(m))
                            }

function m_n_75_38_1_sig_RCVS_0(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            m_n_75_38_1_sig_STATE.currentValue = msg_readFloatToken(m, 0)
            return
        }
    
                                throw new Error('[sig~], id "m_n_75_38_1_sig", inlet "0", unsupported message : ' + msg_display(m))
                            }

function m_n_77_38_1__routemsg_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                m_n_77_38_1_sig_RCVS_0(m)
                return
            } else {
                SND_TO_NULL(m)
                return
            }
        
                                throw new Error('[_routemsg], id "m_n_77_38_1__routemsg", inlet "0", unsupported message : ' + msg_display(m))
                            }
let m_n_77_38_1_sig_OUTS_0 = 0
function m_n_77_38_1_sig_RCVS_0(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            m_n_77_38_1_sig_STATE.currentValue = msg_readFloatToken(m, 0)
            return
        }
    
                                throw new Error('[sig~], id "m_n_77_38_1_sig", inlet "0", unsupported message : ' + msg_display(m))
                            }



function n_31_111_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_31_111_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_31_111_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_31_111_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_31_111_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_31_111_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_31_111_STATE.outMessages[0] = message
                n_31_111_STATE.messageTransferFunctions.splice(0, n_31_111_STATE.messageTransferFunctions.length - 1)
                n_31_111_STATE.messageTransferFunctions[0] = function (m) {
                    return n_31_111_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_31_111_STATE.messageTransferFunctions.length; i++) {
                    n_31_113_RCVS_0(n_31_111_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_31_111", inlet "0", unsupported message : ' + msg_display(m))
                            }
let n_31_113_OUTS_0 = 0
function n_31_113_RCVS_0(m) {
                                
        if (
            msg_isMatching(m, [MSG_FLOAT_TOKEN])
            || msg_isMatching(m, [MSG_FLOAT_TOKEN, MSG_FLOAT_TOKEN])
        ) {
            switch (msg_getLength(m)) {
                case 2:
                    n_line_t_setNextDuration(n_31_113_STATE, msg_readFloatToken(m, 1))
                case 1:
                    n_line_t_setNewLine(n_31_113_STATE, msg_readFloatToken(m, 0))
            }
            return

        } else if (msg_isAction(m, 'stop')) {
            n_line_t_stop(n_31_113_STATE)
            return

        }
    
                                throw new Error('[line~], id "n_31_113", inlet "0", unsupported message : ' + msg_display(m))
                            }



function m_n_71_0_1__routemsg_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                m_n_71_0_1_sig_RCVS_0(m)
                return
            } else {
                SND_TO_NULL(m)
                return
            }
        
                                throw new Error('[_routemsg], id "m_n_71_0_1__routemsg", inlet "0", unsupported message : ' + msg_display(m))
                            }

function m_n_71_0_1_sig_RCVS_0(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            m_n_71_0_1_sig_STATE.currentValue = msg_readFloatToken(m, 0)
            return
        }
    
                                throw new Error('[sig~], id "m_n_71_0_1_sig", inlet "0", unsupported message : ' + msg_display(m))
                            }



function m_n_71_22_1__routemsg_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                m_n_71_22_1_sig_RCVS_0(m)
                return
            } else {
                SND_TO_NULL(m)
                return
            }
        
                                throw new Error('[_routemsg], id "m_n_71_22_1__routemsg", inlet "0", unsupported message : ' + msg_display(m))
                            }
let m_n_71_22_1_sig_OUTS_0 = 0
function m_n_71_22_1_sig_RCVS_0(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            m_n_71_22_1_sig_STATE.currentValue = msg_readFloatToken(m, 0)
            return
        }
    
                                throw new Error('[sig~], id "m_n_71_22_1_sig", inlet "0", unsupported message : ' + msg_display(m))
                            }



function n_71_51_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_71_51_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_71_51_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_71_51_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_71_51_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_71_51_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_71_51_STATE.outMessages[0] = message
                n_71_51_STATE.messageTransferFunctions.splice(0, n_71_51_STATE.messageTransferFunctions.length - 1)
                n_71_51_STATE.messageTransferFunctions[0] = function (m) {
                    return n_71_51_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_71_51_STATE.messageTransferFunctions.length; i++) {
                    n_71_52_RCVS_0(n_71_51_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_71_51", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_71_52_RCVS_0(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_71_52_STATE.currentValue = msg_readFloatToken(m, 0)
            return
        }
    
                                throw new Error('[sig~], id "n_71_52", inlet "0", unsupported message : ' + msg_display(m))
                            }



function n_32_6_RCVS_0(m) {
                                
                if (n_32_6_STATE.filterType === MSG_STRING_TOKEN) {
                    if (
                        (n_32_6_STATE.stringFilter === 'float'
                            && msg_isFloatToken(m, 0))
                        || (n_32_6_STATE.stringFilter === 'symbol'
                            && msg_isStringToken(m, 0))
                        || (n_32_6_STATE.stringFilter === 'list'
                            && msg_getLength(m) > 1)
                        || (n_32_6_STATE.stringFilter === 'bang' 
                            && msg_isBang(m))
                    ) {
                        n_32_33_RCVS_0(m)
                        return
                    
                    } else if (
                        msg_isStringToken(m, 0)
                        && msg_readStringToken(m, 0) === n_32_6_STATE.stringFilter
                    ) {
                        n_32_33_RCVS_0(msg_emptyToBang(msg_shift(m)))
                        return
                    }

                } else if (
                    msg_isFloatToken(m, 0)
                    && msg_readFloatToken(m, 0) === n_32_6_STATE.floatFilter
                ) {
                    n_32_33_RCVS_0(msg_emptyToBang(msg_shift(m)))
                    return
                }
            
                SND_TO_NULL(m)
            return
            
                                throw new Error('[route], id "n_32_6", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_32_33_RCVS_0(m) {
                                
                
                        if (
                            msg_isStringToken(m, 0) 
                            && msg_readStringToken(m, 0) === "grainSize"
                        ) {
                            n_32_1_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }

                        if (
                            msg_isStringToken(m, 0) 
                            && msg_readStringToken(m, 0) === "modPos"
                        ) {
                            n_32_2_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }

                        if (
                            msg_isStringToken(m, 0) 
                            && msg_readStringToken(m, 0) === "modRndPos"
                        ) {
                            n_32_3_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }

                        if (
                            msg_isStringToken(m, 0) 
                            && msg_readStringToken(m, 0) === "modPitch"
                        ) {
                            n_32_4_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }

                        if (
                            msg_isStringToken(m, 0) 
                            && msg_readStringToken(m, 0) === "modRndPitch"
                        ) {
                            n_32_5_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }

                        if (
                            msg_isStringToken(m, 0) 
                            && msg_readStringToken(m, 0) === "modVol"
                        ) {
                            n_32_28_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }

                        if (
                            msg_isStringToken(m, 0) 
                            && msg_readStringToken(m, 0) === "fwdAmt"
                        ) {
                            n_32_32_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }

                SND_TO_NULL(m)
                return
            
                                throw new Error('[route], id "n_32_33", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_32_1_RCVS_0(m) {
                                
            msgBusPublish(n_32_1_STATE.busName, m)
            return
        
                                throw new Error('[send], id "n_32_1", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_32_2_RCVS_0(m) {
                                
            msgBusPublish(n_32_2_STATE.busName, m)
            return
        
                                throw new Error('[send], id "n_32_2", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_32_3_RCVS_0(m) {
                                
            msgBusPublish(n_32_3_STATE.busName, m)
            return
        
                                throw new Error('[send], id "n_32_3", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_32_4_RCVS_0(m) {
                                
            msgBusPublish(n_32_4_STATE.busName, m)
            return
        
                                throw new Error('[send], id "n_32_4", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_32_5_RCVS_0(m) {
                                
            msgBusPublish(n_32_5_STATE.busName, m)
            return
        
                                throw new Error('[send], id "n_32_5", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_32_28_RCVS_0(m) {
                                
            msgBusPublish(n_32_28_STATE.busName, m)
            return
        
                                throw new Error('[send], id "n_32_28", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_32_32_RCVS_0(m) {
                                
            msgBusPublish(n_32_32_STATE.busName, m)
            return
        
                                throw new Error('[send], id "n_32_32", inlet "0", unsupported message : ' + msg_display(m))
                            }



function n_32_8_RCVS_0(m) {
                                
                if (n_32_8_STATE.filterType === MSG_STRING_TOKEN) {
                    if (
                        (n_32_8_STATE.stringFilter === 'float'
                            && msg_isFloatToken(m, 0))
                        || (n_32_8_STATE.stringFilter === 'symbol'
                            && msg_isStringToken(m, 0))
                        || (n_32_8_STATE.stringFilter === 'list'
                            && msg_getLength(m) > 1)
                        || (n_32_8_STATE.stringFilter === 'bang' 
                            && msg_isBang(m))
                    ) {
                        n_32_39_RCVS_0(m)
                        return
                    
                    } else if (
                        msg_isStringToken(m, 0)
                        && msg_readStringToken(m, 0) === n_32_8_STATE.stringFilter
                    ) {
                        n_32_39_RCVS_0(msg_emptyToBang(msg_shift(m)))
                        return
                    }

                } else if (
                    msg_isFloatToken(m, 0)
                    && msg_readFloatToken(m, 0) === n_32_8_STATE.floatFilter
                ) {
                    n_32_39_RCVS_0(msg_emptyToBang(msg_shift(m)))
                    return
                }
            
                SND_TO_NULL(m)
            return
            
                                throw new Error('[route], id "n_32_8", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_32_39_RCVS_0(m) {
                                
                
                        if (
                            msg_isStringToken(m, 0) 
                            && msg_readStringToken(m, 0) === "grainSize"
                        ) {
                            n_32_9_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }

                        if (
                            msg_isStringToken(m, 0) 
                            && msg_readStringToken(m, 0) === "modPos"
                        ) {
                            n_32_10_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }

                        if (
                            msg_isStringToken(m, 0) 
                            && msg_readStringToken(m, 0) === "modRndPos"
                        ) {
                            n_32_11_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }

                        if (
                            msg_isStringToken(m, 0) 
                            && msg_readStringToken(m, 0) === "modPitch"
                        ) {
                            n_32_12_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }

                        if (
                            msg_isStringToken(m, 0) 
                            && msg_readStringToken(m, 0) === "modRndPitch"
                        ) {
                            n_32_13_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }

                        if (
                            msg_isStringToken(m, 0) 
                            && msg_readStringToken(m, 0) === "modVol"
                        ) {
                            n_32_29_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }

                        if (
                            msg_isStringToken(m, 0) 
                            && msg_readStringToken(m, 0) === "fwdAmt"
                        ) {
                            n_32_37_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }

                SND_TO_NULL(m)
                return
            
                                throw new Error('[route], id "n_32_39", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_32_9_RCVS_0(m) {
                                
            msgBusPublish(n_32_9_STATE.busName, m)
            return
        
                                throw new Error('[send], id "n_32_9", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_32_10_RCVS_0(m) {
                                
            msgBusPublish(n_32_10_STATE.busName, m)
            return
        
                                throw new Error('[send], id "n_32_10", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_32_11_RCVS_0(m) {
                                
            msgBusPublish(n_32_11_STATE.busName, m)
            return
        
                                throw new Error('[send], id "n_32_11", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_32_12_RCVS_0(m) {
                                
            msgBusPublish(n_32_12_STATE.busName, m)
            return
        
                                throw new Error('[send], id "n_32_12", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_32_13_RCVS_0(m) {
                                
            msgBusPublish(n_32_13_STATE.busName, m)
            return
        
                                throw new Error('[send], id "n_32_13", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_32_29_RCVS_0(m) {
                                
            msgBusPublish(n_32_29_STATE.busName, m)
            return
        
                                throw new Error('[send], id "n_32_29", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_32_37_RCVS_0(m) {
                                
            msgBusPublish(n_32_37_STATE.busName, m)
            return
        
                                throw new Error('[send], id "n_32_37", inlet "0", unsupported message : ' + msg_display(m))
                            }



function n_32_15_RCVS_0(m) {
                                
                if (n_32_15_STATE.filterType === MSG_STRING_TOKEN) {
                    if (
                        (n_32_15_STATE.stringFilter === 'float'
                            && msg_isFloatToken(m, 0))
                        || (n_32_15_STATE.stringFilter === 'symbol'
                            && msg_isStringToken(m, 0))
                        || (n_32_15_STATE.stringFilter === 'list'
                            && msg_getLength(m) > 1)
                        || (n_32_15_STATE.stringFilter === 'bang' 
                            && msg_isBang(m))
                    ) {
                        n_32_34_RCVS_0(m)
                        return
                    
                    } else if (
                        msg_isStringToken(m, 0)
                        && msg_readStringToken(m, 0) === n_32_15_STATE.stringFilter
                    ) {
                        n_32_34_RCVS_0(msg_emptyToBang(msg_shift(m)))
                        return
                    }

                } else if (
                    msg_isFloatToken(m, 0)
                    && msg_readFloatToken(m, 0) === n_32_15_STATE.floatFilter
                ) {
                    n_32_34_RCVS_0(msg_emptyToBang(msg_shift(m)))
                    return
                }
            
                SND_TO_NULL(m)
            return
            
                                throw new Error('[route], id "n_32_15", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_32_34_RCVS_0(m) {
                                
                
                        if (
                            msg_isStringToken(m, 0) 
                            && msg_readStringToken(m, 0) === "grainSize"
                        ) {
                            n_32_16_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }

                        if (
                            msg_isStringToken(m, 0) 
                            && msg_readStringToken(m, 0) === "modPos"
                        ) {
                            n_32_17_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }

                        if (
                            msg_isStringToken(m, 0) 
                            && msg_readStringToken(m, 0) === "modRndPos"
                        ) {
                            n_32_18_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }

                        if (
                            msg_isStringToken(m, 0) 
                            && msg_readStringToken(m, 0) === "modPitch"
                        ) {
                            n_32_19_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }

                        if (
                            msg_isStringToken(m, 0) 
                            && msg_readStringToken(m, 0) === "modRndPitch"
                        ) {
                            n_32_20_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }

                        if (
                            msg_isStringToken(m, 0) 
                            && msg_readStringToken(m, 0) === "modVol"
                        ) {
                            n_32_31_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }

                        if (
                            msg_isStringToken(m, 0) 
                            && msg_readStringToken(m, 0) === "fwdAmt"
                        ) {
                            n_32_38_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }

                SND_TO_NULL(m)
                return
            
                                throw new Error('[route], id "n_32_34", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_32_16_RCVS_0(m) {
                                
            msgBusPublish(n_32_16_STATE.busName, m)
            return
        
                                throw new Error('[send], id "n_32_16", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_32_17_RCVS_0(m) {
                                
            msgBusPublish(n_32_17_STATE.busName, m)
            return
        
                                throw new Error('[send], id "n_32_17", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_32_18_RCVS_0(m) {
                                
            msgBusPublish(n_32_18_STATE.busName, m)
            return
        
                                throw new Error('[send], id "n_32_18", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_32_19_RCVS_0(m) {
                                
            msgBusPublish(n_32_19_STATE.busName, m)
            return
        
                                throw new Error('[send], id "n_32_19", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_32_20_RCVS_0(m) {
                                
            msgBusPublish(n_32_20_STATE.busName, m)
            return
        
                                throw new Error('[send], id "n_32_20", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_32_31_RCVS_0(m) {
                                
            msgBusPublish(n_32_31_STATE.busName, m)
            return
        
                                throw new Error('[send], id "n_32_31", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_32_38_RCVS_0(m) {
                                
            msgBusPublish(n_32_38_STATE.busName, m)
            return
        
                                throw new Error('[send], id "n_32_38", inlet "0", unsupported message : ' + msg_display(m))
                            }



function n_32_22_RCVS_0(m) {
                                
                if (n_32_22_STATE.filterType === MSG_STRING_TOKEN) {
                    if (
                        (n_32_22_STATE.stringFilter === 'float'
                            && msg_isFloatToken(m, 0))
                        || (n_32_22_STATE.stringFilter === 'symbol'
                            && msg_isStringToken(m, 0))
                        || (n_32_22_STATE.stringFilter === 'list'
                            && msg_getLength(m) > 1)
                        || (n_32_22_STATE.stringFilter === 'bang' 
                            && msg_isBang(m))
                    ) {
                        n_32_35_RCVS_0(m)
                        return
                    
                    } else if (
                        msg_isStringToken(m, 0)
                        && msg_readStringToken(m, 0) === n_32_22_STATE.stringFilter
                    ) {
                        n_32_35_RCVS_0(msg_emptyToBang(msg_shift(m)))
                        return
                    }

                } else if (
                    msg_isFloatToken(m, 0)
                    && msg_readFloatToken(m, 0) === n_32_22_STATE.floatFilter
                ) {
                    n_32_35_RCVS_0(msg_emptyToBang(msg_shift(m)))
                    return
                }
            
                SND_TO_NULL(m)
            return
            
                                throw new Error('[route], id "n_32_22", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_32_35_RCVS_0(m) {
                                
                
                        if (
                            msg_isStringToken(m, 0) 
                            && msg_readStringToken(m, 0) === "grainSize"
                        ) {
                            n_32_23_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }

                        if (
                            msg_isStringToken(m, 0) 
                            && msg_readStringToken(m, 0) === "modPos"
                        ) {
                            n_32_24_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }

                        if (
                            msg_isStringToken(m, 0) 
                            && msg_readStringToken(m, 0) === "modRndPos"
                        ) {
                            n_32_25_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }

                        if (
                            msg_isStringToken(m, 0) 
                            && msg_readStringToken(m, 0) === "modPitch"
                        ) {
                            n_32_26_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }

                        if (
                            msg_isStringToken(m, 0) 
                            && msg_readStringToken(m, 0) === "modRndPitch"
                        ) {
                            n_32_27_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }

                        if (
                            msg_isStringToken(m, 0) 
                            && msg_readStringToken(m, 0) === "modVol"
                        ) {
                            n_32_30_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }

                        if (
                            msg_isStringToken(m, 0) 
                            && msg_readStringToken(m, 0) === "fwdAmt"
                        ) {
                            n_32_36_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }

                SND_TO_NULL(m)
                return
            
                                throw new Error('[route], id "n_32_35", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_32_23_RCVS_0(m) {
                                
            msgBusPublish(n_32_23_STATE.busName, m)
            return
        
                                throw new Error('[send], id "n_32_23", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_32_24_RCVS_0(m) {
                                
            msgBusPublish(n_32_24_STATE.busName, m)
            return
        
                                throw new Error('[send], id "n_32_24", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_32_25_RCVS_0(m) {
                                
            msgBusPublish(n_32_25_STATE.busName, m)
            return
        
                                throw new Error('[send], id "n_32_25", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_32_26_RCVS_0(m) {
                                
            msgBusPublish(n_32_26_STATE.busName, m)
            return
        
                                throw new Error('[send], id "n_32_26", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_32_27_RCVS_0(m) {
                                
            msgBusPublish(n_32_27_STATE.busName, m)
            return
        
                                throw new Error('[send], id "n_32_27", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_32_30_RCVS_0(m) {
                                
            msgBusPublish(n_32_30_STATE.busName, m)
            return
        
                                throw new Error('[send], id "n_32_30", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_32_36_RCVS_0(m) {
                                
            msgBusPublish(n_32_36_STATE.busName, m)
            return
        
                                throw new Error('[send], id "n_32_36", inlet "0", unsupported message : ' + msg_display(m))
                            }



function m_n_73_0_1__routemsg_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                m_n_73_0_1_sig_RCVS_0(m)
                return
            } else {
                SND_TO_NULL(m)
                return
            }
        
                                throw new Error('[_routemsg], id "m_n_73_0_1__routemsg", inlet "0", unsupported message : ' + msg_display(m))
                            }

function m_n_73_0_1_sig_RCVS_0(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            m_n_73_0_1_sig_STATE.currentValue = msg_readFloatToken(m, 0)
            return
        }
    
                                throw new Error('[sig~], id "m_n_73_0_1_sig", inlet "0", unsupported message : ' + msg_display(m))
                            }



function m_n_73_22_1__routemsg_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                m_n_73_22_1_sig_RCVS_0(m)
                return
            } else {
                SND_TO_NULL(m)
                return
            }
        
                                throw new Error('[_routemsg], id "m_n_73_22_1__routemsg", inlet "0", unsupported message : ' + msg_display(m))
                            }
let m_n_73_22_1_sig_OUTS_0 = 0
function m_n_73_22_1_sig_RCVS_0(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            m_n_73_22_1_sig_STATE.currentValue = msg_readFloatToken(m, 0)
            return
        }
    
                                throw new Error('[sig~], id "m_n_73_22_1_sig", inlet "0", unsupported message : ' + msg_display(m))
                            }



function n_73_51_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_73_51_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_73_51_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_73_51_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_73_51_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_73_51_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_73_51_STATE.outMessages[0] = message
                n_73_51_STATE.messageTransferFunctions.splice(0, n_73_51_STATE.messageTransferFunctions.length - 1)
                n_73_51_STATE.messageTransferFunctions[0] = function (m) {
                    return n_73_51_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_73_51_STATE.messageTransferFunctions.length; i++) {
                    n_73_52_RCVS_0(n_73_51_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_73_51", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_73_52_RCVS_0(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_73_52_STATE.currentValue = msg_readFloatToken(m, 0)
            return
        }
    
                                throw new Error('[sig~], id "n_73_52", inlet "0", unsupported message : ' + msg_display(m))
                            }



function m_n_75_0_1__routemsg_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                m_n_75_0_1_sig_RCVS_0(m)
                return
            } else {
                SND_TO_NULL(m)
                return
            }
        
                                throw new Error('[_routemsg], id "m_n_75_0_1__routemsg", inlet "0", unsupported message : ' + msg_display(m))
                            }

function m_n_75_0_1_sig_RCVS_0(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            m_n_75_0_1_sig_STATE.currentValue = msg_readFloatToken(m, 0)
            return
        }
    
                                throw new Error('[sig~], id "m_n_75_0_1_sig", inlet "0", unsupported message : ' + msg_display(m))
                            }



function m_n_75_22_1__routemsg_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                m_n_75_22_1_sig_RCVS_0(m)
                return
            } else {
                SND_TO_NULL(m)
                return
            }
        
                                throw new Error('[_routemsg], id "m_n_75_22_1__routemsg", inlet "0", unsupported message : ' + msg_display(m))
                            }
let m_n_75_22_1_sig_OUTS_0 = 0
function m_n_75_22_1_sig_RCVS_0(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            m_n_75_22_1_sig_STATE.currentValue = msg_readFloatToken(m, 0)
            return
        }
    
                                throw new Error('[sig~], id "m_n_75_22_1_sig", inlet "0", unsupported message : ' + msg_display(m))
                            }



function n_75_51_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_75_51_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_75_51_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_75_51_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_75_51_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_75_51_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_75_51_STATE.outMessages[0] = message
                n_75_51_STATE.messageTransferFunctions.splice(0, n_75_51_STATE.messageTransferFunctions.length - 1)
                n_75_51_STATE.messageTransferFunctions[0] = function (m) {
                    return n_75_51_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_75_51_STATE.messageTransferFunctions.length; i++) {
                    n_75_52_RCVS_0(n_75_51_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_75_51", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_75_52_RCVS_0(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_75_52_STATE.currentValue = msg_readFloatToken(m, 0)
            return
        }
    
                                throw new Error('[sig~], id "n_75_52", inlet "0", unsupported message : ' + msg_display(m))
                            }



function m_n_77_0_1__routemsg_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                m_n_77_0_1_sig_RCVS_0(m)
                return
            } else {
                SND_TO_NULL(m)
                return
            }
        
                                throw new Error('[_routemsg], id "m_n_77_0_1__routemsg", inlet "0", unsupported message : ' + msg_display(m))
                            }
let m_n_77_0_1_sig_OUTS_0 = 0
function m_n_77_0_1_sig_RCVS_0(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            m_n_77_0_1_sig_STATE.currentValue = msg_readFloatToken(m, 0)
            return
        }
    
                                throw new Error('[sig~], id "m_n_77_0_1_sig", inlet "0", unsupported message : ' + msg_display(m))
                            }



function m_n_77_22_1__routemsg_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                m_n_77_22_1_sig_RCVS_0(m)
                return
            } else {
                SND_TO_NULL(m)
                return
            }
        
                                throw new Error('[_routemsg], id "m_n_77_22_1__routemsg", inlet "0", unsupported message : ' + msg_display(m))
                            }
let m_n_77_22_1_sig_OUTS_0 = 0
function m_n_77_22_1_sig_RCVS_0(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            m_n_77_22_1_sig_STATE.currentValue = msg_readFloatToken(m, 0)
            return
        }
    
                                throw new Error('[sig~], id "m_n_77_22_1_sig", inlet "0", unsupported message : ' + msg_display(m))
                            }



function n_77_51_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_77_51_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_77_51_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_77_51_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_77_51_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_77_51_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_77_51_STATE.outMessages[0] = message
                n_77_51_STATE.messageTransferFunctions.splice(0, n_77_51_STATE.messageTransferFunctions.length - 1)
                n_77_51_STATE.messageTransferFunctions[0] = function (m) {
                    return n_77_51_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_77_51_STATE.messageTransferFunctions.length; i++) {
                    n_77_52_RCVS_0(n_77_51_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_77_51", inlet "0", unsupported message : ' + msg_display(m))
                            }
let n_77_52_OUTS_0 = 0
function n_77_52_RCVS_0(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_77_52_STATE.currentValue = msg_readFloatToken(m, 0)
            return
        }
    
                                throw new Error('[sig~], id "n_77_52", inlet "0", unsupported message : ' + msg_display(m))
                            }



function n_33_3_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_33_3_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_33_3_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_33_3_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_33_3_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_33_3_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_33_3_STATE.outMessages[0] = message
                n_33_3_STATE.messageTransferFunctions.splice(0, n_33_3_STATE.messageTransferFunctions.length - 1)
                n_33_3_STATE.messageTransferFunctions[0] = function (m) {
                    return n_33_3_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_33_3_STATE.messageTransferFunctions.length; i++) {
                    n_33_0_RCVS_1(n_33_3_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_33_3", inlet "0", unsupported message : ' + msg_display(m))
                            }



function n_33_15_RCVS_0(m) {
                                
            if (msg_getLength(m) === 1) {
                if (msg_isStringToken(m, 0)) {
                    const action = msg_readStringToken(m, 0)
                    if (action === 'bang' || action === 'start') {
                        n_delay_scheduleDelay(
                            n_33_15_STATE, 
                            () => n_33_5_RCVS_0(msg_bang()),
                            FRAME,
                        )
                        return
                    } else if (action === 'stop') {
                        n_delay_stop(n_33_15_STATE)
                        return
                    }
                    
                } else if (msg_isFloatToken(m, 0)) {
                    n_delay_setDelay(n_33_15_STATE, msg_readFloatToken(m, 0))
                    n_delay_scheduleDelay(
                        n_33_15_STATE,
                        () => n_33_5_RCVS_0(msg_bang()),
                        FRAME,
                    )
                    return 
                }
            
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN, MSG_STRING_TOKEN])
                && msg_readStringToken(m, 0) === 'tempo'
            ) {
                n_33_15_STATE.sampleRatio = computeUnitInSamples(
                    SAMPLE_RATE, 
                    msg_readFloatToken(m, 1), 
                    msg_readStringToken(m, 2)
                )
                return
            }
        
                                throw new Error('[delay], id "n_33_15", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_33_5_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_33_5_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_33_5_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_33_5_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_33_5_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_33_5_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_33_5_STATE.outMessages[0] = message
                n_33_5_STATE.messageTransferFunctions.splice(0, n_33_5_STATE.messageTransferFunctions.length - 1)
                n_33_5_STATE.messageTransferFunctions[0] = function (m) {
                    return n_33_5_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_33_5_STATE.messageTransferFunctions.length; i++) {
                    n_33_1_RCVS_1(n_33_5_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_33_5", inlet "0", unsupported message : ' + msg_display(m))
                            }



function n_33_18_RCVS_0(m) {
                                
            if (msg_getLength(m) === 1) {
                if (msg_isStringToken(m, 0)) {
                    const action = msg_readStringToken(m, 0)
                    if (action === 'bang' || action === 'start') {
                        n_delay_scheduleDelay(
                            n_33_18_STATE, 
                            () => n_33_16_RCVS_0(msg_bang()),
                            FRAME,
                        )
                        return
                    } else if (action === 'stop') {
                        n_delay_stop(n_33_18_STATE)
                        return
                    }
                    
                } else if (msg_isFloatToken(m, 0)) {
                    n_delay_setDelay(n_33_18_STATE, msg_readFloatToken(m, 0))
                    n_delay_scheduleDelay(
                        n_33_18_STATE,
                        () => n_33_16_RCVS_0(msg_bang()),
                        FRAME,
                    )
                    return 
                }
            
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN, MSG_STRING_TOKEN])
                && msg_readStringToken(m, 0) === 'tempo'
            ) {
                n_33_18_STATE.sampleRatio = computeUnitInSamples(
                    SAMPLE_RATE, 
                    msg_readFloatToken(m, 1), 
                    msg_readStringToken(m, 2)
                )
                return
            }
        
                                throw new Error('[delay], id "n_33_18", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_41_0_RCVS_0(m) {
                                
            n_bang_receiveMessage(n_41_0_STATE, m)
            return
        
                                throw new Error('[bang], id "n_41_0", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_41_42_RCVS_0(m) {
                                
        if (msg_isBang(m)) {
            n_41_1_RCVS_0(msg_floats([Math.floor(Math.random() * n_41_42_STATE.maxValue)]))
            return
        } else if (
            msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
            && msg_readStringToken(m, 0) === 'seed'
        ) {
            console.log('WARNING : seed not implemented yet for [random]')
            return
        }
    
                                throw new Error('[random], id "n_41_42", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_41_1_RCVS_0(m) {
                                
                if (n_41_1_STATE.filterType === MSG_STRING_TOKEN) {
                    if (
                        (n_41_1_STATE.stringFilter === 'float'
                            && msg_isFloatToken(m, 0))
                        || (n_41_1_STATE.stringFilter === 'symbol'
                            && msg_isStringToken(m, 0))
                        || (n_41_1_STATE.stringFilter === 'list'
                            && msg_getLength(m) > 1)
                        || (n_41_1_STATE.stringFilter === 'bang' 
                            && msg_isBang(m))
                    ) {
                        n_41_2_RCVS_0(m)
                        return
                    
                    } else if (
                        msg_isStringToken(m, 0)
                        && msg_readStringToken(m, 0) === n_41_1_STATE.stringFilter
                    ) {
                        n_41_2_RCVS_0(msg_emptyToBang(msg_shift(m)))
                        return
                    }

                } else if (
                    msg_isFloatToken(m, 0)
                    && msg_readFloatToken(m, 0) === n_41_1_STATE.floatFilter
                ) {
                    n_41_2_RCVS_0(msg_emptyToBang(msg_shift(m)))
                    return
                }
            
                SND_TO_NULL(m)
            return
            
                                throw new Error('[route], id "n_41_1", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_41_2_RCVS_0(m) {
                                
            n_bang_receiveMessage(n_41_2_STATE, m)
            return
        
                                throw new Error('[bang], id "n_41_2", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_41_3_RCVS_0(m) {
                                
            msgBusPublish(n_41_3_STATE.busName, m)
            return
        
                                throw new Error('[send], id "n_41_3", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_41_5_RCVS_0(m) {
                                
            n_bang_receiveMessage(n_41_5_STATE, m)
            return
        
                                throw new Error('[bang], id "n_41_5", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_41_43_RCVS_0(m) {
                                
        if (msg_isBang(m)) {
            n_41_6_RCVS_0(msg_floats([Math.floor(Math.random() * n_41_43_STATE.maxValue)]))
            return
        } else if (
            msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
            && msg_readStringToken(m, 0) === 'seed'
        ) {
            console.log('WARNING : seed not implemented yet for [random]')
            return
        }
    
                                throw new Error('[random], id "n_41_43", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_41_6_RCVS_0(m) {
                                
                if (n_41_6_STATE.filterType === MSG_STRING_TOKEN) {
                    if (
                        (n_41_6_STATE.stringFilter === 'float'
                            && msg_isFloatToken(m, 0))
                        || (n_41_6_STATE.stringFilter === 'symbol'
                            && msg_isStringToken(m, 0))
                        || (n_41_6_STATE.stringFilter === 'list'
                            && msg_getLength(m) > 1)
                        || (n_41_6_STATE.stringFilter === 'bang' 
                            && msg_isBang(m))
                    ) {
                        n_41_7_RCVS_0(m)
                        return
                    
                    } else if (
                        msg_isStringToken(m, 0)
                        && msg_readStringToken(m, 0) === n_41_6_STATE.stringFilter
                    ) {
                        n_41_7_RCVS_0(msg_emptyToBang(msg_shift(m)))
                        return
                    }

                } else if (
                    msg_isFloatToken(m, 0)
                    && msg_readFloatToken(m, 0) === n_41_6_STATE.floatFilter
                ) {
                    n_41_7_RCVS_0(msg_emptyToBang(msg_shift(m)))
                    return
                }
            
                SND_TO_NULL(m)
            return
            
                                throw new Error('[route], id "n_41_6", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_41_7_RCVS_0(m) {
                                
            n_bang_receiveMessage(n_41_7_STATE, m)
            return
        
                                throw new Error('[bang], id "n_41_7", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_41_8_RCVS_0(m) {
                                
            msgBusPublish(n_41_8_STATE.busName, m)
            return
        
                                throw new Error('[send], id "n_41_8", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_41_9_RCVS_0(m) {
                                
            n_bang_receiveMessage(n_41_9_STATE, m)
            return
        
                                throw new Error('[bang], id "n_41_9", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_41_44_RCVS_0(m) {
                                
        if (msg_isBang(m)) {
            n_41_44_SNDS_0(msg_floats([Math.floor(Math.random() * n_41_44_STATE.maxValue)]))
            return
        } else if (
            msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
            && msg_readStringToken(m, 0) === 'seed'
        ) {
            console.log('WARNING : seed not implemented yet for [random]')
            return
        }
    
                                throw new Error('[random], id "n_41_44", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_41_10_RCVS_0(m) {
                                
                if (n_41_10_STATE.filterType === MSG_STRING_TOKEN) {
                    if (
                        (n_41_10_STATE.stringFilter === 'float'
                            && msg_isFloatToken(m, 0))
                        || (n_41_10_STATE.stringFilter === 'symbol'
                            && msg_isStringToken(m, 0))
                        || (n_41_10_STATE.stringFilter === 'list'
                            && msg_getLength(m) > 1)
                        || (n_41_10_STATE.stringFilter === 'bang' 
                            && msg_isBang(m))
                    ) {
                        n_41_11_RCVS_0(m)
                        return
                    
                    } else if (
                        msg_isStringToken(m, 0)
                        && msg_readStringToken(m, 0) === n_41_10_STATE.stringFilter
                    ) {
                        n_41_11_RCVS_0(msg_emptyToBang(msg_shift(m)))
                        return
                    }

                } else if (
                    msg_isFloatToken(m, 0)
                    && msg_readFloatToken(m, 0) === n_41_10_STATE.floatFilter
                ) {
                    n_41_11_RCVS_0(msg_emptyToBang(msg_shift(m)))
                    return
                }
            
                SND_TO_NULL(m)
            return
            
                                throw new Error('[route], id "n_41_10", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_41_11_RCVS_0(m) {
                                
            n_bang_receiveMessage(n_41_11_STATE, m)
            return
        
                                throw new Error('[bang], id "n_41_11", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_41_13_RCVS_0(m) {
                                
            msgBusPublish(n_41_13_STATE.busName, m)
            return
        
                                throw new Error('[send], id "n_41_13", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_41_12_RCVS_0(m) {
                                
                n_floatatom_receiveMessage(n_41_12_STATE, m)
                return
            
                                throw new Error('[floatatom], id "n_41_12", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_41_14_RCVS_0(m) {
                                
            n_bang_receiveMessage(n_41_14_STATE, m)
            return
        
                                throw new Error('[bang], id "n_41_14", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_41_45_RCVS_0(m) {
                                
        if (msg_isBang(m)) {
            n_41_15_RCVS_0(msg_floats([Math.floor(Math.random() * n_41_45_STATE.maxValue)]))
            return
        } else if (
            msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
            && msg_readStringToken(m, 0) === 'seed'
        ) {
            console.log('WARNING : seed not implemented yet for [random]')
            return
        }
    
                                throw new Error('[random], id "n_41_45", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_41_15_RCVS_0(m) {
                                
                if (n_41_15_STATE.filterType === MSG_STRING_TOKEN) {
                    if (
                        (n_41_15_STATE.stringFilter === 'float'
                            && msg_isFloatToken(m, 0))
                        || (n_41_15_STATE.stringFilter === 'symbol'
                            && msg_isStringToken(m, 0))
                        || (n_41_15_STATE.stringFilter === 'list'
                            && msg_getLength(m) > 1)
                        || (n_41_15_STATE.stringFilter === 'bang' 
                            && msg_isBang(m))
                    ) {
                        n_41_16_RCVS_0(m)
                        return
                    
                    } else if (
                        msg_isStringToken(m, 0)
                        && msg_readStringToken(m, 0) === n_41_15_STATE.stringFilter
                    ) {
                        n_41_16_RCVS_0(msg_emptyToBang(msg_shift(m)))
                        return
                    }

                } else if (
                    msg_isFloatToken(m, 0)
                    && msg_readFloatToken(m, 0) === n_41_15_STATE.floatFilter
                ) {
                    n_41_16_RCVS_0(msg_emptyToBang(msg_shift(m)))
                    return
                }
            
                SND_TO_NULL(m)
            return
            
                                throw new Error('[route], id "n_41_15", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_41_16_RCVS_0(m) {
                                
            n_bang_receiveMessage(n_41_16_STATE, m)
            return
        
                                throw new Error('[bang], id "n_41_16", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_41_17_RCVS_0(m) {
                                
            msgBusPublish(n_41_17_STATE.busName, m)
            return
        
                                throw new Error('[send], id "n_41_17", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_41_21_RCVS_0(m) {
                                
            n_bang_receiveMessage(n_41_21_STATE, m)
            return
        
                                throw new Error('[bang], id "n_41_21", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_41_41_RCVS_0(m) {
                                
        if (msg_isBang(m)) {
            n_41_22_RCVS_0(msg_floats([Math.floor(Math.random() * n_41_41_STATE.maxValue)]))
            return
        } else if (
            msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
            && msg_readStringToken(m, 0) === 'seed'
        ) {
            console.log('WARNING : seed not implemented yet for [random]')
            return
        }
    
                                throw new Error('[random], id "n_41_41", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_41_22_RCVS_0(m) {
                                
                if (n_41_22_STATE.filterType === MSG_STRING_TOKEN) {
                    if (
                        (n_41_22_STATE.stringFilter === 'float'
                            && msg_isFloatToken(m, 0))
                        || (n_41_22_STATE.stringFilter === 'symbol'
                            && msg_isStringToken(m, 0))
                        || (n_41_22_STATE.stringFilter === 'list'
                            && msg_getLength(m) > 1)
                        || (n_41_22_STATE.stringFilter === 'bang' 
                            && msg_isBang(m))
                    ) {
                        n_41_23_RCVS_0(m)
                        return
                    
                    } else if (
                        msg_isStringToken(m, 0)
                        && msg_readStringToken(m, 0) === n_41_22_STATE.stringFilter
                    ) {
                        n_41_23_RCVS_0(msg_emptyToBang(msg_shift(m)))
                        return
                    }

                } else if (
                    msg_isFloatToken(m, 0)
                    && msg_readFloatToken(m, 0) === n_41_22_STATE.floatFilter
                ) {
                    n_41_23_RCVS_0(msg_emptyToBang(msg_shift(m)))
                    return
                }
            
                SND_TO_NULL(m)
            return
            
                                throw new Error('[route], id "n_41_22", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_41_23_RCVS_0(m) {
                                
            n_bang_receiveMessage(n_41_23_STATE, m)
            return
        
                                throw new Error('[bang], id "n_41_23", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_41_25_RCVS_0(m) {
                                
            msgBusPublish(n_41_25_STATE.busName, m)
            return
        
                                throw new Error('[send], id "n_41_25", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_41_26_RCVS_0(m) {
                                
            n_bang_receiveMessage(n_41_26_STATE, m)
            return
        
                                throw new Error('[bang], id "n_41_26", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_41_46_RCVS_0(m) {
                                
        if (msg_isBang(m)) {
            n_41_27_RCVS_0(msg_floats([Math.floor(Math.random() * n_41_46_STATE.maxValue)]))
            return
        } else if (
            msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
            && msg_readStringToken(m, 0) === 'seed'
        ) {
            console.log('WARNING : seed not implemented yet for [random]')
            return
        }
    
                                throw new Error('[random], id "n_41_46", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_41_27_RCVS_0(m) {
                                
                
                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 0
                        ) {
                            n_41_28_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 1
                        ) {
                            n_41_29_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 2
                        ) {
                            n_41_30_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 3
                        ) {
                            n_41_31_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                SND_TO_NULL(m)
                return
            
                                throw new Error('[route], id "n_41_27", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_41_28_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_41_28_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_41_28_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_41_28_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_41_28_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_41_28_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_41_28_STATE.outMessages[0] = message
                n_41_28_STATE.messageTransferFunctions.splice(0, n_41_28_STATE.messageTransferFunctions.length - 1)
                n_41_28_STATE.messageTransferFunctions[0] = function (m) {
                    return n_41_28_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_41_28_STATE.messageTransferFunctions.length; i++) {
                    n_41_32_RCVS_0(n_41_28_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_41_28", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_41_32_RCVS_0(m) {
                                
            msgBusPublish(n_41_32_STATE.busName, m)
            return
        
                                throw new Error('[send], id "n_41_32", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_41_29_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_41_29_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_41_29_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_41_29_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_41_29_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_41_29_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_41_29_STATE.outMessages[0] = message
                n_41_29_STATE.messageTransferFunctions.splice(0, n_41_29_STATE.messageTransferFunctions.length - 1)
                n_41_29_STATE.messageTransferFunctions[0] = function (m) {
                    return n_41_29_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_41_29_STATE.messageTransferFunctions.length; i++) {
                    n_41_32_RCVS_0(n_41_29_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_41_29", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_41_30_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_41_30_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_41_30_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_41_30_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_41_30_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_41_30_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_41_30_STATE.outMessages[0] = message
                n_41_30_STATE.messageTransferFunctions.splice(0, n_41_30_STATE.messageTransferFunctions.length - 1)
                n_41_30_STATE.messageTransferFunctions[0] = function (m) {
                    return n_41_30_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_41_30_STATE.messageTransferFunctions.length; i++) {
                    n_41_32_RCVS_0(n_41_30_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_41_30", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_41_31_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_41_31_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_41_31_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_41_31_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_41_31_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_41_31_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_41_31_STATE.outMessages[0] = message
                n_41_31_STATE.messageTransferFunctions.splice(0, n_41_31_STATE.messageTransferFunctions.length - 1)
                n_41_31_STATE.messageTransferFunctions[0] = function (m) {
                    return n_41_31_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_41_31_STATE.messageTransferFunctions.length; i++) {
                    n_41_32_RCVS_0(n_41_31_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_41_31", inlet "0", unsupported message : ' + msg_display(m))
                            }





function n_41_35_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_41_35_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_41_35_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_41_35_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_41_35_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_41_35_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_41_35_STATE.outMessages[0] = message
                n_41_35_STATE.messageTransferFunctions.splice(0, n_41_35_STATE.messageTransferFunctions.length - 1)
                n_41_35_STATE.messageTransferFunctions[0] = function (m) {
                    return n_41_35_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_41_35_STATE.messageTransferFunctions.length; i++) {
                    n_83_17_RCVS_1(n_41_35_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_41_35", inlet "0", unsupported message : ' + msg_display(m))
                            }
let n_83_17_OUTS_0 = 0
function n_83_17_RCVS_1(m) {
                                
                            n_83_17_STATE.floatInputs.set(1, messageTokenToFloat(m, 0))
                            return
                        
                                throw new Error('[expr~], id "n_83_17", inlet "1", unsupported message : ' + msg_display(m))
                            }

function n_41_36_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_41_36_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_41_36_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_41_36_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_41_36_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_41_36_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_41_36_STATE.outMessages[0] = message
                n_41_36_STATE.messageTransferFunctions.splice(0, n_41_36_STATE.messageTransferFunctions.length - 1)
                n_41_36_STATE.messageTransferFunctions[0] = function (m) {
                    return n_41_36_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_41_36_STATE.messageTransferFunctions.length; i++) {
                    n_85_17_RCVS_1(n_41_36_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_41_36", inlet "0", unsupported message : ' + msg_display(m))
                            }
let n_85_17_OUTS_0 = 0
function n_85_17_RCVS_1(m) {
                                
                            n_85_17_STATE.floatInputs.set(1, messageTokenToFloat(m, 0))
                            return
                        
                                throw new Error('[expr~], id "n_85_17", inlet "1", unsupported message : ' + msg_display(m))
                            }

function n_41_37_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_41_37_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_41_37_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_41_37_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_41_37_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_41_37_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_41_37_STATE.outMessages[0] = message
                n_41_37_STATE.messageTransferFunctions.splice(0, n_41_37_STATE.messageTransferFunctions.length - 1)
                n_41_37_STATE.messageTransferFunctions[0] = function (m) {
                    return n_41_37_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_41_37_STATE.messageTransferFunctions.length; i++) {
                    n_87_17_RCVS_1(n_41_37_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_41_37", inlet "0", unsupported message : ' + msg_display(m))
                            }
let n_87_17_OUTS_0 = 0
function n_87_17_RCVS_1(m) {
                                
                            n_87_17_STATE.floatInputs.set(1, messageTokenToFloat(m, 0))
                            return
                        
                                throw new Error('[expr~], id "n_87_17", inlet "1", unsupported message : ' + msg_display(m))
                            }

function n_41_38_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_41_38_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_41_38_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_41_38_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_41_38_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_41_38_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_41_38_STATE.outMessages[0] = message
                n_41_38_STATE.messageTransferFunctions.splice(0, n_41_38_STATE.messageTransferFunctions.length - 1)
                n_41_38_STATE.messageTransferFunctions[0] = function (m) {
                    return n_41_38_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_41_38_STATE.messageTransferFunctions.length; i++) {
                    n_89_17_RCVS_1(n_41_38_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_41_38", inlet "0", unsupported message : ' + msg_display(m))
                            }
let n_89_17_OUTS_0 = 0
function n_89_17_RCVS_1(m) {
                                
                            n_89_17_STATE.floatInputs.set(1, messageTokenToFloat(m, 0))
                            return
                        
                                throw new Error('[expr~], id "n_89_17", inlet "1", unsupported message : ' + msg_display(m))
                            }

function n_41_39_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_41_39_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_41_39_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_41_39_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_41_39_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_41_39_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_41_39_STATE.outMessages[0] = message
                n_41_39_STATE.messageTransferFunctions.splice(0, n_41_39_STATE.messageTransferFunctions.length - 1)
                n_41_39_STATE.messageTransferFunctions[0] = function (m) {
                    return n_41_39_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_41_39_STATE.messageTransferFunctions.length; i++) {
                    n_91_17_RCVS_1(n_41_39_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_41_39", inlet "0", unsupported message : ' + msg_display(m))
                            }
let n_91_17_OUTS_0 = 0
function n_91_17_RCVS_1(m) {
                                
                            n_91_17_STATE.floatInputs.set(1, messageTokenToFloat(m, 0))
                            return
                        
                                throw new Error('[expr~], id "n_91_17", inlet "1", unsupported message : ' + msg_display(m))
                            }

function n_41_40_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_41_40_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_41_40_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_41_40_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_41_40_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_41_40_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_41_40_STATE.outMessages[0] = message
                n_41_40_STATE.messageTransferFunctions.splice(0, n_41_40_STATE.messageTransferFunctions.length - 1)
                n_41_40_STATE.messageTransferFunctions[0] = function (m) {
                    return n_41_40_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_41_40_STATE.messageTransferFunctions.length; i++) {
                    n_93_17_RCVS_1(n_41_40_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_41_40", inlet "0", unsupported message : ' + msg_display(m))
                            }
let n_93_17_OUTS_0 = 0
function n_93_17_RCVS_1(m) {
                                
                            n_93_17_STATE.floatInputs.set(1, messageTokenToFloat(m, 0))
                            return
                        
                                throw new Error('[expr~], id "n_93_17", inlet "1", unsupported message : ' + msg_display(m))
                            }

function n_42_0_RCVS_0(m) {
                                
            n_bang_receiveMessage(n_42_0_STATE, m)
            return
        
                                throw new Error('[bang], id "n_42_0", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_42_1_RCVS_0(m) {
                                
        if (msg_isBang(m)) {
            n_42_2_RCVS_0(msg_floats([Math.floor(Math.random() * n_42_1_STATE.maxValue)]))
            return
        } else if (
            msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
            && msg_readStringToken(m, 0) === 'seed'
        ) {
            console.log('WARNING : seed not implemented yet for [random]')
            return
        }
    
                                throw new Error('[random], id "n_42_1", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_42_2_RCVS_0(m) {
                                
                if (n_42_2_STATE.filterType === MSG_STRING_TOKEN) {
                    if (
                        (n_42_2_STATE.stringFilter === 'float'
                            && msg_isFloatToken(m, 0))
                        || (n_42_2_STATE.stringFilter === 'symbol'
                            && msg_isStringToken(m, 0))
                        || (n_42_2_STATE.stringFilter === 'list'
                            && msg_getLength(m) > 1)
                        || (n_42_2_STATE.stringFilter === 'bang' 
                            && msg_isBang(m))
                    ) {
                        n_42_4_RCVS_0(m)
                        return
                    
                    } else if (
                        msg_isStringToken(m, 0)
                        && msg_readStringToken(m, 0) === n_42_2_STATE.stringFilter
                    ) {
                        n_42_4_RCVS_0(msg_emptyToBang(msg_shift(m)))
                        return
                    }

                } else if (
                    msg_isFloatToken(m, 0)
                    && msg_readFloatToken(m, 0) === n_42_2_STATE.floatFilter
                ) {
                    n_42_4_RCVS_0(msg_emptyToBang(msg_shift(m)))
                    return
                }
            
                n_42_3_RCVS_0(m)
            return
            
                                throw new Error('[route], id "n_42_2", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_42_4_RCVS_0(m) {
                                
        if (msg_isBang(m)) {
            n_42_34_RCVS_0(msg_floats([Math.floor(Math.random() * n_42_4_STATE.maxValue)]))
            return
        } else if (
            msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
            && msg_readStringToken(m, 0) === 'seed'
        ) {
            console.log('WARNING : seed not implemented yet for [random]')
            return
        }
    
                                throw new Error('[random], id "n_42_4", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_42_34_RCVS_0(m) {
                                
                if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                    n_mul_setLeft(n_42_34_STATE, msg_readFloatToken(m, 0))
                    n_42_40_RCVS_0(msg_floats([n_42_34_STATE.leftOp * n_42_34_STATE.rightOp]))
                    return
                
                } else if (msg_isBang(m)) {
                    n_42_40_RCVS_0(msg_floats([n_42_34_STATE.leftOp * n_42_34_STATE.rightOp]))
                    return
                }
            
                                throw new Error('[*], id "n_42_34", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_42_40_RCVS_0(m) {
                                
            msgBusPublish(n_42_40_STATE.busName, m)
            return
        
                                throw new Error('[send], id "n_42_40", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_42_3_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_42_3_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_42_3_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_42_3_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_42_3_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_42_3_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_42_3_STATE.outMessages[0] = message
                n_42_3_STATE.messageTransferFunctions.splice(0, n_42_3_STATE.messageTransferFunctions.length - 1)
                n_42_3_STATE.messageTransferFunctions[0] = function (m) {
                    return n_42_3_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_42_3_STATE.messageTransferFunctions.length; i++) {
                    n_42_34_RCVS_0(n_42_3_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_42_3", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_42_5_RCVS_0(m) {
                                
            n_bang_receiveMessage(n_42_5_STATE, m)
            return
        
                                throw new Error('[bang], id "n_42_5", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_42_8_RCVS_0(m) {
                                
        if (msg_isBang(m)) {
            n_42_19_RCVS_0(msg_floats([Math.floor(Math.random() * n_42_8_STATE.maxValue)]))
            return
        } else if (
            msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
            && msg_readStringToken(m, 0) === 'seed'
        ) {
            console.log('WARNING : seed not implemented yet for [random]')
            return
        }
    
                                throw new Error('[random], id "n_42_8", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_42_19_RCVS_0(m) {
                                
                
                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 0
                        ) {
                            n_42_6_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 1
                        ) {
                            n_42_17_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 2
                        ) {
                            n_42_7_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 3
                        ) {
                            n_42_16_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                SND_TO_NULL(m)
                return
            
                                throw new Error('[route], id "n_42_19", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_42_6_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_42_6_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_42_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_42_6_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_42_6_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_42_6_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_42_6_STATE.outMessages[0] = message
                n_42_6_STATE.messageTransferFunctions.splice(0, n_42_6_STATE.messageTransferFunctions.length - 1)
                n_42_6_STATE.messageTransferFunctions[0] = function (m) {
                    return n_42_6_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_42_6_STATE.messageTransferFunctions.length; i++) {
                    n_42_41_RCVS_0(n_42_6_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_42_6", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_42_41_RCVS_0(m) {
                                
            msgBusPublish(n_42_41_STATE.busName, m)
            return
        
                                throw new Error('[send], id "n_42_41", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_42_17_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_42_17_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_42_17_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_42_17_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_42_17_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_42_17_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_42_17_STATE.outMessages[0] = message
                n_42_17_STATE.messageTransferFunctions.splice(0, n_42_17_STATE.messageTransferFunctions.length - 1)
                n_42_17_STATE.messageTransferFunctions[0] = function (m) {
                    return n_42_17_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_42_17_STATE.messageTransferFunctions.length; i++) {
                    n_42_41_RCVS_0(n_42_17_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_42_17", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_42_7_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_42_7_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_42_7_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_42_7_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_42_7_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_42_7_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_42_7_STATE.outMessages[0] = message
                n_42_7_STATE.messageTransferFunctions.splice(0, n_42_7_STATE.messageTransferFunctions.length - 1)
                n_42_7_STATE.messageTransferFunctions[0] = function (m) {
                    return n_42_7_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_42_7_STATE.messageTransferFunctions.length; i++) {
                    n_42_41_RCVS_0(n_42_7_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_42_7", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_42_16_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_42_16_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_42_16_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_42_16_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_42_16_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_42_16_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_42_16_STATE.outMessages[0] = message
                n_42_16_STATE.messageTransferFunctions.splice(0, n_42_16_STATE.messageTransferFunctions.length - 1)
                n_42_16_STATE.messageTransferFunctions[0] = function (m) {
                    return n_42_16_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_42_16_STATE.messageTransferFunctions.length; i++) {
                    n_42_41_RCVS_0(n_42_16_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_42_16", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_42_9_RCVS_0(m) {
                                
            n_bang_receiveMessage(n_42_9_STATE, m)
            return
        
                                throw new Error('[bang], id "n_42_9", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_42_10_RCVS_0(m) {
                                
        if (msg_isBang(m)) {
            n_42_11_RCVS_0(msg_floats([Math.floor(Math.random() * n_42_10_STATE.maxValue)]))
            return
        } else if (
            msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
            && msg_readStringToken(m, 0) === 'seed'
        ) {
            console.log('WARNING : seed not implemented yet for [random]')
            return
        }
    
                                throw new Error('[random], id "n_42_10", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_42_11_RCVS_0(m) {
                                
                if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                    n_mul_setLeft(n_42_11_STATE, msg_readFloatToken(m, 0))
                    n_42_35_RCVS_0(msg_floats([n_42_11_STATE.leftOp * n_42_11_STATE.rightOp]))
                    return
                
                } else if (msg_isBang(m)) {
                    n_42_35_RCVS_0(msg_floats([n_42_11_STATE.leftOp * n_42_11_STATE.rightOp]))
                    return
                }
            
                                throw new Error('[*], id "n_42_11", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_42_35_RCVS_0(m) {
                                
            msgBusPublish(n_42_35_STATE.busName, m)
            return
        
                                throw new Error('[send], id "n_42_35", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_42_12_RCVS_0(m) {
                                
            n_bang_receiveMessage(n_42_12_STATE, m)
            return
        
                                throw new Error('[bang], id "n_42_12", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_42_13_RCVS_0(m) {
                                
        if (msg_isBang(m)) {
            n_42_14_RCVS_0(msg_floats([Math.floor(Math.random() * n_42_13_STATE.maxValue)]))
            return
        } else if (
            msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
            && msg_readStringToken(m, 0) === 'seed'
        ) {
            console.log('WARNING : seed not implemented yet for [random]')
            return
        }
    
                                throw new Error('[random], id "n_42_13", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_42_14_RCVS_0(m) {
                                
                if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                    n_mul_setLeft(n_42_14_STATE, msg_readFloatToken(m, 0))
                    n_42_42_RCVS_0(msg_floats([n_42_14_STATE.leftOp * n_42_14_STATE.rightOp]))
                    return
                
                } else if (msg_isBang(m)) {
                    n_42_42_RCVS_0(msg_floats([n_42_14_STATE.leftOp * n_42_14_STATE.rightOp]))
                    return
                }
            
                                throw new Error('[*], id "n_42_14", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_42_42_RCVS_0(m) {
                                
            msgBusPublish(n_42_42_STATE.busName, m)
            return
        
                                throw new Error('[send], id "n_42_42", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_42_15_RCVS_0(m) {
                                
            n_bang_receiveMessage(n_42_15_STATE, m)
            return
        
                                throw new Error('[bang], id "n_42_15", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_42_33_RCVS_0(m) {
                                
        n_42_32_RCVS_0(msg_bang())
n_42_24_RCVS_0(msg_bang())
        return
    
                                throw new Error('[trigger], id "n_42_33", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_42_24_RCVS_0(m) {
                                
        if (msg_isBang(m)) {
            n_42_25_RCVS_0(msg_floats([Math.floor(Math.random() * n_42_24_STATE.maxValue)]))
            return
        } else if (
            msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
            && msg_readStringToken(m, 0) === 'seed'
        ) {
            console.log('WARNING : seed not implemented yet for [random]')
            return
        }
    
                                throw new Error('[random], id "n_42_24", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_42_25_RCVS_0(m) {
                                
                
                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 0
                        ) {
                            n_42_21_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 1
                        ) {
                            n_42_22_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 2
                        ) {
                            n_42_27_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 3
                        ) {
                            n_42_20_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 4
                        ) {
                            n_42_23_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 5
                        ) {
                            n_42_26_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                SND_TO_NULL(m)
                return
            
                                throw new Error('[route], id "n_42_25", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_42_21_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_42_21_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_42_21_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_42_21_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_42_21_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_42_21_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_42_21_STATE.outMessages[0] = message
                n_42_21_STATE.messageTransferFunctions.splice(0, n_42_21_STATE.messageTransferFunctions.length - 1)
                n_42_21_STATE.messageTransferFunctions[0] = function (m) {
                    return n_42_21_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_42_21_STATE.messageTransferFunctions.length; i++) {
                    m_n_42_31_0__routemsg_RCVS_0(n_42_21_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_42_21", inlet "0", unsupported message : ' + msg_display(m))
                            }

function m_n_42_31_0__routemsg_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                m_n_42_31_0_sig_RCVS_0(m)
                return
            } else {
                SND_TO_NULL(m)
                return
            }
        
                                throw new Error('[_routemsg], id "m_n_42_31_0__routemsg", inlet "0", unsupported message : ' + msg_display(m))
                            }

function m_n_42_31_0_sig_RCVS_0(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            m_n_42_31_0_sig_STATE.currentValue = msg_readFloatToken(m, 0)
            return
        }
    
                                throw new Error('[sig~], id "m_n_42_31_0_sig", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_42_22_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_42_22_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_42_22_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_42_22_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_42_22_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_42_22_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_42_22_STATE.outMessages[0] = message
                n_42_22_STATE.messageTransferFunctions.splice(0, n_42_22_STATE.messageTransferFunctions.length - 1)
                n_42_22_STATE.messageTransferFunctions[0] = function (m) {
                    return n_42_22_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_42_22_STATE.messageTransferFunctions.length; i++) {
                    m_n_42_31_0__routemsg_RCVS_0(n_42_22_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_42_22", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_42_27_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_42_27_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_42_27_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_42_27_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_42_27_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_42_27_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_42_27_STATE.outMessages[0] = message
                n_42_27_STATE.messageTransferFunctions.splice(0, n_42_27_STATE.messageTransferFunctions.length - 1)
                n_42_27_STATE.messageTransferFunctions[0] = function (m) {
                    return n_42_27_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_42_27_STATE.messageTransferFunctions.length; i++) {
                    m_n_42_31_0__routemsg_RCVS_0(n_42_27_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_42_27", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_42_20_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_42_20_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_42_20_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_42_20_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_42_20_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_42_20_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_42_20_STATE.outMessages[0] = message
                n_42_20_STATE.messageTransferFunctions.splice(0, n_42_20_STATE.messageTransferFunctions.length - 1)
                n_42_20_STATE.messageTransferFunctions[0] = function (m) {
                    return n_42_20_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_42_20_STATE.messageTransferFunctions.length; i++) {
                    m_n_42_31_0__routemsg_RCVS_0(n_42_20_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_42_20", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_42_23_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_42_23_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_42_23_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_42_23_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_42_23_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_42_23_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_42_23_STATE.outMessages[0] = message
                n_42_23_STATE.messageTransferFunctions.splice(0, n_42_23_STATE.messageTransferFunctions.length - 1)
                n_42_23_STATE.messageTransferFunctions[0] = function (m) {
                    return n_42_23_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_42_23_STATE.messageTransferFunctions.length; i++) {
                    m_n_42_31_0__routemsg_RCVS_0(n_42_23_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_42_23", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_42_26_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_42_26_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_42_26_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_42_26_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_42_26_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_42_26_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_42_26_STATE.outMessages[0] = message
                n_42_26_STATE.messageTransferFunctions.splice(0, n_42_26_STATE.messageTransferFunctions.length - 1)
                n_42_26_STATE.messageTransferFunctions[0] = function (m) {
                    return n_42_26_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_42_26_STATE.messageTransferFunctions.length; i++) {
                    m_n_42_31_0__routemsg_RCVS_0(n_42_26_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_42_26", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_42_32_RCVS_0(m) {
                                
        if (msg_isBang(m)) {
            n_42_28_RCVS_0(msg_floats([Math.floor(Math.random() * n_42_32_STATE.maxValue)]))
            return
        } else if (
            msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
            && msg_readStringToken(m, 0) === 'seed'
        ) {
            console.log('WARNING : seed not implemented yet for [random]')
            return
        }
    
                                throw new Error('[random], id "n_42_32", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_42_28_RCVS_0(m) {
                                
                if (n_42_28_STATE.filterType === MSG_STRING_TOKEN) {
                    if (
                        (n_42_28_STATE.stringFilter === 'float'
                            && msg_isFloatToken(m, 0))
                        || (n_42_28_STATE.stringFilter === 'symbol'
                            && msg_isStringToken(m, 0))
                        || (n_42_28_STATE.stringFilter === 'list'
                            && msg_getLength(m) > 1)
                        || (n_42_28_STATE.stringFilter === 'bang' 
                            && msg_isBang(m))
                    ) {
                        n_42_29_RCVS_0(m)
                        return
                    
                    } else if (
                        msg_isStringToken(m, 0)
                        && msg_readStringToken(m, 0) === n_42_28_STATE.stringFilter
                    ) {
                        n_42_29_RCVS_0(msg_emptyToBang(msg_shift(m)))
                        return
                    }

                } else if (
                    msg_isFloatToken(m, 0)
                    && msg_readFloatToken(m, 0) === n_42_28_STATE.floatFilter
                ) {
                    n_42_29_RCVS_0(msg_emptyToBang(msg_shift(m)))
                    return
                }
            
                n_42_30_RCVS_0(m)
            return
            
                                throw new Error('[route], id "n_42_28", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_42_29_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_42_29_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_42_29_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_42_29_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_42_29_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_42_29_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_42_29_STATE.outMessages[0] = message
                n_42_29_STATE.messageTransferFunctions.splice(0, n_42_29_STATE.messageTransferFunctions.length - 1)
                n_42_29_STATE.messageTransferFunctions[0] = function (m) {
                    return n_42_29_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_42_29_STATE.messageTransferFunctions.length; i++) {
                    m_n_42_31_1__routemsg_RCVS_0(n_42_29_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_42_29", inlet "0", unsupported message : ' + msg_display(m))
                            }

function m_n_42_31_1__routemsg_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                m_n_42_31_1_sig_RCVS_0(m)
                return
            } else {
                SND_TO_NULL(m)
                return
            }
        
                                throw new Error('[_routemsg], id "m_n_42_31_1__routemsg", inlet "0", unsupported message : ' + msg_display(m))
                            }

function m_n_42_31_1_sig_RCVS_0(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            m_n_42_31_1_sig_STATE.currentValue = msg_readFloatToken(m, 0)
            return
        }
    
                                throw new Error('[sig~], id "m_n_42_31_1_sig", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_42_30_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_42_30_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_42_30_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_42_30_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_42_30_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_42_30_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_42_30_STATE.outMessages[0] = message
                n_42_30_STATE.messageTransferFunctions.splice(0, n_42_30_STATE.messageTransferFunctions.length - 1)
                n_42_30_STATE.messageTransferFunctions[0] = function (m) {
                    return n_42_30_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_42_30_STATE.messageTransferFunctions.length; i++) {
                    m_n_42_31_1__routemsg_RCVS_0(n_42_30_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_42_30", inlet "0", unsupported message : ' + msg_display(m))
                            }











function n_83_7_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                n_float_int_setValueInt(n_83_7_STATE, msg_readFloatToken(m, 0))
                n_83_2_RCVS_1(msg_floats([n_83_7_STATE.value]))
                return 

            } else if (msg_isBang(m)) {
                n_83_2_RCVS_1(msg_floats([n_83_7_STATE.value]))
                return
                
            }
        
                                throw new Error('[int], id "n_83_7", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_83_2_RCVS_0(m) {
                                
        if (!n_83_2_STATE.isClosed) {
            m_n_83_1_0__routemsg_RCVS_0(m)
        }
        return
    
                                throw new Error('[spigot], id "n_83_2", inlet "0", unsupported message : ' + msg_display(m))
                            }
function n_83_2_RCVS_1(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_spigot_setIsClosed(n_83_2_STATE, msg_readFloatToken(m, 0))
            return
        }
    
                                throw new Error('[spigot], id "n_83_2", inlet "1", unsupported message : ' + msg_display(m))
                            }

function m_n_83_1_0__routemsg_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                SND_TO_NULL(m)
                return
            } else {
                n_83_1_RCVS_0_message(m)
                return
            }
        
                                throw new Error('[_routemsg], id "m_n_83_1_0__routemsg", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_83_1_RCVS_0_message(m) {
                                
        if (msg_isBang(m)) {
            n_83_8_RCVS_0(msg_floats([n_83_1_STATE.currentValue]))
            return 
        }
    
                                throw new Error('[snapshot~], id "n_83_1", inlet "0_message", unsupported message : ' + msg_display(m))
                            }

function n_83_8_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                const newValue = msg_readFloatToken(m, 0)
                if (newValue !== n_83_8_STATE.currentValue) {
                    n_83_8_STATE.currentValue = newValue
                    n_83_11_RCVS_0(msg_floats([n_83_8_STATE.currentValue]))
                }
                return
    
            } else if (msg_isBang(m)) {
                n_83_11_RCVS_0(msg_floats([n_83_8_STATE.currentValue]))
                return 
    
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_83_8_STATE.currentValue = msg_readFloatToken(m, 1)
                return
            }
        
                                throw new Error('[change], id "n_83_8", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_83_11_RCVS_0(m) {
                                
        n_84_0_RCVS_0(msg_bang())
n_83_10_RCVS_0(msg_floats([messageTokenToFloat(m, 0)]))
        return
    
                                throw new Error('[trigger], id "n_83_11", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_83_10_RCVS_0(m) {
                                
        if (!n_83_10_STATE.isClosed) {
            n_83_13_RCVS_0(m)
        }
        return
    
                                throw new Error('[spigot], id "n_83_10", inlet "0", unsupported message : ' + msg_display(m))
                            }
function n_83_10_RCVS_1(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_spigot_setIsClosed(n_83_10_STATE, msg_readFloatToken(m, 0))
            return
        }
    
                                throw new Error('[spigot], id "n_83_10", inlet "1", unsupported message : ' + msg_display(m))
                            }

function n_83_13_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                const newValue = msg_readFloatToken(m, 0)
                if (newValue !== n_83_13_STATE.currentValue) {
                    n_83_13_STATE.currentValue = newValue
                    n_83_9_RCVS_0(msg_floats([n_83_13_STATE.currentValue]))
                }
                return
    
            } else if (msg_isBang(m)) {
                n_83_9_RCVS_0(msg_floats([n_83_13_STATE.currentValue]))
                return 
    
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_83_13_STATE.currentValue = msg_readFloatToken(m, 1)
                return
            }
        
                                throw new Error('[change], id "n_83_13", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_83_9_RCVS_0(m) {
                                
                if (n_83_9_STATE.filterType === MSG_STRING_TOKEN) {
                    if (
                        (n_83_9_STATE.stringFilter === 'float'
                            && msg_isFloatToken(m, 0))
                        || (n_83_9_STATE.stringFilter === 'symbol'
                            && msg_isStringToken(m, 0))
                        || (n_83_9_STATE.stringFilter === 'list'
                            && msg_getLength(m) > 1)
                        || (n_83_9_STATE.stringFilter === 'bang' 
                            && msg_isBang(m))
                    ) {
                        n_83_3_RCVS_0(m)
                        return
                    
                    } else if (
                        msg_isStringToken(m, 0)
                        && msg_readStringToken(m, 0) === n_83_9_STATE.stringFilter
                    ) {
                        n_83_3_RCVS_0(msg_emptyToBang(msg_shift(m)))
                        return
                    }

                } else if (
                    msg_isFloatToken(m, 0)
                    && msg_readFloatToken(m, 0) === n_83_9_STATE.floatFilter
                ) {
                    n_83_3_RCVS_0(msg_emptyToBang(msg_shift(m)))
                    return
                }
            
                SND_TO_NULL(m)
            return
            
                                throw new Error('[route], id "n_83_9", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_83_3_RCVS_0(m) {
                                
        n_83_5_RCVS_0(msg_bang())
n_41_21_RCVS_0(msg_bang())
        return
    
                                throw new Error('[trigger], id "n_83_3", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_83_5_RCVS_0(m) {
                                
        n_83_4_RCVS_0(msg_bang())
n_83_14_RCVS_0(msg_bang())
        return
    
                                throw new Error('[trigger], id "n_83_5", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_83_14_RCVS_0(m) {
                                
            if (msg_getLength(m) === 1) {
                if (msg_isStringToken(m, 0)) {
                    const action = msg_readStringToken(m, 0)
                    if (action === 'bang' || action === 'start') {
                        n_delay_scheduleDelay(
                            n_83_14_STATE, 
                            () => n_83_6_RCVS_0(msg_bang()),
                            FRAME,
                        )
                        return
                    } else if (action === 'stop') {
                        n_delay_stop(n_83_14_STATE)
                        return
                    }
                    
                } else if (msg_isFloatToken(m, 0)) {
                    n_delay_setDelay(n_83_14_STATE, msg_readFloatToken(m, 0))
                    n_delay_scheduleDelay(
                        n_83_14_STATE,
                        () => n_83_6_RCVS_0(msg_bang()),
                        FRAME,
                    )
                    return 
                }
            
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN, MSG_STRING_TOKEN])
                && msg_readStringToken(m, 0) === 'tempo'
            ) {
                n_83_14_STATE.sampleRatio = computeUnitInSamples(
                    SAMPLE_RATE, 
                    msg_readFloatToken(m, 1), 
                    msg_readStringToken(m, 2)
                )
                return
            }
        
                                throw new Error('[delay], id "n_83_14", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_83_6_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_83_6_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_83_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_83_6_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_83_6_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_83_6_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_83_6_STATE.outMessages[0] = message
                n_83_6_STATE.messageTransferFunctions.splice(0, n_83_6_STATE.messageTransferFunctions.length - 1)
                n_83_6_STATE.messageTransferFunctions[0] = function (m) {
                    return n_83_6_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_83_6_STATE.messageTransferFunctions.length; i++) {
                    n_83_7_RCVS_0(n_83_6_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_83_6", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_83_4_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_83_4_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_83_4_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_83_4_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_83_4_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_83_4_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_83_4_STATE.outMessages[0] = message
                n_83_4_STATE.messageTransferFunctions.splice(0, n_83_4_STATE.messageTransferFunctions.length - 1)
                n_83_4_STATE.messageTransferFunctions[0] = function (m) {
                    return n_83_4_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_83_4_STATE.messageTransferFunctions.length; i++) {
                    n_83_7_RCVS_0(n_83_4_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_83_4", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_84_0_RCVS_0(m) {
                                
        n_84_6_RCVS_0(msg_bang())
n_84_2_RCVS_0(msg_bang())
        return
    
                                throw new Error('[trigger], id "n_84_0", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_84_2_RCVS_0(m) {
                                
            if (msg_getLength(m) === 1) {
                if (msg_isStringToken(m, 0)) {
                    const action = msg_readStringToken(m, 0)
                    if (action === 'bang' || action === 'start') {
                        n_delay_scheduleDelay(
                            n_84_2_STATE, 
                            () => n_84_5_RCVS_0(msg_bang()),
                            FRAME,
                        )
                        return
                    } else if (action === 'stop') {
                        n_delay_stop(n_84_2_STATE)
                        return
                    }
                    
                } else if (msg_isFloatToken(m, 0)) {
                    n_delay_setDelay(n_84_2_STATE, msg_readFloatToken(m, 0))
                    n_delay_scheduleDelay(
                        n_84_2_STATE,
                        () => n_84_5_RCVS_0(msg_bang()),
                        FRAME,
                    )
                    return 
                }
            
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN, MSG_STRING_TOKEN])
                && msg_readStringToken(m, 0) === 'tempo'
            ) {
                n_84_2_STATE.sampleRatio = computeUnitInSamples(
                    SAMPLE_RATE, 
                    msg_readFloatToken(m, 1), 
                    msg_readStringToken(m, 2)
                )
                return
            }
        
                                throw new Error('[delay], id "n_84_2", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_84_5_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_84_5_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_84_5_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_84_5_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_84_5_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_84_5_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_84_5_STATE.outMessages[0] = message
                n_84_5_STATE.messageTransferFunctions.splice(0, n_84_5_STATE.messageTransferFunctions.length - 1)
                n_84_5_STATE.messageTransferFunctions[0] = function (m) {
                    return n_84_5_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_84_5_STATE.messageTransferFunctions.length; i++) {
                    n_84_1_RCVS_0(n_84_5_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_84_5", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_84_1_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                n_float_int_setValueInt(n_84_1_STATE, msg_readFloatToken(m, 0))
                n_83_10_RCVS_1(msg_floats([n_84_1_STATE.value]))
                return 

            } else if (msg_isBang(m)) {
                n_83_10_RCVS_1(msg_floats([n_84_1_STATE.value]))
                return
                
            }
        
                                throw new Error('[int], id "n_84_1", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_84_6_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_84_6_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_84_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_84_6_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_84_6_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_84_6_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_84_6_STATE.outMessages[0] = message
                n_84_6_STATE.messageTransferFunctions.splice(0, n_84_6_STATE.messageTransferFunctions.length - 1)
                n_84_6_STATE.messageTransferFunctions[0] = function (m) {
                    return n_84_6_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_84_6_STATE.messageTransferFunctions.length; i++) {
                    n_84_1_RCVS_0(n_84_6_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_84_6", inlet "0", unsupported message : ' + msg_display(m))
                            }





function n_85_7_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                n_float_int_setValueInt(n_85_7_STATE, msg_readFloatToken(m, 0))
                n_85_2_RCVS_1(msg_floats([n_85_7_STATE.value]))
                return 

            } else if (msg_isBang(m)) {
                n_85_2_RCVS_1(msg_floats([n_85_7_STATE.value]))
                return
                
            }
        
                                throw new Error('[int], id "n_85_7", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_85_2_RCVS_0(m) {
                                
        if (!n_85_2_STATE.isClosed) {
            m_n_85_1_0__routemsg_RCVS_0(m)
        }
        return
    
                                throw new Error('[spigot], id "n_85_2", inlet "0", unsupported message : ' + msg_display(m))
                            }
function n_85_2_RCVS_1(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_spigot_setIsClosed(n_85_2_STATE, msg_readFloatToken(m, 0))
            return
        }
    
                                throw new Error('[spigot], id "n_85_2", inlet "1", unsupported message : ' + msg_display(m))
                            }

function m_n_85_1_0__routemsg_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                SND_TO_NULL(m)
                return
            } else {
                n_85_1_RCVS_0_message(m)
                return
            }
        
                                throw new Error('[_routemsg], id "m_n_85_1_0__routemsg", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_85_1_RCVS_0_message(m) {
                                
        if (msg_isBang(m)) {
            n_85_8_RCVS_0(msg_floats([n_85_1_STATE.currentValue]))
            return 
        }
    
                                throw new Error('[snapshot~], id "n_85_1", inlet "0_message", unsupported message : ' + msg_display(m))
                            }

function n_85_8_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                const newValue = msg_readFloatToken(m, 0)
                if (newValue !== n_85_8_STATE.currentValue) {
                    n_85_8_STATE.currentValue = newValue
                    n_85_11_RCVS_0(msg_floats([n_85_8_STATE.currentValue]))
                }
                return
    
            } else if (msg_isBang(m)) {
                n_85_11_RCVS_0(msg_floats([n_85_8_STATE.currentValue]))
                return 
    
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_85_8_STATE.currentValue = msg_readFloatToken(m, 1)
                return
            }
        
                                throw new Error('[change], id "n_85_8", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_85_11_RCVS_0(m) {
                                
        n_86_0_RCVS_0(msg_bang())
n_85_10_RCVS_0(msg_floats([messageTokenToFloat(m, 0)]))
        return
    
                                throw new Error('[trigger], id "n_85_11", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_85_10_RCVS_0(m) {
                                
        if (!n_85_10_STATE.isClosed) {
            n_85_13_RCVS_0(m)
        }
        return
    
                                throw new Error('[spigot], id "n_85_10", inlet "0", unsupported message : ' + msg_display(m))
                            }
function n_85_10_RCVS_1(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_spigot_setIsClosed(n_85_10_STATE, msg_readFloatToken(m, 0))
            return
        }
    
                                throw new Error('[spigot], id "n_85_10", inlet "1", unsupported message : ' + msg_display(m))
                            }

function n_85_13_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                const newValue = msg_readFloatToken(m, 0)
                if (newValue !== n_85_13_STATE.currentValue) {
                    n_85_13_STATE.currentValue = newValue
                    n_85_9_RCVS_0(msg_floats([n_85_13_STATE.currentValue]))
                }
                return
    
            } else if (msg_isBang(m)) {
                n_85_9_RCVS_0(msg_floats([n_85_13_STATE.currentValue]))
                return 
    
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_85_13_STATE.currentValue = msg_readFloatToken(m, 1)
                return
            }
        
                                throw new Error('[change], id "n_85_13", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_85_9_RCVS_0(m) {
                                
                if (n_85_9_STATE.filterType === MSG_STRING_TOKEN) {
                    if (
                        (n_85_9_STATE.stringFilter === 'float'
                            && msg_isFloatToken(m, 0))
                        || (n_85_9_STATE.stringFilter === 'symbol'
                            && msg_isStringToken(m, 0))
                        || (n_85_9_STATE.stringFilter === 'list'
                            && msg_getLength(m) > 1)
                        || (n_85_9_STATE.stringFilter === 'bang' 
                            && msg_isBang(m))
                    ) {
                        n_85_3_RCVS_0(m)
                        return
                    
                    } else if (
                        msg_isStringToken(m, 0)
                        && msg_readStringToken(m, 0) === n_85_9_STATE.stringFilter
                    ) {
                        n_85_3_RCVS_0(msg_emptyToBang(msg_shift(m)))
                        return
                    }

                } else if (
                    msg_isFloatToken(m, 0)
                    && msg_readFloatToken(m, 0) === n_85_9_STATE.floatFilter
                ) {
                    n_85_3_RCVS_0(msg_emptyToBang(msg_shift(m)))
                    return
                }
            
                SND_TO_NULL(m)
            return
            
                                throw new Error('[route], id "n_85_9", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_85_3_RCVS_0(m) {
                                
        n_85_5_RCVS_0(msg_bang())
n_41_0_RCVS_0(msg_bang())
        return
    
                                throw new Error('[trigger], id "n_85_3", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_85_5_RCVS_0(m) {
                                
        n_85_4_RCVS_0(msg_bang())
n_85_14_RCVS_0(msg_bang())
        return
    
                                throw new Error('[trigger], id "n_85_5", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_85_14_RCVS_0(m) {
                                
            if (msg_getLength(m) === 1) {
                if (msg_isStringToken(m, 0)) {
                    const action = msg_readStringToken(m, 0)
                    if (action === 'bang' || action === 'start') {
                        n_delay_scheduleDelay(
                            n_85_14_STATE, 
                            () => n_85_6_RCVS_0(msg_bang()),
                            FRAME,
                        )
                        return
                    } else if (action === 'stop') {
                        n_delay_stop(n_85_14_STATE)
                        return
                    }
                    
                } else if (msg_isFloatToken(m, 0)) {
                    n_delay_setDelay(n_85_14_STATE, msg_readFloatToken(m, 0))
                    n_delay_scheduleDelay(
                        n_85_14_STATE,
                        () => n_85_6_RCVS_0(msg_bang()),
                        FRAME,
                    )
                    return 
                }
            
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN, MSG_STRING_TOKEN])
                && msg_readStringToken(m, 0) === 'tempo'
            ) {
                n_85_14_STATE.sampleRatio = computeUnitInSamples(
                    SAMPLE_RATE, 
                    msg_readFloatToken(m, 1), 
                    msg_readStringToken(m, 2)
                )
                return
            }
        
                                throw new Error('[delay], id "n_85_14", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_85_6_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_85_6_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_85_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_85_6_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_85_6_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_85_6_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_85_6_STATE.outMessages[0] = message
                n_85_6_STATE.messageTransferFunctions.splice(0, n_85_6_STATE.messageTransferFunctions.length - 1)
                n_85_6_STATE.messageTransferFunctions[0] = function (m) {
                    return n_85_6_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_85_6_STATE.messageTransferFunctions.length; i++) {
                    n_85_7_RCVS_0(n_85_6_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_85_6", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_85_4_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_85_4_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_85_4_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_85_4_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_85_4_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_85_4_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_85_4_STATE.outMessages[0] = message
                n_85_4_STATE.messageTransferFunctions.splice(0, n_85_4_STATE.messageTransferFunctions.length - 1)
                n_85_4_STATE.messageTransferFunctions[0] = function (m) {
                    return n_85_4_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_85_4_STATE.messageTransferFunctions.length; i++) {
                    n_85_7_RCVS_0(n_85_4_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_85_4", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_86_0_RCVS_0(m) {
                                
        n_86_6_RCVS_0(msg_bang())
n_86_2_RCVS_0(msg_bang())
        return
    
                                throw new Error('[trigger], id "n_86_0", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_86_2_RCVS_0(m) {
                                
            if (msg_getLength(m) === 1) {
                if (msg_isStringToken(m, 0)) {
                    const action = msg_readStringToken(m, 0)
                    if (action === 'bang' || action === 'start') {
                        n_delay_scheduleDelay(
                            n_86_2_STATE, 
                            () => n_86_5_RCVS_0(msg_bang()),
                            FRAME,
                        )
                        return
                    } else if (action === 'stop') {
                        n_delay_stop(n_86_2_STATE)
                        return
                    }
                    
                } else if (msg_isFloatToken(m, 0)) {
                    n_delay_setDelay(n_86_2_STATE, msg_readFloatToken(m, 0))
                    n_delay_scheduleDelay(
                        n_86_2_STATE,
                        () => n_86_5_RCVS_0(msg_bang()),
                        FRAME,
                    )
                    return 
                }
            
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN, MSG_STRING_TOKEN])
                && msg_readStringToken(m, 0) === 'tempo'
            ) {
                n_86_2_STATE.sampleRatio = computeUnitInSamples(
                    SAMPLE_RATE, 
                    msg_readFloatToken(m, 1), 
                    msg_readStringToken(m, 2)
                )
                return
            }
        
                                throw new Error('[delay], id "n_86_2", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_86_5_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_86_5_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_86_5_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_86_5_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_86_5_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_86_5_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_86_5_STATE.outMessages[0] = message
                n_86_5_STATE.messageTransferFunctions.splice(0, n_86_5_STATE.messageTransferFunctions.length - 1)
                n_86_5_STATE.messageTransferFunctions[0] = function (m) {
                    return n_86_5_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_86_5_STATE.messageTransferFunctions.length; i++) {
                    n_86_1_RCVS_0(n_86_5_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_86_5", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_86_1_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                n_float_int_setValueInt(n_86_1_STATE, msg_readFloatToken(m, 0))
                n_85_10_RCVS_1(msg_floats([n_86_1_STATE.value]))
                return 

            } else if (msg_isBang(m)) {
                n_85_10_RCVS_1(msg_floats([n_86_1_STATE.value]))
                return
                
            }
        
                                throw new Error('[int], id "n_86_1", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_86_6_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_86_6_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_86_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_86_6_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_86_6_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_86_6_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_86_6_STATE.outMessages[0] = message
                n_86_6_STATE.messageTransferFunctions.splice(0, n_86_6_STATE.messageTransferFunctions.length - 1)
                n_86_6_STATE.messageTransferFunctions[0] = function (m) {
                    return n_86_6_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_86_6_STATE.messageTransferFunctions.length; i++) {
                    n_86_1_RCVS_0(n_86_6_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_86_6", inlet "0", unsupported message : ' + msg_display(m))
                            }





function n_87_7_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                n_float_int_setValueInt(n_87_7_STATE, msg_readFloatToken(m, 0))
                n_87_2_RCVS_1(msg_floats([n_87_7_STATE.value]))
                return 

            } else if (msg_isBang(m)) {
                n_87_2_RCVS_1(msg_floats([n_87_7_STATE.value]))
                return
                
            }
        
                                throw new Error('[int], id "n_87_7", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_87_2_RCVS_0(m) {
                                
        if (!n_87_2_STATE.isClosed) {
            m_n_87_1_0__routemsg_RCVS_0(m)
        }
        return
    
                                throw new Error('[spigot], id "n_87_2", inlet "0", unsupported message : ' + msg_display(m))
                            }
function n_87_2_RCVS_1(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_spigot_setIsClosed(n_87_2_STATE, msg_readFloatToken(m, 0))
            return
        }
    
                                throw new Error('[spigot], id "n_87_2", inlet "1", unsupported message : ' + msg_display(m))
                            }

function m_n_87_1_0__routemsg_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                SND_TO_NULL(m)
                return
            } else {
                n_87_1_RCVS_0_message(m)
                return
            }
        
                                throw new Error('[_routemsg], id "m_n_87_1_0__routemsg", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_87_1_RCVS_0_message(m) {
                                
        if (msg_isBang(m)) {
            n_87_8_RCVS_0(msg_floats([n_87_1_STATE.currentValue]))
            return 
        }
    
                                throw new Error('[snapshot~], id "n_87_1", inlet "0_message", unsupported message : ' + msg_display(m))
                            }

function n_87_8_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                const newValue = msg_readFloatToken(m, 0)
                if (newValue !== n_87_8_STATE.currentValue) {
                    n_87_8_STATE.currentValue = newValue
                    n_87_11_RCVS_0(msg_floats([n_87_8_STATE.currentValue]))
                }
                return
    
            } else if (msg_isBang(m)) {
                n_87_11_RCVS_0(msg_floats([n_87_8_STATE.currentValue]))
                return 
    
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_87_8_STATE.currentValue = msg_readFloatToken(m, 1)
                return
            }
        
                                throw new Error('[change], id "n_87_8", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_87_11_RCVS_0(m) {
                                
        n_88_0_RCVS_0(msg_bang())
n_87_10_RCVS_0(msg_floats([messageTokenToFloat(m, 0)]))
        return
    
                                throw new Error('[trigger], id "n_87_11", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_87_10_RCVS_0(m) {
                                
        if (!n_87_10_STATE.isClosed) {
            n_87_13_RCVS_0(m)
        }
        return
    
                                throw new Error('[spigot], id "n_87_10", inlet "0", unsupported message : ' + msg_display(m))
                            }
function n_87_10_RCVS_1(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_spigot_setIsClosed(n_87_10_STATE, msg_readFloatToken(m, 0))
            return
        }
    
                                throw new Error('[spigot], id "n_87_10", inlet "1", unsupported message : ' + msg_display(m))
                            }

function n_87_13_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                const newValue = msg_readFloatToken(m, 0)
                if (newValue !== n_87_13_STATE.currentValue) {
                    n_87_13_STATE.currentValue = newValue
                    n_87_9_RCVS_0(msg_floats([n_87_13_STATE.currentValue]))
                }
                return
    
            } else if (msg_isBang(m)) {
                n_87_9_RCVS_0(msg_floats([n_87_13_STATE.currentValue]))
                return 
    
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_87_13_STATE.currentValue = msg_readFloatToken(m, 1)
                return
            }
        
                                throw new Error('[change], id "n_87_13", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_87_9_RCVS_0(m) {
                                
                if (n_87_9_STATE.filterType === MSG_STRING_TOKEN) {
                    if (
                        (n_87_9_STATE.stringFilter === 'float'
                            && msg_isFloatToken(m, 0))
                        || (n_87_9_STATE.stringFilter === 'symbol'
                            && msg_isStringToken(m, 0))
                        || (n_87_9_STATE.stringFilter === 'list'
                            && msg_getLength(m) > 1)
                        || (n_87_9_STATE.stringFilter === 'bang' 
                            && msg_isBang(m))
                    ) {
                        n_87_3_RCVS_0(m)
                        return
                    
                    } else if (
                        msg_isStringToken(m, 0)
                        && msg_readStringToken(m, 0) === n_87_9_STATE.stringFilter
                    ) {
                        n_87_3_RCVS_0(msg_emptyToBang(msg_shift(m)))
                        return
                    }

                } else if (
                    msg_isFloatToken(m, 0)
                    && msg_readFloatToken(m, 0) === n_87_9_STATE.floatFilter
                ) {
                    n_87_3_RCVS_0(msg_emptyToBang(msg_shift(m)))
                    return
                }
            
                SND_TO_NULL(m)
            return
            
                                throw new Error('[route], id "n_87_9", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_87_3_RCVS_0(m) {
                                
        n_87_5_RCVS_0(msg_bang())
n_41_5_RCVS_0(msg_bang())
        return
    
                                throw new Error('[trigger], id "n_87_3", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_87_5_RCVS_0(m) {
                                
        n_87_4_RCVS_0(msg_bang())
n_87_14_RCVS_0(msg_bang())
        return
    
                                throw new Error('[trigger], id "n_87_5", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_87_14_RCVS_0(m) {
                                
            if (msg_getLength(m) === 1) {
                if (msg_isStringToken(m, 0)) {
                    const action = msg_readStringToken(m, 0)
                    if (action === 'bang' || action === 'start') {
                        n_delay_scheduleDelay(
                            n_87_14_STATE, 
                            () => n_87_6_RCVS_0(msg_bang()),
                            FRAME,
                        )
                        return
                    } else if (action === 'stop') {
                        n_delay_stop(n_87_14_STATE)
                        return
                    }
                    
                } else if (msg_isFloatToken(m, 0)) {
                    n_delay_setDelay(n_87_14_STATE, msg_readFloatToken(m, 0))
                    n_delay_scheduleDelay(
                        n_87_14_STATE,
                        () => n_87_6_RCVS_0(msg_bang()),
                        FRAME,
                    )
                    return 
                }
            
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN, MSG_STRING_TOKEN])
                && msg_readStringToken(m, 0) === 'tempo'
            ) {
                n_87_14_STATE.sampleRatio = computeUnitInSamples(
                    SAMPLE_RATE, 
                    msg_readFloatToken(m, 1), 
                    msg_readStringToken(m, 2)
                )
                return
            }
        
                                throw new Error('[delay], id "n_87_14", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_87_6_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_87_6_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_87_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_87_6_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_87_6_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_87_6_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_87_6_STATE.outMessages[0] = message
                n_87_6_STATE.messageTransferFunctions.splice(0, n_87_6_STATE.messageTransferFunctions.length - 1)
                n_87_6_STATE.messageTransferFunctions[0] = function (m) {
                    return n_87_6_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_87_6_STATE.messageTransferFunctions.length; i++) {
                    n_87_7_RCVS_0(n_87_6_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_87_6", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_87_4_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_87_4_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_87_4_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_87_4_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_87_4_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_87_4_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_87_4_STATE.outMessages[0] = message
                n_87_4_STATE.messageTransferFunctions.splice(0, n_87_4_STATE.messageTransferFunctions.length - 1)
                n_87_4_STATE.messageTransferFunctions[0] = function (m) {
                    return n_87_4_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_87_4_STATE.messageTransferFunctions.length; i++) {
                    n_87_7_RCVS_0(n_87_4_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_87_4", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_88_0_RCVS_0(m) {
                                
        n_88_6_RCVS_0(msg_bang())
n_88_2_RCVS_0(msg_bang())
        return
    
                                throw new Error('[trigger], id "n_88_0", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_88_2_RCVS_0(m) {
                                
            if (msg_getLength(m) === 1) {
                if (msg_isStringToken(m, 0)) {
                    const action = msg_readStringToken(m, 0)
                    if (action === 'bang' || action === 'start') {
                        n_delay_scheduleDelay(
                            n_88_2_STATE, 
                            () => n_88_5_RCVS_0(msg_bang()),
                            FRAME,
                        )
                        return
                    } else if (action === 'stop') {
                        n_delay_stop(n_88_2_STATE)
                        return
                    }
                    
                } else if (msg_isFloatToken(m, 0)) {
                    n_delay_setDelay(n_88_2_STATE, msg_readFloatToken(m, 0))
                    n_delay_scheduleDelay(
                        n_88_2_STATE,
                        () => n_88_5_RCVS_0(msg_bang()),
                        FRAME,
                    )
                    return 
                }
            
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN, MSG_STRING_TOKEN])
                && msg_readStringToken(m, 0) === 'tempo'
            ) {
                n_88_2_STATE.sampleRatio = computeUnitInSamples(
                    SAMPLE_RATE, 
                    msg_readFloatToken(m, 1), 
                    msg_readStringToken(m, 2)
                )
                return
            }
        
                                throw new Error('[delay], id "n_88_2", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_88_5_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_88_5_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_88_5_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_88_5_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_88_5_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_88_5_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_88_5_STATE.outMessages[0] = message
                n_88_5_STATE.messageTransferFunctions.splice(0, n_88_5_STATE.messageTransferFunctions.length - 1)
                n_88_5_STATE.messageTransferFunctions[0] = function (m) {
                    return n_88_5_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_88_5_STATE.messageTransferFunctions.length; i++) {
                    n_88_1_RCVS_0(n_88_5_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_88_5", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_88_1_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                n_float_int_setValueInt(n_88_1_STATE, msg_readFloatToken(m, 0))
                n_87_10_RCVS_1(msg_floats([n_88_1_STATE.value]))
                return 

            } else if (msg_isBang(m)) {
                n_87_10_RCVS_1(msg_floats([n_88_1_STATE.value]))
                return
                
            }
        
                                throw new Error('[int], id "n_88_1", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_88_6_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_88_6_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_88_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_88_6_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_88_6_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_88_6_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_88_6_STATE.outMessages[0] = message
                n_88_6_STATE.messageTransferFunctions.splice(0, n_88_6_STATE.messageTransferFunctions.length - 1)
                n_88_6_STATE.messageTransferFunctions[0] = function (m) {
                    return n_88_6_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_88_6_STATE.messageTransferFunctions.length; i++) {
                    n_88_1_RCVS_0(n_88_6_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_88_6", inlet "0", unsupported message : ' + msg_display(m))
                            }





function n_89_7_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                n_float_int_setValueInt(n_89_7_STATE, msg_readFloatToken(m, 0))
                n_89_2_RCVS_1(msg_floats([n_89_7_STATE.value]))
                return 

            } else if (msg_isBang(m)) {
                n_89_2_RCVS_1(msg_floats([n_89_7_STATE.value]))
                return
                
            }
        
                                throw new Error('[int], id "n_89_7", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_89_2_RCVS_0(m) {
                                
        if (!n_89_2_STATE.isClosed) {
            m_n_89_1_0__routemsg_RCVS_0(m)
        }
        return
    
                                throw new Error('[spigot], id "n_89_2", inlet "0", unsupported message : ' + msg_display(m))
                            }
function n_89_2_RCVS_1(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_spigot_setIsClosed(n_89_2_STATE, msg_readFloatToken(m, 0))
            return
        }
    
                                throw new Error('[spigot], id "n_89_2", inlet "1", unsupported message : ' + msg_display(m))
                            }

function m_n_89_1_0__routemsg_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                SND_TO_NULL(m)
                return
            } else {
                n_89_1_RCVS_0_message(m)
                return
            }
        
                                throw new Error('[_routemsg], id "m_n_89_1_0__routemsg", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_89_1_RCVS_0_message(m) {
                                
        if (msg_isBang(m)) {
            n_89_8_RCVS_0(msg_floats([n_89_1_STATE.currentValue]))
            return 
        }
    
                                throw new Error('[snapshot~], id "n_89_1", inlet "0_message", unsupported message : ' + msg_display(m))
                            }

function n_89_8_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                const newValue = msg_readFloatToken(m, 0)
                if (newValue !== n_89_8_STATE.currentValue) {
                    n_89_8_STATE.currentValue = newValue
                    n_89_11_RCVS_0(msg_floats([n_89_8_STATE.currentValue]))
                }
                return
    
            } else if (msg_isBang(m)) {
                n_89_11_RCVS_0(msg_floats([n_89_8_STATE.currentValue]))
                return 
    
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_89_8_STATE.currentValue = msg_readFloatToken(m, 1)
                return
            }
        
                                throw new Error('[change], id "n_89_8", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_89_11_RCVS_0(m) {
                                
        n_90_0_RCVS_0(msg_bang())
n_89_10_RCVS_0(msg_floats([messageTokenToFloat(m, 0)]))
        return
    
                                throw new Error('[trigger], id "n_89_11", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_89_10_RCVS_0(m) {
                                
        if (!n_89_10_STATE.isClosed) {
            n_89_13_RCVS_0(m)
        }
        return
    
                                throw new Error('[spigot], id "n_89_10", inlet "0", unsupported message : ' + msg_display(m))
                            }
function n_89_10_RCVS_1(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_spigot_setIsClosed(n_89_10_STATE, msg_readFloatToken(m, 0))
            return
        }
    
                                throw new Error('[spigot], id "n_89_10", inlet "1", unsupported message : ' + msg_display(m))
                            }

function n_89_13_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                const newValue = msg_readFloatToken(m, 0)
                if (newValue !== n_89_13_STATE.currentValue) {
                    n_89_13_STATE.currentValue = newValue
                    n_89_9_RCVS_0(msg_floats([n_89_13_STATE.currentValue]))
                }
                return
    
            } else if (msg_isBang(m)) {
                n_89_9_RCVS_0(msg_floats([n_89_13_STATE.currentValue]))
                return 
    
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_89_13_STATE.currentValue = msg_readFloatToken(m, 1)
                return
            }
        
                                throw new Error('[change], id "n_89_13", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_89_9_RCVS_0(m) {
                                
                if (n_89_9_STATE.filterType === MSG_STRING_TOKEN) {
                    if (
                        (n_89_9_STATE.stringFilter === 'float'
                            && msg_isFloatToken(m, 0))
                        || (n_89_9_STATE.stringFilter === 'symbol'
                            && msg_isStringToken(m, 0))
                        || (n_89_9_STATE.stringFilter === 'list'
                            && msg_getLength(m) > 1)
                        || (n_89_9_STATE.stringFilter === 'bang' 
                            && msg_isBang(m))
                    ) {
                        n_89_3_RCVS_0(m)
                        return
                    
                    } else if (
                        msg_isStringToken(m, 0)
                        && msg_readStringToken(m, 0) === n_89_9_STATE.stringFilter
                    ) {
                        n_89_3_RCVS_0(msg_emptyToBang(msg_shift(m)))
                        return
                    }

                } else if (
                    msg_isFloatToken(m, 0)
                    && msg_readFloatToken(m, 0) === n_89_9_STATE.floatFilter
                ) {
                    n_89_3_RCVS_0(msg_emptyToBang(msg_shift(m)))
                    return
                }
            
                SND_TO_NULL(m)
            return
            
                                throw new Error('[route], id "n_89_9", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_89_3_RCVS_0(m) {
                                
        n_89_5_RCVS_0(msg_bang())
n_41_9_RCVS_0(msg_bang())
        return
    
                                throw new Error('[trigger], id "n_89_3", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_89_5_RCVS_0(m) {
                                
        n_89_4_RCVS_0(msg_bang())
n_89_14_RCVS_0(msg_bang())
        return
    
                                throw new Error('[trigger], id "n_89_5", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_89_14_RCVS_0(m) {
                                
            if (msg_getLength(m) === 1) {
                if (msg_isStringToken(m, 0)) {
                    const action = msg_readStringToken(m, 0)
                    if (action === 'bang' || action === 'start') {
                        n_delay_scheduleDelay(
                            n_89_14_STATE, 
                            () => n_89_6_RCVS_0(msg_bang()),
                            FRAME,
                        )
                        return
                    } else if (action === 'stop') {
                        n_delay_stop(n_89_14_STATE)
                        return
                    }
                    
                } else if (msg_isFloatToken(m, 0)) {
                    n_delay_setDelay(n_89_14_STATE, msg_readFloatToken(m, 0))
                    n_delay_scheduleDelay(
                        n_89_14_STATE,
                        () => n_89_6_RCVS_0(msg_bang()),
                        FRAME,
                    )
                    return 
                }
            
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN, MSG_STRING_TOKEN])
                && msg_readStringToken(m, 0) === 'tempo'
            ) {
                n_89_14_STATE.sampleRatio = computeUnitInSamples(
                    SAMPLE_RATE, 
                    msg_readFloatToken(m, 1), 
                    msg_readStringToken(m, 2)
                )
                return
            }
        
                                throw new Error('[delay], id "n_89_14", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_89_6_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_89_6_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_89_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_89_6_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_89_6_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_89_6_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_89_6_STATE.outMessages[0] = message
                n_89_6_STATE.messageTransferFunctions.splice(0, n_89_6_STATE.messageTransferFunctions.length - 1)
                n_89_6_STATE.messageTransferFunctions[0] = function (m) {
                    return n_89_6_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_89_6_STATE.messageTransferFunctions.length; i++) {
                    n_89_7_RCVS_0(n_89_6_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_89_6", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_89_4_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_89_4_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_89_4_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_89_4_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_89_4_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_89_4_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_89_4_STATE.outMessages[0] = message
                n_89_4_STATE.messageTransferFunctions.splice(0, n_89_4_STATE.messageTransferFunctions.length - 1)
                n_89_4_STATE.messageTransferFunctions[0] = function (m) {
                    return n_89_4_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_89_4_STATE.messageTransferFunctions.length; i++) {
                    n_89_7_RCVS_0(n_89_4_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_89_4", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_90_0_RCVS_0(m) {
                                
        n_90_6_RCVS_0(msg_bang())
n_90_2_RCVS_0(msg_bang())
        return
    
                                throw new Error('[trigger], id "n_90_0", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_90_2_RCVS_0(m) {
                                
            if (msg_getLength(m) === 1) {
                if (msg_isStringToken(m, 0)) {
                    const action = msg_readStringToken(m, 0)
                    if (action === 'bang' || action === 'start') {
                        n_delay_scheduleDelay(
                            n_90_2_STATE, 
                            () => n_90_5_RCVS_0(msg_bang()),
                            FRAME,
                        )
                        return
                    } else if (action === 'stop') {
                        n_delay_stop(n_90_2_STATE)
                        return
                    }
                    
                } else if (msg_isFloatToken(m, 0)) {
                    n_delay_setDelay(n_90_2_STATE, msg_readFloatToken(m, 0))
                    n_delay_scheduleDelay(
                        n_90_2_STATE,
                        () => n_90_5_RCVS_0(msg_bang()),
                        FRAME,
                    )
                    return 
                }
            
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN, MSG_STRING_TOKEN])
                && msg_readStringToken(m, 0) === 'tempo'
            ) {
                n_90_2_STATE.sampleRatio = computeUnitInSamples(
                    SAMPLE_RATE, 
                    msg_readFloatToken(m, 1), 
                    msg_readStringToken(m, 2)
                )
                return
            }
        
                                throw new Error('[delay], id "n_90_2", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_90_5_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_90_5_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_90_5_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_90_5_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_90_5_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_90_5_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_90_5_STATE.outMessages[0] = message
                n_90_5_STATE.messageTransferFunctions.splice(0, n_90_5_STATE.messageTransferFunctions.length - 1)
                n_90_5_STATE.messageTransferFunctions[0] = function (m) {
                    return n_90_5_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_90_5_STATE.messageTransferFunctions.length; i++) {
                    n_90_1_RCVS_0(n_90_5_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_90_5", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_90_1_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                n_float_int_setValueInt(n_90_1_STATE, msg_readFloatToken(m, 0))
                n_89_10_RCVS_1(msg_floats([n_90_1_STATE.value]))
                return 

            } else if (msg_isBang(m)) {
                n_89_10_RCVS_1(msg_floats([n_90_1_STATE.value]))
                return
                
            }
        
                                throw new Error('[int], id "n_90_1", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_90_6_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_90_6_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_90_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_90_6_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_90_6_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_90_6_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_90_6_STATE.outMessages[0] = message
                n_90_6_STATE.messageTransferFunctions.splice(0, n_90_6_STATE.messageTransferFunctions.length - 1)
                n_90_6_STATE.messageTransferFunctions[0] = function (m) {
                    return n_90_6_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_90_6_STATE.messageTransferFunctions.length; i++) {
                    n_90_1_RCVS_0(n_90_6_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_90_6", inlet "0", unsupported message : ' + msg_display(m))
                            }





function n_91_7_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                n_float_int_setValueInt(n_91_7_STATE, msg_readFloatToken(m, 0))
                n_91_2_RCVS_1(msg_floats([n_91_7_STATE.value]))
                return 

            } else if (msg_isBang(m)) {
                n_91_2_RCVS_1(msg_floats([n_91_7_STATE.value]))
                return
                
            }
        
                                throw new Error('[int], id "n_91_7", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_91_2_RCVS_0(m) {
                                
        if (!n_91_2_STATE.isClosed) {
            m_n_91_1_0__routemsg_RCVS_0(m)
        }
        return
    
                                throw new Error('[spigot], id "n_91_2", inlet "0", unsupported message : ' + msg_display(m))
                            }
function n_91_2_RCVS_1(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_spigot_setIsClosed(n_91_2_STATE, msg_readFloatToken(m, 0))
            return
        }
    
                                throw new Error('[spigot], id "n_91_2", inlet "1", unsupported message : ' + msg_display(m))
                            }

function m_n_91_1_0__routemsg_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                SND_TO_NULL(m)
                return
            } else {
                n_91_1_RCVS_0_message(m)
                return
            }
        
                                throw new Error('[_routemsg], id "m_n_91_1_0__routemsg", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_91_1_RCVS_0_message(m) {
                                
        if (msg_isBang(m)) {
            n_91_8_RCVS_0(msg_floats([n_91_1_STATE.currentValue]))
            return 
        }
    
                                throw new Error('[snapshot~], id "n_91_1", inlet "0_message", unsupported message : ' + msg_display(m))
                            }

function n_91_8_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                const newValue = msg_readFloatToken(m, 0)
                if (newValue !== n_91_8_STATE.currentValue) {
                    n_91_8_STATE.currentValue = newValue
                    n_91_11_RCVS_0(msg_floats([n_91_8_STATE.currentValue]))
                }
                return
    
            } else if (msg_isBang(m)) {
                n_91_11_RCVS_0(msg_floats([n_91_8_STATE.currentValue]))
                return 
    
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_91_8_STATE.currentValue = msg_readFloatToken(m, 1)
                return
            }
        
                                throw new Error('[change], id "n_91_8", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_91_11_RCVS_0(m) {
                                
        n_92_0_RCVS_0(msg_bang())
n_91_10_RCVS_0(msg_floats([messageTokenToFloat(m, 0)]))
        return
    
                                throw new Error('[trigger], id "n_91_11", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_91_10_RCVS_0(m) {
                                
        if (!n_91_10_STATE.isClosed) {
            n_91_13_RCVS_0(m)
        }
        return
    
                                throw new Error('[spigot], id "n_91_10", inlet "0", unsupported message : ' + msg_display(m))
                            }
function n_91_10_RCVS_1(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_spigot_setIsClosed(n_91_10_STATE, msg_readFloatToken(m, 0))
            return
        }
    
                                throw new Error('[spigot], id "n_91_10", inlet "1", unsupported message : ' + msg_display(m))
                            }

function n_91_13_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                const newValue = msg_readFloatToken(m, 0)
                if (newValue !== n_91_13_STATE.currentValue) {
                    n_91_13_STATE.currentValue = newValue
                    n_91_9_RCVS_0(msg_floats([n_91_13_STATE.currentValue]))
                }
                return
    
            } else if (msg_isBang(m)) {
                n_91_9_RCVS_0(msg_floats([n_91_13_STATE.currentValue]))
                return 
    
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_91_13_STATE.currentValue = msg_readFloatToken(m, 1)
                return
            }
        
                                throw new Error('[change], id "n_91_13", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_91_9_RCVS_0(m) {
                                
                if (n_91_9_STATE.filterType === MSG_STRING_TOKEN) {
                    if (
                        (n_91_9_STATE.stringFilter === 'float'
                            && msg_isFloatToken(m, 0))
                        || (n_91_9_STATE.stringFilter === 'symbol'
                            && msg_isStringToken(m, 0))
                        || (n_91_9_STATE.stringFilter === 'list'
                            && msg_getLength(m) > 1)
                        || (n_91_9_STATE.stringFilter === 'bang' 
                            && msg_isBang(m))
                    ) {
                        n_91_3_RCVS_0(m)
                        return
                    
                    } else if (
                        msg_isStringToken(m, 0)
                        && msg_readStringToken(m, 0) === n_91_9_STATE.stringFilter
                    ) {
                        n_91_3_RCVS_0(msg_emptyToBang(msg_shift(m)))
                        return
                    }

                } else if (
                    msg_isFloatToken(m, 0)
                    && msg_readFloatToken(m, 0) === n_91_9_STATE.floatFilter
                ) {
                    n_91_3_RCVS_0(msg_emptyToBang(msg_shift(m)))
                    return
                }
            
                SND_TO_NULL(m)
            return
            
                                throw new Error('[route], id "n_91_9", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_91_3_RCVS_0(m) {
                                
        n_91_5_RCVS_0(msg_bang())
n_41_14_RCVS_0(msg_bang())
        return
    
                                throw new Error('[trigger], id "n_91_3", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_91_5_RCVS_0(m) {
                                
        n_91_4_RCVS_0(msg_bang())
n_91_14_RCVS_0(msg_bang())
        return
    
                                throw new Error('[trigger], id "n_91_5", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_91_14_RCVS_0(m) {
                                
            if (msg_getLength(m) === 1) {
                if (msg_isStringToken(m, 0)) {
                    const action = msg_readStringToken(m, 0)
                    if (action === 'bang' || action === 'start') {
                        n_delay_scheduleDelay(
                            n_91_14_STATE, 
                            () => n_91_6_RCVS_0(msg_bang()),
                            FRAME,
                        )
                        return
                    } else if (action === 'stop') {
                        n_delay_stop(n_91_14_STATE)
                        return
                    }
                    
                } else if (msg_isFloatToken(m, 0)) {
                    n_delay_setDelay(n_91_14_STATE, msg_readFloatToken(m, 0))
                    n_delay_scheduleDelay(
                        n_91_14_STATE,
                        () => n_91_6_RCVS_0(msg_bang()),
                        FRAME,
                    )
                    return 
                }
            
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN, MSG_STRING_TOKEN])
                && msg_readStringToken(m, 0) === 'tempo'
            ) {
                n_91_14_STATE.sampleRatio = computeUnitInSamples(
                    SAMPLE_RATE, 
                    msg_readFloatToken(m, 1), 
                    msg_readStringToken(m, 2)
                )
                return
            }
        
                                throw new Error('[delay], id "n_91_14", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_91_6_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_91_6_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_91_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_91_6_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_91_6_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_91_6_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_91_6_STATE.outMessages[0] = message
                n_91_6_STATE.messageTransferFunctions.splice(0, n_91_6_STATE.messageTransferFunctions.length - 1)
                n_91_6_STATE.messageTransferFunctions[0] = function (m) {
                    return n_91_6_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_91_6_STATE.messageTransferFunctions.length; i++) {
                    n_91_7_RCVS_0(n_91_6_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_91_6", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_91_4_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_91_4_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_91_4_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_91_4_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_91_4_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_91_4_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_91_4_STATE.outMessages[0] = message
                n_91_4_STATE.messageTransferFunctions.splice(0, n_91_4_STATE.messageTransferFunctions.length - 1)
                n_91_4_STATE.messageTransferFunctions[0] = function (m) {
                    return n_91_4_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_91_4_STATE.messageTransferFunctions.length; i++) {
                    n_91_7_RCVS_0(n_91_4_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_91_4", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_92_0_RCVS_0(m) {
                                
        n_92_6_RCVS_0(msg_bang())
n_92_2_RCVS_0(msg_bang())
        return
    
                                throw new Error('[trigger], id "n_92_0", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_92_2_RCVS_0(m) {
                                
            if (msg_getLength(m) === 1) {
                if (msg_isStringToken(m, 0)) {
                    const action = msg_readStringToken(m, 0)
                    if (action === 'bang' || action === 'start') {
                        n_delay_scheduleDelay(
                            n_92_2_STATE, 
                            () => n_92_5_RCVS_0(msg_bang()),
                            FRAME,
                        )
                        return
                    } else if (action === 'stop') {
                        n_delay_stop(n_92_2_STATE)
                        return
                    }
                    
                } else if (msg_isFloatToken(m, 0)) {
                    n_delay_setDelay(n_92_2_STATE, msg_readFloatToken(m, 0))
                    n_delay_scheduleDelay(
                        n_92_2_STATE,
                        () => n_92_5_RCVS_0(msg_bang()),
                        FRAME,
                    )
                    return 
                }
            
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN, MSG_STRING_TOKEN])
                && msg_readStringToken(m, 0) === 'tempo'
            ) {
                n_92_2_STATE.sampleRatio = computeUnitInSamples(
                    SAMPLE_RATE, 
                    msg_readFloatToken(m, 1), 
                    msg_readStringToken(m, 2)
                )
                return
            }
        
                                throw new Error('[delay], id "n_92_2", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_92_5_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_92_5_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_92_5_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_92_5_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_92_5_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_92_5_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_92_5_STATE.outMessages[0] = message
                n_92_5_STATE.messageTransferFunctions.splice(0, n_92_5_STATE.messageTransferFunctions.length - 1)
                n_92_5_STATE.messageTransferFunctions[0] = function (m) {
                    return n_92_5_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_92_5_STATE.messageTransferFunctions.length; i++) {
                    n_92_1_RCVS_0(n_92_5_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_92_5", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_92_1_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                n_float_int_setValueInt(n_92_1_STATE, msg_readFloatToken(m, 0))
                n_91_10_RCVS_1(msg_floats([n_92_1_STATE.value]))
                return 

            } else if (msg_isBang(m)) {
                n_91_10_RCVS_1(msg_floats([n_92_1_STATE.value]))
                return
                
            }
        
                                throw new Error('[int], id "n_92_1", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_92_6_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_92_6_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_92_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_92_6_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_92_6_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_92_6_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_92_6_STATE.outMessages[0] = message
                n_92_6_STATE.messageTransferFunctions.splice(0, n_92_6_STATE.messageTransferFunctions.length - 1)
                n_92_6_STATE.messageTransferFunctions[0] = function (m) {
                    return n_92_6_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_92_6_STATE.messageTransferFunctions.length; i++) {
                    n_92_1_RCVS_0(n_92_6_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_92_6", inlet "0", unsupported message : ' + msg_display(m))
                            }





function n_93_7_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                n_float_int_setValueInt(n_93_7_STATE, msg_readFloatToken(m, 0))
                n_93_2_RCVS_1(msg_floats([n_93_7_STATE.value]))
                return 

            } else if (msg_isBang(m)) {
                n_93_2_RCVS_1(msg_floats([n_93_7_STATE.value]))
                return
                
            }
        
                                throw new Error('[int], id "n_93_7", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_93_2_RCVS_0(m) {
                                
        if (!n_93_2_STATE.isClosed) {
            m_n_93_1_0__routemsg_RCVS_0(m)
        }
        return
    
                                throw new Error('[spigot], id "n_93_2", inlet "0", unsupported message : ' + msg_display(m))
                            }
function n_93_2_RCVS_1(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_spigot_setIsClosed(n_93_2_STATE, msg_readFloatToken(m, 0))
            return
        }
    
                                throw new Error('[spigot], id "n_93_2", inlet "1", unsupported message : ' + msg_display(m))
                            }

function m_n_93_1_0__routemsg_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                SND_TO_NULL(m)
                return
            } else {
                n_93_1_RCVS_0_message(m)
                return
            }
        
                                throw new Error('[_routemsg], id "m_n_93_1_0__routemsg", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_93_1_RCVS_0_message(m) {
                                
        if (msg_isBang(m)) {
            n_93_8_RCVS_0(msg_floats([n_93_1_STATE.currentValue]))
            return 
        }
    
                                throw new Error('[snapshot~], id "n_93_1", inlet "0_message", unsupported message : ' + msg_display(m))
                            }

function n_93_8_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                const newValue = msg_readFloatToken(m, 0)
                if (newValue !== n_93_8_STATE.currentValue) {
                    n_93_8_STATE.currentValue = newValue
                    n_93_11_RCVS_0(msg_floats([n_93_8_STATE.currentValue]))
                }
                return
    
            } else if (msg_isBang(m)) {
                n_93_11_RCVS_0(msg_floats([n_93_8_STATE.currentValue]))
                return 
    
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_93_8_STATE.currentValue = msg_readFloatToken(m, 1)
                return
            }
        
                                throw new Error('[change], id "n_93_8", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_93_11_RCVS_0(m) {
                                
        n_94_0_RCVS_0(msg_bang())
n_93_10_RCVS_0(msg_floats([messageTokenToFloat(m, 0)]))
        return
    
                                throw new Error('[trigger], id "n_93_11", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_93_10_RCVS_0(m) {
                                
        if (!n_93_10_STATE.isClosed) {
            n_93_13_RCVS_0(m)
        }
        return
    
                                throw new Error('[spigot], id "n_93_10", inlet "0", unsupported message : ' + msg_display(m))
                            }
function n_93_10_RCVS_1(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_spigot_setIsClosed(n_93_10_STATE, msg_readFloatToken(m, 0))
            return
        }
    
                                throw new Error('[spigot], id "n_93_10", inlet "1", unsupported message : ' + msg_display(m))
                            }

function n_93_13_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                const newValue = msg_readFloatToken(m, 0)
                if (newValue !== n_93_13_STATE.currentValue) {
                    n_93_13_STATE.currentValue = newValue
                    n_93_9_RCVS_0(msg_floats([n_93_13_STATE.currentValue]))
                }
                return
    
            } else if (msg_isBang(m)) {
                n_93_9_RCVS_0(msg_floats([n_93_13_STATE.currentValue]))
                return 
    
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_93_13_STATE.currentValue = msg_readFloatToken(m, 1)
                return
            }
        
                                throw new Error('[change], id "n_93_13", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_93_9_RCVS_0(m) {
                                
                if (n_93_9_STATE.filterType === MSG_STRING_TOKEN) {
                    if (
                        (n_93_9_STATE.stringFilter === 'float'
                            && msg_isFloatToken(m, 0))
                        || (n_93_9_STATE.stringFilter === 'symbol'
                            && msg_isStringToken(m, 0))
                        || (n_93_9_STATE.stringFilter === 'list'
                            && msg_getLength(m) > 1)
                        || (n_93_9_STATE.stringFilter === 'bang' 
                            && msg_isBang(m))
                    ) {
                        n_93_3_RCVS_0(m)
                        return
                    
                    } else if (
                        msg_isStringToken(m, 0)
                        && msg_readStringToken(m, 0) === n_93_9_STATE.stringFilter
                    ) {
                        n_93_3_RCVS_0(msg_emptyToBang(msg_shift(m)))
                        return
                    }

                } else if (
                    msg_isFloatToken(m, 0)
                    && msg_readFloatToken(m, 0) === n_93_9_STATE.floatFilter
                ) {
                    n_93_3_RCVS_0(msg_emptyToBang(msg_shift(m)))
                    return
                }
            
                SND_TO_NULL(m)
            return
            
                                throw new Error('[route], id "n_93_9", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_93_3_RCVS_0(m) {
                                
        n_93_5_RCVS_0(msg_bang())
n_41_26_RCVS_0(msg_bang())
        return
    
                                throw new Error('[trigger], id "n_93_3", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_93_5_RCVS_0(m) {
                                
        n_93_4_RCVS_0(msg_bang())
n_93_14_RCVS_0(msg_bang())
        return
    
                                throw new Error('[trigger], id "n_93_5", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_93_14_RCVS_0(m) {
                                
            if (msg_getLength(m) === 1) {
                if (msg_isStringToken(m, 0)) {
                    const action = msg_readStringToken(m, 0)
                    if (action === 'bang' || action === 'start') {
                        n_delay_scheduleDelay(
                            n_93_14_STATE, 
                            () => n_93_6_RCVS_0(msg_bang()),
                            FRAME,
                        )
                        return
                    } else if (action === 'stop') {
                        n_delay_stop(n_93_14_STATE)
                        return
                    }
                    
                } else if (msg_isFloatToken(m, 0)) {
                    n_delay_setDelay(n_93_14_STATE, msg_readFloatToken(m, 0))
                    n_delay_scheduleDelay(
                        n_93_14_STATE,
                        () => n_93_6_RCVS_0(msg_bang()),
                        FRAME,
                    )
                    return 
                }
            
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN, MSG_STRING_TOKEN])
                && msg_readStringToken(m, 0) === 'tempo'
            ) {
                n_93_14_STATE.sampleRatio = computeUnitInSamples(
                    SAMPLE_RATE, 
                    msg_readFloatToken(m, 1), 
                    msg_readStringToken(m, 2)
                )
                return
            }
        
                                throw new Error('[delay], id "n_93_14", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_93_6_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_93_6_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_93_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_93_6_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_93_6_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_93_6_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_93_6_STATE.outMessages[0] = message
                n_93_6_STATE.messageTransferFunctions.splice(0, n_93_6_STATE.messageTransferFunctions.length - 1)
                n_93_6_STATE.messageTransferFunctions[0] = function (m) {
                    return n_93_6_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_93_6_STATE.messageTransferFunctions.length; i++) {
                    n_93_7_RCVS_0(n_93_6_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_93_6", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_93_4_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_93_4_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_93_4_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_93_4_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_93_4_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_93_4_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_93_4_STATE.outMessages[0] = message
                n_93_4_STATE.messageTransferFunctions.splice(0, n_93_4_STATE.messageTransferFunctions.length - 1)
                n_93_4_STATE.messageTransferFunctions[0] = function (m) {
                    return n_93_4_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_93_4_STATE.messageTransferFunctions.length; i++) {
                    n_93_7_RCVS_0(n_93_4_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_93_4", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_94_0_RCVS_0(m) {
                                
        n_94_6_RCVS_0(msg_bang())
n_94_2_RCVS_0(msg_bang())
        return
    
                                throw new Error('[trigger], id "n_94_0", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_94_2_RCVS_0(m) {
                                
            if (msg_getLength(m) === 1) {
                if (msg_isStringToken(m, 0)) {
                    const action = msg_readStringToken(m, 0)
                    if (action === 'bang' || action === 'start') {
                        n_delay_scheduleDelay(
                            n_94_2_STATE, 
                            () => n_94_5_RCVS_0(msg_bang()),
                            FRAME,
                        )
                        return
                    } else if (action === 'stop') {
                        n_delay_stop(n_94_2_STATE)
                        return
                    }
                    
                } else if (msg_isFloatToken(m, 0)) {
                    n_delay_setDelay(n_94_2_STATE, msg_readFloatToken(m, 0))
                    n_delay_scheduleDelay(
                        n_94_2_STATE,
                        () => n_94_5_RCVS_0(msg_bang()),
                        FRAME,
                    )
                    return 
                }
            
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN, MSG_STRING_TOKEN])
                && msg_readStringToken(m, 0) === 'tempo'
            ) {
                n_94_2_STATE.sampleRatio = computeUnitInSamples(
                    SAMPLE_RATE, 
                    msg_readFloatToken(m, 1), 
                    msg_readStringToken(m, 2)
                )
                return
            }
        
                                throw new Error('[delay], id "n_94_2", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_94_5_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_94_5_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_94_5_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_94_5_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_94_5_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_94_5_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_94_5_STATE.outMessages[0] = message
                n_94_5_STATE.messageTransferFunctions.splice(0, n_94_5_STATE.messageTransferFunctions.length - 1)
                n_94_5_STATE.messageTransferFunctions[0] = function (m) {
                    return n_94_5_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_94_5_STATE.messageTransferFunctions.length; i++) {
                    n_94_1_RCVS_0(n_94_5_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_94_5", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_94_1_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                n_float_int_setValueInt(n_94_1_STATE, msg_readFloatToken(m, 0))
                n_93_10_RCVS_1(msg_floats([n_94_1_STATE.value]))
                return 

            } else if (msg_isBang(m)) {
                n_93_10_RCVS_1(msg_floats([n_94_1_STATE.value]))
                return
                
            }
        
                                throw new Error('[int], id "n_94_1", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_94_6_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_94_6_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_94_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_94_6_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_94_6_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_94_6_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_94_6_STATE.outMessages[0] = message
                n_94_6_STATE.messageTransferFunctions.splice(0, n_94_6_STATE.messageTransferFunctions.length - 1)
                n_94_6_STATE.messageTransferFunctions[0] = function (m) {
                    return n_94_6_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_94_6_STATE.messageTransferFunctions.length; i++) {
                    n_94_1_RCVS_0(n_94_6_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_94_6", inlet "0", unsupported message : ' + msg_display(m))
                            }





function n_43_0_RCVS_0(m) {
                                
            n_bang_receiveMessage(n_43_0_STATE, m)
            return
        
                                throw new Error('[bang], id "n_43_0", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_43_46_RCVS_0(m) {
                                
        if (msg_isBang(m)) {
            n_43_46_SNDS_0(msg_floats([Math.floor(Math.random() * n_43_46_STATE.maxValue)]))
            return
        } else if (
            msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
            && msg_readStringToken(m, 0) === 'seed'
        ) {
            console.log('WARNING : seed not implemented yet for [random]')
            return
        }
    
                                throw new Error('[random], id "n_43_46", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_43_1_RCVS_0(m) {
                                
                if (n_43_1_STATE.filterType === MSG_STRING_TOKEN) {
                    if (
                        (n_43_1_STATE.stringFilter === 'float'
                            && msg_isFloatToken(m, 0))
                        || (n_43_1_STATE.stringFilter === 'symbol'
                            && msg_isStringToken(m, 0))
                        || (n_43_1_STATE.stringFilter === 'list'
                            && msg_getLength(m) > 1)
                        || (n_43_1_STATE.stringFilter === 'bang' 
                            && msg_isBang(m))
                    ) {
                        n_43_2_RCVS_0(m)
                        return
                    
                    } else if (
                        msg_isStringToken(m, 0)
                        && msg_readStringToken(m, 0) === n_43_1_STATE.stringFilter
                    ) {
                        n_43_2_RCVS_0(msg_emptyToBang(msg_shift(m)))
                        return
                    }

                } else if (
                    msg_isFloatToken(m, 0)
                    && msg_readFloatToken(m, 0) === n_43_1_STATE.floatFilter
                ) {
                    n_43_2_RCVS_0(msg_emptyToBang(msg_shift(m)))
                    return
                }
            
                SND_TO_NULL(m)
            return
            
                                throw new Error('[route], id "n_43_1", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_43_2_RCVS_0(m) {
                                
            n_bang_receiveMessage(n_43_2_STATE, m)
            return
        
                                throw new Error('[bang], id "n_43_2", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_43_20_RCVS_0(m) {
                                
            msgBusPublish(n_43_20_STATE.busName, m)
            return
        
                                throw new Error('[send], id "n_43_20", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_43_3_RCVS_0(m) {
                                
                n_floatatom_receiveMessage(n_43_3_STATE, m)
                return
            
                                throw new Error('[floatatom], id "n_43_3", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_43_5_RCVS_0(m) {
                                
            n_bang_receiveMessage(n_43_5_STATE, m)
            return
        
                                throw new Error('[bang], id "n_43_5", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_43_47_RCVS_0(m) {
                                
        if (msg_isBang(m)) {
            n_43_47_SNDS_0(msg_floats([Math.floor(Math.random() * n_43_47_STATE.maxValue)]))
            return
        } else if (
            msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
            && msg_readStringToken(m, 0) === 'seed'
        ) {
            console.log('WARNING : seed not implemented yet for [random]')
            return
        }
    
                                throw new Error('[random], id "n_43_47", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_43_6_RCVS_0(m) {
                                
                if (n_43_6_STATE.filterType === MSG_STRING_TOKEN) {
                    if (
                        (n_43_6_STATE.stringFilter === 'float'
                            && msg_isFloatToken(m, 0))
                        || (n_43_6_STATE.stringFilter === 'symbol'
                            && msg_isStringToken(m, 0))
                        || (n_43_6_STATE.stringFilter === 'list'
                            && msg_getLength(m) > 1)
                        || (n_43_6_STATE.stringFilter === 'bang' 
                            && msg_isBang(m))
                    ) {
                        n_43_7_RCVS_0(m)
                        return
                    
                    } else if (
                        msg_isStringToken(m, 0)
                        && msg_readStringToken(m, 0) === n_43_6_STATE.stringFilter
                    ) {
                        n_43_7_RCVS_0(msg_emptyToBang(msg_shift(m)))
                        return
                    }

                } else if (
                    msg_isFloatToken(m, 0)
                    && msg_readFloatToken(m, 0) === n_43_6_STATE.floatFilter
                ) {
                    n_43_7_RCVS_0(msg_emptyToBang(msg_shift(m)))
                    return
                }
            
                SND_TO_NULL(m)
            return
            
                                throw new Error('[route], id "n_43_6", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_43_7_RCVS_0(m) {
                                
            n_bang_receiveMessage(n_43_7_STATE, m)
            return
        
                                throw new Error('[bang], id "n_43_7", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_43_19_RCVS_0(m) {
                                
            msgBusPublish(n_43_19_STATE.busName, m)
            return
        
                                throw new Error('[send], id "n_43_19", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_43_8_RCVS_0(m) {
                                
                n_floatatom_receiveMessage(n_43_8_STATE, m)
                return
            
                                throw new Error('[floatatom], id "n_43_8", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_43_9_RCVS_0(m) {
                                
            n_bang_receiveMessage(n_43_9_STATE, m)
            return
        
                                throw new Error('[bang], id "n_43_9", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_43_48_RCVS_0(m) {
                                
        if (msg_isBang(m)) {
            n_43_48_SNDS_0(msg_floats([Math.floor(Math.random() * n_43_48_STATE.maxValue)]))
            return
        } else if (
            msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
            && msg_readStringToken(m, 0) === 'seed'
        ) {
            console.log('WARNING : seed not implemented yet for [random]')
            return
        }
    
                                throw new Error('[random], id "n_43_48", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_43_10_RCVS_0(m) {
                                
                if (n_43_10_STATE.filterType === MSG_STRING_TOKEN) {
                    if (
                        (n_43_10_STATE.stringFilter === 'float'
                            && msg_isFloatToken(m, 0))
                        || (n_43_10_STATE.stringFilter === 'symbol'
                            && msg_isStringToken(m, 0))
                        || (n_43_10_STATE.stringFilter === 'list'
                            && msg_getLength(m) > 1)
                        || (n_43_10_STATE.stringFilter === 'bang' 
                            && msg_isBang(m))
                    ) {
                        n_43_11_RCVS_0(m)
                        return
                    
                    } else if (
                        msg_isStringToken(m, 0)
                        && msg_readStringToken(m, 0) === n_43_10_STATE.stringFilter
                    ) {
                        n_43_11_RCVS_0(msg_emptyToBang(msg_shift(m)))
                        return
                    }

                } else if (
                    msg_isFloatToken(m, 0)
                    && msg_readFloatToken(m, 0) === n_43_10_STATE.floatFilter
                ) {
                    n_43_11_RCVS_0(msg_emptyToBang(msg_shift(m)))
                    return
                }
            
                SND_TO_NULL(m)
            return
            
                                throw new Error('[route], id "n_43_10", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_43_11_RCVS_0(m) {
                                
            n_bang_receiveMessage(n_43_11_STATE, m)
            return
        
                                throw new Error('[bang], id "n_43_11", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_43_18_RCVS_0(m) {
                                
            msgBusPublish(n_43_18_STATE.busName, m)
            return
        
                                throw new Error('[send], id "n_43_18", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_43_12_RCVS_0(m) {
                                
                n_floatatom_receiveMessage(n_43_12_STATE, m)
                return
            
                                throw new Error('[floatatom], id "n_43_12", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_43_13_RCVS_0(m) {
                                
            n_bang_receiveMessage(n_43_13_STATE, m)
            return
        
                                throw new Error('[bang], id "n_43_13", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_43_49_RCVS_0(m) {
                                
        if (msg_isBang(m)) {
            n_43_49_SNDS_0(msg_floats([Math.floor(Math.random() * n_43_49_STATE.maxValue)]))
            return
        } else if (
            msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
            && msg_readStringToken(m, 0) === 'seed'
        ) {
            console.log('WARNING : seed not implemented yet for [random]')
            return
        }
    
                                throw new Error('[random], id "n_43_49", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_43_14_RCVS_0(m) {
                                
                if (n_43_14_STATE.filterType === MSG_STRING_TOKEN) {
                    if (
                        (n_43_14_STATE.stringFilter === 'float'
                            && msg_isFloatToken(m, 0))
                        || (n_43_14_STATE.stringFilter === 'symbol'
                            && msg_isStringToken(m, 0))
                        || (n_43_14_STATE.stringFilter === 'list'
                            && msg_getLength(m) > 1)
                        || (n_43_14_STATE.stringFilter === 'bang' 
                            && msg_isBang(m))
                    ) {
                        n_43_15_RCVS_0(m)
                        return
                    
                    } else if (
                        msg_isStringToken(m, 0)
                        && msg_readStringToken(m, 0) === n_43_14_STATE.stringFilter
                    ) {
                        n_43_15_RCVS_0(msg_emptyToBang(msg_shift(m)))
                        return
                    }

                } else if (
                    msg_isFloatToken(m, 0)
                    && msg_readFloatToken(m, 0) === n_43_14_STATE.floatFilter
                ) {
                    n_43_15_RCVS_0(msg_emptyToBang(msg_shift(m)))
                    return
                }
            
                SND_TO_NULL(m)
            return
            
                                throw new Error('[route], id "n_43_14", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_43_15_RCVS_0(m) {
                                
            n_bang_receiveMessage(n_43_15_STATE, m)
            return
        
                                throw new Error('[bang], id "n_43_15", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_43_17_RCVS_0(m) {
                                
            msgBusPublish(n_43_17_STATE.busName, m)
            return
        
                                throw new Error('[send], id "n_43_17", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_43_16_RCVS_0(m) {
                                
                n_floatatom_receiveMessage(n_43_16_STATE, m)
                return
            
                                throw new Error('[floatatom], id "n_43_16", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_43_25_RCVS_0(m) {
                                
            n_bang_receiveMessage(n_43_25_STATE, m)
            return
        
                                throw new Error('[bang], id "n_43_25", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_43_50_RCVS_0(m) {
                                
        if (msg_isBang(m)) {
            n_43_26_RCVS_0(msg_floats([Math.floor(Math.random() * n_43_50_STATE.maxValue)]))
            return
        } else if (
            msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
            && msg_readStringToken(m, 0) === 'seed'
        ) {
            console.log('WARNING : seed not implemented yet for [random]')
            return
        }
    
                                throw new Error('[random], id "n_43_50", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_43_26_RCVS_0(m) {
                                
                
                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 0
                        ) {
                            n_43_27_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 1
                        ) {
                            n_43_28_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 2
                        ) {
                            n_43_29_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 3
                        ) {
                            n_43_30_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                SND_TO_NULL(m)
                return
            
                                throw new Error('[route], id "n_43_26", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_43_27_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_43_27_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_43_27_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_43_27_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_43_27_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_43_27_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_43_27_STATE.outMessages[0] = message
                n_43_27_STATE.messageTransferFunctions.splice(0, n_43_27_STATE.messageTransferFunctions.length - 1)
                n_43_27_STATE.messageTransferFunctions[0] = function (m) {
                    return n_43_27_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_43_27_STATE.messageTransferFunctions.length; i++) {
                    n_43_24_RCVS_0(n_43_27_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_43_27", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_43_24_RCVS_0(m) {
                                
            msgBusPublish(n_43_24_STATE.busName, m)
            return
        
                                throw new Error('[send], id "n_43_24", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_43_28_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_43_28_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_43_28_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_43_28_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_43_28_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_43_28_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_43_28_STATE.outMessages[0] = message
                n_43_28_STATE.messageTransferFunctions.splice(0, n_43_28_STATE.messageTransferFunctions.length - 1)
                n_43_28_STATE.messageTransferFunctions[0] = function (m) {
                    return n_43_28_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_43_28_STATE.messageTransferFunctions.length; i++) {
                    n_43_24_RCVS_0(n_43_28_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_43_28", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_43_29_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_43_29_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_43_29_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_43_29_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_43_29_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_43_29_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_43_29_STATE.outMessages[0] = message
                n_43_29_STATE.messageTransferFunctions.splice(0, n_43_29_STATE.messageTransferFunctions.length - 1)
                n_43_29_STATE.messageTransferFunctions[0] = function (m) {
                    return n_43_29_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_43_29_STATE.messageTransferFunctions.length; i++) {
                    n_43_24_RCVS_0(n_43_29_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_43_29", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_43_30_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_43_30_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_43_30_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_43_30_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_43_30_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_43_30_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_43_30_STATE.outMessages[0] = message
                n_43_30_STATE.messageTransferFunctions.splice(0, n_43_30_STATE.messageTransferFunctions.length - 1)
                n_43_30_STATE.messageTransferFunctions[0] = function (m) {
                    return n_43_30_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_43_30_STATE.messageTransferFunctions.length; i++) {
                    n_43_24_RCVS_0(n_43_30_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_43_30", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_43_31_RCVS_0(m) {
                                
            n_bang_receiveMessage(n_43_31_STATE, m)
            return
        
                                throw new Error('[bang], id "n_43_31", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_43_45_RCVS_0(m) {
                                
        if (msg_isBang(m)) {
            n_43_45_SNDS_0(msg_floats([Math.floor(Math.random() * n_43_45_STATE.maxValue)]))
            return
        } else if (
            msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
            && msg_readStringToken(m, 0) === 'seed'
        ) {
            console.log('WARNING : seed not implemented yet for [random]')
            return
        }
    
                                throw new Error('[random], id "n_43_45", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_43_32_RCVS_0(m) {
                                
                if (n_43_32_STATE.filterType === MSG_STRING_TOKEN) {
                    if (
                        (n_43_32_STATE.stringFilter === 'float'
                            && msg_isFloatToken(m, 0))
                        || (n_43_32_STATE.stringFilter === 'symbol'
                            && msg_isStringToken(m, 0))
                        || (n_43_32_STATE.stringFilter === 'list'
                            && msg_getLength(m) > 1)
                        || (n_43_32_STATE.stringFilter === 'bang' 
                            && msg_isBang(m))
                    ) {
                        n_43_33_RCVS_0(m)
                        return
                    
                    } else if (
                        msg_isStringToken(m, 0)
                        && msg_readStringToken(m, 0) === n_43_32_STATE.stringFilter
                    ) {
                        n_43_33_RCVS_0(msg_emptyToBang(msg_shift(m)))
                        return
                    }

                } else if (
                    msg_isFloatToken(m, 0)
                    && msg_readFloatToken(m, 0) === n_43_32_STATE.floatFilter
                ) {
                    n_43_33_RCVS_0(msg_emptyToBang(msg_shift(m)))
                    return
                }
            
                SND_TO_NULL(m)
            return
            
                                throw new Error('[route], id "n_43_32", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_43_33_RCVS_0(m) {
                                
            n_bang_receiveMessage(n_43_33_STATE, m)
            return
        
                                throw new Error('[bang], id "n_43_33", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_43_36_RCVS_0(m) {
                                
            msgBusPublish(n_43_36_STATE.busName, m)
            return
        
                                throw new Error('[send], id "n_43_36", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_43_34_RCVS_0(m) {
                                
                n_floatatom_receiveMessage(n_43_34_STATE, m)
                return
            
                                throw new Error('[floatatom], id "n_43_34", inlet "0", unsupported message : ' + msg_display(m))
                            }





function n_43_39_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_43_39_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_43_39_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_43_39_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_43_39_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_43_39_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_43_39_STATE.outMessages[0] = message
                n_43_39_STATE.messageTransferFunctions.splice(0, n_43_39_STATE.messageTransferFunctions.length - 1)
                n_43_39_STATE.messageTransferFunctions[0] = function (m) {
                    return n_43_39_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_43_39_STATE.messageTransferFunctions.length; i++) {
                    n_95_17_RCVS_1(n_43_39_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_43_39", inlet "0", unsupported message : ' + msg_display(m))
                            }
let n_95_17_OUTS_0 = 0
function n_95_17_RCVS_1(m) {
                                
                            n_95_17_STATE.floatInputs.set(1, messageTokenToFloat(m, 0))
                            return
                        
                                throw new Error('[expr~], id "n_95_17", inlet "1", unsupported message : ' + msg_display(m))
                            }

function n_43_40_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_43_40_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_43_40_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_43_40_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_43_40_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_43_40_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_43_40_STATE.outMessages[0] = message
                n_43_40_STATE.messageTransferFunctions.splice(0, n_43_40_STATE.messageTransferFunctions.length - 1)
                n_43_40_STATE.messageTransferFunctions[0] = function (m) {
                    return n_43_40_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_43_40_STATE.messageTransferFunctions.length; i++) {
                    n_97_17_RCVS_1(n_43_40_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_43_40", inlet "0", unsupported message : ' + msg_display(m))
                            }
let n_97_17_OUTS_0 = 0
function n_97_17_RCVS_1(m) {
                                
                            n_97_17_STATE.floatInputs.set(1, messageTokenToFloat(m, 0))
                            return
                        
                                throw new Error('[expr~], id "n_97_17", inlet "1", unsupported message : ' + msg_display(m))
                            }

function n_43_41_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_43_41_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_43_41_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_43_41_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_43_41_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_43_41_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_43_41_STATE.outMessages[0] = message
                n_43_41_STATE.messageTransferFunctions.splice(0, n_43_41_STATE.messageTransferFunctions.length - 1)
                n_43_41_STATE.messageTransferFunctions[0] = function (m) {
                    return n_43_41_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_43_41_STATE.messageTransferFunctions.length; i++) {
                    n_99_17_RCVS_1(n_43_41_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_43_41", inlet "0", unsupported message : ' + msg_display(m))
                            }
let n_99_17_OUTS_0 = 0
function n_99_17_RCVS_1(m) {
                                
                            n_99_17_STATE.floatInputs.set(1, messageTokenToFloat(m, 0))
                            return
                        
                                throw new Error('[expr~], id "n_99_17", inlet "1", unsupported message : ' + msg_display(m))
                            }

function n_43_42_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_43_42_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_43_42_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_43_42_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_43_42_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_43_42_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_43_42_STATE.outMessages[0] = message
                n_43_42_STATE.messageTransferFunctions.splice(0, n_43_42_STATE.messageTransferFunctions.length - 1)
                n_43_42_STATE.messageTransferFunctions[0] = function (m) {
                    return n_43_42_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_43_42_STATE.messageTransferFunctions.length; i++) {
                    n_101_17_RCVS_1(n_43_42_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_43_42", inlet "0", unsupported message : ' + msg_display(m))
                            }
let n_101_17_OUTS_0 = 0
function n_101_17_RCVS_1(m) {
                                
                            n_101_17_STATE.floatInputs.set(1, messageTokenToFloat(m, 0))
                            return
                        
                                throw new Error('[expr~], id "n_101_17", inlet "1", unsupported message : ' + msg_display(m))
                            }

function n_43_43_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_43_43_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_43_43_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_43_43_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_43_43_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_43_43_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_43_43_STATE.outMessages[0] = message
                n_43_43_STATE.messageTransferFunctions.splice(0, n_43_43_STATE.messageTransferFunctions.length - 1)
                n_43_43_STATE.messageTransferFunctions[0] = function (m) {
                    return n_43_43_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_43_43_STATE.messageTransferFunctions.length; i++) {
                    n_103_17_RCVS_1(n_43_43_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_43_43", inlet "0", unsupported message : ' + msg_display(m))
                            }
let n_103_17_OUTS_0 = 0
function n_103_17_RCVS_1(m) {
                                
                            n_103_17_STATE.floatInputs.set(1, messageTokenToFloat(m, 0))
                            return
                        
                                throw new Error('[expr~], id "n_103_17", inlet "1", unsupported message : ' + msg_display(m))
                            }

function n_43_44_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_43_44_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_43_44_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_43_44_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_43_44_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_43_44_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_43_44_STATE.outMessages[0] = message
                n_43_44_STATE.messageTransferFunctions.splice(0, n_43_44_STATE.messageTransferFunctions.length - 1)
                n_43_44_STATE.messageTransferFunctions[0] = function (m) {
                    return n_43_44_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_43_44_STATE.messageTransferFunctions.length; i++) {
                    n_105_17_RCVS_1(n_43_44_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_43_44", inlet "0", unsupported message : ' + msg_display(m))
                            }
let n_105_17_OUTS_0 = 0
function n_105_17_RCVS_1(m) {
                                
                            n_105_17_STATE.floatInputs.set(1, messageTokenToFloat(m, 0))
                            return
                        
                                throw new Error('[expr~], id "n_105_17", inlet "1", unsupported message : ' + msg_display(m))
                            }

function n_44_4_RCVS_0(m) {
                                
            n_bang_receiveMessage(n_44_4_STATE, m)
            return
        
                                throw new Error('[bang], id "n_44_4", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_44_5_RCVS_0(m) {
                                
        if (msg_isBang(m)) {
            n_44_6_RCVS_0(msg_floats([Math.floor(Math.random() * n_44_5_STATE.maxValue)]))
            return
        } else if (
            msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
            && msg_readStringToken(m, 0) === 'seed'
        ) {
            console.log('WARNING : seed not implemented yet for [random]')
            return
        }
    
                                throw new Error('[random], id "n_44_5", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_44_6_RCVS_0(m) {
                                
                if (n_44_6_STATE.filterType === MSG_STRING_TOKEN) {
                    if (
                        (n_44_6_STATE.stringFilter === 'float'
                            && msg_isFloatToken(m, 0))
                        || (n_44_6_STATE.stringFilter === 'symbol'
                            && msg_isStringToken(m, 0))
                        || (n_44_6_STATE.stringFilter === 'list'
                            && msg_getLength(m) > 1)
                        || (n_44_6_STATE.stringFilter === 'bang' 
                            && msg_isBang(m))
                    ) {
                        n_44_8_RCVS_0(m)
                        return
                    
                    } else if (
                        msg_isStringToken(m, 0)
                        && msg_readStringToken(m, 0) === n_44_6_STATE.stringFilter
                    ) {
                        n_44_8_RCVS_0(msg_emptyToBang(msg_shift(m)))
                        return
                    }

                } else if (
                    msg_isFloatToken(m, 0)
                    && msg_readFloatToken(m, 0) === n_44_6_STATE.floatFilter
                ) {
                    n_44_8_RCVS_0(msg_emptyToBang(msg_shift(m)))
                    return
                }
            
                n_44_7_RCVS_0(m)
            return
            
                                throw new Error('[route], id "n_44_6", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_44_8_RCVS_0(m) {
                                
        if (msg_isBang(m)) {
            n_44_43_RCVS_0(msg_floats([Math.floor(Math.random() * n_44_8_STATE.maxValue)]))
            return
        } else if (
            msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
            && msg_readStringToken(m, 0) === 'seed'
        ) {
            console.log('WARNING : seed not implemented yet for [random]')
            return
        }
    
                                throw new Error('[random], id "n_44_8", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_44_43_RCVS_0(m) {
                                
                if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                    n_mul_setLeft(n_44_43_STATE, msg_readFloatToken(m, 0))
                    n_44_2_RCVS_0(msg_floats([n_44_43_STATE.leftOp * n_44_43_STATE.rightOp]))
                    return
                
                } else if (msg_isBang(m)) {
                    n_44_2_RCVS_0(msg_floats([n_44_43_STATE.leftOp * n_44_43_STATE.rightOp]))
                    return
                }
            
                                throw new Error('[*], id "n_44_43", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_44_2_RCVS_0(m) {
                                
            msgBusPublish(n_44_2_STATE.busName, m)
            return
        
                                throw new Error('[send], id "n_44_2", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_44_7_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_44_7_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_44_7_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_44_7_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_44_7_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_44_7_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_44_7_STATE.outMessages[0] = message
                n_44_7_STATE.messageTransferFunctions.splice(0, n_44_7_STATE.messageTransferFunctions.length - 1)
                n_44_7_STATE.messageTransferFunctions[0] = function (m) {
                    return n_44_7_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_44_7_STATE.messageTransferFunctions.length; i++) {
                    n_44_43_RCVS_0(n_44_7_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_44_7", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_44_9_RCVS_0(m) {
                                
            n_bang_receiveMessage(n_44_9_STATE, m)
            return
        
                                throw new Error('[bang], id "n_44_9", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_44_12_RCVS_0(m) {
                                
        if (msg_isBang(m)) {
            n_44_28_RCVS_0(msg_floats([Math.floor(Math.random() * n_44_12_STATE.maxValue)]))
            return
        } else if (
            msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
            && msg_readStringToken(m, 0) === 'seed'
        ) {
            console.log('WARNING : seed not implemented yet for [random]')
            return
        }
    
                                throw new Error('[random], id "n_44_12", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_44_28_RCVS_0(m) {
                                
                
                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 0
                        ) {
                            n_44_10_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 1
                        ) {
                            n_44_26_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 2
                        ) {
                            n_44_11_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 3
                        ) {
                            n_44_25_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                SND_TO_NULL(m)
                return
            
                                throw new Error('[route], id "n_44_28", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_44_10_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_44_10_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_44_10_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_44_10_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_44_10_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_44_10_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_44_10_STATE.outMessages[0] = message
                n_44_10_STATE.messageTransferFunctions.splice(0, n_44_10_STATE.messageTransferFunctions.length - 1)
                n_44_10_STATE.messageTransferFunctions[0] = function (m) {
                    return n_44_10_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_44_10_STATE.messageTransferFunctions.length; i++) {
                    n_44_1_RCVS_0(n_44_10_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_44_10", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_44_1_RCVS_0(m) {
                                
            msgBusPublish(n_44_1_STATE.busName, m)
            return
        
                                throw new Error('[send], id "n_44_1", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_44_26_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_44_26_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_44_26_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_44_26_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_44_26_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_44_26_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_44_26_STATE.outMessages[0] = message
                n_44_26_STATE.messageTransferFunctions.splice(0, n_44_26_STATE.messageTransferFunctions.length - 1)
                n_44_26_STATE.messageTransferFunctions[0] = function (m) {
                    return n_44_26_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_44_26_STATE.messageTransferFunctions.length; i++) {
                    n_44_1_RCVS_0(n_44_26_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_44_26", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_44_11_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_44_11_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_44_11_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_44_11_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_44_11_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_44_11_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_44_11_STATE.outMessages[0] = message
                n_44_11_STATE.messageTransferFunctions.splice(0, n_44_11_STATE.messageTransferFunctions.length - 1)
                n_44_11_STATE.messageTransferFunctions[0] = function (m) {
                    return n_44_11_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_44_11_STATE.messageTransferFunctions.length; i++) {
                    n_44_1_RCVS_0(n_44_11_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_44_11", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_44_25_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_44_25_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_44_25_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_44_25_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_44_25_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_44_25_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_44_25_STATE.outMessages[0] = message
                n_44_25_STATE.messageTransferFunctions.splice(0, n_44_25_STATE.messageTransferFunctions.length - 1)
                n_44_25_STATE.messageTransferFunctions[0] = function (m) {
                    return n_44_25_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_44_25_STATE.messageTransferFunctions.length; i++) {
                    n_44_1_RCVS_0(n_44_25_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_44_25", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_44_13_RCVS_0(m) {
                                
            n_bang_receiveMessage(n_44_13_STATE, m)
            return
        
                                throw new Error('[bang], id "n_44_13", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_44_14_RCVS_0(m) {
                                
        if (msg_isBang(m)) {
            n_44_15_RCVS_0(msg_floats([Math.floor(Math.random() * n_44_14_STATE.maxValue)]))
            return
        } else if (
            msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
            && msg_readStringToken(m, 0) === 'seed'
        ) {
            console.log('WARNING : seed not implemented yet for [random]')
            return
        }
    
                                throw new Error('[random], id "n_44_14", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_44_15_RCVS_0(m) {
                                
                if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                    n_mul_setLeft(n_44_15_STATE, msg_readFloatToken(m, 0))
                    n_44_16_RCVS_0(msg_floats([n_44_15_STATE.leftOp * n_44_15_STATE.rightOp]))
                    return
                
                } else if (msg_isBang(m)) {
                    n_44_16_RCVS_0(msg_floats([n_44_15_STATE.leftOp * n_44_15_STATE.rightOp]))
                    return
                }
            
                                throw new Error('[*], id "n_44_15", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_44_16_RCVS_0(m) {
                                
            msgBusPublish(n_44_16_STATE.busName, m)
            return
        
                                throw new Error('[send], id "n_44_16", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_44_17_RCVS_0(m) {
                                
            n_bang_receiveMessage(n_44_17_STATE, m)
            return
        
                                throw new Error('[bang], id "n_44_17", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_44_18_RCVS_0(m) {
                                
        if (msg_isBang(m)) {
            n_44_19_RCVS_0(msg_floats([Math.floor(Math.random() * n_44_18_STATE.maxValue)]))
            return
        } else if (
            msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
            && msg_readStringToken(m, 0) === 'seed'
        ) {
            console.log('WARNING : seed not implemented yet for [random]')
            return
        }
    
                                throw new Error('[random], id "n_44_18", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_44_19_RCVS_0(m) {
                                
                if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                    n_mul_setLeft(n_44_19_STATE, msg_readFloatToken(m, 0))
                    n_44_0_RCVS_0(msg_floats([n_44_19_STATE.leftOp * n_44_19_STATE.rightOp]))
                    return
                
                } else if (msg_isBang(m)) {
                    n_44_0_RCVS_0(msg_floats([n_44_19_STATE.leftOp * n_44_19_STATE.rightOp]))
                    return
                }
            
                                throw new Error('[*], id "n_44_19", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_44_0_RCVS_0(m) {
                                
            msgBusPublish(n_44_0_STATE.busName, m)
            return
        
                                throw new Error('[send], id "n_44_0", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_44_20_RCVS_0(m) {
                                
            n_bang_receiveMessage(n_44_20_STATE, m)
            return
        
                                throw new Error('[bang], id "n_44_20", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_44_42_RCVS_0(m) {
                                
        n_44_41_RCVS_0(msg_bang())
n_44_33_RCVS_0(msg_bang())
        return
    
                                throw new Error('[trigger], id "n_44_42", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_44_33_RCVS_0(m) {
                                
        if (msg_isBang(m)) {
            n_44_34_RCVS_0(msg_floats([Math.floor(Math.random() * n_44_33_STATE.maxValue)]))
            return
        } else if (
            msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
            && msg_readStringToken(m, 0) === 'seed'
        ) {
            console.log('WARNING : seed not implemented yet for [random]')
            return
        }
    
                                throw new Error('[random], id "n_44_33", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_44_34_RCVS_0(m) {
                                
                
                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 0
                        ) {
                            n_44_30_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 1
                        ) {
                            n_44_31_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 2
                        ) {
                            n_44_36_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 3
                        ) {
                            n_44_29_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 4
                        ) {
                            n_44_32_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 5
                        ) {
                            n_44_35_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                SND_TO_NULL(m)
                return
            
                                throw new Error('[route], id "n_44_34", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_44_30_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_44_30_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_44_30_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_44_30_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_44_30_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_44_30_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_44_30_STATE.outMessages[0] = message
                n_44_30_STATE.messageTransferFunctions.splice(0, n_44_30_STATE.messageTransferFunctions.length - 1)
                n_44_30_STATE.messageTransferFunctions[0] = function (m) {
                    return n_44_30_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_44_30_STATE.messageTransferFunctions.length; i++) {
                    m_n_44_40_0__routemsg_RCVS_0(n_44_30_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_44_30", inlet "0", unsupported message : ' + msg_display(m))
                            }

function m_n_44_40_0__routemsg_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                m_n_44_40_0_sig_RCVS_0(m)
                return
            } else {
                SND_TO_NULL(m)
                return
            }
        
                                throw new Error('[_routemsg], id "m_n_44_40_0__routemsg", inlet "0", unsupported message : ' + msg_display(m))
                            }

function m_n_44_40_0_sig_RCVS_0(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            m_n_44_40_0_sig_STATE.currentValue = msg_readFloatToken(m, 0)
            return
        }
    
                                throw new Error('[sig~], id "m_n_44_40_0_sig", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_44_31_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_44_31_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_44_31_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_44_31_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_44_31_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_44_31_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_44_31_STATE.outMessages[0] = message
                n_44_31_STATE.messageTransferFunctions.splice(0, n_44_31_STATE.messageTransferFunctions.length - 1)
                n_44_31_STATE.messageTransferFunctions[0] = function (m) {
                    return n_44_31_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_44_31_STATE.messageTransferFunctions.length; i++) {
                    m_n_44_40_0__routemsg_RCVS_0(n_44_31_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_44_31", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_44_36_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_44_36_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_44_36_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_44_36_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_44_36_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_44_36_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_44_36_STATE.outMessages[0] = message
                n_44_36_STATE.messageTransferFunctions.splice(0, n_44_36_STATE.messageTransferFunctions.length - 1)
                n_44_36_STATE.messageTransferFunctions[0] = function (m) {
                    return n_44_36_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_44_36_STATE.messageTransferFunctions.length; i++) {
                    m_n_44_40_0__routemsg_RCVS_0(n_44_36_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_44_36", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_44_29_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_44_29_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_44_29_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_44_29_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_44_29_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_44_29_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_44_29_STATE.outMessages[0] = message
                n_44_29_STATE.messageTransferFunctions.splice(0, n_44_29_STATE.messageTransferFunctions.length - 1)
                n_44_29_STATE.messageTransferFunctions[0] = function (m) {
                    return n_44_29_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_44_29_STATE.messageTransferFunctions.length; i++) {
                    m_n_44_40_0__routemsg_RCVS_0(n_44_29_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_44_29", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_44_32_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_44_32_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_44_32_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_44_32_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_44_32_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_44_32_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_44_32_STATE.outMessages[0] = message
                n_44_32_STATE.messageTransferFunctions.splice(0, n_44_32_STATE.messageTransferFunctions.length - 1)
                n_44_32_STATE.messageTransferFunctions[0] = function (m) {
                    return n_44_32_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_44_32_STATE.messageTransferFunctions.length; i++) {
                    m_n_44_40_0__routemsg_RCVS_0(n_44_32_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_44_32", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_44_35_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_44_35_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_44_35_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_44_35_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_44_35_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_44_35_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_44_35_STATE.outMessages[0] = message
                n_44_35_STATE.messageTransferFunctions.splice(0, n_44_35_STATE.messageTransferFunctions.length - 1)
                n_44_35_STATE.messageTransferFunctions[0] = function (m) {
                    return n_44_35_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_44_35_STATE.messageTransferFunctions.length; i++) {
                    m_n_44_40_0__routemsg_RCVS_0(n_44_35_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_44_35", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_44_41_RCVS_0(m) {
                                
        if (msg_isBang(m)) {
            n_44_37_RCVS_0(msg_floats([Math.floor(Math.random() * n_44_41_STATE.maxValue)]))
            return
        } else if (
            msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
            && msg_readStringToken(m, 0) === 'seed'
        ) {
            console.log('WARNING : seed not implemented yet for [random]')
            return
        }
    
                                throw new Error('[random], id "n_44_41", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_44_37_RCVS_0(m) {
                                
                if (n_44_37_STATE.filterType === MSG_STRING_TOKEN) {
                    if (
                        (n_44_37_STATE.stringFilter === 'float'
                            && msg_isFloatToken(m, 0))
                        || (n_44_37_STATE.stringFilter === 'symbol'
                            && msg_isStringToken(m, 0))
                        || (n_44_37_STATE.stringFilter === 'list'
                            && msg_getLength(m) > 1)
                        || (n_44_37_STATE.stringFilter === 'bang' 
                            && msg_isBang(m))
                    ) {
                        n_44_38_RCVS_0(m)
                        return
                    
                    } else if (
                        msg_isStringToken(m, 0)
                        && msg_readStringToken(m, 0) === n_44_37_STATE.stringFilter
                    ) {
                        n_44_38_RCVS_0(msg_emptyToBang(msg_shift(m)))
                        return
                    }

                } else if (
                    msg_isFloatToken(m, 0)
                    && msg_readFloatToken(m, 0) === n_44_37_STATE.floatFilter
                ) {
                    n_44_38_RCVS_0(msg_emptyToBang(msg_shift(m)))
                    return
                }
            
                n_44_39_RCVS_0(m)
            return
            
                                throw new Error('[route], id "n_44_37", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_44_38_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_44_38_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_44_38_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_44_38_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_44_38_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_44_38_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_44_38_STATE.outMessages[0] = message
                n_44_38_STATE.messageTransferFunctions.splice(0, n_44_38_STATE.messageTransferFunctions.length - 1)
                n_44_38_STATE.messageTransferFunctions[0] = function (m) {
                    return n_44_38_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_44_38_STATE.messageTransferFunctions.length; i++) {
                    m_n_44_40_1__routemsg_RCVS_0(n_44_38_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_44_38", inlet "0", unsupported message : ' + msg_display(m))
                            }

function m_n_44_40_1__routemsg_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                m_n_44_40_1_sig_RCVS_0(m)
                return
            } else {
                SND_TO_NULL(m)
                return
            }
        
                                throw new Error('[_routemsg], id "m_n_44_40_1__routemsg", inlet "0", unsupported message : ' + msg_display(m))
                            }

function m_n_44_40_1_sig_RCVS_0(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            m_n_44_40_1_sig_STATE.currentValue = msg_readFloatToken(m, 0)
            return
        }
    
                                throw new Error('[sig~], id "m_n_44_40_1_sig", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_44_39_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_44_39_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_44_39_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_44_39_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_44_39_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_44_39_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_44_39_STATE.outMessages[0] = message
                n_44_39_STATE.messageTransferFunctions.splice(0, n_44_39_STATE.messageTransferFunctions.length - 1)
                n_44_39_STATE.messageTransferFunctions[0] = function (m) {
                    return n_44_39_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_44_39_STATE.messageTransferFunctions.length; i++) {
                    m_n_44_40_1__routemsg_RCVS_0(n_44_39_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_44_39", inlet "0", unsupported message : ' + msg_display(m))
                            }











function n_95_7_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                n_float_int_setValueInt(n_95_7_STATE, msg_readFloatToken(m, 0))
                n_95_2_RCVS_1(msg_floats([n_95_7_STATE.value]))
                return 

            } else if (msg_isBang(m)) {
                n_95_2_RCVS_1(msg_floats([n_95_7_STATE.value]))
                return
                
            }
        
                                throw new Error('[int], id "n_95_7", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_95_2_RCVS_0(m) {
                                
        if (!n_95_2_STATE.isClosed) {
            m_n_95_1_0__routemsg_RCVS_0(m)
        }
        return
    
                                throw new Error('[spigot], id "n_95_2", inlet "0", unsupported message : ' + msg_display(m))
                            }
function n_95_2_RCVS_1(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_spigot_setIsClosed(n_95_2_STATE, msg_readFloatToken(m, 0))
            return
        }
    
                                throw new Error('[spigot], id "n_95_2", inlet "1", unsupported message : ' + msg_display(m))
                            }

function m_n_95_1_0__routemsg_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                SND_TO_NULL(m)
                return
            } else {
                n_95_1_RCVS_0_message(m)
                return
            }
        
                                throw new Error('[_routemsg], id "m_n_95_1_0__routemsg", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_95_1_RCVS_0_message(m) {
                                
        if (msg_isBang(m)) {
            n_95_8_RCVS_0(msg_floats([n_95_1_STATE.currentValue]))
            return 
        }
    
                                throw new Error('[snapshot~], id "n_95_1", inlet "0_message", unsupported message : ' + msg_display(m))
                            }

function n_95_8_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                const newValue = msg_readFloatToken(m, 0)
                if (newValue !== n_95_8_STATE.currentValue) {
                    n_95_8_STATE.currentValue = newValue
                    n_95_11_RCVS_0(msg_floats([n_95_8_STATE.currentValue]))
                }
                return
    
            } else if (msg_isBang(m)) {
                n_95_11_RCVS_0(msg_floats([n_95_8_STATE.currentValue]))
                return 
    
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_95_8_STATE.currentValue = msg_readFloatToken(m, 1)
                return
            }
        
                                throw new Error('[change], id "n_95_8", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_95_11_RCVS_0(m) {
                                
        n_96_0_RCVS_0(msg_bang())
n_95_10_RCVS_0(msg_floats([messageTokenToFloat(m, 0)]))
        return
    
                                throw new Error('[trigger], id "n_95_11", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_95_10_RCVS_0(m) {
                                
        if (!n_95_10_STATE.isClosed) {
            n_95_13_RCVS_0(m)
        }
        return
    
                                throw new Error('[spigot], id "n_95_10", inlet "0", unsupported message : ' + msg_display(m))
                            }
function n_95_10_RCVS_1(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_spigot_setIsClosed(n_95_10_STATE, msg_readFloatToken(m, 0))
            return
        }
    
                                throw new Error('[spigot], id "n_95_10", inlet "1", unsupported message : ' + msg_display(m))
                            }

function n_95_13_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                const newValue = msg_readFloatToken(m, 0)
                if (newValue !== n_95_13_STATE.currentValue) {
                    n_95_13_STATE.currentValue = newValue
                    n_95_9_RCVS_0(msg_floats([n_95_13_STATE.currentValue]))
                }
                return
    
            } else if (msg_isBang(m)) {
                n_95_9_RCVS_0(msg_floats([n_95_13_STATE.currentValue]))
                return 
    
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_95_13_STATE.currentValue = msg_readFloatToken(m, 1)
                return
            }
        
                                throw new Error('[change], id "n_95_13", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_95_9_RCVS_0(m) {
                                
                if (n_95_9_STATE.filterType === MSG_STRING_TOKEN) {
                    if (
                        (n_95_9_STATE.stringFilter === 'float'
                            && msg_isFloatToken(m, 0))
                        || (n_95_9_STATE.stringFilter === 'symbol'
                            && msg_isStringToken(m, 0))
                        || (n_95_9_STATE.stringFilter === 'list'
                            && msg_getLength(m) > 1)
                        || (n_95_9_STATE.stringFilter === 'bang' 
                            && msg_isBang(m))
                    ) {
                        n_95_3_RCVS_0(m)
                        return
                    
                    } else if (
                        msg_isStringToken(m, 0)
                        && msg_readStringToken(m, 0) === n_95_9_STATE.stringFilter
                    ) {
                        n_95_3_RCVS_0(msg_emptyToBang(msg_shift(m)))
                        return
                    }

                } else if (
                    msg_isFloatToken(m, 0)
                    && msg_readFloatToken(m, 0) === n_95_9_STATE.floatFilter
                ) {
                    n_95_3_RCVS_0(msg_emptyToBang(msg_shift(m)))
                    return
                }
            
                SND_TO_NULL(m)
            return
            
                                throw new Error('[route], id "n_95_9", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_95_3_RCVS_0(m) {
                                
        n_95_5_RCVS_0(msg_bang())
n_43_31_RCVS_0(msg_bang())
        return
    
                                throw new Error('[trigger], id "n_95_3", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_95_5_RCVS_0(m) {
                                
        n_95_4_RCVS_0(msg_bang())
n_95_14_RCVS_0(msg_bang())
        return
    
                                throw new Error('[trigger], id "n_95_5", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_95_14_RCVS_0(m) {
                                
            if (msg_getLength(m) === 1) {
                if (msg_isStringToken(m, 0)) {
                    const action = msg_readStringToken(m, 0)
                    if (action === 'bang' || action === 'start') {
                        n_delay_scheduleDelay(
                            n_95_14_STATE, 
                            () => n_95_6_RCVS_0(msg_bang()),
                            FRAME,
                        )
                        return
                    } else if (action === 'stop') {
                        n_delay_stop(n_95_14_STATE)
                        return
                    }
                    
                } else if (msg_isFloatToken(m, 0)) {
                    n_delay_setDelay(n_95_14_STATE, msg_readFloatToken(m, 0))
                    n_delay_scheduleDelay(
                        n_95_14_STATE,
                        () => n_95_6_RCVS_0(msg_bang()),
                        FRAME,
                    )
                    return 
                }
            
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN, MSG_STRING_TOKEN])
                && msg_readStringToken(m, 0) === 'tempo'
            ) {
                n_95_14_STATE.sampleRatio = computeUnitInSamples(
                    SAMPLE_RATE, 
                    msg_readFloatToken(m, 1), 
                    msg_readStringToken(m, 2)
                )
                return
            }
        
                                throw new Error('[delay], id "n_95_14", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_95_6_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_95_6_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_95_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_95_6_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_95_6_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_95_6_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_95_6_STATE.outMessages[0] = message
                n_95_6_STATE.messageTransferFunctions.splice(0, n_95_6_STATE.messageTransferFunctions.length - 1)
                n_95_6_STATE.messageTransferFunctions[0] = function (m) {
                    return n_95_6_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_95_6_STATE.messageTransferFunctions.length; i++) {
                    n_95_7_RCVS_0(n_95_6_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_95_6", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_95_4_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_95_4_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_95_4_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_95_4_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_95_4_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_95_4_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_95_4_STATE.outMessages[0] = message
                n_95_4_STATE.messageTransferFunctions.splice(0, n_95_4_STATE.messageTransferFunctions.length - 1)
                n_95_4_STATE.messageTransferFunctions[0] = function (m) {
                    return n_95_4_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_95_4_STATE.messageTransferFunctions.length; i++) {
                    n_95_7_RCVS_0(n_95_4_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_95_4", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_96_0_RCVS_0(m) {
                                
        n_96_6_RCVS_0(msg_bang())
n_96_2_RCVS_0(msg_bang())
        return
    
                                throw new Error('[trigger], id "n_96_0", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_96_2_RCVS_0(m) {
                                
            if (msg_getLength(m) === 1) {
                if (msg_isStringToken(m, 0)) {
                    const action = msg_readStringToken(m, 0)
                    if (action === 'bang' || action === 'start') {
                        n_delay_scheduleDelay(
                            n_96_2_STATE, 
                            () => n_96_5_RCVS_0(msg_bang()),
                            FRAME,
                        )
                        return
                    } else if (action === 'stop') {
                        n_delay_stop(n_96_2_STATE)
                        return
                    }
                    
                } else if (msg_isFloatToken(m, 0)) {
                    n_delay_setDelay(n_96_2_STATE, msg_readFloatToken(m, 0))
                    n_delay_scheduleDelay(
                        n_96_2_STATE,
                        () => n_96_5_RCVS_0(msg_bang()),
                        FRAME,
                    )
                    return 
                }
            
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN, MSG_STRING_TOKEN])
                && msg_readStringToken(m, 0) === 'tempo'
            ) {
                n_96_2_STATE.sampleRatio = computeUnitInSamples(
                    SAMPLE_RATE, 
                    msg_readFloatToken(m, 1), 
                    msg_readStringToken(m, 2)
                )
                return
            }
        
                                throw new Error('[delay], id "n_96_2", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_96_5_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_96_5_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_96_5_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_96_5_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_96_5_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_96_5_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_96_5_STATE.outMessages[0] = message
                n_96_5_STATE.messageTransferFunctions.splice(0, n_96_5_STATE.messageTransferFunctions.length - 1)
                n_96_5_STATE.messageTransferFunctions[0] = function (m) {
                    return n_96_5_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_96_5_STATE.messageTransferFunctions.length; i++) {
                    n_96_1_RCVS_0(n_96_5_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_96_5", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_96_1_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                n_float_int_setValueInt(n_96_1_STATE, msg_readFloatToken(m, 0))
                n_95_10_RCVS_1(msg_floats([n_96_1_STATE.value]))
                return 

            } else if (msg_isBang(m)) {
                n_95_10_RCVS_1(msg_floats([n_96_1_STATE.value]))
                return
                
            }
        
                                throw new Error('[int], id "n_96_1", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_96_6_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_96_6_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_96_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_96_6_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_96_6_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_96_6_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_96_6_STATE.outMessages[0] = message
                n_96_6_STATE.messageTransferFunctions.splice(0, n_96_6_STATE.messageTransferFunctions.length - 1)
                n_96_6_STATE.messageTransferFunctions[0] = function (m) {
                    return n_96_6_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_96_6_STATE.messageTransferFunctions.length; i++) {
                    n_96_1_RCVS_0(n_96_6_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_96_6", inlet "0", unsupported message : ' + msg_display(m))
                            }





function n_97_7_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                n_float_int_setValueInt(n_97_7_STATE, msg_readFloatToken(m, 0))
                n_97_2_RCVS_1(msg_floats([n_97_7_STATE.value]))
                return 

            } else if (msg_isBang(m)) {
                n_97_2_RCVS_1(msg_floats([n_97_7_STATE.value]))
                return
                
            }
        
                                throw new Error('[int], id "n_97_7", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_97_2_RCVS_0(m) {
                                
        if (!n_97_2_STATE.isClosed) {
            m_n_97_1_0__routemsg_RCVS_0(m)
        }
        return
    
                                throw new Error('[spigot], id "n_97_2", inlet "0", unsupported message : ' + msg_display(m))
                            }
function n_97_2_RCVS_1(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_spigot_setIsClosed(n_97_2_STATE, msg_readFloatToken(m, 0))
            return
        }
    
                                throw new Error('[spigot], id "n_97_2", inlet "1", unsupported message : ' + msg_display(m))
                            }

function m_n_97_1_0__routemsg_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                SND_TO_NULL(m)
                return
            } else {
                n_97_1_RCVS_0_message(m)
                return
            }
        
                                throw new Error('[_routemsg], id "m_n_97_1_0__routemsg", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_97_1_RCVS_0_message(m) {
                                
        if (msg_isBang(m)) {
            n_97_8_RCVS_0(msg_floats([n_97_1_STATE.currentValue]))
            return 
        }
    
                                throw new Error('[snapshot~], id "n_97_1", inlet "0_message", unsupported message : ' + msg_display(m))
                            }

function n_97_8_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                const newValue = msg_readFloatToken(m, 0)
                if (newValue !== n_97_8_STATE.currentValue) {
                    n_97_8_STATE.currentValue = newValue
                    n_97_11_RCVS_0(msg_floats([n_97_8_STATE.currentValue]))
                }
                return
    
            } else if (msg_isBang(m)) {
                n_97_11_RCVS_0(msg_floats([n_97_8_STATE.currentValue]))
                return 
    
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_97_8_STATE.currentValue = msg_readFloatToken(m, 1)
                return
            }
        
                                throw new Error('[change], id "n_97_8", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_97_11_RCVS_0(m) {
                                
        n_98_0_RCVS_0(msg_bang())
n_97_10_RCVS_0(msg_floats([messageTokenToFloat(m, 0)]))
        return
    
                                throw new Error('[trigger], id "n_97_11", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_97_10_RCVS_0(m) {
                                
        if (!n_97_10_STATE.isClosed) {
            n_97_13_RCVS_0(m)
        }
        return
    
                                throw new Error('[spigot], id "n_97_10", inlet "0", unsupported message : ' + msg_display(m))
                            }
function n_97_10_RCVS_1(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_spigot_setIsClosed(n_97_10_STATE, msg_readFloatToken(m, 0))
            return
        }
    
                                throw new Error('[spigot], id "n_97_10", inlet "1", unsupported message : ' + msg_display(m))
                            }

function n_97_13_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                const newValue = msg_readFloatToken(m, 0)
                if (newValue !== n_97_13_STATE.currentValue) {
                    n_97_13_STATE.currentValue = newValue
                    n_97_9_RCVS_0(msg_floats([n_97_13_STATE.currentValue]))
                }
                return
    
            } else if (msg_isBang(m)) {
                n_97_9_RCVS_0(msg_floats([n_97_13_STATE.currentValue]))
                return 
    
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_97_13_STATE.currentValue = msg_readFloatToken(m, 1)
                return
            }
        
                                throw new Error('[change], id "n_97_13", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_97_9_RCVS_0(m) {
                                
                if (n_97_9_STATE.filterType === MSG_STRING_TOKEN) {
                    if (
                        (n_97_9_STATE.stringFilter === 'float'
                            && msg_isFloatToken(m, 0))
                        || (n_97_9_STATE.stringFilter === 'symbol'
                            && msg_isStringToken(m, 0))
                        || (n_97_9_STATE.stringFilter === 'list'
                            && msg_getLength(m) > 1)
                        || (n_97_9_STATE.stringFilter === 'bang' 
                            && msg_isBang(m))
                    ) {
                        n_97_3_RCVS_0(m)
                        return
                    
                    } else if (
                        msg_isStringToken(m, 0)
                        && msg_readStringToken(m, 0) === n_97_9_STATE.stringFilter
                    ) {
                        n_97_3_RCVS_0(msg_emptyToBang(msg_shift(m)))
                        return
                    }

                } else if (
                    msg_isFloatToken(m, 0)
                    && msg_readFloatToken(m, 0) === n_97_9_STATE.floatFilter
                ) {
                    n_97_3_RCVS_0(msg_emptyToBang(msg_shift(m)))
                    return
                }
            
                SND_TO_NULL(m)
            return
            
                                throw new Error('[route], id "n_97_9", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_97_3_RCVS_0(m) {
                                
        n_97_5_RCVS_0(msg_bang())
n_43_0_RCVS_0(msg_bang())
        return
    
                                throw new Error('[trigger], id "n_97_3", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_97_5_RCVS_0(m) {
                                
        n_97_4_RCVS_0(msg_bang())
n_97_14_RCVS_0(msg_bang())
        return
    
                                throw new Error('[trigger], id "n_97_5", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_97_14_RCVS_0(m) {
                                
            if (msg_getLength(m) === 1) {
                if (msg_isStringToken(m, 0)) {
                    const action = msg_readStringToken(m, 0)
                    if (action === 'bang' || action === 'start') {
                        n_delay_scheduleDelay(
                            n_97_14_STATE, 
                            () => n_97_6_RCVS_0(msg_bang()),
                            FRAME,
                        )
                        return
                    } else if (action === 'stop') {
                        n_delay_stop(n_97_14_STATE)
                        return
                    }
                    
                } else if (msg_isFloatToken(m, 0)) {
                    n_delay_setDelay(n_97_14_STATE, msg_readFloatToken(m, 0))
                    n_delay_scheduleDelay(
                        n_97_14_STATE,
                        () => n_97_6_RCVS_0(msg_bang()),
                        FRAME,
                    )
                    return 
                }
            
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN, MSG_STRING_TOKEN])
                && msg_readStringToken(m, 0) === 'tempo'
            ) {
                n_97_14_STATE.sampleRatio = computeUnitInSamples(
                    SAMPLE_RATE, 
                    msg_readFloatToken(m, 1), 
                    msg_readStringToken(m, 2)
                )
                return
            }
        
                                throw new Error('[delay], id "n_97_14", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_97_6_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_97_6_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_97_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_97_6_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_97_6_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_97_6_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_97_6_STATE.outMessages[0] = message
                n_97_6_STATE.messageTransferFunctions.splice(0, n_97_6_STATE.messageTransferFunctions.length - 1)
                n_97_6_STATE.messageTransferFunctions[0] = function (m) {
                    return n_97_6_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_97_6_STATE.messageTransferFunctions.length; i++) {
                    n_97_7_RCVS_0(n_97_6_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_97_6", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_97_4_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_97_4_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_97_4_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_97_4_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_97_4_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_97_4_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_97_4_STATE.outMessages[0] = message
                n_97_4_STATE.messageTransferFunctions.splice(0, n_97_4_STATE.messageTransferFunctions.length - 1)
                n_97_4_STATE.messageTransferFunctions[0] = function (m) {
                    return n_97_4_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_97_4_STATE.messageTransferFunctions.length; i++) {
                    n_97_7_RCVS_0(n_97_4_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_97_4", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_98_0_RCVS_0(m) {
                                
        n_98_6_RCVS_0(msg_bang())
n_98_2_RCVS_0(msg_bang())
        return
    
                                throw new Error('[trigger], id "n_98_0", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_98_2_RCVS_0(m) {
                                
            if (msg_getLength(m) === 1) {
                if (msg_isStringToken(m, 0)) {
                    const action = msg_readStringToken(m, 0)
                    if (action === 'bang' || action === 'start') {
                        n_delay_scheduleDelay(
                            n_98_2_STATE, 
                            () => n_98_5_RCVS_0(msg_bang()),
                            FRAME,
                        )
                        return
                    } else if (action === 'stop') {
                        n_delay_stop(n_98_2_STATE)
                        return
                    }
                    
                } else if (msg_isFloatToken(m, 0)) {
                    n_delay_setDelay(n_98_2_STATE, msg_readFloatToken(m, 0))
                    n_delay_scheduleDelay(
                        n_98_2_STATE,
                        () => n_98_5_RCVS_0(msg_bang()),
                        FRAME,
                    )
                    return 
                }
            
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN, MSG_STRING_TOKEN])
                && msg_readStringToken(m, 0) === 'tempo'
            ) {
                n_98_2_STATE.sampleRatio = computeUnitInSamples(
                    SAMPLE_RATE, 
                    msg_readFloatToken(m, 1), 
                    msg_readStringToken(m, 2)
                )
                return
            }
        
                                throw new Error('[delay], id "n_98_2", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_98_5_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_98_5_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_98_5_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_98_5_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_98_5_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_98_5_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_98_5_STATE.outMessages[0] = message
                n_98_5_STATE.messageTransferFunctions.splice(0, n_98_5_STATE.messageTransferFunctions.length - 1)
                n_98_5_STATE.messageTransferFunctions[0] = function (m) {
                    return n_98_5_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_98_5_STATE.messageTransferFunctions.length; i++) {
                    n_98_1_RCVS_0(n_98_5_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_98_5", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_98_1_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                n_float_int_setValueInt(n_98_1_STATE, msg_readFloatToken(m, 0))
                n_97_10_RCVS_1(msg_floats([n_98_1_STATE.value]))
                return 

            } else if (msg_isBang(m)) {
                n_97_10_RCVS_1(msg_floats([n_98_1_STATE.value]))
                return
                
            }
        
                                throw new Error('[int], id "n_98_1", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_98_6_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_98_6_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_98_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_98_6_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_98_6_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_98_6_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_98_6_STATE.outMessages[0] = message
                n_98_6_STATE.messageTransferFunctions.splice(0, n_98_6_STATE.messageTransferFunctions.length - 1)
                n_98_6_STATE.messageTransferFunctions[0] = function (m) {
                    return n_98_6_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_98_6_STATE.messageTransferFunctions.length; i++) {
                    n_98_1_RCVS_0(n_98_6_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_98_6", inlet "0", unsupported message : ' + msg_display(m))
                            }





function n_99_7_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                n_float_int_setValueInt(n_99_7_STATE, msg_readFloatToken(m, 0))
                n_99_2_RCVS_1(msg_floats([n_99_7_STATE.value]))
                return 

            } else if (msg_isBang(m)) {
                n_99_2_RCVS_1(msg_floats([n_99_7_STATE.value]))
                return
                
            }
        
                                throw new Error('[int], id "n_99_7", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_99_2_RCVS_0(m) {
                                
        if (!n_99_2_STATE.isClosed) {
            m_n_99_1_0__routemsg_RCVS_0(m)
        }
        return
    
                                throw new Error('[spigot], id "n_99_2", inlet "0", unsupported message : ' + msg_display(m))
                            }
function n_99_2_RCVS_1(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_spigot_setIsClosed(n_99_2_STATE, msg_readFloatToken(m, 0))
            return
        }
    
                                throw new Error('[spigot], id "n_99_2", inlet "1", unsupported message : ' + msg_display(m))
                            }

function m_n_99_1_0__routemsg_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                SND_TO_NULL(m)
                return
            } else {
                n_99_1_RCVS_0_message(m)
                return
            }
        
                                throw new Error('[_routemsg], id "m_n_99_1_0__routemsg", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_99_1_RCVS_0_message(m) {
                                
        if (msg_isBang(m)) {
            n_99_8_RCVS_0(msg_floats([n_99_1_STATE.currentValue]))
            return 
        }
    
                                throw new Error('[snapshot~], id "n_99_1", inlet "0_message", unsupported message : ' + msg_display(m))
                            }

function n_99_8_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                const newValue = msg_readFloatToken(m, 0)
                if (newValue !== n_99_8_STATE.currentValue) {
                    n_99_8_STATE.currentValue = newValue
                    n_99_11_RCVS_0(msg_floats([n_99_8_STATE.currentValue]))
                }
                return
    
            } else if (msg_isBang(m)) {
                n_99_11_RCVS_0(msg_floats([n_99_8_STATE.currentValue]))
                return 
    
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_99_8_STATE.currentValue = msg_readFloatToken(m, 1)
                return
            }
        
                                throw new Error('[change], id "n_99_8", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_99_11_RCVS_0(m) {
                                
        n_100_0_RCVS_0(msg_bang())
n_99_10_RCVS_0(msg_floats([messageTokenToFloat(m, 0)]))
        return
    
                                throw new Error('[trigger], id "n_99_11", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_99_10_RCVS_0(m) {
                                
        if (!n_99_10_STATE.isClosed) {
            n_99_13_RCVS_0(m)
        }
        return
    
                                throw new Error('[spigot], id "n_99_10", inlet "0", unsupported message : ' + msg_display(m))
                            }
function n_99_10_RCVS_1(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_spigot_setIsClosed(n_99_10_STATE, msg_readFloatToken(m, 0))
            return
        }
    
                                throw new Error('[spigot], id "n_99_10", inlet "1", unsupported message : ' + msg_display(m))
                            }

function n_99_13_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                const newValue = msg_readFloatToken(m, 0)
                if (newValue !== n_99_13_STATE.currentValue) {
                    n_99_13_STATE.currentValue = newValue
                    n_99_9_RCVS_0(msg_floats([n_99_13_STATE.currentValue]))
                }
                return
    
            } else if (msg_isBang(m)) {
                n_99_9_RCVS_0(msg_floats([n_99_13_STATE.currentValue]))
                return 
    
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_99_13_STATE.currentValue = msg_readFloatToken(m, 1)
                return
            }
        
                                throw new Error('[change], id "n_99_13", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_99_9_RCVS_0(m) {
                                
                if (n_99_9_STATE.filterType === MSG_STRING_TOKEN) {
                    if (
                        (n_99_9_STATE.stringFilter === 'float'
                            && msg_isFloatToken(m, 0))
                        || (n_99_9_STATE.stringFilter === 'symbol'
                            && msg_isStringToken(m, 0))
                        || (n_99_9_STATE.stringFilter === 'list'
                            && msg_getLength(m) > 1)
                        || (n_99_9_STATE.stringFilter === 'bang' 
                            && msg_isBang(m))
                    ) {
                        n_99_3_RCVS_0(m)
                        return
                    
                    } else if (
                        msg_isStringToken(m, 0)
                        && msg_readStringToken(m, 0) === n_99_9_STATE.stringFilter
                    ) {
                        n_99_3_RCVS_0(msg_emptyToBang(msg_shift(m)))
                        return
                    }

                } else if (
                    msg_isFloatToken(m, 0)
                    && msg_readFloatToken(m, 0) === n_99_9_STATE.floatFilter
                ) {
                    n_99_3_RCVS_0(msg_emptyToBang(msg_shift(m)))
                    return
                }
            
                SND_TO_NULL(m)
            return
            
                                throw new Error('[route], id "n_99_9", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_99_3_RCVS_0(m) {
                                
        n_99_5_RCVS_0(msg_bang())
n_43_5_RCVS_0(msg_bang())
        return
    
                                throw new Error('[trigger], id "n_99_3", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_99_5_RCVS_0(m) {
                                
        n_99_4_RCVS_0(msg_bang())
n_99_14_RCVS_0(msg_bang())
        return
    
                                throw new Error('[trigger], id "n_99_5", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_99_14_RCVS_0(m) {
                                
            if (msg_getLength(m) === 1) {
                if (msg_isStringToken(m, 0)) {
                    const action = msg_readStringToken(m, 0)
                    if (action === 'bang' || action === 'start') {
                        n_delay_scheduleDelay(
                            n_99_14_STATE, 
                            () => n_99_6_RCVS_0(msg_bang()),
                            FRAME,
                        )
                        return
                    } else if (action === 'stop') {
                        n_delay_stop(n_99_14_STATE)
                        return
                    }
                    
                } else if (msg_isFloatToken(m, 0)) {
                    n_delay_setDelay(n_99_14_STATE, msg_readFloatToken(m, 0))
                    n_delay_scheduleDelay(
                        n_99_14_STATE,
                        () => n_99_6_RCVS_0(msg_bang()),
                        FRAME,
                    )
                    return 
                }
            
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN, MSG_STRING_TOKEN])
                && msg_readStringToken(m, 0) === 'tempo'
            ) {
                n_99_14_STATE.sampleRatio = computeUnitInSamples(
                    SAMPLE_RATE, 
                    msg_readFloatToken(m, 1), 
                    msg_readStringToken(m, 2)
                )
                return
            }
        
                                throw new Error('[delay], id "n_99_14", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_99_6_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_99_6_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_99_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_99_6_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_99_6_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_99_6_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_99_6_STATE.outMessages[0] = message
                n_99_6_STATE.messageTransferFunctions.splice(0, n_99_6_STATE.messageTransferFunctions.length - 1)
                n_99_6_STATE.messageTransferFunctions[0] = function (m) {
                    return n_99_6_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_99_6_STATE.messageTransferFunctions.length; i++) {
                    n_99_7_RCVS_0(n_99_6_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_99_6", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_99_4_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_99_4_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_99_4_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_99_4_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_99_4_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_99_4_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_99_4_STATE.outMessages[0] = message
                n_99_4_STATE.messageTransferFunctions.splice(0, n_99_4_STATE.messageTransferFunctions.length - 1)
                n_99_4_STATE.messageTransferFunctions[0] = function (m) {
                    return n_99_4_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_99_4_STATE.messageTransferFunctions.length; i++) {
                    n_99_7_RCVS_0(n_99_4_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_99_4", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_100_0_RCVS_0(m) {
                                
        n_100_6_RCVS_0(msg_bang())
n_100_2_RCVS_0(msg_bang())
        return
    
                                throw new Error('[trigger], id "n_100_0", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_100_2_RCVS_0(m) {
                                
            if (msg_getLength(m) === 1) {
                if (msg_isStringToken(m, 0)) {
                    const action = msg_readStringToken(m, 0)
                    if (action === 'bang' || action === 'start') {
                        n_delay_scheduleDelay(
                            n_100_2_STATE, 
                            () => n_100_5_RCVS_0(msg_bang()),
                            FRAME,
                        )
                        return
                    } else if (action === 'stop') {
                        n_delay_stop(n_100_2_STATE)
                        return
                    }
                    
                } else if (msg_isFloatToken(m, 0)) {
                    n_delay_setDelay(n_100_2_STATE, msg_readFloatToken(m, 0))
                    n_delay_scheduleDelay(
                        n_100_2_STATE,
                        () => n_100_5_RCVS_0(msg_bang()),
                        FRAME,
                    )
                    return 
                }
            
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN, MSG_STRING_TOKEN])
                && msg_readStringToken(m, 0) === 'tempo'
            ) {
                n_100_2_STATE.sampleRatio = computeUnitInSamples(
                    SAMPLE_RATE, 
                    msg_readFloatToken(m, 1), 
                    msg_readStringToken(m, 2)
                )
                return
            }
        
                                throw new Error('[delay], id "n_100_2", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_100_5_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_100_5_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_100_5_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_100_5_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_100_5_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_100_5_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_100_5_STATE.outMessages[0] = message
                n_100_5_STATE.messageTransferFunctions.splice(0, n_100_5_STATE.messageTransferFunctions.length - 1)
                n_100_5_STATE.messageTransferFunctions[0] = function (m) {
                    return n_100_5_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_100_5_STATE.messageTransferFunctions.length; i++) {
                    n_100_1_RCVS_0(n_100_5_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_100_5", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_100_1_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                n_float_int_setValueInt(n_100_1_STATE, msg_readFloatToken(m, 0))
                n_99_10_RCVS_1(msg_floats([n_100_1_STATE.value]))
                return 

            } else if (msg_isBang(m)) {
                n_99_10_RCVS_1(msg_floats([n_100_1_STATE.value]))
                return
                
            }
        
                                throw new Error('[int], id "n_100_1", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_100_6_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_100_6_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_100_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_100_6_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_100_6_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_100_6_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_100_6_STATE.outMessages[0] = message
                n_100_6_STATE.messageTransferFunctions.splice(0, n_100_6_STATE.messageTransferFunctions.length - 1)
                n_100_6_STATE.messageTransferFunctions[0] = function (m) {
                    return n_100_6_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_100_6_STATE.messageTransferFunctions.length; i++) {
                    n_100_1_RCVS_0(n_100_6_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_100_6", inlet "0", unsupported message : ' + msg_display(m))
                            }





function n_101_7_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                n_float_int_setValueInt(n_101_7_STATE, msg_readFloatToken(m, 0))
                n_101_2_RCVS_1(msg_floats([n_101_7_STATE.value]))
                return 

            } else if (msg_isBang(m)) {
                n_101_2_RCVS_1(msg_floats([n_101_7_STATE.value]))
                return
                
            }
        
                                throw new Error('[int], id "n_101_7", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_101_2_RCVS_0(m) {
                                
        if (!n_101_2_STATE.isClosed) {
            m_n_101_1_0__routemsg_RCVS_0(m)
        }
        return
    
                                throw new Error('[spigot], id "n_101_2", inlet "0", unsupported message : ' + msg_display(m))
                            }
function n_101_2_RCVS_1(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_spigot_setIsClosed(n_101_2_STATE, msg_readFloatToken(m, 0))
            return
        }
    
                                throw new Error('[spigot], id "n_101_2", inlet "1", unsupported message : ' + msg_display(m))
                            }

function m_n_101_1_0__routemsg_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                SND_TO_NULL(m)
                return
            } else {
                n_101_1_RCVS_0_message(m)
                return
            }
        
                                throw new Error('[_routemsg], id "m_n_101_1_0__routemsg", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_101_1_RCVS_0_message(m) {
                                
        if (msg_isBang(m)) {
            n_101_8_RCVS_0(msg_floats([n_101_1_STATE.currentValue]))
            return 
        }
    
                                throw new Error('[snapshot~], id "n_101_1", inlet "0_message", unsupported message : ' + msg_display(m))
                            }

function n_101_8_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                const newValue = msg_readFloatToken(m, 0)
                if (newValue !== n_101_8_STATE.currentValue) {
                    n_101_8_STATE.currentValue = newValue
                    n_101_11_RCVS_0(msg_floats([n_101_8_STATE.currentValue]))
                }
                return
    
            } else if (msg_isBang(m)) {
                n_101_11_RCVS_0(msg_floats([n_101_8_STATE.currentValue]))
                return 
    
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_101_8_STATE.currentValue = msg_readFloatToken(m, 1)
                return
            }
        
                                throw new Error('[change], id "n_101_8", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_101_11_RCVS_0(m) {
                                
        n_102_0_RCVS_0(msg_bang())
n_101_10_RCVS_0(msg_floats([messageTokenToFloat(m, 0)]))
        return
    
                                throw new Error('[trigger], id "n_101_11", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_101_10_RCVS_0(m) {
                                
        if (!n_101_10_STATE.isClosed) {
            n_101_13_RCVS_0(m)
        }
        return
    
                                throw new Error('[spigot], id "n_101_10", inlet "0", unsupported message : ' + msg_display(m))
                            }
function n_101_10_RCVS_1(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_spigot_setIsClosed(n_101_10_STATE, msg_readFloatToken(m, 0))
            return
        }
    
                                throw new Error('[spigot], id "n_101_10", inlet "1", unsupported message : ' + msg_display(m))
                            }

function n_101_13_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                const newValue = msg_readFloatToken(m, 0)
                if (newValue !== n_101_13_STATE.currentValue) {
                    n_101_13_STATE.currentValue = newValue
                    n_101_9_RCVS_0(msg_floats([n_101_13_STATE.currentValue]))
                }
                return
    
            } else if (msg_isBang(m)) {
                n_101_9_RCVS_0(msg_floats([n_101_13_STATE.currentValue]))
                return 
    
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_101_13_STATE.currentValue = msg_readFloatToken(m, 1)
                return
            }
        
                                throw new Error('[change], id "n_101_13", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_101_9_RCVS_0(m) {
                                
                if (n_101_9_STATE.filterType === MSG_STRING_TOKEN) {
                    if (
                        (n_101_9_STATE.stringFilter === 'float'
                            && msg_isFloatToken(m, 0))
                        || (n_101_9_STATE.stringFilter === 'symbol'
                            && msg_isStringToken(m, 0))
                        || (n_101_9_STATE.stringFilter === 'list'
                            && msg_getLength(m) > 1)
                        || (n_101_9_STATE.stringFilter === 'bang' 
                            && msg_isBang(m))
                    ) {
                        n_101_3_RCVS_0(m)
                        return
                    
                    } else if (
                        msg_isStringToken(m, 0)
                        && msg_readStringToken(m, 0) === n_101_9_STATE.stringFilter
                    ) {
                        n_101_3_RCVS_0(msg_emptyToBang(msg_shift(m)))
                        return
                    }

                } else if (
                    msg_isFloatToken(m, 0)
                    && msg_readFloatToken(m, 0) === n_101_9_STATE.floatFilter
                ) {
                    n_101_3_RCVS_0(msg_emptyToBang(msg_shift(m)))
                    return
                }
            
                SND_TO_NULL(m)
            return
            
                                throw new Error('[route], id "n_101_9", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_101_3_RCVS_0(m) {
                                
        n_101_5_RCVS_0(msg_bang())
n_43_9_RCVS_0(msg_bang())
        return
    
                                throw new Error('[trigger], id "n_101_3", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_101_5_RCVS_0(m) {
                                
        n_101_4_RCVS_0(msg_bang())
n_101_14_RCVS_0(msg_bang())
        return
    
                                throw new Error('[trigger], id "n_101_5", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_101_14_RCVS_0(m) {
                                
            if (msg_getLength(m) === 1) {
                if (msg_isStringToken(m, 0)) {
                    const action = msg_readStringToken(m, 0)
                    if (action === 'bang' || action === 'start') {
                        n_delay_scheduleDelay(
                            n_101_14_STATE, 
                            () => n_101_6_RCVS_0(msg_bang()),
                            FRAME,
                        )
                        return
                    } else if (action === 'stop') {
                        n_delay_stop(n_101_14_STATE)
                        return
                    }
                    
                } else if (msg_isFloatToken(m, 0)) {
                    n_delay_setDelay(n_101_14_STATE, msg_readFloatToken(m, 0))
                    n_delay_scheduleDelay(
                        n_101_14_STATE,
                        () => n_101_6_RCVS_0(msg_bang()),
                        FRAME,
                    )
                    return 
                }
            
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN, MSG_STRING_TOKEN])
                && msg_readStringToken(m, 0) === 'tempo'
            ) {
                n_101_14_STATE.sampleRatio = computeUnitInSamples(
                    SAMPLE_RATE, 
                    msg_readFloatToken(m, 1), 
                    msg_readStringToken(m, 2)
                )
                return
            }
        
                                throw new Error('[delay], id "n_101_14", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_101_6_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_101_6_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_101_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_101_6_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_101_6_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_101_6_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_101_6_STATE.outMessages[0] = message
                n_101_6_STATE.messageTransferFunctions.splice(0, n_101_6_STATE.messageTransferFunctions.length - 1)
                n_101_6_STATE.messageTransferFunctions[0] = function (m) {
                    return n_101_6_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_101_6_STATE.messageTransferFunctions.length; i++) {
                    n_101_7_RCVS_0(n_101_6_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_101_6", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_101_4_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_101_4_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_101_4_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_101_4_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_101_4_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_101_4_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_101_4_STATE.outMessages[0] = message
                n_101_4_STATE.messageTransferFunctions.splice(0, n_101_4_STATE.messageTransferFunctions.length - 1)
                n_101_4_STATE.messageTransferFunctions[0] = function (m) {
                    return n_101_4_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_101_4_STATE.messageTransferFunctions.length; i++) {
                    n_101_7_RCVS_0(n_101_4_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_101_4", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_102_0_RCVS_0(m) {
                                
        n_102_6_RCVS_0(msg_bang())
n_102_2_RCVS_0(msg_bang())
        return
    
                                throw new Error('[trigger], id "n_102_0", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_102_2_RCVS_0(m) {
                                
            if (msg_getLength(m) === 1) {
                if (msg_isStringToken(m, 0)) {
                    const action = msg_readStringToken(m, 0)
                    if (action === 'bang' || action === 'start') {
                        n_delay_scheduleDelay(
                            n_102_2_STATE, 
                            () => n_102_5_RCVS_0(msg_bang()),
                            FRAME,
                        )
                        return
                    } else if (action === 'stop') {
                        n_delay_stop(n_102_2_STATE)
                        return
                    }
                    
                } else if (msg_isFloatToken(m, 0)) {
                    n_delay_setDelay(n_102_2_STATE, msg_readFloatToken(m, 0))
                    n_delay_scheduleDelay(
                        n_102_2_STATE,
                        () => n_102_5_RCVS_0(msg_bang()),
                        FRAME,
                    )
                    return 
                }
            
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN, MSG_STRING_TOKEN])
                && msg_readStringToken(m, 0) === 'tempo'
            ) {
                n_102_2_STATE.sampleRatio = computeUnitInSamples(
                    SAMPLE_RATE, 
                    msg_readFloatToken(m, 1), 
                    msg_readStringToken(m, 2)
                )
                return
            }
        
                                throw new Error('[delay], id "n_102_2", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_102_5_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_102_5_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_102_5_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_102_5_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_102_5_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_102_5_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_102_5_STATE.outMessages[0] = message
                n_102_5_STATE.messageTransferFunctions.splice(0, n_102_5_STATE.messageTransferFunctions.length - 1)
                n_102_5_STATE.messageTransferFunctions[0] = function (m) {
                    return n_102_5_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_102_5_STATE.messageTransferFunctions.length; i++) {
                    n_102_1_RCVS_0(n_102_5_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_102_5", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_102_1_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                n_float_int_setValueInt(n_102_1_STATE, msg_readFloatToken(m, 0))
                n_101_10_RCVS_1(msg_floats([n_102_1_STATE.value]))
                return 

            } else if (msg_isBang(m)) {
                n_101_10_RCVS_1(msg_floats([n_102_1_STATE.value]))
                return
                
            }
        
                                throw new Error('[int], id "n_102_1", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_102_6_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_102_6_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_102_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_102_6_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_102_6_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_102_6_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_102_6_STATE.outMessages[0] = message
                n_102_6_STATE.messageTransferFunctions.splice(0, n_102_6_STATE.messageTransferFunctions.length - 1)
                n_102_6_STATE.messageTransferFunctions[0] = function (m) {
                    return n_102_6_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_102_6_STATE.messageTransferFunctions.length; i++) {
                    n_102_1_RCVS_0(n_102_6_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_102_6", inlet "0", unsupported message : ' + msg_display(m))
                            }





function n_103_7_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                n_float_int_setValueInt(n_103_7_STATE, msg_readFloatToken(m, 0))
                n_103_2_RCVS_1(msg_floats([n_103_7_STATE.value]))
                return 

            } else if (msg_isBang(m)) {
                n_103_2_RCVS_1(msg_floats([n_103_7_STATE.value]))
                return
                
            }
        
                                throw new Error('[int], id "n_103_7", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_103_2_RCVS_0(m) {
                                
        if (!n_103_2_STATE.isClosed) {
            m_n_103_1_0__routemsg_RCVS_0(m)
        }
        return
    
                                throw new Error('[spigot], id "n_103_2", inlet "0", unsupported message : ' + msg_display(m))
                            }
function n_103_2_RCVS_1(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_spigot_setIsClosed(n_103_2_STATE, msg_readFloatToken(m, 0))
            return
        }
    
                                throw new Error('[spigot], id "n_103_2", inlet "1", unsupported message : ' + msg_display(m))
                            }

function m_n_103_1_0__routemsg_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                SND_TO_NULL(m)
                return
            } else {
                n_103_1_RCVS_0_message(m)
                return
            }
        
                                throw new Error('[_routemsg], id "m_n_103_1_0__routemsg", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_103_1_RCVS_0_message(m) {
                                
        if (msg_isBang(m)) {
            n_103_8_RCVS_0(msg_floats([n_103_1_STATE.currentValue]))
            return 
        }
    
                                throw new Error('[snapshot~], id "n_103_1", inlet "0_message", unsupported message : ' + msg_display(m))
                            }

function n_103_8_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                const newValue = msg_readFloatToken(m, 0)
                if (newValue !== n_103_8_STATE.currentValue) {
                    n_103_8_STATE.currentValue = newValue
                    n_103_11_RCVS_0(msg_floats([n_103_8_STATE.currentValue]))
                }
                return
    
            } else if (msg_isBang(m)) {
                n_103_11_RCVS_0(msg_floats([n_103_8_STATE.currentValue]))
                return 
    
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_103_8_STATE.currentValue = msg_readFloatToken(m, 1)
                return
            }
        
                                throw new Error('[change], id "n_103_8", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_103_11_RCVS_0(m) {
                                
        n_104_0_RCVS_0(msg_bang())
n_103_10_RCVS_0(msg_floats([messageTokenToFloat(m, 0)]))
        return
    
                                throw new Error('[trigger], id "n_103_11", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_103_10_RCVS_0(m) {
                                
        if (!n_103_10_STATE.isClosed) {
            n_103_13_RCVS_0(m)
        }
        return
    
                                throw new Error('[spigot], id "n_103_10", inlet "0", unsupported message : ' + msg_display(m))
                            }
function n_103_10_RCVS_1(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_spigot_setIsClosed(n_103_10_STATE, msg_readFloatToken(m, 0))
            return
        }
    
                                throw new Error('[spigot], id "n_103_10", inlet "1", unsupported message : ' + msg_display(m))
                            }

function n_103_13_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                const newValue = msg_readFloatToken(m, 0)
                if (newValue !== n_103_13_STATE.currentValue) {
                    n_103_13_STATE.currentValue = newValue
                    n_103_9_RCVS_0(msg_floats([n_103_13_STATE.currentValue]))
                }
                return
    
            } else if (msg_isBang(m)) {
                n_103_9_RCVS_0(msg_floats([n_103_13_STATE.currentValue]))
                return 
    
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_103_13_STATE.currentValue = msg_readFloatToken(m, 1)
                return
            }
        
                                throw new Error('[change], id "n_103_13", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_103_9_RCVS_0(m) {
                                
                if (n_103_9_STATE.filterType === MSG_STRING_TOKEN) {
                    if (
                        (n_103_9_STATE.stringFilter === 'float'
                            && msg_isFloatToken(m, 0))
                        || (n_103_9_STATE.stringFilter === 'symbol'
                            && msg_isStringToken(m, 0))
                        || (n_103_9_STATE.stringFilter === 'list'
                            && msg_getLength(m) > 1)
                        || (n_103_9_STATE.stringFilter === 'bang' 
                            && msg_isBang(m))
                    ) {
                        n_103_3_RCVS_0(m)
                        return
                    
                    } else if (
                        msg_isStringToken(m, 0)
                        && msg_readStringToken(m, 0) === n_103_9_STATE.stringFilter
                    ) {
                        n_103_3_RCVS_0(msg_emptyToBang(msg_shift(m)))
                        return
                    }

                } else if (
                    msg_isFloatToken(m, 0)
                    && msg_readFloatToken(m, 0) === n_103_9_STATE.floatFilter
                ) {
                    n_103_3_RCVS_0(msg_emptyToBang(msg_shift(m)))
                    return
                }
            
                SND_TO_NULL(m)
            return
            
                                throw new Error('[route], id "n_103_9", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_103_3_RCVS_0(m) {
                                
        n_103_5_RCVS_0(msg_bang())
n_43_13_RCVS_0(msg_bang())
        return
    
                                throw new Error('[trigger], id "n_103_3", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_103_5_RCVS_0(m) {
                                
        n_103_4_RCVS_0(msg_bang())
n_103_14_RCVS_0(msg_bang())
        return
    
                                throw new Error('[trigger], id "n_103_5", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_103_14_RCVS_0(m) {
                                
            if (msg_getLength(m) === 1) {
                if (msg_isStringToken(m, 0)) {
                    const action = msg_readStringToken(m, 0)
                    if (action === 'bang' || action === 'start') {
                        n_delay_scheduleDelay(
                            n_103_14_STATE, 
                            () => n_103_6_RCVS_0(msg_bang()),
                            FRAME,
                        )
                        return
                    } else if (action === 'stop') {
                        n_delay_stop(n_103_14_STATE)
                        return
                    }
                    
                } else if (msg_isFloatToken(m, 0)) {
                    n_delay_setDelay(n_103_14_STATE, msg_readFloatToken(m, 0))
                    n_delay_scheduleDelay(
                        n_103_14_STATE,
                        () => n_103_6_RCVS_0(msg_bang()),
                        FRAME,
                    )
                    return 
                }
            
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN, MSG_STRING_TOKEN])
                && msg_readStringToken(m, 0) === 'tempo'
            ) {
                n_103_14_STATE.sampleRatio = computeUnitInSamples(
                    SAMPLE_RATE, 
                    msg_readFloatToken(m, 1), 
                    msg_readStringToken(m, 2)
                )
                return
            }
        
                                throw new Error('[delay], id "n_103_14", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_103_6_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_103_6_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_103_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_103_6_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_103_6_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_103_6_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_103_6_STATE.outMessages[0] = message
                n_103_6_STATE.messageTransferFunctions.splice(0, n_103_6_STATE.messageTransferFunctions.length - 1)
                n_103_6_STATE.messageTransferFunctions[0] = function (m) {
                    return n_103_6_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_103_6_STATE.messageTransferFunctions.length; i++) {
                    n_103_7_RCVS_0(n_103_6_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_103_6", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_103_4_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_103_4_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_103_4_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_103_4_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_103_4_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_103_4_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_103_4_STATE.outMessages[0] = message
                n_103_4_STATE.messageTransferFunctions.splice(0, n_103_4_STATE.messageTransferFunctions.length - 1)
                n_103_4_STATE.messageTransferFunctions[0] = function (m) {
                    return n_103_4_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_103_4_STATE.messageTransferFunctions.length; i++) {
                    n_103_7_RCVS_0(n_103_4_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_103_4", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_104_0_RCVS_0(m) {
                                
        n_104_6_RCVS_0(msg_bang())
n_104_2_RCVS_0(msg_bang())
        return
    
                                throw new Error('[trigger], id "n_104_0", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_104_2_RCVS_0(m) {
                                
            if (msg_getLength(m) === 1) {
                if (msg_isStringToken(m, 0)) {
                    const action = msg_readStringToken(m, 0)
                    if (action === 'bang' || action === 'start') {
                        n_delay_scheduleDelay(
                            n_104_2_STATE, 
                            () => n_104_5_RCVS_0(msg_bang()),
                            FRAME,
                        )
                        return
                    } else if (action === 'stop') {
                        n_delay_stop(n_104_2_STATE)
                        return
                    }
                    
                } else if (msg_isFloatToken(m, 0)) {
                    n_delay_setDelay(n_104_2_STATE, msg_readFloatToken(m, 0))
                    n_delay_scheduleDelay(
                        n_104_2_STATE,
                        () => n_104_5_RCVS_0(msg_bang()),
                        FRAME,
                    )
                    return 
                }
            
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN, MSG_STRING_TOKEN])
                && msg_readStringToken(m, 0) === 'tempo'
            ) {
                n_104_2_STATE.sampleRatio = computeUnitInSamples(
                    SAMPLE_RATE, 
                    msg_readFloatToken(m, 1), 
                    msg_readStringToken(m, 2)
                )
                return
            }
        
                                throw new Error('[delay], id "n_104_2", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_104_5_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_104_5_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_104_5_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_104_5_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_104_5_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_104_5_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_104_5_STATE.outMessages[0] = message
                n_104_5_STATE.messageTransferFunctions.splice(0, n_104_5_STATE.messageTransferFunctions.length - 1)
                n_104_5_STATE.messageTransferFunctions[0] = function (m) {
                    return n_104_5_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_104_5_STATE.messageTransferFunctions.length; i++) {
                    n_104_1_RCVS_0(n_104_5_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_104_5", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_104_1_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                n_float_int_setValueInt(n_104_1_STATE, msg_readFloatToken(m, 0))
                n_103_10_RCVS_1(msg_floats([n_104_1_STATE.value]))
                return 

            } else if (msg_isBang(m)) {
                n_103_10_RCVS_1(msg_floats([n_104_1_STATE.value]))
                return
                
            }
        
                                throw new Error('[int], id "n_104_1", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_104_6_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_104_6_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_104_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_104_6_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_104_6_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_104_6_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_104_6_STATE.outMessages[0] = message
                n_104_6_STATE.messageTransferFunctions.splice(0, n_104_6_STATE.messageTransferFunctions.length - 1)
                n_104_6_STATE.messageTransferFunctions[0] = function (m) {
                    return n_104_6_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_104_6_STATE.messageTransferFunctions.length; i++) {
                    n_104_1_RCVS_0(n_104_6_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_104_6", inlet "0", unsupported message : ' + msg_display(m))
                            }





function n_105_7_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                n_float_int_setValueInt(n_105_7_STATE, msg_readFloatToken(m, 0))
                n_105_2_RCVS_1(msg_floats([n_105_7_STATE.value]))
                return 

            } else if (msg_isBang(m)) {
                n_105_2_RCVS_1(msg_floats([n_105_7_STATE.value]))
                return
                
            }
        
                                throw new Error('[int], id "n_105_7", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_105_2_RCVS_0(m) {
                                
        if (!n_105_2_STATE.isClosed) {
            m_n_105_1_0__routemsg_RCVS_0(m)
        }
        return
    
                                throw new Error('[spigot], id "n_105_2", inlet "0", unsupported message : ' + msg_display(m))
                            }
function n_105_2_RCVS_1(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_spigot_setIsClosed(n_105_2_STATE, msg_readFloatToken(m, 0))
            return
        }
    
                                throw new Error('[spigot], id "n_105_2", inlet "1", unsupported message : ' + msg_display(m))
                            }

function m_n_105_1_0__routemsg_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                SND_TO_NULL(m)
                return
            } else {
                n_105_1_RCVS_0_message(m)
                return
            }
        
                                throw new Error('[_routemsg], id "m_n_105_1_0__routemsg", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_105_1_RCVS_0_message(m) {
                                
        if (msg_isBang(m)) {
            n_105_8_RCVS_0(msg_floats([n_105_1_STATE.currentValue]))
            return 
        }
    
                                throw new Error('[snapshot~], id "n_105_1", inlet "0_message", unsupported message : ' + msg_display(m))
                            }

function n_105_8_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                const newValue = msg_readFloatToken(m, 0)
                if (newValue !== n_105_8_STATE.currentValue) {
                    n_105_8_STATE.currentValue = newValue
                    n_105_11_RCVS_0(msg_floats([n_105_8_STATE.currentValue]))
                }
                return
    
            } else if (msg_isBang(m)) {
                n_105_11_RCVS_0(msg_floats([n_105_8_STATE.currentValue]))
                return 
    
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_105_8_STATE.currentValue = msg_readFloatToken(m, 1)
                return
            }
        
                                throw new Error('[change], id "n_105_8", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_105_11_RCVS_0(m) {
                                
        n_106_0_RCVS_0(msg_bang())
n_105_10_RCVS_0(msg_floats([messageTokenToFloat(m, 0)]))
        return
    
                                throw new Error('[trigger], id "n_105_11", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_105_10_RCVS_0(m) {
                                
        if (!n_105_10_STATE.isClosed) {
            n_105_13_RCVS_0(m)
        }
        return
    
                                throw new Error('[spigot], id "n_105_10", inlet "0", unsupported message : ' + msg_display(m))
                            }
function n_105_10_RCVS_1(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_spigot_setIsClosed(n_105_10_STATE, msg_readFloatToken(m, 0))
            return
        }
    
                                throw new Error('[spigot], id "n_105_10", inlet "1", unsupported message : ' + msg_display(m))
                            }

function n_105_13_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                const newValue = msg_readFloatToken(m, 0)
                if (newValue !== n_105_13_STATE.currentValue) {
                    n_105_13_STATE.currentValue = newValue
                    n_105_9_RCVS_0(msg_floats([n_105_13_STATE.currentValue]))
                }
                return
    
            } else if (msg_isBang(m)) {
                n_105_9_RCVS_0(msg_floats([n_105_13_STATE.currentValue]))
                return 
    
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_105_13_STATE.currentValue = msg_readFloatToken(m, 1)
                return
            }
        
                                throw new Error('[change], id "n_105_13", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_105_9_RCVS_0(m) {
                                
                if (n_105_9_STATE.filterType === MSG_STRING_TOKEN) {
                    if (
                        (n_105_9_STATE.stringFilter === 'float'
                            && msg_isFloatToken(m, 0))
                        || (n_105_9_STATE.stringFilter === 'symbol'
                            && msg_isStringToken(m, 0))
                        || (n_105_9_STATE.stringFilter === 'list'
                            && msg_getLength(m) > 1)
                        || (n_105_9_STATE.stringFilter === 'bang' 
                            && msg_isBang(m))
                    ) {
                        n_105_3_RCVS_0(m)
                        return
                    
                    } else if (
                        msg_isStringToken(m, 0)
                        && msg_readStringToken(m, 0) === n_105_9_STATE.stringFilter
                    ) {
                        n_105_3_RCVS_0(msg_emptyToBang(msg_shift(m)))
                        return
                    }

                } else if (
                    msg_isFloatToken(m, 0)
                    && msg_readFloatToken(m, 0) === n_105_9_STATE.floatFilter
                ) {
                    n_105_3_RCVS_0(msg_emptyToBang(msg_shift(m)))
                    return
                }
            
                SND_TO_NULL(m)
            return
            
                                throw new Error('[route], id "n_105_9", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_105_3_RCVS_0(m) {
                                
        n_105_5_RCVS_0(msg_bang())
n_43_25_RCVS_0(msg_bang())
        return
    
                                throw new Error('[trigger], id "n_105_3", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_105_5_RCVS_0(m) {
                                
        n_105_4_RCVS_0(msg_bang())
n_105_14_RCVS_0(msg_bang())
        return
    
                                throw new Error('[trigger], id "n_105_5", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_105_14_RCVS_0(m) {
                                
            if (msg_getLength(m) === 1) {
                if (msg_isStringToken(m, 0)) {
                    const action = msg_readStringToken(m, 0)
                    if (action === 'bang' || action === 'start') {
                        n_delay_scheduleDelay(
                            n_105_14_STATE, 
                            () => n_105_6_RCVS_0(msg_bang()),
                            FRAME,
                        )
                        return
                    } else if (action === 'stop') {
                        n_delay_stop(n_105_14_STATE)
                        return
                    }
                    
                } else if (msg_isFloatToken(m, 0)) {
                    n_delay_setDelay(n_105_14_STATE, msg_readFloatToken(m, 0))
                    n_delay_scheduleDelay(
                        n_105_14_STATE,
                        () => n_105_6_RCVS_0(msg_bang()),
                        FRAME,
                    )
                    return 
                }
            
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN, MSG_STRING_TOKEN])
                && msg_readStringToken(m, 0) === 'tempo'
            ) {
                n_105_14_STATE.sampleRatio = computeUnitInSamples(
                    SAMPLE_RATE, 
                    msg_readFloatToken(m, 1), 
                    msg_readStringToken(m, 2)
                )
                return
            }
        
                                throw new Error('[delay], id "n_105_14", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_105_6_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_105_6_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_105_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_105_6_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_105_6_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_105_6_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_105_6_STATE.outMessages[0] = message
                n_105_6_STATE.messageTransferFunctions.splice(0, n_105_6_STATE.messageTransferFunctions.length - 1)
                n_105_6_STATE.messageTransferFunctions[0] = function (m) {
                    return n_105_6_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_105_6_STATE.messageTransferFunctions.length; i++) {
                    n_105_7_RCVS_0(n_105_6_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_105_6", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_105_4_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_105_4_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_105_4_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_105_4_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_105_4_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_105_4_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_105_4_STATE.outMessages[0] = message
                n_105_4_STATE.messageTransferFunctions.splice(0, n_105_4_STATE.messageTransferFunctions.length - 1)
                n_105_4_STATE.messageTransferFunctions[0] = function (m) {
                    return n_105_4_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_105_4_STATE.messageTransferFunctions.length; i++) {
                    n_105_7_RCVS_0(n_105_4_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_105_4", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_106_0_RCVS_0(m) {
                                
        n_106_6_RCVS_0(msg_bang())
n_106_2_RCVS_0(msg_bang())
        return
    
                                throw new Error('[trigger], id "n_106_0", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_106_2_RCVS_0(m) {
                                
            if (msg_getLength(m) === 1) {
                if (msg_isStringToken(m, 0)) {
                    const action = msg_readStringToken(m, 0)
                    if (action === 'bang' || action === 'start') {
                        n_delay_scheduleDelay(
                            n_106_2_STATE, 
                            () => n_106_5_RCVS_0(msg_bang()),
                            FRAME,
                        )
                        return
                    } else if (action === 'stop') {
                        n_delay_stop(n_106_2_STATE)
                        return
                    }
                    
                } else if (msg_isFloatToken(m, 0)) {
                    n_delay_setDelay(n_106_2_STATE, msg_readFloatToken(m, 0))
                    n_delay_scheduleDelay(
                        n_106_2_STATE,
                        () => n_106_5_RCVS_0(msg_bang()),
                        FRAME,
                    )
                    return 
                }
            
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN, MSG_STRING_TOKEN])
                && msg_readStringToken(m, 0) === 'tempo'
            ) {
                n_106_2_STATE.sampleRatio = computeUnitInSamples(
                    SAMPLE_RATE, 
                    msg_readFloatToken(m, 1), 
                    msg_readStringToken(m, 2)
                )
                return
            }
        
                                throw new Error('[delay], id "n_106_2", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_106_5_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_106_5_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_106_5_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_106_5_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_106_5_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_106_5_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_106_5_STATE.outMessages[0] = message
                n_106_5_STATE.messageTransferFunctions.splice(0, n_106_5_STATE.messageTransferFunctions.length - 1)
                n_106_5_STATE.messageTransferFunctions[0] = function (m) {
                    return n_106_5_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_106_5_STATE.messageTransferFunctions.length; i++) {
                    n_106_1_RCVS_0(n_106_5_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_106_5", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_106_1_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                n_float_int_setValueInt(n_106_1_STATE, msg_readFloatToken(m, 0))
                n_105_10_RCVS_1(msg_floats([n_106_1_STATE.value]))
                return 

            } else if (msg_isBang(m)) {
                n_105_10_RCVS_1(msg_floats([n_106_1_STATE.value]))
                return
                
            }
        
                                throw new Error('[int], id "n_106_1", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_106_6_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_106_6_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_106_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_106_6_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_106_6_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_106_6_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_106_6_STATE.outMessages[0] = message
                n_106_6_STATE.messageTransferFunctions.splice(0, n_106_6_STATE.messageTransferFunctions.length - 1)
                n_106_6_STATE.messageTransferFunctions[0] = function (m) {
                    return n_106_6_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_106_6_STATE.messageTransferFunctions.length; i++) {
                    n_106_1_RCVS_0(n_106_6_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_106_6", inlet "0", unsupported message : ' + msg_display(m))
                            }





function n_45_0_RCVS_0(m) {
                                
            n_bang_receiveMessage(n_45_0_STATE, m)
            return
        
                                throw new Error('[bang], id "n_45_0", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_45_25_RCVS_0(m) {
                                
        if (msg_isBang(m)) {
            n_45_25_SNDS_0(msg_floats([Math.floor(Math.random() * n_45_25_STATE.maxValue)]))
            return
        } else if (
            msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
            && msg_readStringToken(m, 0) === 'seed'
        ) {
            console.log('WARNING : seed not implemented yet for [random]')
            return
        }
    
                                throw new Error('[random], id "n_45_25", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_45_1_RCVS_0(m) {
                                
                if (n_45_1_STATE.filterType === MSG_STRING_TOKEN) {
                    if (
                        (n_45_1_STATE.stringFilter === 'float'
                            && msg_isFloatToken(m, 0))
                        || (n_45_1_STATE.stringFilter === 'symbol'
                            && msg_isStringToken(m, 0))
                        || (n_45_1_STATE.stringFilter === 'list'
                            && msg_getLength(m) > 1)
                        || (n_45_1_STATE.stringFilter === 'bang' 
                            && msg_isBang(m))
                    ) {
                        n_45_2_RCVS_0(m)
                        return
                    
                    } else if (
                        msg_isStringToken(m, 0)
                        && msg_readStringToken(m, 0) === n_45_1_STATE.stringFilter
                    ) {
                        n_45_2_RCVS_0(msg_emptyToBang(msg_shift(m)))
                        return
                    }

                } else if (
                    msg_isFloatToken(m, 0)
                    && msg_readFloatToken(m, 0) === n_45_1_STATE.floatFilter
                ) {
                    n_45_2_RCVS_0(msg_emptyToBang(msg_shift(m)))
                    return
                }
            
                SND_TO_NULL(m)
            return
            
                                throw new Error('[route], id "n_45_1", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_45_2_RCVS_0(m) {
                                
            n_bang_receiveMessage(n_45_2_STATE, m)
            return
        
                                throw new Error('[bang], id "n_45_2", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_45_21_RCVS_0(m) {
                                
            msgBusPublish(n_45_21_STATE.busName, m)
            return
        
                                throw new Error('[send], id "n_45_21", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_45_3_RCVS_0(m) {
                                
                n_floatatom_receiveMessage(n_45_3_STATE, m)
                return
            
                                throw new Error('[floatatom], id "n_45_3", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_45_5_RCVS_0(m) {
                                
            n_bang_receiveMessage(n_45_5_STATE, m)
            return
        
                                throw new Error('[bang], id "n_45_5", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_45_26_RCVS_0(m) {
                                
        if (msg_isBang(m)) {
            n_45_26_SNDS_0(msg_floats([Math.floor(Math.random() * n_45_26_STATE.maxValue)]))
            return
        } else if (
            msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
            && msg_readStringToken(m, 0) === 'seed'
        ) {
            console.log('WARNING : seed not implemented yet for [random]')
            return
        }
    
                                throw new Error('[random], id "n_45_26", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_45_6_RCVS_0(m) {
                                
                if (n_45_6_STATE.filterType === MSG_STRING_TOKEN) {
                    if (
                        (n_45_6_STATE.stringFilter === 'float'
                            && msg_isFloatToken(m, 0))
                        || (n_45_6_STATE.stringFilter === 'symbol'
                            && msg_isStringToken(m, 0))
                        || (n_45_6_STATE.stringFilter === 'list'
                            && msg_getLength(m) > 1)
                        || (n_45_6_STATE.stringFilter === 'bang' 
                            && msg_isBang(m))
                    ) {
                        n_45_7_RCVS_0(m)
                        return
                    
                    } else if (
                        msg_isStringToken(m, 0)
                        && msg_readStringToken(m, 0) === n_45_6_STATE.stringFilter
                    ) {
                        n_45_7_RCVS_0(msg_emptyToBang(msg_shift(m)))
                        return
                    }

                } else if (
                    msg_isFloatToken(m, 0)
                    && msg_readFloatToken(m, 0) === n_45_6_STATE.floatFilter
                ) {
                    n_45_7_RCVS_0(msg_emptyToBang(msg_shift(m)))
                    return
                }
            
                SND_TO_NULL(m)
            return
            
                                throw new Error('[route], id "n_45_6", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_45_7_RCVS_0(m) {
                                
            n_bang_receiveMessage(n_45_7_STATE, m)
            return
        
                                throw new Error('[bang], id "n_45_7", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_45_20_RCVS_0(m) {
                                
            msgBusPublish(n_45_20_STATE.busName, m)
            return
        
                                throw new Error('[send], id "n_45_20", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_45_8_RCVS_0(m) {
                                
                n_floatatom_receiveMessage(n_45_8_STATE, m)
                return
            
                                throw new Error('[floatatom], id "n_45_8", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_45_9_RCVS_0(m) {
                                
            n_bang_receiveMessage(n_45_9_STATE, m)
            return
        
                                throw new Error('[bang], id "n_45_9", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_45_27_RCVS_0(m) {
                                
        if (msg_isBang(m)) {
            n_45_27_SNDS_0(msg_floats([Math.floor(Math.random() * n_45_27_STATE.maxValue)]))
            return
        } else if (
            msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
            && msg_readStringToken(m, 0) === 'seed'
        ) {
            console.log('WARNING : seed not implemented yet for [random]')
            return
        }
    
                                throw new Error('[random], id "n_45_27", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_45_10_RCVS_0(m) {
                                
                if (n_45_10_STATE.filterType === MSG_STRING_TOKEN) {
                    if (
                        (n_45_10_STATE.stringFilter === 'float'
                            && msg_isFloatToken(m, 0))
                        || (n_45_10_STATE.stringFilter === 'symbol'
                            && msg_isStringToken(m, 0))
                        || (n_45_10_STATE.stringFilter === 'list'
                            && msg_getLength(m) > 1)
                        || (n_45_10_STATE.stringFilter === 'bang' 
                            && msg_isBang(m))
                    ) {
                        n_45_11_RCVS_0(m)
                        return
                    
                    } else if (
                        msg_isStringToken(m, 0)
                        && msg_readStringToken(m, 0) === n_45_10_STATE.stringFilter
                    ) {
                        n_45_11_RCVS_0(msg_emptyToBang(msg_shift(m)))
                        return
                    }

                } else if (
                    msg_isFloatToken(m, 0)
                    && msg_readFloatToken(m, 0) === n_45_10_STATE.floatFilter
                ) {
                    n_45_11_RCVS_0(msg_emptyToBang(msg_shift(m)))
                    return
                }
            
                SND_TO_NULL(m)
            return
            
                                throw new Error('[route], id "n_45_10", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_45_11_RCVS_0(m) {
                                
            n_bang_receiveMessage(n_45_11_STATE, m)
            return
        
                                throw new Error('[bang], id "n_45_11", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_45_19_RCVS_0(m) {
                                
            msgBusPublish(n_45_19_STATE.busName, m)
            return
        
                                throw new Error('[send], id "n_45_19", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_45_12_RCVS_0(m) {
                                
                n_floatatom_receiveMessage(n_45_12_STATE, m)
                return
            
                                throw new Error('[floatatom], id "n_45_12", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_45_13_RCVS_0(m) {
                                
            n_bang_receiveMessage(n_45_13_STATE, m)
            return
        
                                throw new Error('[bang], id "n_45_13", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_45_17_RCVS_0(m) {
                                
        if (msg_isBang(m)) {
            n_45_17_SNDS_0(msg_floats([Math.floor(Math.random() * n_45_17_STATE.maxValue)]))
            return
        } else if (
            msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
            && msg_readStringToken(m, 0) === 'seed'
        ) {
            console.log('WARNING : seed not implemented yet for [random]')
            return
        }
    
                                throw new Error('[random], id "n_45_17", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_45_14_RCVS_0(m) {
                                
                if (n_45_14_STATE.filterType === MSG_STRING_TOKEN) {
                    if (
                        (n_45_14_STATE.stringFilter === 'float'
                            && msg_isFloatToken(m, 0))
                        || (n_45_14_STATE.stringFilter === 'symbol'
                            && msg_isStringToken(m, 0))
                        || (n_45_14_STATE.stringFilter === 'list'
                            && msg_getLength(m) > 1)
                        || (n_45_14_STATE.stringFilter === 'bang' 
                            && msg_isBang(m))
                    ) {
                        n_45_15_RCVS_0(m)
                        return
                    
                    } else if (
                        msg_isStringToken(m, 0)
                        && msg_readStringToken(m, 0) === n_45_14_STATE.stringFilter
                    ) {
                        n_45_15_RCVS_0(msg_emptyToBang(msg_shift(m)))
                        return
                    }

                } else if (
                    msg_isFloatToken(m, 0)
                    && msg_readFloatToken(m, 0) === n_45_14_STATE.floatFilter
                ) {
                    n_45_15_RCVS_0(msg_emptyToBang(msg_shift(m)))
                    return
                }
            
                SND_TO_NULL(m)
            return
            
                                throw new Error('[route], id "n_45_14", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_45_15_RCVS_0(m) {
                                
            n_bang_receiveMessage(n_45_15_STATE, m)
            return
        
                                throw new Error('[bang], id "n_45_15", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_45_18_RCVS_0(m) {
                                
            msgBusPublish(n_45_18_STATE.busName, m)
            return
        
                                throw new Error('[send], id "n_45_18", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_45_16_RCVS_0(m) {
                                
                n_floatatom_receiveMessage(n_45_16_STATE, m)
                return
            
                                throw new Error('[floatatom], id "n_45_16", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_45_28_RCVS_0(m) {
                                
            n_bang_receiveMessage(n_45_28_STATE, m)
            return
        
                                throw new Error('[bang], id "n_45_28", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_45_29_RCVS_0(m) {
                                
        if (msg_isBang(m)) {
            n_45_30_RCVS_0(msg_floats([Math.floor(Math.random() * n_45_29_STATE.maxValue)]))
            return
        } else if (
            msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
            && msg_readStringToken(m, 0) === 'seed'
        ) {
            console.log('WARNING : seed not implemented yet for [random]')
            return
        }
    
                                throw new Error('[random], id "n_45_29", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_45_30_RCVS_0(m) {
                                
                
                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 0
                        ) {
                            n_45_31_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 1
                        ) {
                            n_45_32_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 2
                        ) {
                            n_45_33_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 3
                        ) {
                            n_45_34_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                SND_TO_NULL(m)
                return
            
                                throw new Error('[route], id "n_45_30", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_45_31_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_45_31_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_45_31_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_45_31_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_45_31_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_45_31_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_45_31_STATE.outMessages[0] = message
                n_45_31_STATE.messageTransferFunctions.splice(0, n_45_31_STATE.messageTransferFunctions.length - 1)
                n_45_31_STATE.messageTransferFunctions[0] = function (m) {
                    return n_45_31_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_45_31_STATE.messageTransferFunctions.length; i++) {
                    n_45_35_RCVS_0(n_45_31_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_45_31", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_45_35_RCVS_0(m) {
                                
            msgBusPublish(n_45_35_STATE.busName, m)
            return
        
                                throw new Error('[send], id "n_45_35", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_45_32_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_45_32_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_45_32_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_45_32_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_45_32_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_45_32_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_45_32_STATE.outMessages[0] = message
                n_45_32_STATE.messageTransferFunctions.splice(0, n_45_32_STATE.messageTransferFunctions.length - 1)
                n_45_32_STATE.messageTransferFunctions[0] = function (m) {
                    return n_45_32_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_45_32_STATE.messageTransferFunctions.length; i++) {
                    n_45_35_RCVS_0(n_45_32_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_45_32", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_45_33_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_45_33_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_45_33_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_45_33_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_45_33_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_45_33_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_45_33_STATE.outMessages[0] = message
                n_45_33_STATE.messageTransferFunctions.splice(0, n_45_33_STATE.messageTransferFunctions.length - 1)
                n_45_33_STATE.messageTransferFunctions[0] = function (m) {
                    return n_45_33_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_45_33_STATE.messageTransferFunctions.length; i++) {
                    n_45_35_RCVS_0(n_45_33_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_45_33", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_45_34_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_45_34_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_45_34_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_45_34_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_45_34_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_45_34_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_45_34_STATE.outMessages[0] = message
                n_45_34_STATE.messageTransferFunctions.splice(0, n_45_34_STATE.messageTransferFunctions.length - 1)
                n_45_34_STATE.messageTransferFunctions[0] = function (m) {
                    return n_45_34_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_45_34_STATE.messageTransferFunctions.length; i++) {
                    n_45_35_RCVS_0(n_45_34_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_45_34", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_45_36_RCVS_0(m) {
                                
            n_bang_receiveMessage(n_45_36_STATE, m)
            return
        
                                throw new Error('[bang], id "n_45_36", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_45_40_RCVS_0(m) {
                                
        if (msg_isBang(m)) {
            n_45_40_SNDS_0(msg_floats([Math.floor(Math.random() * n_45_40_STATE.maxValue)]))
            return
        } else if (
            msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
            && msg_readStringToken(m, 0) === 'seed'
        ) {
            console.log('WARNING : seed not implemented yet for [random]')
            return
        }
    
                                throw new Error('[random], id "n_45_40", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_45_37_RCVS_0(m) {
                                
                if (n_45_37_STATE.filterType === MSG_STRING_TOKEN) {
                    if (
                        (n_45_37_STATE.stringFilter === 'float'
                            && msg_isFloatToken(m, 0))
                        || (n_45_37_STATE.stringFilter === 'symbol'
                            && msg_isStringToken(m, 0))
                        || (n_45_37_STATE.stringFilter === 'list'
                            && msg_getLength(m) > 1)
                        || (n_45_37_STATE.stringFilter === 'bang' 
                            && msg_isBang(m))
                    ) {
                        n_45_38_RCVS_0(m)
                        return
                    
                    } else if (
                        msg_isStringToken(m, 0)
                        && msg_readStringToken(m, 0) === n_45_37_STATE.stringFilter
                    ) {
                        n_45_38_RCVS_0(msg_emptyToBang(msg_shift(m)))
                        return
                    }

                } else if (
                    msg_isFloatToken(m, 0)
                    && msg_readFloatToken(m, 0) === n_45_37_STATE.floatFilter
                ) {
                    n_45_38_RCVS_0(msg_emptyToBang(msg_shift(m)))
                    return
                }
            
                SND_TO_NULL(m)
            return
            
                                throw new Error('[route], id "n_45_37", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_45_38_RCVS_0(m) {
                                
            n_bang_receiveMessage(n_45_38_STATE, m)
            return
        
                                throw new Error('[bang], id "n_45_38", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_45_42_RCVS_0(m) {
                                
            msgBusPublish(n_45_42_STATE.busName, m)
            return
        
                                throw new Error('[send], id "n_45_42", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_45_39_RCVS_0(m) {
                                
                n_floatatom_receiveMessage(n_45_39_STATE, m)
                return
            
                                throw new Error('[floatatom], id "n_45_39", inlet "0", unsupported message : ' + msg_display(m))
                            }





function n_45_45_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_45_45_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_45_45_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_45_45_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_45_45_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_45_45_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_45_45_STATE.outMessages[0] = message
                n_45_45_STATE.messageTransferFunctions.splice(0, n_45_45_STATE.messageTransferFunctions.length - 1)
                n_45_45_STATE.messageTransferFunctions[0] = function (m) {
                    return n_45_45_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_45_45_STATE.messageTransferFunctions.length; i++) {
                    n_107_17_RCVS_1(n_45_45_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_45_45", inlet "0", unsupported message : ' + msg_display(m))
                            }
let n_107_17_OUTS_0 = 0
function n_107_17_RCVS_1(m) {
                                
                            n_107_17_STATE.floatInputs.set(1, messageTokenToFloat(m, 0))
                            return
                        
                                throw new Error('[expr~], id "n_107_17", inlet "1", unsupported message : ' + msg_display(m))
                            }

function n_45_46_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_45_46_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_45_46_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_45_46_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_45_46_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_45_46_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_45_46_STATE.outMessages[0] = message
                n_45_46_STATE.messageTransferFunctions.splice(0, n_45_46_STATE.messageTransferFunctions.length - 1)
                n_45_46_STATE.messageTransferFunctions[0] = function (m) {
                    return n_45_46_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_45_46_STATE.messageTransferFunctions.length; i++) {
                    n_109_17_RCVS_1(n_45_46_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_45_46", inlet "0", unsupported message : ' + msg_display(m))
                            }
let n_109_17_OUTS_0 = 0
function n_109_17_RCVS_1(m) {
                                
                            n_109_17_STATE.floatInputs.set(1, messageTokenToFloat(m, 0))
                            return
                        
                                throw new Error('[expr~], id "n_109_17", inlet "1", unsupported message : ' + msg_display(m))
                            }

function n_45_47_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_45_47_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_45_47_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_45_47_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_45_47_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_45_47_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_45_47_STATE.outMessages[0] = message
                n_45_47_STATE.messageTransferFunctions.splice(0, n_45_47_STATE.messageTransferFunctions.length - 1)
                n_45_47_STATE.messageTransferFunctions[0] = function (m) {
                    return n_45_47_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_45_47_STATE.messageTransferFunctions.length; i++) {
                    n_111_17_RCVS_1(n_45_47_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_45_47", inlet "0", unsupported message : ' + msg_display(m))
                            }
let n_111_17_OUTS_0 = 0
function n_111_17_RCVS_1(m) {
                                
                            n_111_17_STATE.floatInputs.set(1, messageTokenToFloat(m, 0))
                            return
                        
                                throw new Error('[expr~], id "n_111_17", inlet "1", unsupported message : ' + msg_display(m))
                            }

function n_45_48_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_45_48_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_45_48_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_45_48_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_45_48_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_45_48_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_45_48_STATE.outMessages[0] = message
                n_45_48_STATE.messageTransferFunctions.splice(0, n_45_48_STATE.messageTransferFunctions.length - 1)
                n_45_48_STATE.messageTransferFunctions[0] = function (m) {
                    return n_45_48_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_45_48_STATE.messageTransferFunctions.length; i++) {
                    n_113_17_RCVS_1(n_45_48_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_45_48", inlet "0", unsupported message : ' + msg_display(m))
                            }
let n_113_17_OUTS_0 = 0
function n_113_17_RCVS_1(m) {
                                
                            n_113_17_STATE.floatInputs.set(1, messageTokenToFloat(m, 0))
                            return
                        
                                throw new Error('[expr~], id "n_113_17", inlet "1", unsupported message : ' + msg_display(m))
                            }

function n_45_49_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_45_49_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_45_49_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_45_49_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_45_49_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_45_49_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_45_49_STATE.outMessages[0] = message
                n_45_49_STATE.messageTransferFunctions.splice(0, n_45_49_STATE.messageTransferFunctions.length - 1)
                n_45_49_STATE.messageTransferFunctions[0] = function (m) {
                    return n_45_49_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_45_49_STATE.messageTransferFunctions.length; i++) {
                    n_115_17_RCVS_1(n_45_49_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_45_49", inlet "0", unsupported message : ' + msg_display(m))
                            }
let n_115_17_OUTS_0 = 0
function n_115_17_RCVS_1(m) {
                                
                            n_115_17_STATE.floatInputs.set(1, messageTokenToFloat(m, 0))
                            return
                        
                                throw new Error('[expr~], id "n_115_17", inlet "1", unsupported message : ' + msg_display(m))
                            }

function n_45_50_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_45_50_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_45_50_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_45_50_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_45_50_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_45_50_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_45_50_STATE.outMessages[0] = message
                n_45_50_STATE.messageTransferFunctions.splice(0, n_45_50_STATE.messageTransferFunctions.length - 1)
                n_45_50_STATE.messageTransferFunctions[0] = function (m) {
                    return n_45_50_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_45_50_STATE.messageTransferFunctions.length; i++) {
                    n_117_17_RCVS_1(n_45_50_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_45_50", inlet "0", unsupported message : ' + msg_display(m))
                            }
let n_117_17_OUTS_0 = 0
function n_117_17_RCVS_1(m) {
                                
                            n_117_17_STATE.floatInputs.set(1, messageTokenToFloat(m, 0))
                            return
                        
                                throw new Error('[expr~], id "n_117_17", inlet "1", unsupported message : ' + msg_display(m))
                            }

function n_46_0_RCVS_0(m) {
                                
            n_bang_receiveMessage(n_46_0_STATE, m)
            return
        
                                throw new Error('[bang], id "n_46_0", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_46_1_RCVS_0(m) {
                                
        if (msg_isBang(m)) {
            n_46_2_RCVS_0(msg_floats([Math.floor(Math.random() * n_46_1_STATE.maxValue)]))
            return
        } else if (
            msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
            && msg_readStringToken(m, 0) === 'seed'
        ) {
            console.log('WARNING : seed not implemented yet for [random]')
            return
        }
    
                                throw new Error('[random], id "n_46_1", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_46_2_RCVS_0(m) {
                                
                if (n_46_2_STATE.filterType === MSG_STRING_TOKEN) {
                    if (
                        (n_46_2_STATE.stringFilter === 'float'
                            && msg_isFloatToken(m, 0))
                        || (n_46_2_STATE.stringFilter === 'symbol'
                            && msg_isStringToken(m, 0))
                        || (n_46_2_STATE.stringFilter === 'list'
                            && msg_getLength(m) > 1)
                        || (n_46_2_STATE.stringFilter === 'bang' 
                            && msg_isBang(m))
                    ) {
                        n_46_4_RCVS_0(m)
                        return
                    
                    } else if (
                        msg_isStringToken(m, 0)
                        && msg_readStringToken(m, 0) === n_46_2_STATE.stringFilter
                    ) {
                        n_46_4_RCVS_0(msg_emptyToBang(msg_shift(m)))
                        return
                    }

                } else if (
                    msg_isFloatToken(m, 0)
                    && msg_readFloatToken(m, 0) === n_46_2_STATE.floatFilter
                ) {
                    n_46_4_RCVS_0(msg_emptyToBang(msg_shift(m)))
                    return
                }
            
                n_46_3_RCVS_0(m)
            return
            
                                throw new Error('[route], id "n_46_2", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_46_4_RCVS_0(m) {
                                
        if (msg_isBang(m)) {
            n_46_34_RCVS_0(msg_floats([Math.floor(Math.random() * n_46_4_STATE.maxValue)]))
            return
        } else if (
            msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
            && msg_readStringToken(m, 0) === 'seed'
        ) {
            console.log('WARNING : seed not implemented yet for [random]')
            return
        }
    
                                throw new Error('[random], id "n_46_4", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_46_34_RCVS_0(m) {
                                
                if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                    n_mul_setLeft(n_46_34_STATE, msg_readFloatToken(m, 0))
                    n_46_40_RCVS_0(msg_floats([n_46_34_STATE.leftOp * n_46_34_STATE.rightOp]))
                    return
                
                } else if (msg_isBang(m)) {
                    n_46_40_RCVS_0(msg_floats([n_46_34_STATE.leftOp * n_46_34_STATE.rightOp]))
                    return
                }
            
                                throw new Error('[*], id "n_46_34", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_46_40_RCVS_0(m) {
                                
            msgBusPublish(n_46_40_STATE.busName, m)
            return
        
                                throw new Error('[send], id "n_46_40", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_46_3_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_46_3_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_46_3_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_46_3_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_46_3_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_46_3_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_46_3_STATE.outMessages[0] = message
                n_46_3_STATE.messageTransferFunctions.splice(0, n_46_3_STATE.messageTransferFunctions.length - 1)
                n_46_3_STATE.messageTransferFunctions[0] = function (m) {
                    return n_46_3_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_46_3_STATE.messageTransferFunctions.length; i++) {
                    n_46_34_RCVS_0(n_46_3_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_46_3", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_46_5_RCVS_0(m) {
                                
            n_bang_receiveMessage(n_46_5_STATE, m)
            return
        
                                throw new Error('[bang], id "n_46_5", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_46_8_RCVS_0(m) {
                                
        if (msg_isBang(m)) {
            n_46_19_RCVS_0(msg_floats([Math.floor(Math.random() * n_46_8_STATE.maxValue)]))
            return
        } else if (
            msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
            && msg_readStringToken(m, 0) === 'seed'
        ) {
            console.log('WARNING : seed not implemented yet for [random]')
            return
        }
    
                                throw new Error('[random], id "n_46_8", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_46_19_RCVS_0(m) {
                                
                
                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 0
                        ) {
                            n_46_6_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 1
                        ) {
                            n_46_17_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 2
                        ) {
                            n_46_7_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 3
                        ) {
                            n_46_16_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                SND_TO_NULL(m)
                return
            
                                throw new Error('[route], id "n_46_19", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_46_6_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_46_6_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_46_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_46_6_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_46_6_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_46_6_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_46_6_STATE.outMessages[0] = message
                n_46_6_STATE.messageTransferFunctions.splice(0, n_46_6_STATE.messageTransferFunctions.length - 1)
                n_46_6_STATE.messageTransferFunctions[0] = function (m) {
                    return n_46_6_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_46_6_STATE.messageTransferFunctions.length; i++) {
                    n_46_41_RCVS_0(n_46_6_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_46_6", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_46_41_RCVS_0(m) {
                                
            msgBusPublish(n_46_41_STATE.busName, m)
            return
        
                                throw new Error('[send], id "n_46_41", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_46_17_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_46_17_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_46_17_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_46_17_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_46_17_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_46_17_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_46_17_STATE.outMessages[0] = message
                n_46_17_STATE.messageTransferFunctions.splice(0, n_46_17_STATE.messageTransferFunctions.length - 1)
                n_46_17_STATE.messageTransferFunctions[0] = function (m) {
                    return n_46_17_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_46_17_STATE.messageTransferFunctions.length; i++) {
                    n_46_41_RCVS_0(n_46_17_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_46_17", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_46_7_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_46_7_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_46_7_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_46_7_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_46_7_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_46_7_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_46_7_STATE.outMessages[0] = message
                n_46_7_STATE.messageTransferFunctions.splice(0, n_46_7_STATE.messageTransferFunctions.length - 1)
                n_46_7_STATE.messageTransferFunctions[0] = function (m) {
                    return n_46_7_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_46_7_STATE.messageTransferFunctions.length; i++) {
                    n_46_41_RCVS_0(n_46_7_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_46_7", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_46_16_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_46_16_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_46_16_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_46_16_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_46_16_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_46_16_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_46_16_STATE.outMessages[0] = message
                n_46_16_STATE.messageTransferFunctions.splice(0, n_46_16_STATE.messageTransferFunctions.length - 1)
                n_46_16_STATE.messageTransferFunctions[0] = function (m) {
                    return n_46_16_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_46_16_STATE.messageTransferFunctions.length; i++) {
                    n_46_41_RCVS_0(n_46_16_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_46_16", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_46_9_RCVS_0(m) {
                                
            n_bang_receiveMessage(n_46_9_STATE, m)
            return
        
                                throw new Error('[bang], id "n_46_9", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_46_10_RCVS_0(m) {
                                
        if (msg_isBang(m)) {
            n_46_11_RCVS_0(msg_floats([Math.floor(Math.random() * n_46_10_STATE.maxValue)]))
            return
        } else if (
            msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
            && msg_readStringToken(m, 0) === 'seed'
        ) {
            console.log('WARNING : seed not implemented yet for [random]')
            return
        }
    
                                throw new Error('[random], id "n_46_10", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_46_11_RCVS_0(m) {
                                
                if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                    n_mul_setLeft(n_46_11_STATE, msg_readFloatToken(m, 0))
                    n_46_35_RCVS_0(msg_floats([n_46_11_STATE.leftOp * n_46_11_STATE.rightOp]))
                    return
                
                } else if (msg_isBang(m)) {
                    n_46_35_RCVS_0(msg_floats([n_46_11_STATE.leftOp * n_46_11_STATE.rightOp]))
                    return
                }
            
                                throw new Error('[*], id "n_46_11", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_46_35_RCVS_0(m) {
                                
            msgBusPublish(n_46_35_STATE.busName, m)
            return
        
                                throw new Error('[send], id "n_46_35", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_46_12_RCVS_0(m) {
                                
            n_bang_receiveMessage(n_46_12_STATE, m)
            return
        
                                throw new Error('[bang], id "n_46_12", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_46_13_RCVS_0(m) {
                                
        if (msg_isBang(m)) {
            n_46_14_RCVS_0(msg_floats([Math.floor(Math.random() * n_46_13_STATE.maxValue)]))
            return
        } else if (
            msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
            && msg_readStringToken(m, 0) === 'seed'
        ) {
            console.log('WARNING : seed not implemented yet for [random]')
            return
        }
    
                                throw new Error('[random], id "n_46_13", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_46_14_RCVS_0(m) {
                                
                if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                    n_mul_setLeft(n_46_14_STATE, msg_readFloatToken(m, 0))
                    n_46_42_RCVS_0(msg_floats([n_46_14_STATE.leftOp * n_46_14_STATE.rightOp]))
                    return
                
                } else if (msg_isBang(m)) {
                    n_46_42_RCVS_0(msg_floats([n_46_14_STATE.leftOp * n_46_14_STATE.rightOp]))
                    return
                }
            
                                throw new Error('[*], id "n_46_14", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_46_42_RCVS_0(m) {
                                
            msgBusPublish(n_46_42_STATE.busName, m)
            return
        
                                throw new Error('[send], id "n_46_42", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_46_15_RCVS_0(m) {
                                
            n_bang_receiveMessage(n_46_15_STATE, m)
            return
        
                                throw new Error('[bang], id "n_46_15", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_46_33_RCVS_0(m) {
                                
        n_46_32_RCVS_0(msg_bang())
n_46_24_RCVS_0(msg_bang())
        return
    
                                throw new Error('[trigger], id "n_46_33", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_46_24_RCVS_0(m) {
                                
        if (msg_isBang(m)) {
            n_46_25_RCVS_0(msg_floats([Math.floor(Math.random() * n_46_24_STATE.maxValue)]))
            return
        } else if (
            msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
            && msg_readStringToken(m, 0) === 'seed'
        ) {
            console.log('WARNING : seed not implemented yet for [random]')
            return
        }
    
                                throw new Error('[random], id "n_46_24", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_46_25_RCVS_0(m) {
                                
                
                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 0
                        ) {
                            n_46_21_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 1
                        ) {
                            n_46_22_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 2
                        ) {
                            n_46_27_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 3
                        ) {
                            n_46_20_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 4
                        ) {
                            n_46_23_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 5
                        ) {
                            n_46_26_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                SND_TO_NULL(m)
                return
            
                                throw new Error('[route], id "n_46_25", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_46_21_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_46_21_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_46_21_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_46_21_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_46_21_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_46_21_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_46_21_STATE.outMessages[0] = message
                n_46_21_STATE.messageTransferFunctions.splice(0, n_46_21_STATE.messageTransferFunctions.length - 1)
                n_46_21_STATE.messageTransferFunctions[0] = function (m) {
                    return n_46_21_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_46_21_STATE.messageTransferFunctions.length; i++) {
                    m_n_46_31_0__routemsg_RCVS_0(n_46_21_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_46_21", inlet "0", unsupported message : ' + msg_display(m))
                            }

function m_n_46_31_0__routemsg_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                m_n_46_31_0_sig_RCVS_0(m)
                return
            } else {
                SND_TO_NULL(m)
                return
            }
        
                                throw new Error('[_routemsg], id "m_n_46_31_0__routemsg", inlet "0", unsupported message : ' + msg_display(m))
                            }

function m_n_46_31_0_sig_RCVS_0(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            m_n_46_31_0_sig_STATE.currentValue = msg_readFloatToken(m, 0)
            return
        }
    
                                throw new Error('[sig~], id "m_n_46_31_0_sig", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_46_22_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_46_22_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_46_22_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_46_22_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_46_22_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_46_22_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_46_22_STATE.outMessages[0] = message
                n_46_22_STATE.messageTransferFunctions.splice(0, n_46_22_STATE.messageTransferFunctions.length - 1)
                n_46_22_STATE.messageTransferFunctions[0] = function (m) {
                    return n_46_22_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_46_22_STATE.messageTransferFunctions.length; i++) {
                    m_n_46_31_0__routemsg_RCVS_0(n_46_22_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_46_22", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_46_27_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_46_27_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_46_27_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_46_27_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_46_27_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_46_27_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_46_27_STATE.outMessages[0] = message
                n_46_27_STATE.messageTransferFunctions.splice(0, n_46_27_STATE.messageTransferFunctions.length - 1)
                n_46_27_STATE.messageTransferFunctions[0] = function (m) {
                    return n_46_27_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_46_27_STATE.messageTransferFunctions.length; i++) {
                    m_n_46_31_0__routemsg_RCVS_0(n_46_27_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_46_27", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_46_20_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_46_20_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_46_20_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_46_20_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_46_20_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_46_20_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_46_20_STATE.outMessages[0] = message
                n_46_20_STATE.messageTransferFunctions.splice(0, n_46_20_STATE.messageTransferFunctions.length - 1)
                n_46_20_STATE.messageTransferFunctions[0] = function (m) {
                    return n_46_20_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_46_20_STATE.messageTransferFunctions.length; i++) {
                    m_n_46_31_0__routemsg_RCVS_0(n_46_20_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_46_20", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_46_23_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_46_23_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_46_23_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_46_23_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_46_23_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_46_23_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_46_23_STATE.outMessages[0] = message
                n_46_23_STATE.messageTransferFunctions.splice(0, n_46_23_STATE.messageTransferFunctions.length - 1)
                n_46_23_STATE.messageTransferFunctions[0] = function (m) {
                    return n_46_23_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_46_23_STATE.messageTransferFunctions.length; i++) {
                    m_n_46_31_0__routemsg_RCVS_0(n_46_23_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_46_23", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_46_26_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_46_26_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_46_26_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_46_26_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_46_26_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_46_26_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_46_26_STATE.outMessages[0] = message
                n_46_26_STATE.messageTransferFunctions.splice(0, n_46_26_STATE.messageTransferFunctions.length - 1)
                n_46_26_STATE.messageTransferFunctions[0] = function (m) {
                    return n_46_26_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_46_26_STATE.messageTransferFunctions.length; i++) {
                    m_n_46_31_0__routemsg_RCVS_0(n_46_26_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_46_26", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_46_32_RCVS_0(m) {
                                
        if (msg_isBang(m)) {
            n_46_28_RCVS_0(msg_floats([Math.floor(Math.random() * n_46_32_STATE.maxValue)]))
            return
        } else if (
            msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
            && msg_readStringToken(m, 0) === 'seed'
        ) {
            console.log('WARNING : seed not implemented yet for [random]')
            return
        }
    
                                throw new Error('[random], id "n_46_32", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_46_28_RCVS_0(m) {
                                
                if (n_46_28_STATE.filterType === MSG_STRING_TOKEN) {
                    if (
                        (n_46_28_STATE.stringFilter === 'float'
                            && msg_isFloatToken(m, 0))
                        || (n_46_28_STATE.stringFilter === 'symbol'
                            && msg_isStringToken(m, 0))
                        || (n_46_28_STATE.stringFilter === 'list'
                            && msg_getLength(m) > 1)
                        || (n_46_28_STATE.stringFilter === 'bang' 
                            && msg_isBang(m))
                    ) {
                        n_46_29_RCVS_0(m)
                        return
                    
                    } else if (
                        msg_isStringToken(m, 0)
                        && msg_readStringToken(m, 0) === n_46_28_STATE.stringFilter
                    ) {
                        n_46_29_RCVS_0(msg_emptyToBang(msg_shift(m)))
                        return
                    }

                } else if (
                    msg_isFloatToken(m, 0)
                    && msg_readFloatToken(m, 0) === n_46_28_STATE.floatFilter
                ) {
                    n_46_29_RCVS_0(msg_emptyToBang(msg_shift(m)))
                    return
                }
            
                n_46_30_RCVS_0(m)
            return
            
                                throw new Error('[route], id "n_46_28", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_46_29_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_46_29_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_46_29_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_46_29_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_46_29_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_46_29_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_46_29_STATE.outMessages[0] = message
                n_46_29_STATE.messageTransferFunctions.splice(0, n_46_29_STATE.messageTransferFunctions.length - 1)
                n_46_29_STATE.messageTransferFunctions[0] = function (m) {
                    return n_46_29_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_46_29_STATE.messageTransferFunctions.length; i++) {
                    m_n_46_31_1__routemsg_RCVS_0(n_46_29_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_46_29", inlet "0", unsupported message : ' + msg_display(m))
                            }

function m_n_46_31_1__routemsg_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                m_n_46_31_1_sig_RCVS_0(m)
                return
            } else {
                SND_TO_NULL(m)
                return
            }
        
                                throw new Error('[_routemsg], id "m_n_46_31_1__routemsg", inlet "0", unsupported message : ' + msg_display(m))
                            }

function m_n_46_31_1_sig_RCVS_0(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            m_n_46_31_1_sig_STATE.currentValue = msg_readFloatToken(m, 0)
            return
        }
    
                                throw new Error('[sig~], id "m_n_46_31_1_sig", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_46_30_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_46_30_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_46_30_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_46_30_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_46_30_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_46_30_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_46_30_STATE.outMessages[0] = message
                n_46_30_STATE.messageTransferFunctions.splice(0, n_46_30_STATE.messageTransferFunctions.length - 1)
                n_46_30_STATE.messageTransferFunctions[0] = function (m) {
                    return n_46_30_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_46_30_STATE.messageTransferFunctions.length; i++) {
                    m_n_46_31_1__routemsg_RCVS_0(n_46_30_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_46_30", inlet "0", unsupported message : ' + msg_display(m))
                            }











function n_107_7_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                n_float_int_setValueInt(n_107_7_STATE, msg_readFloatToken(m, 0))
                n_107_2_RCVS_1(msg_floats([n_107_7_STATE.value]))
                return 

            } else if (msg_isBang(m)) {
                n_107_2_RCVS_1(msg_floats([n_107_7_STATE.value]))
                return
                
            }
        
                                throw new Error('[int], id "n_107_7", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_107_2_RCVS_0(m) {
                                
        if (!n_107_2_STATE.isClosed) {
            m_n_107_1_0__routemsg_RCVS_0(m)
        }
        return
    
                                throw new Error('[spigot], id "n_107_2", inlet "0", unsupported message : ' + msg_display(m))
                            }
function n_107_2_RCVS_1(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_spigot_setIsClosed(n_107_2_STATE, msg_readFloatToken(m, 0))
            return
        }
    
                                throw new Error('[spigot], id "n_107_2", inlet "1", unsupported message : ' + msg_display(m))
                            }

function m_n_107_1_0__routemsg_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                SND_TO_NULL(m)
                return
            } else {
                n_107_1_RCVS_0_message(m)
                return
            }
        
                                throw new Error('[_routemsg], id "m_n_107_1_0__routemsg", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_107_1_RCVS_0_message(m) {
                                
        if (msg_isBang(m)) {
            n_107_8_RCVS_0(msg_floats([n_107_1_STATE.currentValue]))
            return 
        }
    
                                throw new Error('[snapshot~], id "n_107_1", inlet "0_message", unsupported message : ' + msg_display(m))
                            }

function n_107_8_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                const newValue = msg_readFloatToken(m, 0)
                if (newValue !== n_107_8_STATE.currentValue) {
                    n_107_8_STATE.currentValue = newValue
                    n_107_11_RCVS_0(msg_floats([n_107_8_STATE.currentValue]))
                }
                return
    
            } else if (msg_isBang(m)) {
                n_107_11_RCVS_0(msg_floats([n_107_8_STATE.currentValue]))
                return 
    
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_107_8_STATE.currentValue = msg_readFloatToken(m, 1)
                return
            }
        
                                throw new Error('[change], id "n_107_8", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_107_11_RCVS_0(m) {
                                
        n_108_0_RCVS_0(msg_bang())
n_107_10_RCVS_0(msg_floats([messageTokenToFloat(m, 0)]))
        return
    
                                throw new Error('[trigger], id "n_107_11", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_107_10_RCVS_0(m) {
                                
        if (!n_107_10_STATE.isClosed) {
            n_107_13_RCVS_0(m)
        }
        return
    
                                throw new Error('[spigot], id "n_107_10", inlet "0", unsupported message : ' + msg_display(m))
                            }
function n_107_10_RCVS_1(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_spigot_setIsClosed(n_107_10_STATE, msg_readFloatToken(m, 0))
            return
        }
    
                                throw new Error('[spigot], id "n_107_10", inlet "1", unsupported message : ' + msg_display(m))
                            }

function n_107_13_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                const newValue = msg_readFloatToken(m, 0)
                if (newValue !== n_107_13_STATE.currentValue) {
                    n_107_13_STATE.currentValue = newValue
                    n_107_9_RCVS_0(msg_floats([n_107_13_STATE.currentValue]))
                }
                return
    
            } else if (msg_isBang(m)) {
                n_107_9_RCVS_0(msg_floats([n_107_13_STATE.currentValue]))
                return 
    
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_107_13_STATE.currentValue = msg_readFloatToken(m, 1)
                return
            }
        
                                throw new Error('[change], id "n_107_13", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_107_9_RCVS_0(m) {
                                
                if (n_107_9_STATE.filterType === MSG_STRING_TOKEN) {
                    if (
                        (n_107_9_STATE.stringFilter === 'float'
                            && msg_isFloatToken(m, 0))
                        || (n_107_9_STATE.stringFilter === 'symbol'
                            && msg_isStringToken(m, 0))
                        || (n_107_9_STATE.stringFilter === 'list'
                            && msg_getLength(m) > 1)
                        || (n_107_9_STATE.stringFilter === 'bang' 
                            && msg_isBang(m))
                    ) {
                        n_107_3_RCVS_0(m)
                        return
                    
                    } else if (
                        msg_isStringToken(m, 0)
                        && msg_readStringToken(m, 0) === n_107_9_STATE.stringFilter
                    ) {
                        n_107_3_RCVS_0(msg_emptyToBang(msg_shift(m)))
                        return
                    }

                } else if (
                    msg_isFloatToken(m, 0)
                    && msg_readFloatToken(m, 0) === n_107_9_STATE.floatFilter
                ) {
                    n_107_3_RCVS_0(msg_emptyToBang(msg_shift(m)))
                    return
                }
            
                SND_TO_NULL(m)
            return
            
                                throw new Error('[route], id "n_107_9", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_107_3_RCVS_0(m) {
                                
        n_107_5_RCVS_0(msg_bang())
n_45_36_RCVS_0(msg_bang())
        return
    
                                throw new Error('[trigger], id "n_107_3", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_107_5_RCVS_0(m) {
                                
        n_107_4_RCVS_0(msg_bang())
n_107_14_RCVS_0(msg_bang())
        return
    
                                throw new Error('[trigger], id "n_107_5", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_107_14_RCVS_0(m) {
                                
            if (msg_getLength(m) === 1) {
                if (msg_isStringToken(m, 0)) {
                    const action = msg_readStringToken(m, 0)
                    if (action === 'bang' || action === 'start') {
                        n_delay_scheduleDelay(
                            n_107_14_STATE, 
                            () => n_107_6_RCVS_0(msg_bang()),
                            FRAME,
                        )
                        return
                    } else if (action === 'stop') {
                        n_delay_stop(n_107_14_STATE)
                        return
                    }
                    
                } else if (msg_isFloatToken(m, 0)) {
                    n_delay_setDelay(n_107_14_STATE, msg_readFloatToken(m, 0))
                    n_delay_scheduleDelay(
                        n_107_14_STATE,
                        () => n_107_6_RCVS_0(msg_bang()),
                        FRAME,
                    )
                    return 
                }
            
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN, MSG_STRING_TOKEN])
                && msg_readStringToken(m, 0) === 'tempo'
            ) {
                n_107_14_STATE.sampleRatio = computeUnitInSamples(
                    SAMPLE_RATE, 
                    msg_readFloatToken(m, 1), 
                    msg_readStringToken(m, 2)
                )
                return
            }
        
                                throw new Error('[delay], id "n_107_14", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_107_6_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_107_6_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_107_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_107_6_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_107_6_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_107_6_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_107_6_STATE.outMessages[0] = message
                n_107_6_STATE.messageTransferFunctions.splice(0, n_107_6_STATE.messageTransferFunctions.length - 1)
                n_107_6_STATE.messageTransferFunctions[0] = function (m) {
                    return n_107_6_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_107_6_STATE.messageTransferFunctions.length; i++) {
                    n_107_7_RCVS_0(n_107_6_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_107_6", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_107_4_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_107_4_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_107_4_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_107_4_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_107_4_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_107_4_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_107_4_STATE.outMessages[0] = message
                n_107_4_STATE.messageTransferFunctions.splice(0, n_107_4_STATE.messageTransferFunctions.length - 1)
                n_107_4_STATE.messageTransferFunctions[0] = function (m) {
                    return n_107_4_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_107_4_STATE.messageTransferFunctions.length; i++) {
                    n_107_7_RCVS_0(n_107_4_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_107_4", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_108_0_RCVS_0(m) {
                                
        n_108_6_RCVS_0(msg_bang())
n_108_2_RCVS_0(msg_bang())
        return
    
                                throw new Error('[trigger], id "n_108_0", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_108_2_RCVS_0(m) {
                                
            if (msg_getLength(m) === 1) {
                if (msg_isStringToken(m, 0)) {
                    const action = msg_readStringToken(m, 0)
                    if (action === 'bang' || action === 'start') {
                        n_delay_scheduleDelay(
                            n_108_2_STATE, 
                            () => n_108_5_RCVS_0(msg_bang()),
                            FRAME,
                        )
                        return
                    } else if (action === 'stop') {
                        n_delay_stop(n_108_2_STATE)
                        return
                    }
                    
                } else if (msg_isFloatToken(m, 0)) {
                    n_delay_setDelay(n_108_2_STATE, msg_readFloatToken(m, 0))
                    n_delay_scheduleDelay(
                        n_108_2_STATE,
                        () => n_108_5_RCVS_0(msg_bang()),
                        FRAME,
                    )
                    return 
                }
            
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN, MSG_STRING_TOKEN])
                && msg_readStringToken(m, 0) === 'tempo'
            ) {
                n_108_2_STATE.sampleRatio = computeUnitInSamples(
                    SAMPLE_RATE, 
                    msg_readFloatToken(m, 1), 
                    msg_readStringToken(m, 2)
                )
                return
            }
        
                                throw new Error('[delay], id "n_108_2", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_108_5_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_108_5_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_108_5_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_108_5_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_108_5_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_108_5_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_108_5_STATE.outMessages[0] = message
                n_108_5_STATE.messageTransferFunctions.splice(0, n_108_5_STATE.messageTransferFunctions.length - 1)
                n_108_5_STATE.messageTransferFunctions[0] = function (m) {
                    return n_108_5_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_108_5_STATE.messageTransferFunctions.length; i++) {
                    n_108_1_RCVS_0(n_108_5_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_108_5", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_108_1_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                n_float_int_setValueInt(n_108_1_STATE, msg_readFloatToken(m, 0))
                n_107_10_RCVS_1(msg_floats([n_108_1_STATE.value]))
                return 

            } else if (msg_isBang(m)) {
                n_107_10_RCVS_1(msg_floats([n_108_1_STATE.value]))
                return
                
            }
        
                                throw new Error('[int], id "n_108_1", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_108_6_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_108_6_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_108_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_108_6_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_108_6_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_108_6_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_108_6_STATE.outMessages[0] = message
                n_108_6_STATE.messageTransferFunctions.splice(0, n_108_6_STATE.messageTransferFunctions.length - 1)
                n_108_6_STATE.messageTransferFunctions[0] = function (m) {
                    return n_108_6_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_108_6_STATE.messageTransferFunctions.length; i++) {
                    n_108_1_RCVS_0(n_108_6_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_108_6", inlet "0", unsupported message : ' + msg_display(m))
                            }





function n_109_7_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                n_float_int_setValueInt(n_109_7_STATE, msg_readFloatToken(m, 0))
                n_109_2_RCVS_1(msg_floats([n_109_7_STATE.value]))
                return 

            } else if (msg_isBang(m)) {
                n_109_2_RCVS_1(msg_floats([n_109_7_STATE.value]))
                return
                
            }
        
                                throw new Error('[int], id "n_109_7", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_109_2_RCVS_0(m) {
                                
        if (!n_109_2_STATE.isClosed) {
            m_n_109_1_0__routemsg_RCVS_0(m)
        }
        return
    
                                throw new Error('[spigot], id "n_109_2", inlet "0", unsupported message : ' + msg_display(m))
                            }
function n_109_2_RCVS_1(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_spigot_setIsClosed(n_109_2_STATE, msg_readFloatToken(m, 0))
            return
        }
    
                                throw new Error('[spigot], id "n_109_2", inlet "1", unsupported message : ' + msg_display(m))
                            }

function m_n_109_1_0__routemsg_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                SND_TO_NULL(m)
                return
            } else {
                n_109_1_RCVS_0_message(m)
                return
            }
        
                                throw new Error('[_routemsg], id "m_n_109_1_0__routemsg", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_109_1_RCVS_0_message(m) {
                                
        if (msg_isBang(m)) {
            n_109_8_RCVS_0(msg_floats([n_109_1_STATE.currentValue]))
            return 
        }
    
                                throw new Error('[snapshot~], id "n_109_1", inlet "0_message", unsupported message : ' + msg_display(m))
                            }

function n_109_8_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                const newValue = msg_readFloatToken(m, 0)
                if (newValue !== n_109_8_STATE.currentValue) {
                    n_109_8_STATE.currentValue = newValue
                    n_109_11_RCVS_0(msg_floats([n_109_8_STATE.currentValue]))
                }
                return
    
            } else if (msg_isBang(m)) {
                n_109_11_RCVS_0(msg_floats([n_109_8_STATE.currentValue]))
                return 
    
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_109_8_STATE.currentValue = msg_readFloatToken(m, 1)
                return
            }
        
                                throw new Error('[change], id "n_109_8", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_109_11_RCVS_0(m) {
                                
        n_110_0_RCVS_0(msg_bang())
n_109_10_RCVS_0(msg_floats([messageTokenToFloat(m, 0)]))
        return
    
                                throw new Error('[trigger], id "n_109_11", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_109_10_RCVS_0(m) {
                                
        if (!n_109_10_STATE.isClosed) {
            n_109_13_RCVS_0(m)
        }
        return
    
                                throw new Error('[spigot], id "n_109_10", inlet "0", unsupported message : ' + msg_display(m))
                            }
function n_109_10_RCVS_1(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_spigot_setIsClosed(n_109_10_STATE, msg_readFloatToken(m, 0))
            return
        }
    
                                throw new Error('[spigot], id "n_109_10", inlet "1", unsupported message : ' + msg_display(m))
                            }

function n_109_13_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                const newValue = msg_readFloatToken(m, 0)
                if (newValue !== n_109_13_STATE.currentValue) {
                    n_109_13_STATE.currentValue = newValue
                    n_109_9_RCVS_0(msg_floats([n_109_13_STATE.currentValue]))
                }
                return
    
            } else if (msg_isBang(m)) {
                n_109_9_RCVS_0(msg_floats([n_109_13_STATE.currentValue]))
                return 
    
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_109_13_STATE.currentValue = msg_readFloatToken(m, 1)
                return
            }
        
                                throw new Error('[change], id "n_109_13", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_109_9_RCVS_0(m) {
                                
                if (n_109_9_STATE.filterType === MSG_STRING_TOKEN) {
                    if (
                        (n_109_9_STATE.stringFilter === 'float'
                            && msg_isFloatToken(m, 0))
                        || (n_109_9_STATE.stringFilter === 'symbol'
                            && msg_isStringToken(m, 0))
                        || (n_109_9_STATE.stringFilter === 'list'
                            && msg_getLength(m) > 1)
                        || (n_109_9_STATE.stringFilter === 'bang' 
                            && msg_isBang(m))
                    ) {
                        n_109_3_RCVS_0(m)
                        return
                    
                    } else if (
                        msg_isStringToken(m, 0)
                        && msg_readStringToken(m, 0) === n_109_9_STATE.stringFilter
                    ) {
                        n_109_3_RCVS_0(msg_emptyToBang(msg_shift(m)))
                        return
                    }

                } else if (
                    msg_isFloatToken(m, 0)
                    && msg_readFloatToken(m, 0) === n_109_9_STATE.floatFilter
                ) {
                    n_109_3_RCVS_0(msg_emptyToBang(msg_shift(m)))
                    return
                }
            
                SND_TO_NULL(m)
            return
            
                                throw new Error('[route], id "n_109_9", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_109_3_RCVS_0(m) {
                                
        n_109_5_RCVS_0(msg_bang())
n_45_0_RCVS_0(msg_bang())
        return
    
                                throw new Error('[trigger], id "n_109_3", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_109_5_RCVS_0(m) {
                                
        n_109_4_RCVS_0(msg_bang())
n_109_14_RCVS_0(msg_bang())
        return
    
                                throw new Error('[trigger], id "n_109_5", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_109_14_RCVS_0(m) {
                                
            if (msg_getLength(m) === 1) {
                if (msg_isStringToken(m, 0)) {
                    const action = msg_readStringToken(m, 0)
                    if (action === 'bang' || action === 'start') {
                        n_delay_scheduleDelay(
                            n_109_14_STATE, 
                            () => n_109_6_RCVS_0(msg_bang()),
                            FRAME,
                        )
                        return
                    } else if (action === 'stop') {
                        n_delay_stop(n_109_14_STATE)
                        return
                    }
                    
                } else if (msg_isFloatToken(m, 0)) {
                    n_delay_setDelay(n_109_14_STATE, msg_readFloatToken(m, 0))
                    n_delay_scheduleDelay(
                        n_109_14_STATE,
                        () => n_109_6_RCVS_0(msg_bang()),
                        FRAME,
                    )
                    return 
                }
            
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN, MSG_STRING_TOKEN])
                && msg_readStringToken(m, 0) === 'tempo'
            ) {
                n_109_14_STATE.sampleRatio = computeUnitInSamples(
                    SAMPLE_RATE, 
                    msg_readFloatToken(m, 1), 
                    msg_readStringToken(m, 2)
                )
                return
            }
        
                                throw new Error('[delay], id "n_109_14", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_109_6_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_109_6_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_109_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_109_6_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_109_6_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_109_6_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_109_6_STATE.outMessages[0] = message
                n_109_6_STATE.messageTransferFunctions.splice(0, n_109_6_STATE.messageTransferFunctions.length - 1)
                n_109_6_STATE.messageTransferFunctions[0] = function (m) {
                    return n_109_6_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_109_6_STATE.messageTransferFunctions.length; i++) {
                    n_109_7_RCVS_0(n_109_6_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_109_6", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_109_4_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_109_4_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_109_4_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_109_4_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_109_4_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_109_4_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_109_4_STATE.outMessages[0] = message
                n_109_4_STATE.messageTransferFunctions.splice(0, n_109_4_STATE.messageTransferFunctions.length - 1)
                n_109_4_STATE.messageTransferFunctions[0] = function (m) {
                    return n_109_4_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_109_4_STATE.messageTransferFunctions.length; i++) {
                    n_109_7_RCVS_0(n_109_4_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_109_4", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_110_0_RCVS_0(m) {
                                
        n_110_6_RCVS_0(msg_bang())
n_110_2_RCVS_0(msg_bang())
        return
    
                                throw new Error('[trigger], id "n_110_0", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_110_2_RCVS_0(m) {
                                
            if (msg_getLength(m) === 1) {
                if (msg_isStringToken(m, 0)) {
                    const action = msg_readStringToken(m, 0)
                    if (action === 'bang' || action === 'start') {
                        n_delay_scheduleDelay(
                            n_110_2_STATE, 
                            () => n_110_5_RCVS_0(msg_bang()),
                            FRAME,
                        )
                        return
                    } else if (action === 'stop') {
                        n_delay_stop(n_110_2_STATE)
                        return
                    }
                    
                } else if (msg_isFloatToken(m, 0)) {
                    n_delay_setDelay(n_110_2_STATE, msg_readFloatToken(m, 0))
                    n_delay_scheduleDelay(
                        n_110_2_STATE,
                        () => n_110_5_RCVS_0(msg_bang()),
                        FRAME,
                    )
                    return 
                }
            
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN, MSG_STRING_TOKEN])
                && msg_readStringToken(m, 0) === 'tempo'
            ) {
                n_110_2_STATE.sampleRatio = computeUnitInSamples(
                    SAMPLE_RATE, 
                    msg_readFloatToken(m, 1), 
                    msg_readStringToken(m, 2)
                )
                return
            }
        
                                throw new Error('[delay], id "n_110_2", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_110_5_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_110_5_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_110_5_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_110_5_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_110_5_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_110_5_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_110_5_STATE.outMessages[0] = message
                n_110_5_STATE.messageTransferFunctions.splice(0, n_110_5_STATE.messageTransferFunctions.length - 1)
                n_110_5_STATE.messageTransferFunctions[0] = function (m) {
                    return n_110_5_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_110_5_STATE.messageTransferFunctions.length; i++) {
                    n_110_1_RCVS_0(n_110_5_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_110_5", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_110_1_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                n_float_int_setValueInt(n_110_1_STATE, msg_readFloatToken(m, 0))
                n_109_10_RCVS_1(msg_floats([n_110_1_STATE.value]))
                return 

            } else if (msg_isBang(m)) {
                n_109_10_RCVS_1(msg_floats([n_110_1_STATE.value]))
                return
                
            }
        
                                throw new Error('[int], id "n_110_1", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_110_6_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_110_6_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_110_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_110_6_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_110_6_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_110_6_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_110_6_STATE.outMessages[0] = message
                n_110_6_STATE.messageTransferFunctions.splice(0, n_110_6_STATE.messageTransferFunctions.length - 1)
                n_110_6_STATE.messageTransferFunctions[0] = function (m) {
                    return n_110_6_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_110_6_STATE.messageTransferFunctions.length; i++) {
                    n_110_1_RCVS_0(n_110_6_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_110_6", inlet "0", unsupported message : ' + msg_display(m))
                            }





function n_111_7_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                n_float_int_setValueInt(n_111_7_STATE, msg_readFloatToken(m, 0))
                n_111_2_RCVS_1(msg_floats([n_111_7_STATE.value]))
                return 

            } else if (msg_isBang(m)) {
                n_111_2_RCVS_1(msg_floats([n_111_7_STATE.value]))
                return
                
            }
        
                                throw new Error('[int], id "n_111_7", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_111_2_RCVS_0(m) {
                                
        if (!n_111_2_STATE.isClosed) {
            m_n_111_1_0__routemsg_RCVS_0(m)
        }
        return
    
                                throw new Error('[spigot], id "n_111_2", inlet "0", unsupported message : ' + msg_display(m))
                            }
function n_111_2_RCVS_1(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_spigot_setIsClosed(n_111_2_STATE, msg_readFloatToken(m, 0))
            return
        }
    
                                throw new Error('[spigot], id "n_111_2", inlet "1", unsupported message : ' + msg_display(m))
                            }

function m_n_111_1_0__routemsg_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                SND_TO_NULL(m)
                return
            } else {
                n_111_1_RCVS_0_message(m)
                return
            }
        
                                throw new Error('[_routemsg], id "m_n_111_1_0__routemsg", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_111_1_RCVS_0_message(m) {
                                
        if (msg_isBang(m)) {
            n_111_8_RCVS_0(msg_floats([n_111_1_STATE.currentValue]))
            return 
        }
    
                                throw new Error('[snapshot~], id "n_111_1", inlet "0_message", unsupported message : ' + msg_display(m))
                            }

function n_111_8_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                const newValue = msg_readFloatToken(m, 0)
                if (newValue !== n_111_8_STATE.currentValue) {
                    n_111_8_STATE.currentValue = newValue
                    n_111_11_RCVS_0(msg_floats([n_111_8_STATE.currentValue]))
                }
                return
    
            } else if (msg_isBang(m)) {
                n_111_11_RCVS_0(msg_floats([n_111_8_STATE.currentValue]))
                return 
    
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_111_8_STATE.currentValue = msg_readFloatToken(m, 1)
                return
            }
        
                                throw new Error('[change], id "n_111_8", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_111_11_RCVS_0(m) {
                                
        n_112_0_RCVS_0(msg_bang())
n_111_10_RCVS_0(msg_floats([messageTokenToFloat(m, 0)]))
        return
    
                                throw new Error('[trigger], id "n_111_11", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_111_10_RCVS_0(m) {
                                
        if (!n_111_10_STATE.isClosed) {
            n_111_13_RCVS_0(m)
        }
        return
    
                                throw new Error('[spigot], id "n_111_10", inlet "0", unsupported message : ' + msg_display(m))
                            }
function n_111_10_RCVS_1(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_spigot_setIsClosed(n_111_10_STATE, msg_readFloatToken(m, 0))
            return
        }
    
                                throw new Error('[spigot], id "n_111_10", inlet "1", unsupported message : ' + msg_display(m))
                            }

function n_111_13_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                const newValue = msg_readFloatToken(m, 0)
                if (newValue !== n_111_13_STATE.currentValue) {
                    n_111_13_STATE.currentValue = newValue
                    n_111_9_RCVS_0(msg_floats([n_111_13_STATE.currentValue]))
                }
                return
    
            } else if (msg_isBang(m)) {
                n_111_9_RCVS_0(msg_floats([n_111_13_STATE.currentValue]))
                return 
    
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_111_13_STATE.currentValue = msg_readFloatToken(m, 1)
                return
            }
        
                                throw new Error('[change], id "n_111_13", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_111_9_RCVS_0(m) {
                                
                if (n_111_9_STATE.filterType === MSG_STRING_TOKEN) {
                    if (
                        (n_111_9_STATE.stringFilter === 'float'
                            && msg_isFloatToken(m, 0))
                        || (n_111_9_STATE.stringFilter === 'symbol'
                            && msg_isStringToken(m, 0))
                        || (n_111_9_STATE.stringFilter === 'list'
                            && msg_getLength(m) > 1)
                        || (n_111_9_STATE.stringFilter === 'bang' 
                            && msg_isBang(m))
                    ) {
                        n_111_3_RCVS_0(m)
                        return
                    
                    } else if (
                        msg_isStringToken(m, 0)
                        && msg_readStringToken(m, 0) === n_111_9_STATE.stringFilter
                    ) {
                        n_111_3_RCVS_0(msg_emptyToBang(msg_shift(m)))
                        return
                    }

                } else if (
                    msg_isFloatToken(m, 0)
                    && msg_readFloatToken(m, 0) === n_111_9_STATE.floatFilter
                ) {
                    n_111_3_RCVS_0(msg_emptyToBang(msg_shift(m)))
                    return
                }
            
                SND_TO_NULL(m)
            return
            
                                throw new Error('[route], id "n_111_9", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_111_3_RCVS_0(m) {
                                
        n_111_5_RCVS_0(msg_bang())
n_45_5_RCVS_0(msg_bang())
        return
    
                                throw new Error('[trigger], id "n_111_3", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_111_5_RCVS_0(m) {
                                
        n_111_4_RCVS_0(msg_bang())
n_111_14_RCVS_0(msg_bang())
        return
    
                                throw new Error('[trigger], id "n_111_5", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_111_14_RCVS_0(m) {
                                
            if (msg_getLength(m) === 1) {
                if (msg_isStringToken(m, 0)) {
                    const action = msg_readStringToken(m, 0)
                    if (action === 'bang' || action === 'start') {
                        n_delay_scheduleDelay(
                            n_111_14_STATE, 
                            () => n_111_6_RCVS_0(msg_bang()),
                            FRAME,
                        )
                        return
                    } else if (action === 'stop') {
                        n_delay_stop(n_111_14_STATE)
                        return
                    }
                    
                } else if (msg_isFloatToken(m, 0)) {
                    n_delay_setDelay(n_111_14_STATE, msg_readFloatToken(m, 0))
                    n_delay_scheduleDelay(
                        n_111_14_STATE,
                        () => n_111_6_RCVS_0(msg_bang()),
                        FRAME,
                    )
                    return 
                }
            
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN, MSG_STRING_TOKEN])
                && msg_readStringToken(m, 0) === 'tempo'
            ) {
                n_111_14_STATE.sampleRatio = computeUnitInSamples(
                    SAMPLE_RATE, 
                    msg_readFloatToken(m, 1), 
                    msg_readStringToken(m, 2)
                )
                return
            }
        
                                throw new Error('[delay], id "n_111_14", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_111_6_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_111_6_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_111_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_111_6_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_111_6_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_111_6_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_111_6_STATE.outMessages[0] = message
                n_111_6_STATE.messageTransferFunctions.splice(0, n_111_6_STATE.messageTransferFunctions.length - 1)
                n_111_6_STATE.messageTransferFunctions[0] = function (m) {
                    return n_111_6_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_111_6_STATE.messageTransferFunctions.length; i++) {
                    n_111_7_RCVS_0(n_111_6_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_111_6", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_111_4_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_111_4_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_111_4_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_111_4_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_111_4_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_111_4_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_111_4_STATE.outMessages[0] = message
                n_111_4_STATE.messageTransferFunctions.splice(0, n_111_4_STATE.messageTransferFunctions.length - 1)
                n_111_4_STATE.messageTransferFunctions[0] = function (m) {
                    return n_111_4_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_111_4_STATE.messageTransferFunctions.length; i++) {
                    n_111_7_RCVS_0(n_111_4_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_111_4", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_112_0_RCVS_0(m) {
                                
        n_112_6_RCVS_0(msg_bang())
n_112_2_RCVS_0(msg_bang())
        return
    
                                throw new Error('[trigger], id "n_112_0", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_112_2_RCVS_0(m) {
                                
            if (msg_getLength(m) === 1) {
                if (msg_isStringToken(m, 0)) {
                    const action = msg_readStringToken(m, 0)
                    if (action === 'bang' || action === 'start') {
                        n_delay_scheduleDelay(
                            n_112_2_STATE, 
                            () => n_112_5_RCVS_0(msg_bang()),
                            FRAME,
                        )
                        return
                    } else if (action === 'stop') {
                        n_delay_stop(n_112_2_STATE)
                        return
                    }
                    
                } else if (msg_isFloatToken(m, 0)) {
                    n_delay_setDelay(n_112_2_STATE, msg_readFloatToken(m, 0))
                    n_delay_scheduleDelay(
                        n_112_2_STATE,
                        () => n_112_5_RCVS_0(msg_bang()),
                        FRAME,
                    )
                    return 
                }
            
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN, MSG_STRING_TOKEN])
                && msg_readStringToken(m, 0) === 'tempo'
            ) {
                n_112_2_STATE.sampleRatio = computeUnitInSamples(
                    SAMPLE_RATE, 
                    msg_readFloatToken(m, 1), 
                    msg_readStringToken(m, 2)
                )
                return
            }
        
                                throw new Error('[delay], id "n_112_2", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_112_5_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_112_5_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_112_5_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_112_5_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_112_5_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_112_5_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_112_5_STATE.outMessages[0] = message
                n_112_5_STATE.messageTransferFunctions.splice(0, n_112_5_STATE.messageTransferFunctions.length - 1)
                n_112_5_STATE.messageTransferFunctions[0] = function (m) {
                    return n_112_5_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_112_5_STATE.messageTransferFunctions.length; i++) {
                    n_112_1_RCVS_0(n_112_5_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_112_5", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_112_1_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                n_float_int_setValueInt(n_112_1_STATE, msg_readFloatToken(m, 0))
                n_111_10_RCVS_1(msg_floats([n_112_1_STATE.value]))
                return 

            } else if (msg_isBang(m)) {
                n_111_10_RCVS_1(msg_floats([n_112_1_STATE.value]))
                return
                
            }
        
                                throw new Error('[int], id "n_112_1", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_112_6_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_112_6_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_112_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_112_6_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_112_6_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_112_6_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_112_6_STATE.outMessages[0] = message
                n_112_6_STATE.messageTransferFunctions.splice(0, n_112_6_STATE.messageTransferFunctions.length - 1)
                n_112_6_STATE.messageTransferFunctions[0] = function (m) {
                    return n_112_6_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_112_6_STATE.messageTransferFunctions.length; i++) {
                    n_112_1_RCVS_0(n_112_6_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_112_6", inlet "0", unsupported message : ' + msg_display(m))
                            }





function n_113_7_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                n_float_int_setValueInt(n_113_7_STATE, msg_readFloatToken(m, 0))
                n_113_2_RCVS_1(msg_floats([n_113_7_STATE.value]))
                return 

            } else if (msg_isBang(m)) {
                n_113_2_RCVS_1(msg_floats([n_113_7_STATE.value]))
                return
                
            }
        
                                throw new Error('[int], id "n_113_7", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_113_2_RCVS_0(m) {
                                
        if (!n_113_2_STATE.isClosed) {
            m_n_113_1_0__routemsg_RCVS_0(m)
        }
        return
    
                                throw new Error('[spigot], id "n_113_2", inlet "0", unsupported message : ' + msg_display(m))
                            }
function n_113_2_RCVS_1(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_spigot_setIsClosed(n_113_2_STATE, msg_readFloatToken(m, 0))
            return
        }
    
                                throw new Error('[spigot], id "n_113_2", inlet "1", unsupported message : ' + msg_display(m))
                            }

function m_n_113_1_0__routemsg_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                SND_TO_NULL(m)
                return
            } else {
                n_113_1_RCVS_0_message(m)
                return
            }
        
                                throw new Error('[_routemsg], id "m_n_113_1_0__routemsg", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_113_1_RCVS_0_message(m) {
                                
        if (msg_isBang(m)) {
            n_113_8_RCVS_0(msg_floats([n_113_1_STATE.currentValue]))
            return 
        }
    
                                throw new Error('[snapshot~], id "n_113_1", inlet "0_message", unsupported message : ' + msg_display(m))
                            }

function n_113_8_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                const newValue = msg_readFloatToken(m, 0)
                if (newValue !== n_113_8_STATE.currentValue) {
                    n_113_8_STATE.currentValue = newValue
                    n_113_11_RCVS_0(msg_floats([n_113_8_STATE.currentValue]))
                }
                return
    
            } else if (msg_isBang(m)) {
                n_113_11_RCVS_0(msg_floats([n_113_8_STATE.currentValue]))
                return 
    
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_113_8_STATE.currentValue = msg_readFloatToken(m, 1)
                return
            }
        
                                throw new Error('[change], id "n_113_8", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_113_11_RCVS_0(m) {
                                
        n_114_0_RCVS_0(msg_bang())
n_113_10_RCVS_0(msg_floats([messageTokenToFloat(m, 0)]))
        return
    
                                throw new Error('[trigger], id "n_113_11", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_113_10_RCVS_0(m) {
                                
        if (!n_113_10_STATE.isClosed) {
            n_113_13_RCVS_0(m)
        }
        return
    
                                throw new Error('[spigot], id "n_113_10", inlet "0", unsupported message : ' + msg_display(m))
                            }
function n_113_10_RCVS_1(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_spigot_setIsClosed(n_113_10_STATE, msg_readFloatToken(m, 0))
            return
        }
    
                                throw new Error('[spigot], id "n_113_10", inlet "1", unsupported message : ' + msg_display(m))
                            }

function n_113_13_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                const newValue = msg_readFloatToken(m, 0)
                if (newValue !== n_113_13_STATE.currentValue) {
                    n_113_13_STATE.currentValue = newValue
                    n_113_9_RCVS_0(msg_floats([n_113_13_STATE.currentValue]))
                }
                return
    
            } else if (msg_isBang(m)) {
                n_113_9_RCVS_0(msg_floats([n_113_13_STATE.currentValue]))
                return 
    
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_113_13_STATE.currentValue = msg_readFloatToken(m, 1)
                return
            }
        
                                throw new Error('[change], id "n_113_13", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_113_9_RCVS_0(m) {
                                
                if (n_113_9_STATE.filterType === MSG_STRING_TOKEN) {
                    if (
                        (n_113_9_STATE.stringFilter === 'float'
                            && msg_isFloatToken(m, 0))
                        || (n_113_9_STATE.stringFilter === 'symbol'
                            && msg_isStringToken(m, 0))
                        || (n_113_9_STATE.stringFilter === 'list'
                            && msg_getLength(m) > 1)
                        || (n_113_9_STATE.stringFilter === 'bang' 
                            && msg_isBang(m))
                    ) {
                        n_113_3_RCVS_0(m)
                        return
                    
                    } else if (
                        msg_isStringToken(m, 0)
                        && msg_readStringToken(m, 0) === n_113_9_STATE.stringFilter
                    ) {
                        n_113_3_RCVS_0(msg_emptyToBang(msg_shift(m)))
                        return
                    }

                } else if (
                    msg_isFloatToken(m, 0)
                    && msg_readFloatToken(m, 0) === n_113_9_STATE.floatFilter
                ) {
                    n_113_3_RCVS_0(msg_emptyToBang(msg_shift(m)))
                    return
                }
            
                SND_TO_NULL(m)
            return
            
                                throw new Error('[route], id "n_113_9", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_113_3_RCVS_0(m) {
                                
        n_113_5_RCVS_0(msg_bang())
n_45_9_RCVS_0(msg_bang())
        return
    
                                throw new Error('[trigger], id "n_113_3", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_113_5_RCVS_0(m) {
                                
        n_113_4_RCVS_0(msg_bang())
n_113_14_RCVS_0(msg_bang())
        return
    
                                throw new Error('[trigger], id "n_113_5", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_113_14_RCVS_0(m) {
                                
            if (msg_getLength(m) === 1) {
                if (msg_isStringToken(m, 0)) {
                    const action = msg_readStringToken(m, 0)
                    if (action === 'bang' || action === 'start') {
                        n_delay_scheduleDelay(
                            n_113_14_STATE, 
                            () => n_113_6_RCVS_0(msg_bang()),
                            FRAME,
                        )
                        return
                    } else if (action === 'stop') {
                        n_delay_stop(n_113_14_STATE)
                        return
                    }
                    
                } else if (msg_isFloatToken(m, 0)) {
                    n_delay_setDelay(n_113_14_STATE, msg_readFloatToken(m, 0))
                    n_delay_scheduleDelay(
                        n_113_14_STATE,
                        () => n_113_6_RCVS_0(msg_bang()),
                        FRAME,
                    )
                    return 
                }
            
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN, MSG_STRING_TOKEN])
                && msg_readStringToken(m, 0) === 'tempo'
            ) {
                n_113_14_STATE.sampleRatio = computeUnitInSamples(
                    SAMPLE_RATE, 
                    msg_readFloatToken(m, 1), 
                    msg_readStringToken(m, 2)
                )
                return
            }
        
                                throw new Error('[delay], id "n_113_14", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_113_6_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_113_6_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_113_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_113_6_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_113_6_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_113_6_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_113_6_STATE.outMessages[0] = message
                n_113_6_STATE.messageTransferFunctions.splice(0, n_113_6_STATE.messageTransferFunctions.length - 1)
                n_113_6_STATE.messageTransferFunctions[0] = function (m) {
                    return n_113_6_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_113_6_STATE.messageTransferFunctions.length; i++) {
                    n_113_7_RCVS_0(n_113_6_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_113_6", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_113_4_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_113_4_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_113_4_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_113_4_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_113_4_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_113_4_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_113_4_STATE.outMessages[0] = message
                n_113_4_STATE.messageTransferFunctions.splice(0, n_113_4_STATE.messageTransferFunctions.length - 1)
                n_113_4_STATE.messageTransferFunctions[0] = function (m) {
                    return n_113_4_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_113_4_STATE.messageTransferFunctions.length; i++) {
                    n_113_7_RCVS_0(n_113_4_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_113_4", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_114_0_RCVS_0(m) {
                                
        n_114_6_RCVS_0(msg_bang())
n_114_2_RCVS_0(msg_bang())
        return
    
                                throw new Error('[trigger], id "n_114_0", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_114_2_RCVS_0(m) {
                                
            if (msg_getLength(m) === 1) {
                if (msg_isStringToken(m, 0)) {
                    const action = msg_readStringToken(m, 0)
                    if (action === 'bang' || action === 'start') {
                        n_delay_scheduleDelay(
                            n_114_2_STATE, 
                            () => n_114_5_RCVS_0(msg_bang()),
                            FRAME,
                        )
                        return
                    } else if (action === 'stop') {
                        n_delay_stop(n_114_2_STATE)
                        return
                    }
                    
                } else if (msg_isFloatToken(m, 0)) {
                    n_delay_setDelay(n_114_2_STATE, msg_readFloatToken(m, 0))
                    n_delay_scheduleDelay(
                        n_114_2_STATE,
                        () => n_114_5_RCVS_0(msg_bang()),
                        FRAME,
                    )
                    return 
                }
            
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN, MSG_STRING_TOKEN])
                && msg_readStringToken(m, 0) === 'tempo'
            ) {
                n_114_2_STATE.sampleRatio = computeUnitInSamples(
                    SAMPLE_RATE, 
                    msg_readFloatToken(m, 1), 
                    msg_readStringToken(m, 2)
                )
                return
            }
        
                                throw new Error('[delay], id "n_114_2", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_114_5_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_114_5_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_114_5_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_114_5_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_114_5_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_114_5_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_114_5_STATE.outMessages[0] = message
                n_114_5_STATE.messageTransferFunctions.splice(0, n_114_5_STATE.messageTransferFunctions.length - 1)
                n_114_5_STATE.messageTransferFunctions[0] = function (m) {
                    return n_114_5_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_114_5_STATE.messageTransferFunctions.length; i++) {
                    n_114_1_RCVS_0(n_114_5_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_114_5", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_114_1_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                n_float_int_setValueInt(n_114_1_STATE, msg_readFloatToken(m, 0))
                n_113_10_RCVS_1(msg_floats([n_114_1_STATE.value]))
                return 

            } else if (msg_isBang(m)) {
                n_113_10_RCVS_1(msg_floats([n_114_1_STATE.value]))
                return
                
            }
        
                                throw new Error('[int], id "n_114_1", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_114_6_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_114_6_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_114_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_114_6_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_114_6_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_114_6_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_114_6_STATE.outMessages[0] = message
                n_114_6_STATE.messageTransferFunctions.splice(0, n_114_6_STATE.messageTransferFunctions.length - 1)
                n_114_6_STATE.messageTransferFunctions[0] = function (m) {
                    return n_114_6_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_114_6_STATE.messageTransferFunctions.length; i++) {
                    n_114_1_RCVS_0(n_114_6_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_114_6", inlet "0", unsupported message : ' + msg_display(m))
                            }





function n_115_7_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                n_float_int_setValueInt(n_115_7_STATE, msg_readFloatToken(m, 0))
                n_115_2_RCVS_1(msg_floats([n_115_7_STATE.value]))
                return 

            } else if (msg_isBang(m)) {
                n_115_2_RCVS_1(msg_floats([n_115_7_STATE.value]))
                return
                
            }
        
                                throw new Error('[int], id "n_115_7", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_115_2_RCVS_0(m) {
                                
        if (!n_115_2_STATE.isClosed) {
            m_n_115_1_0__routemsg_RCVS_0(m)
        }
        return
    
                                throw new Error('[spigot], id "n_115_2", inlet "0", unsupported message : ' + msg_display(m))
                            }
function n_115_2_RCVS_1(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_spigot_setIsClosed(n_115_2_STATE, msg_readFloatToken(m, 0))
            return
        }
    
                                throw new Error('[spigot], id "n_115_2", inlet "1", unsupported message : ' + msg_display(m))
                            }

function m_n_115_1_0__routemsg_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                SND_TO_NULL(m)
                return
            } else {
                n_115_1_RCVS_0_message(m)
                return
            }
        
                                throw new Error('[_routemsg], id "m_n_115_1_0__routemsg", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_115_1_RCVS_0_message(m) {
                                
        if (msg_isBang(m)) {
            n_115_8_RCVS_0(msg_floats([n_115_1_STATE.currentValue]))
            return 
        }
    
                                throw new Error('[snapshot~], id "n_115_1", inlet "0_message", unsupported message : ' + msg_display(m))
                            }

function n_115_8_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                const newValue = msg_readFloatToken(m, 0)
                if (newValue !== n_115_8_STATE.currentValue) {
                    n_115_8_STATE.currentValue = newValue
                    n_115_11_RCVS_0(msg_floats([n_115_8_STATE.currentValue]))
                }
                return
    
            } else if (msg_isBang(m)) {
                n_115_11_RCVS_0(msg_floats([n_115_8_STATE.currentValue]))
                return 
    
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_115_8_STATE.currentValue = msg_readFloatToken(m, 1)
                return
            }
        
                                throw new Error('[change], id "n_115_8", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_115_11_RCVS_0(m) {
                                
        n_116_0_RCVS_0(msg_bang())
n_115_10_RCVS_0(msg_floats([messageTokenToFloat(m, 0)]))
        return
    
                                throw new Error('[trigger], id "n_115_11", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_115_10_RCVS_0(m) {
                                
        if (!n_115_10_STATE.isClosed) {
            n_115_13_RCVS_0(m)
        }
        return
    
                                throw new Error('[spigot], id "n_115_10", inlet "0", unsupported message : ' + msg_display(m))
                            }
function n_115_10_RCVS_1(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_spigot_setIsClosed(n_115_10_STATE, msg_readFloatToken(m, 0))
            return
        }
    
                                throw new Error('[spigot], id "n_115_10", inlet "1", unsupported message : ' + msg_display(m))
                            }

function n_115_13_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                const newValue = msg_readFloatToken(m, 0)
                if (newValue !== n_115_13_STATE.currentValue) {
                    n_115_13_STATE.currentValue = newValue
                    n_115_9_RCVS_0(msg_floats([n_115_13_STATE.currentValue]))
                }
                return
    
            } else if (msg_isBang(m)) {
                n_115_9_RCVS_0(msg_floats([n_115_13_STATE.currentValue]))
                return 
    
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_115_13_STATE.currentValue = msg_readFloatToken(m, 1)
                return
            }
        
                                throw new Error('[change], id "n_115_13", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_115_9_RCVS_0(m) {
                                
                if (n_115_9_STATE.filterType === MSG_STRING_TOKEN) {
                    if (
                        (n_115_9_STATE.stringFilter === 'float'
                            && msg_isFloatToken(m, 0))
                        || (n_115_9_STATE.stringFilter === 'symbol'
                            && msg_isStringToken(m, 0))
                        || (n_115_9_STATE.stringFilter === 'list'
                            && msg_getLength(m) > 1)
                        || (n_115_9_STATE.stringFilter === 'bang' 
                            && msg_isBang(m))
                    ) {
                        n_115_3_RCVS_0(m)
                        return
                    
                    } else if (
                        msg_isStringToken(m, 0)
                        && msg_readStringToken(m, 0) === n_115_9_STATE.stringFilter
                    ) {
                        n_115_3_RCVS_0(msg_emptyToBang(msg_shift(m)))
                        return
                    }

                } else if (
                    msg_isFloatToken(m, 0)
                    && msg_readFloatToken(m, 0) === n_115_9_STATE.floatFilter
                ) {
                    n_115_3_RCVS_0(msg_emptyToBang(msg_shift(m)))
                    return
                }
            
                SND_TO_NULL(m)
            return
            
                                throw new Error('[route], id "n_115_9", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_115_3_RCVS_0(m) {
                                
        n_115_5_RCVS_0(msg_bang())
n_45_13_RCVS_0(msg_bang())
        return
    
                                throw new Error('[trigger], id "n_115_3", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_115_5_RCVS_0(m) {
                                
        n_115_4_RCVS_0(msg_bang())
n_115_14_RCVS_0(msg_bang())
        return
    
                                throw new Error('[trigger], id "n_115_5", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_115_14_RCVS_0(m) {
                                
            if (msg_getLength(m) === 1) {
                if (msg_isStringToken(m, 0)) {
                    const action = msg_readStringToken(m, 0)
                    if (action === 'bang' || action === 'start') {
                        n_delay_scheduleDelay(
                            n_115_14_STATE, 
                            () => n_115_6_RCVS_0(msg_bang()),
                            FRAME,
                        )
                        return
                    } else if (action === 'stop') {
                        n_delay_stop(n_115_14_STATE)
                        return
                    }
                    
                } else if (msg_isFloatToken(m, 0)) {
                    n_delay_setDelay(n_115_14_STATE, msg_readFloatToken(m, 0))
                    n_delay_scheduleDelay(
                        n_115_14_STATE,
                        () => n_115_6_RCVS_0(msg_bang()),
                        FRAME,
                    )
                    return 
                }
            
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN, MSG_STRING_TOKEN])
                && msg_readStringToken(m, 0) === 'tempo'
            ) {
                n_115_14_STATE.sampleRatio = computeUnitInSamples(
                    SAMPLE_RATE, 
                    msg_readFloatToken(m, 1), 
                    msg_readStringToken(m, 2)
                )
                return
            }
        
                                throw new Error('[delay], id "n_115_14", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_115_6_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_115_6_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_115_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_115_6_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_115_6_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_115_6_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_115_6_STATE.outMessages[0] = message
                n_115_6_STATE.messageTransferFunctions.splice(0, n_115_6_STATE.messageTransferFunctions.length - 1)
                n_115_6_STATE.messageTransferFunctions[0] = function (m) {
                    return n_115_6_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_115_6_STATE.messageTransferFunctions.length; i++) {
                    n_115_7_RCVS_0(n_115_6_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_115_6", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_115_4_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_115_4_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_115_4_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_115_4_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_115_4_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_115_4_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_115_4_STATE.outMessages[0] = message
                n_115_4_STATE.messageTransferFunctions.splice(0, n_115_4_STATE.messageTransferFunctions.length - 1)
                n_115_4_STATE.messageTransferFunctions[0] = function (m) {
                    return n_115_4_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_115_4_STATE.messageTransferFunctions.length; i++) {
                    n_115_7_RCVS_0(n_115_4_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_115_4", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_116_0_RCVS_0(m) {
                                
        n_116_6_RCVS_0(msg_bang())
n_116_2_RCVS_0(msg_bang())
        return
    
                                throw new Error('[trigger], id "n_116_0", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_116_2_RCVS_0(m) {
                                
            if (msg_getLength(m) === 1) {
                if (msg_isStringToken(m, 0)) {
                    const action = msg_readStringToken(m, 0)
                    if (action === 'bang' || action === 'start') {
                        n_delay_scheduleDelay(
                            n_116_2_STATE, 
                            () => n_116_5_RCVS_0(msg_bang()),
                            FRAME,
                        )
                        return
                    } else if (action === 'stop') {
                        n_delay_stop(n_116_2_STATE)
                        return
                    }
                    
                } else if (msg_isFloatToken(m, 0)) {
                    n_delay_setDelay(n_116_2_STATE, msg_readFloatToken(m, 0))
                    n_delay_scheduleDelay(
                        n_116_2_STATE,
                        () => n_116_5_RCVS_0(msg_bang()),
                        FRAME,
                    )
                    return 
                }
            
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN, MSG_STRING_TOKEN])
                && msg_readStringToken(m, 0) === 'tempo'
            ) {
                n_116_2_STATE.sampleRatio = computeUnitInSamples(
                    SAMPLE_RATE, 
                    msg_readFloatToken(m, 1), 
                    msg_readStringToken(m, 2)
                )
                return
            }
        
                                throw new Error('[delay], id "n_116_2", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_116_5_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_116_5_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_116_5_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_116_5_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_116_5_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_116_5_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_116_5_STATE.outMessages[0] = message
                n_116_5_STATE.messageTransferFunctions.splice(0, n_116_5_STATE.messageTransferFunctions.length - 1)
                n_116_5_STATE.messageTransferFunctions[0] = function (m) {
                    return n_116_5_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_116_5_STATE.messageTransferFunctions.length; i++) {
                    n_116_1_RCVS_0(n_116_5_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_116_5", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_116_1_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                n_float_int_setValueInt(n_116_1_STATE, msg_readFloatToken(m, 0))
                n_115_10_RCVS_1(msg_floats([n_116_1_STATE.value]))
                return 

            } else if (msg_isBang(m)) {
                n_115_10_RCVS_1(msg_floats([n_116_1_STATE.value]))
                return
                
            }
        
                                throw new Error('[int], id "n_116_1", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_116_6_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_116_6_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_116_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_116_6_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_116_6_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_116_6_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_116_6_STATE.outMessages[0] = message
                n_116_6_STATE.messageTransferFunctions.splice(0, n_116_6_STATE.messageTransferFunctions.length - 1)
                n_116_6_STATE.messageTransferFunctions[0] = function (m) {
                    return n_116_6_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_116_6_STATE.messageTransferFunctions.length; i++) {
                    n_116_1_RCVS_0(n_116_6_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_116_6", inlet "0", unsupported message : ' + msg_display(m))
                            }





function n_117_7_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                n_float_int_setValueInt(n_117_7_STATE, msg_readFloatToken(m, 0))
                n_117_2_RCVS_1(msg_floats([n_117_7_STATE.value]))
                return 

            } else if (msg_isBang(m)) {
                n_117_2_RCVS_1(msg_floats([n_117_7_STATE.value]))
                return
                
            }
        
                                throw new Error('[int], id "n_117_7", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_117_2_RCVS_0(m) {
                                
        if (!n_117_2_STATE.isClosed) {
            m_n_117_1_0__routemsg_RCVS_0(m)
        }
        return
    
                                throw new Error('[spigot], id "n_117_2", inlet "0", unsupported message : ' + msg_display(m))
                            }
function n_117_2_RCVS_1(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_spigot_setIsClosed(n_117_2_STATE, msg_readFloatToken(m, 0))
            return
        }
    
                                throw new Error('[spigot], id "n_117_2", inlet "1", unsupported message : ' + msg_display(m))
                            }

function m_n_117_1_0__routemsg_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                SND_TO_NULL(m)
                return
            } else {
                n_117_1_RCVS_0_message(m)
                return
            }
        
                                throw new Error('[_routemsg], id "m_n_117_1_0__routemsg", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_117_1_RCVS_0_message(m) {
                                
        if (msg_isBang(m)) {
            n_117_8_RCVS_0(msg_floats([n_117_1_STATE.currentValue]))
            return 
        }
    
                                throw new Error('[snapshot~], id "n_117_1", inlet "0_message", unsupported message : ' + msg_display(m))
                            }

function n_117_8_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                const newValue = msg_readFloatToken(m, 0)
                if (newValue !== n_117_8_STATE.currentValue) {
                    n_117_8_STATE.currentValue = newValue
                    n_117_11_RCVS_0(msg_floats([n_117_8_STATE.currentValue]))
                }
                return
    
            } else if (msg_isBang(m)) {
                n_117_11_RCVS_0(msg_floats([n_117_8_STATE.currentValue]))
                return 
    
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_117_8_STATE.currentValue = msg_readFloatToken(m, 1)
                return
            }
        
                                throw new Error('[change], id "n_117_8", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_117_11_RCVS_0(m) {
                                
        n_118_0_RCVS_0(msg_bang())
n_117_10_RCVS_0(msg_floats([messageTokenToFloat(m, 0)]))
        return
    
                                throw new Error('[trigger], id "n_117_11", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_117_10_RCVS_0(m) {
                                
        if (!n_117_10_STATE.isClosed) {
            n_117_13_RCVS_0(m)
        }
        return
    
                                throw new Error('[spigot], id "n_117_10", inlet "0", unsupported message : ' + msg_display(m))
                            }
function n_117_10_RCVS_1(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_spigot_setIsClosed(n_117_10_STATE, msg_readFloatToken(m, 0))
            return
        }
    
                                throw new Error('[spigot], id "n_117_10", inlet "1", unsupported message : ' + msg_display(m))
                            }

function n_117_13_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                const newValue = msg_readFloatToken(m, 0)
                if (newValue !== n_117_13_STATE.currentValue) {
                    n_117_13_STATE.currentValue = newValue
                    n_117_9_RCVS_0(msg_floats([n_117_13_STATE.currentValue]))
                }
                return
    
            } else if (msg_isBang(m)) {
                n_117_9_RCVS_0(msg_floats([n_117_13_STATE.currentValue]))
                return 
    
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_117_13_STATE.currentValue = msg_readFloatToken(m, 1)
                return
            }
        
                                throw new Error('[change], id "n_117_13", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_117_9_RCVS_0(m) {
                                
                if (n_117_9_STATE.filterType === MSG_STRING_TOKEN) {
                    if (
                        (n_117_9_STATE.stringFilter === 'float'
                            && msg_isFloatToken(m, 0))
                        || (n_117_9_STATE.stringFilter === 'symbol'
                            && msg_isStringToken(m, 0))
                        || (n_117_9_STATE.stringFilter === 'list'
                            && msg_getLength(m) > 1)
                        || (n_117_9_STATE.stringFilter === 'bang' 
                            && msg_isBang(m))
                    ) {
                        n_117_3_RCVS_0(m)
                        return
                    
                    } else if (
                        msg_isStringToken(m, 0)
                        && msg_readStringToken(m, 0) === n_117_9_STATE.stringFilter
                    ) {
                        n_117_3_RCVS_0(msg_emptyToBang(msg_shift(m)))
                        return
                    }

                } else if (
                    msg_isFloatToken(m, 0)
                    && msg_readFloatToken(m, 0) === n_117_9_STATE.floatFilter
                ) {
                    n_117_3_RCVS_0(msg_emptyToBang(msg_shift(m)))
                    return
                }
            
                SND_TO_NULL(m)
            return
            
                                throw new Error('[route], id "n_117_9", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_117_3_RCVS_0(m) {
                                
        n_117_5_RCVS_0(msg_bang())
n_45_28_RCVS_0(msg_bang())
        return
    
                                throw new Error('[trigger], id "n_117_3", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_117_5_RCVS_0(m) {
                                
        n_117_4_RCVS_0(msg_bang())
n_117_14_RCVS_0(msg_bang())
        return
    
                                throw new Error('[trigger], id "n_117_5", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_117_14_RCVS_0(m) {
                                
            if (msg_getLength(m) === 1) {
                if (msg_isStringToken(m, 0)) {
                    const action = msg_readStringToken(m, 0)
                    if (action === 'bang' || action === 'start') {
                        n_delay_scheduleDelay(
                            n_117_14_STATE, 
                            () => n_117_6_RCVS_0(msg_bang()),
                            FRAME,
                        )
                        return
                    } else if (action === 'stop') {
                        n_delay_stop(n_117_14_STATE)
                        return
                    }
                    
                } else if (msg_isFloatToken(m, 0)) {
                    n_delay_setDelay(n_117_14_STATE, msg_readFloatToken(m, 0))
                    n_delay_scheduleDelay(
                        n_117_14_STATE,
                        () => n_117_6_RCVS_0(msg_bang()),
                        FRAME,
                    )
                    return 
                }
            
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN, MSG_STRING_TOKEN])
                && msg_readStringToken(m, 0) === 'tempo'
            ) {
                n_117_14_STATE.sampleRatio = computeUnitInSamples(
                    SAMPLE_RATE, 
                    msg_readFloatToken(m, 1), 
                    msg_readStringToken(m, 2)
                )
                return
            }
        
                                throw new Error('[delay], id "n_117_14", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_117_6_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_117_6_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_117_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_117_6_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_117_6_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_117_6_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_117_6_STATE.outMessages[0] = message
                n_117_6_STATE.messageTransferFunctions.splice(0, n_117_6_STATE.messageTransferFunctions.length - 1)
                n_117_6_STATE.messageTransferFunctions[0] = function (m) {
                    return n_117_6_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_117_6_STATE.messageTransferFunctions.length; i++) {
                    n_117_7_RCVS_0(n_117_6_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_117_6", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_117_4_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_117_4_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_117_4_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_117_4_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_117_4_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_117_4_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_117_4_STATE.outMessages[0] = message
                n_117_4_STATE.messageTransferFunctions.splice(0, n_117_4_STATE.messageTransferFunctions.length - 1)
                n_117_4_STATE.messageTransferFunctions[0] = function (m) {
                    return n_117_4_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_117_4_STATE.messageTransferFunctions.length; i++) {
                    n_117_7_RCVS_0(n_117_4_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_117_4", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_118_0_RCVS_0(m) {
                                
        n_118_6_RCVS_0(msg_bang())
n_118_2_RCVS_0(msg_bang())
        return
    
                                throw new Error('[trigger], id "n_118_0", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_118_2_RCVS_0(m) {
                                
            if (msg_getLength(m) === 1) {
                if (msg_isStringToken(m, 0)) {
                    const action = msg_readStringToken(m, 0)
                    if (action === 'bang' || action === 'start') {
                        n_delay_scheduleDelay(
                            n_118_2_STATE, 
                            () => n_118_5_RCVS_0(msg_bang()),
                            FRAME,
                        )
                        return
                    } else if (action === 'stop') {
                        n_delay_stop(n_118_2_STATE)
                        return
                    }
                    
                } else if (msg_isFloatToken(m, 0)) {
                    n_delay_setDelay(n_118_2_STATE, msg_readFloatToken(m, 0))
                    n_delay_scheduleDelay(
                        n_118_2_STATE,
                        () => n_118_5_RCVS_0(msg_bang()),
                        FRAME,
                    )
                    return 
                }
            
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN, MSG_STRING_TOKEN])
                && msg_readStringToken(m, 0) === 'tempo'
            ) {
                n_118_2_STATE.sampleRatio = computeUnitInSamples(
                    SAMPLE_RATE, 
                    msg_readFloatToken(m, 1), 
                    msg_readStringToken(m, 2)
                )
                return
            }
        
                                throw new Error('[delay], id "n_118_2", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_118_5_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_118_5_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_118_5_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_118_5_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_118_5_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_118_5_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_118_5_STATE.outMessages[0] = message
                n_118_5_STATE.messageTransferFunctions.splice(0, n_118_5_STATE.messageTransferFunctions.length - 1)
                n_118_5_STATE.messageTransferFunctions[0] = function (m) {
                    return n_118_5_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_118_5_STATE.messageTransferFunctions.length; i++) {
                    n_118_1_RCVS_0(n_118_5_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_118_5", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_118_1_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                n_float_int_setValueInt(n_118_1_STATE, msg_readFloatToken(m, 0))
                n_117_10_RCVS_1(msg_floats([n_118_1_STATE.value]))
                return 

            } else if (msg_isBang(m)) {
                n_117_10_RCVS_1(msg_floats([n_118_1_STATE.value]))
                return
                
            }
        
                                throw new Error('[int], id "n_118_1", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_118_6_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_118_6_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_118_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_118_6_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_118_6_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_118_6_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_118_6_STATE.outMessages[0] = message
                n_118_6_STATE.messageTransferFunctions.splice(0, n_118_6_STATE.messageTransferFunctions.length - 1)
                n_118_6_STATE.messageTransferFunctions[0] = function (m) {
                    return n_118_6_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_118_6_STATE.messageTransferFunctions.length; i++) {
                    n_118_1_RCVS_0(n_118_6_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_118_6", inlet "0", unsupported message : ' + msg_display(m))
                            }





function n_47_0_RCVS_0(m) {
                                
            n_bang_receiveMessage(n_47_0_STATE, m)
            return
        
                                throw new Error('[bang], id "n_47_0", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_47_1_RCVS_0(m) {
                                
        if (msg_isBang(m)) {
            n_47_1_SNDS_0(msg_floats([Math.floor(Math.random() * n_47_1_STATE.maxValue)]))
            return
        } else if (
            msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
            && msg_readStringToken(m, 0) === 'seed'
        ) {
            console.log('WARNING : seed not implemented yet for [random]')
            return
        }
    
                                throw new Error('[random], id "n_47_1", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_47_2_RCVS_0(m) {
                                
                if (n_47_2_STATE.filterType === MSG_STRING_TOKEN) {
                    if (
                        (n_47_2_STATE.stringFilter === 'float'
                            && msg_isFloatToken(m, 0))
                        || (n_47_2_STATE.stringFilter === 'symbol'
                            && msg_isStringToken(m, 0))
                        || (n_47_2_STATE.stringFilter === 'list'
                            && msg_getLength(m) > 1)
                        || (n_47_2_STATE.stringFilter === 'bang' 
                            && msg_isBang(m))
                    ) {
                        n_47_3_RCVS_0(m)
                        return
                    
                    } else if (
                        msg_isStringToken(m, 0)
                        && msg_readStringToken(m, 0) === n_47_2_STATE.stringFilter
                    ) {
                        n_47_3_RCVS_0(msg_emptyToBang(msg_shift(m)))
                        return
                    }

                } else if (
                    msg_isFloatToken(m, 0)
                    && msg_readFloatToken(m, 0) === n_47_2_STATE.floatFilter
                ) {
                    n_47_3_RCVS_0(msg_emptyToBang(msg_shift(m)))
                    return
                }
            
                SND_TO_NULL(m)
            return
            
                                throw new Error('[route], id "n_47_2", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_47_3_RCVS_0(m) {
                                
            n_bang_receiveMessage(n_47_3_STATE, m)
            return
        
                                throw new Error('[bang], id "n_47_3", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_47_24_RCVS_0(m) {
                                
            msgBusPublish(n_47_24_STATE.busName, m)
            return
        
                                throw new Error('[send], id "n_47_24", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_47_4_RCVS_0(m) {
                                
                n_floatatom_receiveMessage(n_47_4_STATE, m)
                return
            
                                throw new Error('[floatatom], id "n_47_4", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_47_6_RCVS_0(m) {
                                
            n_bang_receiveMessage(n_47_6_STATE, m)
            return
        
                                throw new Error('[bang], id "n_47_6", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_47_15_RCVS_0(m) {
                                
        if (msg_isBang(m)) {
            n_47_15_SNDS_0(msg_floats([Math.floor(Math.random() * n_47_15_STATE.maxValue)]))
            return
        } else if (
            msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
            && msg_readStringToken(m, 0) === 'seed'
        ) {
            console.log('WARNING : seed not implemented yet for [random]')
            return
        }
    
                                throw new Error('[random], id "n_47_15", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_47_7_RCVS_0(m) {
                                
                if (n_47_7_STATE.filterType === MSG_STRING_TOKEN) {
                    if (
                        (n_47_7_STATE.stringFilter === 'float'
                            && msg_isFloatToken(m, 0))
                        || (n_47_7_STATE.stringFilter === 'symbol'
                            && msg_isStringToken(m, 0))
                        || (n_47_7_STATE.stringFilter === 'list'
                            && msg_getLength(m) > 1)
                        || (n_47_7_STATE.stringFilter === 'bang' 
                            && msg_isBang(m))
                    ) {
                        n_47_8_RCVS_0(m)
                        return
                    
                    } else if (
                        msg_isStringToken(m, 0)
                        && msg_readStringToken(m, 0) === n_47_7_STATE.stringFilter
                    ) {
                        n_47_8_RCVS_0(msg_emptyToBang(msg_shift(m)))
                        return
                    }

                } else if (
                    msg_isFloatToken(m, 0)
                    && msg_readFloatToken(m, 0) === n_47_7_STATE.floatFilter
                ) {
                    n_47_8_RCVS_0(msg_emptyToBang(msg_shift(m)))
                    return
                }
            
                SND_TO_NULL(m)
            return
            
                                throw new Error('[route], id "n_47_7", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_47_8_RCVS_0(m) {
                                
            n_bang_receiveMessage(n_47_8_STATE, m)
            return
        
                                throw new Error('[bang], id "n_47_8", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_47_23_RCVS_0(m) {
                                
            msgBusPublish(n_47_23_STATE.busName, m)
            return
        
                                throw new Error('[send], id "n_47_23", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_47_9_RCVS_0(m) {
                                
                n_floatatom_receiveMessage(n_47_9_STATE, m)
                return
            
                                throw new Error('[floatatom], id "n_47_9", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_47_10_RCVS_0(m) {
                                
            n_bang_receiveMessage(n_47_10_STATE, m)
            return
        
                                throw new Error('[bang], id "n_47_10", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_47_14_RCVS_0(m) {
                                
        if (msg_isBang(m)) {
            n_47_14_SNDS_0(msg_floats([Math.floor(Math.random() * n_47_14_STATE.maxValue)]))
            return
        } else if (
            msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
            && msg_readStringToken(m, 0) === 'seed'
        ) {
            console.log('WARNING : seed not implemented yet for [random]')
            return
        }
    
                                throw new Error('[random], id "n_47_14", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_47_11_RCVS_0(m) {
                                
                if (n_47_11_STATE.filterType === MSG_STRING_TOKEN) {
                    if (
                        (n_47_11_STATE.stringFilter === 'float'
                            && msg_isFloatToken(m, 0))
                        || (n_47_11_STATE.stringFilter === 'symbol'
                            && msg_isStringToken(m, 0))
                        || (n_47_11_STATE.stringFilter === 'list'
                            && msg_getLength(m) > 1)
                        || (n_47_11_STATE.stringFilter === 'bang' 
                            && msg_isBang(m))
                    ) {
                        n_47_12_RCVS_0(m)
                        return
                    
                    } else if (
                        msg_isStringToken(m, 0)
                        && msg_readStringToken(m, 0) === n_47_11_STATE.stringFilter
                    ) {
                        n_47_12_RCVS_0(msg_emptyToBang(msg_shift(m)))
                        return
                    }

                } else if (
                    msg_isFloatToken(m, 0)
                    && msg_readFloatToken(m, 0) === n_47_11_STATE.floatFilter
                ) {
                    n_47_12_RCVS_0(msg_emptyToBang(msg_shift(m)))
                    return
                }
            
                SND_TO_NULL(m)
            return
            
                                throw new Error('[route], id "n_47_11", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_47_12_RCVS_0(m) {
                                
            n_bang_receiveMessage(n_47_12_STATE, m)
            return
        
                                throw new Error('[bang], id "n_47_12", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_47_22_RCVS_0(m) {
                                
            msgBusPublish(n_47_22_STATE.busName, m)
            return
        
                                throw new Error('[send], id "n_47_22", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_47_13_RCVS_0(m) {
                                
                n_floatatom_receiveMessage(n_47_13_STATE, m)
                return
            
                                throw new Error('[floatatom], id "n_47_13", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_47_16_RCVS_0(m) {
                                
            n_bang_receiveMessage(n_47_16_STATE, m)
            return
        
                                throw new Error('[bang], id "n_47_16", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_47_20_RCVS_0(m) {
                                
        if (msg_isBang(m)) {
            n_47_20_SNDS_0(msg_floats([Math.floor(Math.random() * n_47_20_STATE.maxValue)]))
            return
        } else if (
            msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
            && msg_readStringToken(m, 0) === 'seed'
        ) {
            console.log('WARNING : seed not implemented yet for [random]')
            return
        }
    
                                throw new Error('[random], id "n_47_20", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_47_17_RCVS_0(m) {
                                
                if (n_47_17_STATE.filterType === MSG_STRING_TOKEN) {
                    if (
                        (n_47_17_STATE.stringFilter === 'float'
                            && msg_isFloatToken(m, 0))
                        || (n_47_17_STATE.stringFilter === 'symbol'
                            && msg_isStringToken(m, 0))
                        || (n_47_17_STATE.stringFilter === 'list'
                            && msg_getLength(m) > 1)
                        || (n_47_17_STATE.stringFilter === 'bang' 
                            && msg_isBang(m))
                    ) {
                        n_47_18_RCVS_0(m)
                        return
                    
                    } else if (
                        msg_isStringToken(m, 0)
                        && msg_readStringToken(m, 0) === n_47_17_STATE.stringFilter
                    ) {
                        n_47_18_RCVS_0(msg_emptyToBang(msg_shift(m)))
                        return
                    }

                } else if (
                    msg_isFloatToken(m, 0)
                    && msg_readFloatToken(m, 0) === n_47_17_STATE.floatFilter
                ) {
                    n_47_18_RCVS_0(msg_emptyToBang(msg_shift(m)))
                    return
                }
            
                SND_TO_NULL(m)
            return
            
                                throw new Error('[route], id "n_47_17", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_47_18_RCVS_0(m) {
                                
            n_bang_receiveMessage(n_47_18_STATE, m)
            return
        
                                throw new Error('[bang], id "n_47_18", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_47_21_RCVS_0(m) {
                                
            msgBusPublish(n_47_21_STATE.busName, m)
            return
        
                                throw new Error('[send], id "n_47_21", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_47_19_RCVS_0(m) {
                                
                n_floatatom_receiveMessage(n_47_19_STATE, m)
                return
            
                                throw new Error('[floatatom], id "n_47_19", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_47_28_RCVS_0(m) {
                                
            n_bang_receiveMessage(n_47_28_STATE, m)
            return
        
                                throw new Error('[bang], id "n_47_28", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_47_29_RCVS_0(m) {
                                
        if (msg_isBang(m)) {
            n_47_30_RCVS_0(msg_floats([Math.floor(Math.random() * n_47_29_STATE.maxValue)]))
            return
        } else if (
            msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
            && msg_readStringToken(m, 0) === 'seed'
        ) {
            console.log('WARNING : seed not implemented yet for [random]')
            return
        }
    
                                throw new Error('[random], id "n_47_29", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_47_30_RCVS_0(m) {
                                
                
                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 0
                        ) {
                            n_47_31_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 1
                        ) {
                            n_47_32_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 2
                        ) {
                            n_47_33_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 3
                        ) {
                            n_47_34_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                SND_TO_NULL(m)
                return
            
                                throw new Error('[route], id "n_47_30", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_47_31_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_47_31_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_47_31_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_47_31_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_47_31_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_47_31_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_47_31_STATE.outMessages[0] = message
                n_47_31_STATE.messageTransferFunctions.splice(0, n_47_31_STATE.messageTransferFunctions.length - 1)
                n_47_31_STATE.messageTransferFunctions[0] = function (m) {
                    return n_47_31_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_47_31_STATE.messageTransferFunctions.length; i++) {
                    n_47_35_RCVS_0(n_47_31_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_47_31", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_47_35_RCVS_0(m) {
                                
            msgBusPublish(n_47_35_STATE.busName, m)
            return
        
                                throw new Error('[send], id "n_47_35", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_47_32_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_47_32_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_47_32_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_47_32_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_47_32_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_47_32_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_47_32_STATE.outMessages[0] = message
                n_47_32_STATE.messageTransferFunctions.splice(0, n_47_32_STATE.messageTransferFunctions.length - 1)
                n_47_32_STATE.messageTransferFunctions[0] = function (m) {
                    return n_47_32_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_47_32_STATE.messageTransferFunctions.length; i++) {
                    n_47_35_RCVS_0(n_47_32_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_47_32", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_47_33_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_47_33_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_47_33_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_47_33_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_47_33_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_47_33_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_47_33_STATE.outMessages[0] = message
                n_47_33_STATE.messageTransferFunctions.splice(0, n_47_33_STATE.messageTransferFunctions.length - 1)
                n_47_33_STATE.messageTransferFunctions[0] = function (m) {
                    return n_47_33_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_47_33_STATE.messageTransferFunctions.length; i++) {
                    n_47_35_RCVS_0(n_47_33_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_47_33", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_47_34_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_47_34_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_47_34_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_47_34_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_47_34_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_47_34_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_47_34_STATE.outMessages[0] = message
                n_47_34_STATE.messageTransferFunctions.splice(0, n_47_34_STATE.messageTransferFunctions.length - 1)
                n_47_34_STATE.messageTransferFunctions[0] = function (m) {
                    return n_47_34_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_47_34_STATE.messageTransferFunctions.length; i++) {
                    n_47_35_RCVS_0(n_47_34_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_47_34", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_47_36_RCVS_0(m) {
                                
            n_bang_receiveMessage(n_47_36_STATE, m)
            return
        
                                throw new Error('[bang], id "n_47_36", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_47_40_RCVS_0(m) {
                                
        if (msg_isBang(m)) {
            n_47_40_SNDS_0(msg_floats([Math.floor(Math.random() * n_47_40_STATE.maxValue)]))
            return
        } else if (
            msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
            && msg_readStringToken(m, 0) === 'seed'
        ) {
            console.log('WARNING : seed not implemented yet for [random]')
            return
        }
    
                                throw new Error('[random], id "n_47_40", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_47_37_RCVS_0(m) {
                                
                if (n_47_37_STATE.filterType === MSG_STRING_TOKEN) {
                    if (
                        (n_47_37_STATE.stringFilter === 'float'
                            && msg_isFloatToken(m, 0))
                        || (n_47_37_STATE.stringFilter === 'symbol'
                            && msg_isStringToken(m, 0))
                        || (n_47_37_STATE.stringFilter === 'list'
                            && msg_getLength(m) > 1)
                        || (n_47_37_STATE.stringFilter === 'bang' 
                            && msg_isBang(m))
                    ) {
                        n_47_38_RCVS_0(m)
                        return
                    
                    } else if (
                        msg_isStringToken(m, 0)
                        && msg_readStringToken(m, 0) === n_47_37_STATE.stringFilter
                    ) {
                        n_47_38_RCVS_0(msg_emptyToBang(msg_shift(m)))
                        return
                    }

                } else if (
                    msg_isFloatToken(m, 0)
                    && msg_readFloatToken(m, 0) === n_47_37_STATE.floatFilter
                ) {
                    n_47_38_RCVS_0(msg_emptyToBang(msg_shift(m)))
                    return
                }
            
                SND_TO_NULL(m)
            return
            
                                throw new Error('[route], id "n_47_37", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_47_38_RCVS_0(m) {
                                
            n_bang_receiveMessage(n_47_38_STATE, m)
            return
        
                                throw new Error('[bang], id "n_47_38", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_47_42_RCVS_0(m) {
                                
            msgBusPublish(n_47_42_STATE.busName, m)
            return
        
                                throw new Error('[send], id "n_47_42", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_47_39_RCVS_0(m) {
                                
                n_floatatom_receiveMessage(n_47_39_STATE, m)
                return
            
                                throw new Error('[floatatom], id "n_47_39", inlet "0", unsupported message : ' + msg_display(m))
                            }





function n_47_45_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_47_45_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_47_45_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_47_45_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_47_45_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_47_45_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_47_45_STATE.outMessages[0] = message
                n_47_45_STATE.messageTransferFunctions.splice(0, n_47_45_STATE.messageTransferFunctions.length - 1)
                n_47_45_STATE.messageTransferFunctions[0] = function (m) {
                    return n_47_45_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_47_45_STATE.messageTransferFunctions.length; i++) {
                    n_119_17_RCVS_1(n_47_45_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_47_45", inlet "0", unsupported message : ' + msg_display(m))
                            }
let n_119_17_OUTS_0 = 0
function n_119_17_RCVS_1(m) {
                                
                            n_119_17_STATE.floatInputs.set(1, messageTokenToFloat(m, 0))
                            return
                        
                                throw new Error('[expr~], id "n_119_17", inlet "1", unsupported message : ' + msg_display(m))
                            }

function n_47_46_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_47_46_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_47_46_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_47_46_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_47_46_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_47_46_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_47_46_STATE.outMessages[0] = message
                n_47_46_STATE.messageTransferFunctions.splice(0, n_47_46_STATE.messageTransferFunctions.length - 1)
                n_47_46_STATE.messageTransferFunctions[0] = function (m) {
                    return n_47_46_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_47_46_STATE.messageTransferFunctions.length; i++) {
                    n_121_17_RCVS_1(n_47_46_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_47_46", inlet "0", unsupported message : ' + msg_display(m))
                            }
let n_121_17_OUTS_0 = 0
function n_121_17_RCVS_1(m) {
                                
                            n_121_17_STATE.floatInputs.set(1, messageTokenToFloat(m, 0))
                            return
                        
                                throw new Error('[expr~], id "n_121_17", inlet "1", unsupported message : ' + msg_display(m))
                            }

function n_47_47_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_47_47_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_47_47_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_47_47_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_47_47_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_47_47_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_47_47_STATE.outMessages[0] = message
                n_47_47_STATE.messageTransferFunctions.splice(0, n_47_47_STATE.messageTransferFunctions.length - 1)
                n_47_47_STATE.messageTransferFunctions[0] = function (m) {
                    return n_47_47_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_47_47_STATE.messageTransferFunctions.length; i++) {
                    n_123_17_RCVS_1(n_47_47_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_47_47", inlet "0", unsupported message : ' + msg_display(m))
                            }
let n_123_17_OUTS_0 = 0
function n_123_17_RCVS_1(m) {
                                
                            n_123_17_STATE.floatInputs.set(1, messageTokenToFloat(m, 0))
                            return
                        
                                throw new Error('[expr~], id "n_123_17", inlet "1", unsupported message : ' + msg_display(m))
                            }

function n_47_48_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_47_48_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_47_48_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_47_48_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_47_48_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_47_48_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_47_48_STATE.outMessages[0] = message
                n_47_48_STATE.messageTransferFunctions.splice(0, n_47_48_STATE.messageTransferFunctions.length - 1)
                n_47_48_STATE.messageTransferFunctions[0] = function (m) {
                    return n_47_48_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_47_48_STATE.messageTransferFunctions.length; i++) {
                    n_125_17_RCVS_1(n_47_48_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_47_48", inlet "0", unsupported message : ' + msg_display(m))
                            }
let n_125_17_OUTS_0 = 0
function n_125_17_RCVS_1(m) {
                                
                            n_125_17_STATE.floatInputs.set(1, messageTokenToFloat(m, 0))
                            return
                        
                                throw new Error('[expr~], id "n_125_17", inlet "1", unsupported message : ' + msg_display(m))
                            }

function n_47_49_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_47_49_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_47_49_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_47_49_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_47_49_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_47_49_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_47_49_STATE.outMessages[0] = message
                n_47_49_STATE.messageTransferFunctions.splice(0, n_47_49_STATE.messageTransferFunctions.length - 1)
                n_47_49_STATE.messageTransferFunctions[0] = function (m) {
                    return n_47_49_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_47_49_STATE.messageTransferFunctions.length; i++) {
                    n_127_17_RCVS_1(n_47_49_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_47_49", inlet "0", unsupported message : ' + msg_display(m))
                            }
let n_127_17_OUTS_0 = 0
function n_127_17_RCVS_1(m) {
                                
                            n_127_17_STATE.floatInputs.set(1, messageTokenToFloat(m, 0))
                            return
                        
                                throw new Error('[expr~], id "n_127_17", inlet "1", unsupported message : ' + msg_display(m))
                            }

function n_47_50_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_47_50_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_47_50_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_47_50_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_47_50_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_47_50_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_47_50_STATE.outMessages[0] = message
                n_47_50_STATE.messageTransferFunctions.splice(0, n_47_50_STATE.messageTransferFunctions.length - 1)
                n_47_50_STATE.messageTransferFunctions[0] = function (m) {
                    return n_47_50_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_47_50_STATE.messageTransferFunctions.length; i++) {
                    n_129_17_RCVS_1(n_47_50_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_47_50", inlet "0", unsupported message : ' + msg_display(m))
                            }
let n_129_17_OUTS_0 = 0
function n_129_17_RCVS_1(m) {
                                
                            n_129_17_STATE.floatInputs.set(1, messageTokenToFloat(m, 0))
                            return
                        
                                throw new Error('[expr~], id "n_129_17", inlet "1", unsupported message : ' + msg_display(m))
                            }

function n_48_0_RCVS_0(m) {
                                
            n_bang_receiveMessage(n_48_0_STATE, m)
            return
        
                                throw new Error('[bang], id "n_48_0", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_48_1_RCVS_0(m) {
                                
        if (msg_isBang(m)) {
            n_48_2_RCVS_0(msg_floats([Math.floor(Math.random() * n_48_1_STATE.maxValue)]))
            return
        } else if (
            msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
            && msg_readStringToken(m, 0) === 'seed'
        ) {
            console.log('WARNING : seed not implemented yet for [random]')
            return
        }
    
                                throw new Error('[random], id "n_48_1", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_48_2_RCVS_0(m) {
                                
                if (n_48_2_STATE.filterType === MSG_STRING_TOKEN) {
                    if (
                        (n_48_2_STATE.stringFilter === 'float'
                            && msg_isFloatToken(m, 0))
                        || (n_48_2_STATE.stringFilter === 'symbol'
                            && msg_isStringToken(m, 0))
                        || (n_48_2_STATE.stringFilter === 'list'
                            && msg_getLength(m) > 1)
                        || (n_48_2_STATE.stringFilter === 'bang' 
                            && msg_isBang(m))
                    ) {
                        n_48_4_RCVS_0(m)
                        return
                    
                    } else if (
                        msg_isStringToken(m, 0)
                        && msg_readStringToken(m, 0) === n_48_2_STATE.stringFilter
                    ) {
                        n_48_4_RCVS_0(msg_emptyToBang(msg_shift(m)))
                        return
                    }

                } else if (
                    msg_isFloatToken(m, 0)
                    && msg_readFloatToken(m, 0) === n_48_2_STATE.floatFilter
                ) {
                    n_48_4_RCVS_0(msg_emptyToBang(msg_shift(m)))
                    return
                }
            
                n_48_3_RCVS_0(m)
            return
            
                                throw new Error('[route], id "n_48_2", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_48_4_RCVS_0(m) {
                                
        if (msg_isBang(m)) {
            n_48_34_RCVS_0(msg_floats([Math.floor(Math.random() * n_48_4_STATE.maxValue)]))
            return
        } else if (
            msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
            && msg_readStringToken(m, 0) === 'seed'
        ) {
            console.log('WARNING : seed not implemented yet for [random]')
            return
        }
    
                                throw new Error('[random], id "n_48_4", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_48_34_RCVS_0(m) {
                                
                if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                    n_mul_setLeft(n_48_34_STATE, msg_readFloatToken(m, 0))
                    n_48_40_RCVS_0(msg_floats([n_48_34_STATE.leftOp * n_48_34_STATE.rightOp]))
                    return
                
                } else if (msg_isBang(m)) {
                    n_48_40_RCVS_0(msg_floats([n_48_34_STATE.leftOp * n_48_34_STATE.rightOp]))
                    return
                }
            
                                throw new Error('[*], id "n_48_34", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_48_40_RCVS_0(m) {
                                
            msgBusPublish(n_48_40_STATE.busName, m)
            return
        
                                throw new Error('[send], id "n_48_40", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_48_3_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_48_3_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_48_3_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_48_3_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_48_3_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_48_3_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_48_3_STATE.outMessages[0] = message
                n_48_3_STATE.messageTransferFunctions.splice(0, n_48_3_STATE.messageTransferFunctions.length - 1)
                n_48_3_STATE.messageTransferFunctions[0] = function (m) {
                    return n_48_3_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_48_3_STATE.messageTransferFunctions.length; i++) {
                    n_48_34_RCVS_0(n_48_3_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_48_3", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_48_5_RCVS_0(m) {
                                
            n_bang_receiveMessage(n_48_5_STATE, m)
            return
        
                                throw new Error('[bang], id "n_48_5", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_48_8_RCVS_0(m) {
                                
        if (msg_isBang(m)) {
            n_48_19_RCVS_0(msg_floats([Math.floor(Math.random() * n_48_8_STATE.maxValue)]))
            return
        } else if (
            msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
            && msg_readStringToken(m, 0) === 'seed'
        ) {
            console.log('WARNING : seed not implemented yet for [random]')
            return
        }
    
                                throw new Error('[random], id "n_48_8", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_48_19_RCVS_0(m) {
                                
                
                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 0
                        ) {
                            n_48_6_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 1
                        ) {
                            n_48_17_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 2
                        ) {
                            n_48_7_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 3
                        ) {
                            n_48_16_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                SND_TO_NULL(m)
                return
            
                                throw new Error('[route], id "n_48_19", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_48_6_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_48_6_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_48_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_48_6_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_48_6_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_48_6_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_48_6_STATE.outMessages[0] = message
                n_48_6_STATE.messageTransferFunctions.splice(0, n_48_6_STATE.messageTransferFunctions.length - 1)
                n_48_6_STATE.messageTransferFunctions[0] = function (m) {
                    return n_48_6_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_48_6_STATE.messageTransferFunctions.length; i++) {
                    n_48_41_RCVS_0(n_48_6_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_48_6", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_48_41_RCVS_0(m) {
                                
            msgBusPublish(n_48_41_STATE.busName, m)
            return
        
                                throw new Error('[send], id "n_48_41", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_48_17_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_48_17_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_48_17_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_48_17_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_48_17_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_48_17_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_48_17_STATE.outMessages[0] = message
                n_48_17_STATE.messageTransferFunctions.splice(0, n_48_17_STATE.messageTransferFunctions.length - 1)
                n_48_17_STATE.messageTransferFunctions[0] = function (m) {
                    return n_48_17_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_48_17_STATE.messageTransferFunctions.length; i++) {
                    n_48_41_RCVS_0(n_48_17_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_48_17", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_48_7_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_48_7_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_48_7_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_48_7_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_48_7_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_48_7_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_48_7_STATE.outMessages[0] = message
                n_48_7_STATE.messageTransferFunctions.splice(0, n_48_7_STATE.messageTransferFunctions.length - 1)
                n_48_7_STATE.messageTransferFunctions[0] = function (m) {
                    return n_48_7_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_48_7_STATE.messageTransferFunctions.length; i++) {
                    n_48_41_RCVS_0(n_48_7_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_48_7", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_48_16_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_48_16_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_48_16_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_48_16_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_48_16_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_48_16_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_48_16_STATE.outMessages[0] = message
                n_48_16_STATE.messageTransferFunctions.splice(0, n_48_16_STATE.messageTransferFunctions.length - 1)
                n_48_16_STATE.messageTransferFunctions[0] = function (m) {
                    return n_48_16_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_48_16_STATE.messageTransferFunctions.length; i++) {
                    n_48_41_RCVS_0(n_48_16_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_48_16", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_48_9_RCVS_0(m) {
                                
            n_bang_receiveMessage(n_48_9_STATE, m)
            return
        
                                throw new Error('[bang], id "n_48_9", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_48_10_RCVS_0(m) {
                                
        if (msg_isBang(m)) {
            n_48_11_RCVS_0(msg_floats([Math.floor(Math.random() * n_48_10_STATE.maxValue)]))
            return
        } else if (
            msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
            && msg_readStringToken(m, 0) === 'seed'
        ) {
            console.log('WARNING : seed not implemented yet for [random]')
            return
        }
    
                                throw new Error('[random], id "n_48_10", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_48_11_RCVS_0(m) {
                                
                if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                    n_mul_setLeft(n_48_11_STATE, msg_readFloatToken(m, 0))
                    n_48_35_RCVS_0(msg_floats([n_48_11_STATE.leftOp * n_48_11_STATE.rightOp]))
                    return
                
                } else if (msg_isBang(m)) {
                    n_48_35_RCVS_0(msg_floats([n_48_11_STATE.leftOp * n_48_11_STATE.rightOp]))
                    return
                }
            
                                throw new Error('[*], id "n_48_11", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_48_35_RCVS_0(m) {
                                
            msgBusPublish(n_48_35_STATE.busName, m)
            return
        
                                throw new Error('[send], id "n_48_35", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_48_12_RCVS_0(m) {
                                
            n_bang_receiveMessage(n_48_12_STATE, m)
            return
        
                                throw new Error('[bang], id "n_48_12", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_48_13_RCVS_0(m) {
                                
        if (msg_isBang(m)) {
            n_48_14_RCVS_0(msg_floats([Math.floor(Math.random() * n_48_13_STATE.maxValue)]))
            return
        } else if (
            msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
            && msg_readStringToken(m, 0) === 'seed'
        ) {
            console.log('WARNING : seed not implemented yet for [random]')
            return
        }
    
                                throw new Error('[random], id "n_48_13", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_48_14_RCVS_0(m) {
                                
                if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                    n_mul_setLeft(n_48_14_STATE, msg_readFloatToken(m, 0))
                    n_48_42_RCVS_0(msg_floats([n_48_14_STATE.leftOp * n_48_14_STATE.rightOp]))
                    return
                
                } else if (msg_isBang(m)) {
                    n_48_42_RCVS_0(msg_floats([n_48_14_STATE.leftOp * n_48_14_STATE.rightOp]))
                    return
                }
            
                                throw new Error('[*], id "n_48_14", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_48_42_RCVS_0(m) {
                                
            msgBusPublish(n_48_42_STATE.busName, m)
            return
        
                                throw new Error('[send], id "n_48_42", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_48_15_RCVS_0(m) {
                                
            n_bang_receiveMessage(n_48_15_STATE, m)
            return
        
                                throw new Error('[bang], id "n_48_15", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_48_33_RCVS_0(m) {
                                
        n_48_32_RCVS_0(msg_bang())
n_48_24_RCVS_0(msg_bang())
        return
    
                                throw new Error('[trigger], id "n_48_33", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_48_24_RCVS_0(m) {
                                
        if (msg_isBang(m)) {
            n_48_25_RCVS_0(msg_floats([Math.floor(Math.random() * n_48_24_STATE.maxValue)]))
            return
        } else if (
            msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
            && msg_readStringToken(m, 0) === 'seed'
        ) {
            console.log('WARNING : seed not implemented yet for [random]')
            return
        }
    
                                throw new Error('[random], id "n_48_24", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_48_25_RCVS_0(m) {
                                
                
                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 0
                        ) {
                            n_48_21_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 1
                        ) {
                            n_48_22_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 2
                        ) {
                            n_48_27_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 3
                        ) {
                            n_48_20_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 4
                        ) {
                            n_48_23_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 5
                        ) {
                            n_48_26_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                SND_TO_NULL(m)
                return
            
                                throw new Error('[route], id "n_48_25", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_48_21_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_48_21_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_48_21_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_48_21_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_48_21_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_48_21_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_48_21_STATE.outMessages[0] = message
                n_48_21_STATE.messageTransferFunctions.splice(0, n_48_21_STATE.messageTransferFunctions.length - 1)
                n_48_21_STATE.messageTransferFunctions[0] = function (m) {
                    return n_48_21_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_48_21_STATE.messageTransferFunctions.length; i++) {
                    m_n_48_31_0__routemsg_RCVS_0(n_48_21_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_48_21", inlet "0", unsupported message : ' + msg_display(m))
                            }

function m_n_48_31_0__routemsg_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                m_n_48_31_0_sig_RCVS_0(m)
                return
            } else {
                SND_TO_NULL(m)
                return
            }
        
                                throw new Error('[_routemsg], id "m_n_48_31_0__routemsg", inlet "0", unsupported message : ' + msg_display(m))
                            }

function m_n_48_31_0_sig_RCVS_0(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            m_n_48_31_0_sig_STATE.currentValue = msg_readFloatToken(m, 0)
            return
        }
    
                                throw new Error('[sig~], id "m_n_48_31_0_sig", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_48_22_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_48_22_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_48_22_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_48_22_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_48_22_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_48_22_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_48_22_STATE.outMessages[0] = message
                n_48_22_STATE.messageTransferFunctions.splice(0, n_48_22_STATE.messageTransferFunctions.length - 1)
                n_48_22_STATE.messageTransferFunctions[0] = function (m) {
                    return n_48_22_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_48_22_STATE.messageTransferFunctions.length; i++) {
                    m_n_48_31_0__routemsg_RCVS_0(n_48_22_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_48_22", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_48_27_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_48_27_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_48_27_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_48_27_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_48_27_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_48_27_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_48_27_STATE.outMessages[0] = message
                n_48_27_STATE.messageTransferFunctions.splice(0, n_48_27_STATE.messageTransferFunctions.length - 1)
                n_48_27_STATE.messageTransferFunctions[0] = function (m) {
                    return n_48_27_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_48_27_STATE.messageTransferFunctions.length; i++) {
                    m_n_48_31_0__routemsg_RCVS_0(n_48_27_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_48_27", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_48_20_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_48_20_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_48_20_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_48_20_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_48_20_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_48_20_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_48_20_STATE.outMessages[0] = message
                n_48_20_STATE.messageTransferFunctions.splice(0, n_48_20_STATE.messageTransferFunctions.length - 1)
                n_48_20_STATE.messageTransferFunctions[0] = function (m) {
                    return n_48_20_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_48_20_STATE.messageTransferFunctions.length; i++) {
                    m_n_48_31_0__routemsg_RCVS_0(n_48_20_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_48_20", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_48_23_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_48_23_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_48_23_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_48_23_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_48_23_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_48_23_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_48_23_STATE.outMessages[0] = message
                n_48_23_STATE.messageTransferFunctions.splice(0, n_48_23_STATE.messageTransferFunctions.length - 1)
                n_48_23_STATE.messageTransferFunctions[0] = function (m) {
                    return n_48_23_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_48_23_STATE.messageTransferFunctions.length; i++) {
                    m_n_48_31_0__routemsg_RCVS_0(n_48_23_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_48_23", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_48_26_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_48_26_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_48_26_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_48_26_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_48_26_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_48_26_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_48_26_STATE.outMessages[0] = message
                n_48_26_STATE.messageTransferFunctions.splice(0, n_48_26_STATE.messageTransferFunctions.length - 1)
                n_48_26_STATE.messageTransferFunctions[0] = function (m) {
                    return n_48_26_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_48_26_STATE.messageTransferFunctions.length; i++) {
                    m_n_48_31_0__routemsg_RCVS_0(n_48_26_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_48_26", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_48_32_RCVS_0(m) {
                                
        if (msg_isBang(m)) {
            n_48_28_RCVS_0(msg_floats([Math.floor(Math.random() * n_48_32_STATE.maxValue)]))
            return
        } else if (
            msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
            && msg_readStringToken(m, 0) === 'seed'
        ) {
            console.log('WARNING : seed not implemented yet for [random]')
            return
        }
    
                                throw new Error('[random], id "n_48_32", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_48_28_RCVS_0(m) {
                                
                if (n_48_28_STATE.filterType === MSG_STRING_TOKEN) {
                    if (
                        (n_48_28_STATE.stringFilter === 'float'
                            && msg_isFloatToken(m, 0))
                        || (n_48_28_STATE.stringFilter === 'symbol'
                            && msg_isStringToken(m, 0))
                        || (n_48_28_STATE.stringFilter === 'list'
                            && msg_getLength(m) > 1)
                        || (n_48_28_STATE.stringFilter === 'bang' 
                            && msg_isBang(m))
                    ) {
                        n_48_29_RCVS_0(m)
                        return
                    
                    } else if (
                        msg_isStringToken(m, 0)
                        && msg_readStringToken(m, 0) === n_48_28_STATE.stringFilter
                    ) {
                        n_48_29_RCVS_0(msg_emptyToBang(msg_shift(m)))
                        return
                    }

                } else if (
                    msg_isFloatToken(m, 0)
                    && msg_readFloatToken(m, 0) === n_48_28_STATE.floatFilter
                ) {
                    n_48_29_RCVS_0(msg_emptyToBang(msg_shift(m)))
                    return
                }
            
                n_48_30_RCVS_0(m)
            return
            
                                throw new Error('[route], id "n_48_28", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_48_29_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_48_29_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_48_29_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_48_29_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_48_29_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_48_29_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_48_29_STATE.outMessages[0] = message
                n_48_29_STATE.messageTransferFunctions.splice(0, n_48_29_STATE.messageTransferFunctions.length - 1)
                n_48_29_STATE.messageTransferFunctions[0] = function (m) {
                    return n_48_29_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_48_29_STATE.messageTransferFunctions.length; i++) {
                    m_n_48_31_1__routemsg_RCVS_0(n_48_29_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_48_29", inlet "0", unsupported message : ' + msg_display(m))
                            }

function m_n_48_31_1__routemsg_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                m_n_48_31_1_sig_RCVS_0(m)
                return
            } else {
                SND_TO_NULL(m)
                return
            }
        
                                throw new Error('[_routemsg], id "m_n_48_31_1__routemsg", inlet "0", unsupported message : ' + msg_display(m))
                            }

function m_n_48_31_1_sig_RCVS_0(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            m_n_48_31_1_sig_STATE.currentValue = msg_readFloatToken(m, 0)
            return
        }
    
                                throw new Error('[sig~], id "m_n_48_31_1_sig", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_48_30_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_48_30_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_48_30_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_48_30_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_48_30_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_48_30_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_48_30_STATE.outMessages[0] = message
                n_48_30_STATE.messageTransferFunctions.splice(0, n_48_30_STATE.messageTransferFunctions.length - 1)
                n_48_30_STATE.messageTransferFunctions[0] = function (m) {
                    return n_48_30_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_48_30_STATE.messageTransferFunctions.length; i++) {
                    m_n_48_31_1__routemsg_RCVS_0(n_48_30_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_48_30", inlet "0", unsupported message : ' + msg_display(m))
                            }











function n_119_7_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                n_float_int_setValueInt(n_119_7_STATE, msg_readFloatToken(m, 0))
                n_119_2_RCVS_1(msg_floats([n_119_7_STATE.value]))
                return 

            } else if (msg_isBang(m)) {
                n_119_2_RCVS_1(msg_floats([n_119_7_STATE.value]))
                return
                
            }
        
                                throw new Error('[int], id "n_119_7", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_119_2_RCVS_0(m) {
                                
        if (!n_119_2_STATE.isClosed) {
            m_n_119_1_0__routemsg_RCVS_0(m)
        }
        return
    
                                throw new Error('[spigot], id "n_119_2", inlet "0", unsupported message : ' + msg_display(m))
                            }
function n_119_2_RCVS_1(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_spigot_setIsClosed(n_119_2_STATE, msg_readFloatToken(m, 0))
            return
        }
    
                                throw new Error('[spigot], id "n_119_2", inlet "1", unsupported message : ' + msg_display(m))
                            }

function m_n_119_1_0__routemsg_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                SND_TO_NULL(m)
                return
            } else {
                n_119_1_RCVS_0_message(m)
                return
            }
        
                                throw new Error('[_routemsg], id "m_n_119_1_0__routemsg", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_119_1_RCVS_0_message(m) {
                                
        if (msg_isBang(m)) {
            n_119_8_RCVS_0(msg_floats([n_119_1_STATE.currentValue]))
            return 
        }
    
                                throw new Error('[snapshot~], id "n_119_1", inlet "0_message", unsupported message : ' + msg_display(m))
                            }

function n_119_8_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                const newValue = msg_readFloatToken(m, 0)
                if (newValue !== n_119_8_STATE.currentValue) {
                    n_119_8_STATE.currentValue = newValue
                    n_119_11_RCVS_0(msg_floats([n_119_8_STATE.currentValue]))
                }
                return
    
            } else if (msg_isBang(m)) {
                n_119_11_RCVS_0(msg_floats([n_119_8_STATE.currentValue]))
                return 
    
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_119_8_STATE.currentValue = msg_readFloatToken(m, 1)
                return
            }
        
                                throw new Error('[change], id "n_119_8", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_119_11_RCVS_0(m) {
                                
        n_120_0_RCVS_0(msg_bang())
n_119_10_RCVS_0(msg_floats([messageTokenToFloat(m, 0)]))
        return
    
                                throw new Error('[trigger], id "n_119_11", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_119_10_RCVS_0(m) {
                                
        if (!n_119_10_STATE.isClosed) {
            n_119_13_RCVS_0(m)
        }
        return
    
                                throw new Error('[spigot], id "n_119_10", inlet "0", unsupported message : ' + msg_display(m))
                            }
function n_119_10_RCVS_1(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_spigot_setIsClosed(n_119_10_STATE, msg_readFloatToken(m, 0))
            return
        }
    
                                throw new Error('[spigot], id "n_119_10", inlet "1", unsupported message : ' + msg_display(m))
                            }

function n_119_13_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                const newValue = msg_readFloatToken(m, 0)
                if (newValue !== n_119_13_STATE.currentValue) {
                    n_119_13_STATE.currentValue = newValue
                    n_119_9_RCVS_0(msg_floats([n_119_13_STATE.currentValue]))
                }
                return
    
            } else if (msg_isBang(m)) {
                n_119_9_RCVS_0(msg_floats([n_119_13_STATE.currentValue]))
                return 
    
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_119_13_STATE.currentValue = msg_readFloatToken(m, 1)
                return
            }
        
                                throw new Error('[change], id "n_119_13", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_119_9_RCVS_0(m) {
                                
                if (n_119_9_STATE.filterType === MSG_STRING_TOKEN) {
                    if (
                        (n_119_9_STATE.stringFilter === 'float'
                            && msg_isFloatToken(m, 0))
                        || (n_119_9_STATE.stringFilter === 'symbol'
                            && msg_isStringToken(m, 0))
                        || (n_119_9_STATE.stringFilter === 'list'
                            && msg_getLength(m) > 1)
                        || (n_119_9_STATE.stringFilter === 'bang' 
                            && msg_isBang(m))
                    ) {
                        n_119_3_RCVS_0(m)
                        return
                    
                    } else if (
                        msg_isStringToken(m, 0)
                        && msg_readStringToken(m, 0) === n_119_9_STATE.stringFilter
                    ) {
                        n_119_3_RCVS_0(msg_emptyToBang(msg_shift(m)))
                        return
                    }

                } else if (
                    msg_isFloatToken(m, 0)
                    && msg_readFloatToken(m, 0) === n_119_9_STATE.floatFilter
                ) {
                    n_119_3_RCVS_0(msg_emptyToBang(msg_shift(m)))
                    return
                }
            
                SND_TO_NULL(m)
            return
            
                                throw new Error('[route], id "n_119_9", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_119_3_RCVS_0(m) {
                                
        n_119_5_RCVS_0(msg_bang())
n_47_36_RCVS_0(msg_bang())
        return
    
                                throw new Error('[trigger], id "n_119_3", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_119_5_RCVS_0(m) {
                                
        n_119_4_RCVS_0(msg_bang())
n_119_14_RCVS_0(msg_bang())
        return
    
                                throw new Error('[trigger], id "n_119_5", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_119_14_RCVS_0(m) {
                                
            if (msg_getLength(m) === 1) {
                if (msg_isStringToken(m, 0)) {
                    const action = msg_readStringToken(m, 0)
                    if (action === 'bang' || action === 'start') {
                        n_delay_scheduleDelay(
                            n_119_14_STATE, 
                            () => n_119_6_RCVS_0(msg_bang()),
                            FRAME,
                        )
                        return
                    } else if (action === 'stop') {
                        n_delay_stop(n_119_14_STATE)
                        return
                    }
                    
                } else if (msg_isFloatToken(m, 0)) {
                    n_delay_setDelay(n_119_14_STATE, msg_readFloatToken(m, 0))
                    n_delay_scheduleDelay(
                        n_119_14_STATE,
                        () => n_119_6_RCVS_0(msg_bang()),
                        FRAME,
                    )
                    return 
                }
            
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN, MSG_STRING_TOKEN])
                && msg_readStringToken(m, 0) === 'tempo'
            ) {
                n_119_14_STATE.sampleRatio = computeUnitInSamples(
                    SAMPLE_RATE, 
                    msg_readFloatToken(m, 1), 
                    msg_readStringToken(m, 2)
                )
                return
            }
        
                                throw new Error('[delay], id "n_119_14", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_119_6_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_119_6_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_119_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_119_6_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_119_6_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_119_6_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_119_6_STATE.outMessages[0] = message
                n_119_6_STATE.messageTransferFunctions.splice(0, n_119_6_STATE.messageTransferFunctions.length - 1)
                n_119_6_STATE.messageTransferFunctions[0] = function (m) {
                    return n_119_6_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_119_6_STATE.messageTransferFunctions.length; i++) {
                    n_119_7_RCVS_0(n_119_6_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_119_6", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_119_4_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_119_4_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_119_4_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_119_4_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_119_4_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_119_4_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_119_4_STATE.outMessages[0] = message
                n_119_4_STATE.messageTransferFunctions.splice(0, n_119_4_STATE.messageTransferFunctions.length - 1)
                n_119_4_STATE.messageTransferFunctions[0] = function (m) {
                    return n_119_4_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_119_4_STATE.messageTransferFunctions.length; i++) {
                    n_119_7_RCVS_0(n_119_4_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_119_4", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_120_0_RCVS_0(m) {
                                
        n_120_6_RCVS_0(msg_bang())
n_120_2_RCVS_0(msg_bang())
        return
    
                                throw new Error('[trigger], id "n_120_0", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_120_2_RCVS_0(m) {
                                
            if (msg_getLength(m) === 1) {
                if (msg_isStringToken(m, 0)) {
                    const action = msg_readStringToken(m, 0)
                    if (action === 'bang' || action === 'start') {
                        n_delay_scheduleDelay(
                            n_120_2_STATE, 
                            () => n_120_5_RCVS_0(msg_bang()),
                            FRAME,
                        )
                        return
                    } else if (action === 'stop') {
                        n_delay_stop(n_120_2_STATE)
                        return
                    }
                    
                } else if (msg_isFloatToken(m, 0)) {
                    n_delay_setDelay(n_120_2_STATE, msg_readFloatToken(m, 0))
                    n_delay_scheduleDelay(
                        n_120_2_STATE,
                        () => n_120_5_RCVS_0(msg_bang()),
                        FRAME,
                    )
                    return 
                }
            
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN, MSG_STRING_TOKEN])
                && msg_readStringToken(m, 0) === 'tempo'
            ) {
                n_120_2_STATE.sampleRatio = computeUnitInSamples(
                    SAMPLE_RATE, 
                    msg_readFloatToken(m, 1), 
                    msg_readStringToken(m, 2)
                )
                return
            }
        
                                throw new Error('[delay], id "n_120_2", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_120_5_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_120_5_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_120_5_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_120_5_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_120_5_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_120_5_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_120_5_STATE.outMessages[0] = message
                n_120_5_STATE.messageTransferFunctions.splice(0, n_120_5_STATE.messageTransferFunctions.length - 1)
                n_120_5_STATE.messageTransferFunctions[0] = function (m) {
                    return n_120_5_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_120_5_STATE.messageTransferFunctions.length; i++) {
                    n_120_1_RCVS_0(n_120_5_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_120_5", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_120_1_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                n_float_int_setValueInt(n_120_1_STATE, msg_readFloatToken(m, 0))
                n_119_10_RCVS_1(msg_floats([n_120_1_STATE.value]))
                return 

            } else if (msg_isBang(m)) {
                n_119_10_RCVS_1(msg_floats([n_120_1_STATE.value]))
                return
                
            }
        
                                throw new Error('[int], id "n_120_1", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_120_6_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_120_6_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_120_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_120_6_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_120_6_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_120_6_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_120_6_STATE.outMessages[0] = message
                n_120_6_STATE.messageTransferFunctions.splice(0, n_120_6_STATE.messageTransferFunctions.length - 1)
                n_120_6_STATE.messageTransferFunctions[0] = function (m) {
                    return n_120_6_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_120_6_STATE.messageTransferFunctions.length; i++) {
                    n_120_1_RCVS_0(n_120_6_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_120_6", inlet "0", unsupported message : ' + msg_display(m))
                            }





function n_121_7_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                n_float_int_setValueInt(n_121_7_STATE, msg_readFloatToken(m, 0))
                n_121_2_RCVS_1(msg_floats([n_121_7_STATE.value]))
                return 

            } else if (msg_isBang(m)) {
                n_121_2_RCVS_1(msg_floats([n_121_7_STATE.value]))
                return
                
            }
        
                                throw new Error('[int], id "n_121_7", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_121_2_RCVS_0(m) {
                                
        if (!n_121_2_STATE.isClosed) {
            m_n_121_1_0__routemsg_RCVS_0(m)
        }
        return
    
                                throw new Error('[spigot], id "n_121_2", inlet "0", unsupported message : ' + msg_display(m))
                            }
function n_121_2_RCVS_1(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_spigot_setIsClosed(n_121_2_STATE, msg_readFloatToken(m, 0))
            return
        }
    
                                throw new Error('[spigot], id "n_121_2", inlet "1", unsupported message : ' + msg_display(m))
                            }

function m_n_121_1_0__routemsg_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                SND_TO_NULL(m)
                return
            } else {
                n_121_1_RCVS_0_message(m)
                return
            }
        
                                throw new Error('[_routemsg], id "m_n_121_1_0__routemsg", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_121_1_RCVS_0_message(m) {
                                
        if (msg_isBang(m)) {
            n_121_8_RCVS_0(msg_floats([n_121_1_STATE.currentValue]))
            return 
        }
    
                                throw new Error('[snapshot~], id "n_121_1", inlet "0_message", unsupported message : ' + msg_display(m))
                            }

function n_121_8_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                const newValue = msg_readFloatToken(m, 0)
                if (newValue !== n_121_8_STATE.currentValue) {
                    n_121_8_STATE.currentValue = newValue
                    n_121_11_RCVS_0(msg_floats([n_121_8_STATE.currentValue]))
                }
                return
    
            } else if (msg_isBang(m)) {
                n_121_11_RCVS_0(msg_floats([n_121_8_STATE.currentValue]))
                return 
    
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_121_8_STATE.currentValue = msg_readFloatToken(m, 1)
                return
            }
        
                                throw new Error('[change], id "n_121_8", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_121_11_RCVS_0(m) {
                                
        n_122_0_RCVS_0(msg_bang())
n_121_10_RCVS_0(msg_floats([messageTokenToFloat(m, 0)]))
        return
    
                                throw new Error('[trigger], id "n_121_11", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_121_10_RCVS_0(m) {
                                
        if (!n_121_10_STATE.isClosed) {
            n_121_13_RCVS_0(m)
        }
        return
    
                                throw new Error('[spigot], id "n_121_10", inlet "0", unsupported message : ' + msg_display(m))
                            }
function n_121_10_RCVS_1(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_spigot_setIsClosed(n_121_10_STATE, msg_readFloatToken(m, 0))
            return
        }
    
                                throw new Error('[spigot], id "n_121_10", inlet "1", unsupported message : ' + msg_display(m))
                            }

function n_121_13_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                const newValue = msg_readFloatToken(m, 0)
                if (newValue !== n_121_13_STATE.currentValue) {
                    n_121_13_STATE.currentValue = newValue
                    n_121_9_RCVS_0(msg_floats([n_121_13_STATE.currentValue]))
                }
                return
    
            } else if (msg_isBang(m)) {
                n_121_9_RCVS_0(msg_floats([n_121_13_STATE.currentValue]))
                return 
    
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_121_13_STATE.currentValue = msg_readFloatToken(m, 1)
                return
            }
        
                                throw new Error('[change], id "n_121_13", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_121_9_RCVS_0(m) {
                                
                if (n_121_9_STATE.filterType === MSG_STRING_TOKEN) {
                    if (
                        (n_121_9_STATE.stringFilter === 'float'
                            && msg_isFloatToken(m, 0))
                        || (n_121_9_STATE.stringFilter === 'symbol'
                            && msg_isStringToken(m, 0))
                        || (n_121_9_STATE.stringFilter === 'list'
                            && msg_getLength(m) > 1)
                        || (n_121_9_STATE.stringFilter === 'bang' 
                            && msg_isBang(m))
                    ) {
                        n_121_3_RCVS_0(m)
                        return
                    
                    } else if (
                        msg_isStringToken(m, 0)
                        && msg_readStringToken(m, 0) === n_121_9_STATE.stringFilter
                    ) {
                        n_121_3_RCVS_0(msg_emptyToBang(msg_shift(m)))
                        return
                    }

                } else if (
                    msg_isFloatToken(m, 0)
                    && msg_readFloatToken(m, 0) === n_121_9_STATE.floatFilter
                ) {
                    n_121_3_RCVS_0(msg_emptyToBang(msg_shift(m)))
                    return
                }
            
                SND_TO_NULL(m)
            return
            
                                throw new Error('[route], id "n_121_9", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_121_3_RCVS_0(m) {
                                
        n_121_5_RCVS_0(msg_bang())
n_47_0_RCVS_0(msg_bang())
        return
    
                                throw new Error('[trigger], id "n_121_3", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_121_5_RCVS_0(m) {
                                
        n_121_4_RCVS_0(msg_bang())
n_121_14_RCVS_0(msg_bang())
        return
    
                                throw new Error('[trigger], id "n_121_5", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_121_14_RCVS_0(m) {
                                
            if (msg_getLength(m) === 1) {
                if (msg_isStringToken(m, 0)) {
                    const action = msg_readStringToken(m, 0)
                    if (action === 'bang' || action === 'start') {
                        n_delay_scheduleDelay(
                            n_121_14_STATE, 
                            () => n_121_6_RCVS_0(msg_bang()),
                            FRAME,
                        )
                        return
                    } else if (action === 'stop') {
                        n_delay_stop(n_121_14_STATE)
                        return
                    }
                    
                } else if (msg_isFloatToken(m, 0)) {
                    n_delay_setDelay(n_121_14_STATE, msg_readFloatToken(m, 0))
                    n_delay_scheduleDelay(
                        n_121_14_STATE,
                        () => n_121_6_RCVS_0(msg_bang()),
                        FRAME,
                    )
                    return 
                }
            
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN, MSG_STRING_TOKEN])
                && msg_readStringToken(m, 0) === 'tempo'
            ) {
                n_121_14_STATE.sampleRatio = computeUnitInSamples(
                    SAMPLE_RATE, 
                    msg_readFloatToken(m, 1), 
                    msg_readStringToken(m, 2)
                )
                return
            }
        
                                throw new Error('[delay], id "n_121_14", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_121_6_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_121_6_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_121_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_121_6_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_121_6_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_121_6_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_121_6_STATE.outMessages[0] = message
                n_121_6_STATE.messageTransferFunctions.splice(0, n_121_6_STATE.messageTransferFunctions.length - 1)
                n_121_6_STATE.messageTransferFunctions[0] = function (m) {
                    return n_121_6_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_121_6_STATE.messageTransferFunctions.length; i++) {
                    n_121_7_RCVS_0(n_121_6_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_121_6", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_121_4_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_121_4_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_121_4_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_121_4_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_121_4_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_121_4_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_121_4_STATE.outMessages[0] = message
                n_121_4_STATE.messageTransferFunctions.splice(0, n_121_4_STATE.messageTransferFunctions.length - 1)
                n_121_4_STATE.messageTransferFunctions[0] = function (m) {
                    return n_121_4_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_121_4_STATE.messageTransferFunctions.length; i++) {
                    n_121_7_RCVS_0(n_121_4_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_121_4", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_122_0_RCVS_0(m) {
                                
        n_122_6_RCVS_0(msg_bang())
n_122_2_RCVS_0(msg_bang())
        return
    
                                throw new Error('[trigger], id "n_122_0", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_122_2_RCVS_0(m) {
                                
            if (msg_getLength(m) === 1) {
                if (msg_isStringToken(m, 0)) {
                    const action = msg_readStringToken(m, 0)
                    if (action === 'bang' || action === 'start') {
                        n_delay_scheduleDelay(
                            n_122_2_STATE, 
                            () => n_122_5_RCVS_0(msg_bang()),
                            FRAME,
                        )
                        return
                    } else if (action === 'stop') {
                        n_delay_stop(n_122_2_STATE)
                        return
                    }
                    
                } else if (msg_isFloatToken(m, 0)) {
                    n_delay_setDelay(n_122_2_STATE, msg_readFloatToken(m, 0))
                    n_delay_scheduleDelay(
                        n_122_2_STATE,
                        () => n_122_5_RCVS_0(msg_bang()),
                        FRAME,
                    )
                    return 
                }
            
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN, MSG_STRING_TOKEN])
                && msg_readStringToken(m, 0) === 'tempo'
            ) {
                n_122_2_STATE.sampleRatio = computeUnitInSamples(
                    SAMPLE_RATE, 
                    msg_readFloatToken(m, 1), 
                    msg_readStringToken(m, 2)
                )
                return
            }
        
                                throw new Error('[delay], id "n_122_2", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_122_5_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_122_5_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_122_5_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_122_5_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_122_5_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_122_5_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_122_5_STATE.outMessages[0] = message
                n_122_5_STATE.messageTransferFunctions.splice(0, n_122_5_STATE.messageTransferFunctions.length - 1)
                n_122_5_STATE.messageTransferFunctions[0] = function (m) {
                    return n_122_5_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_122_5_STATE.messageTransferFunctions.length; i++) {
                    n_122_1_RCVS_0(n_122_5_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_122_5", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_122_1_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                n_float_int_setValueInt(n_122_1_STATE, msg_readFloatToken(m, 0))
                n_121_10_RCVS_1(msg_floats([n_122_1_STATE.value]))
                return 

            } else if (msg_isBang(m)) {
                n_121_10_RCVS_1(msg_floats([n_122_1_STATE.value]))
                return
                
            }
        
                                throw new Error('[int], id "n_122_1", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_122_6_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_122_6_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_122_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_122_6_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_122_6_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_122_6_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_122_6_STATE.outMessages[0] = message
                n_122_6_STATE.messageTransferFunctions.splice(0, n_122_6_STATE.messageTransferFunctions.length - 1)
                n_122_6_STATE.messageTransferFunctions[0] = function (m) {
                    return n_122_6_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_122_6_STATE.messageTransferFunctions.length; i++) {
                    n_122_1_RCVS_0(n_122_6_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_122_6", inlet "0", unsupported message : ' + msg_display(m))
                            }





function n_123_7_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                n_float_int_setValueInt(n_123_7_STATE, msg_readFloatToken(m, 0))
                n_123_2_RCVS_1(msg_floats([n_123_7_STATE.value]))
                return 

            } else if (msg_isBang(m)) {
                n_123_2_RCVS_1(msg_floats([n_123_7_STATE.value]))
                return
                
            }
        
                                throw new Error('[int], id "n_123_7", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_123_2_RCVS_0(m) {
                                
        if (!n_123_2_STATE.isClosed) {
            m_n_123_1_0__routemsg_RCVS_0(m)
        }
        return
    
                                throw new Error('[spigot], id "n_123_2", inlet "0", unsupported message : ' + msg_display(m))
                            }
function n_123_2_RCVS_1(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_spigot_setIsClosed(n_123_2_STATE, msg_readFloatToken(m, 0))
            return
        }
    
                                throw new Error('[spigot], id "n_123_2", inlet "1", unsupported message : ' + msg_display(m))
                            }

function m_n_123_1_0__routemsg_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                SND_TO_NULL(m)
                return
            } else {
                n_123_1_RCVS_0_message(m)
                return
            }
        
                                throw new Error('[_routemsg], id "m_n_123_1_0__routemsg", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_123_1_RCVS_0_message(m) {
                                
        if (msg_isBang(m)) {
            n_123_8_RCVS_0(msg_floats([n_123_1_STATE.currentValue]))
            return 
        }
    
                                throw new Error('[snapshot~], id "n_123_1", inlet "0_message", unsupported message : ' + msg_display(m))
                            }

function n_123_8_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                const newValue = msg_readFloatToken(m, 0)
                if (newValue !== n_123_8_STATE.currentValue) {
                    n_123_8_STATE.currentValue = newValue
                    n_123_11_RCVS_0(msg_floats([n_123_8_STATE.currentValue]))
                }
                return
    
            } else if (msg_isBang(m)) {
                n_123_11_RCVS_0(msg_floats([n_123_8_STATE.currentValue]))
                return 
    
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_123_8_STATE.currentValue = msg_readFloatToken(m, 1)
                return
            }
        
                                throw new Error('[change], id "n_123_8", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_123_11_RCVS_0(m) {
                                
        n_124_0_RCVS_0(msg_bang())
n_123_10_RCVS_0(msg_floats([messageTokenToFloat(m, 0)]))
        return
    
                                throw new Error('[trigger], id "n_123_11", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_123_10_RCVS_0(m) {
                                
        if (!n_123_10_STATE.isClosed) {
            n_123_13_RCVS_0(m)
        }
        return
    
                                throw new Error('[spigot], id "n_123_10", inlet "0", unsupported message : ' + msg_display(m))
                            }
function n_123_10_RCVS_1(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_spigot_setIsClosed(n_123_10_STATE, msg_readFloatToken(m, 0))
            return
        }
    
                                throw new Error('[spigot], id "n_123_10", inlet "1", unsupported message : ' + msg_display(m))
                            }

function n_123_13_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                const newValue = msg_readFloatToken(m, 0)
                if (newValue !== n_123_13_STATE.currentValue) {
                    n_123_13_STATE.currentValue = newValue
                    n_123_9_RCVS_0(msg_floats([n_123_13_STATE.currentValue]))
                }
                return
    
            } else if (msg_isBang(m)) {
                n_123_9_RCVS_0(msg_floats([n_123_13_STATE.currentValue]))
                return 
    
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_123_13_STATE.currentValue = msg_readFloatToken(m, 1)
                return
            }
        
                                throw new Error('[change], id "n_123_13", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_123_9_RCVS_0(m) {
                                
                if (n_123_9_STATE.filterType === MSG_STRING_TOKEN) {
                    if (
                        (n_123_9_STATE.stringFilter === 'float'
                            && msg_isFloatToken(m, 0))
                        || (n_123_9_STATE.stringFilter === 'symbol'
                            && msg_isStringToken(m, 0))
                        || (n_123_9_STATE.stringFilter === 'list'
                            && msg_getLength(m) > 1)
                        || (n_123_9_STATE.stringFilter === 'bang' 
                            && msg_isBang(m))
                    ) {
                        n_123_3_RCVS_0(m)
                        return
                    
                    } else if (
                        msg_isStringToken(m, 0)
                        && msg_readStringToken(m, 0) === n_123_9_STATE.stringFilter
                    ) {
                        n_123_3_RCVS_0(msg_emptyToBang(msg_shift(m)))
                        return
                    }

                } else if (
                    msg_isFloatToken(m, 0)
                    && msg_readFloatToken(m, 0) === n_123_9_STATE.floatFilter
                ) {
                    n_123_3_RCVS_0(msg_emptyToBang(msg_shift(m)))
                    return
                }
            
                SND_TO_NULL(m)
            return
            
                                throw new Error('[route], id "n_123_9", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_123_3_RCVS_0(m) {
                                
        n_123_5_RCVS_0(msg_bang())
n_47_6_RCVS_0(msg_bang())
        return
    
                                throw new Error('[trigger], id "n_123_3", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_123_5_RCVS_0(m) {
                                
        n_123_4_RCVS_0(msg_bang())
n_123_14_RCVS_0(msg_bang())
        return
    
                                throw new Error('[trigger], id "n_123_5", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_123_14_RCVS_0(m) {
                                
            if (msg_getLength(m) === 1) {
                if (msg_isStringToken(m, 0)) {
                    const action = msg_readStringToken(m, 0)
                    if (action === 'bang' || action === 'start') {
                        n_delay_scheduleDelay(
                            n_123_14_STATE, 
                            () => n_123_6_RCVS_0(msg_bang()),
                            FRAME,
                        )
                        return
                    } else if (action === 'stop') {
                        n_delay_stop(n_123_14_STATE)
                        return
                    }
                    
                } else if (msg_isFloatToken(m, 0)) {
                    n_delay_setDelay(n_123_14_STATE, msg_readFloatToken(m, 0))
                    n_delay_scheduleDelay(
                        n_123_14_STATE,
                        () => n_123_6_RCVS_0(msg_bang()),
                        FRAME,
                    )
                    return 
                }
            
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN, MSG_STRING_TOKEN])
                && msg_readStringToken(m, 0) === 'tempo'
            ) {
                n_123_14_STATE.sampleRatio = computeUnitInSamples(
                    SAMPLE_RATE, 
                    msg_readFloatToken(m, 1), 
                    msg_readStringToken(m, 2)
                )
                return
            }
        
                                throw new Error('[delay], id "n_123_14", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_123_6_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_123_6_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_123_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_123_6_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_123_6_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_123_6_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_123_6_STATE.outMessages[0] = message
                n_123_6_STATE.messageTransferFunctions.splice(0, n_123_6_STATE.messageTransferFunctions.length - 1)
                n_123_6_STATE.messageTransferFunctions[0] = function (m) {
                    return n_123_6_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_123_6_STATE.messageTransferFunctions.length; i++) {
                    n_123_7_RCVS_0(n_123_6_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_123_6", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_123_4_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_123_4_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_123_4_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_123_4_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_123_4_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_123_4_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_123_4_STATE.outMessages[0] = message
                n_123_4_STATE.messageTransferFunctions.splice(0, n_123_4_STATE.messageTransferFunctions.length - 1)
                n_123_4_STATE.messageTransferFunctions[0] = function (m) {
                    return n_123_4_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_123_4_STATE.messageTransferFunctions.length; i++) {
                    n_123_7_RCVS_0(n_123_4_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_123_4", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_124_0_RCVS_0(m) {
                                
        n_124_6_RCVS_0(msg_bang())
n_124_2_RCVS_0(msg_bang())
        return
    
                                throw new Error('[trigger], id "n_124_0", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_124_2_RCVS_0(m) {
                                
            if (msg_getLength(m) === 1) {
                if (msg_isStringToken(m, 0)) {
                    const action = msg_readStringToken(m, 0)
                    if (action === 'bang' || action === 'start') {
                        n_delay_scheduleDelay(
                            n_124_2_STATE, 
                            () => n_124_5_RCVS_0(msg_bang()),
                            FRAME,
                        )
                        return
                    } else if (action === 'stop') {
                        n_delay_stop(n_124_2_STATE)
                        return
                    }
                    
                } else if (msg_isFloatToken(m, 0)) {
                    n_delay_setDelay(n_124_2_STATE, msg_readFloatToken(m, 0))
                    n_delay_scheduleDelay(
                        n_124_2_STATE,
                        () => n_124_5_RCVS_0(msg_bang()),
                        FRAME,
                    )
                    return 
                }
            
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN, MSG_STRING_TOKEN])
                && msg_readStringToken(m, 0) === 'tempo'
            ) {
                n_124_2_STATE.sampleRatio = computeUnitInSamples(
                    SAMPLE_RATE, 
                    msg_readFloatToken(m, 1), 
                    msg_readStringToken(m, 2)
                )
                return
            }
        
                                throw new Error('[delay], id "n_124_2", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_124_5_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_124_5_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_124_5_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_124_5_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_124_5_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_124_5_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_124_5_STATE.outMessages[0] = message
                n_124_5_STATE.messageTransferFunctions.splice(0, n_124_5_STATE.messageTransferFunctions.length - 1)
                n_124_5_STATE.messageTransferFunctions[0] = function (m) {
                    return n_124_5_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_124_5_STATE.messageTransferFunctions.length; i++) {
                    n_124_1_RCVS_0(n_124_5_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_124_5", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_124_1_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                n_float_int_setValueInt(n_124_1_STATE, msg_readFloatToken(m, 0))
                n_123_10_RCVS_1(msg_floats([n_124_1_STATE.value]))
                return 

            } else if (msg_isBang(m)) {
                n_123_10_RCVS_1(msg_floats([n_124_1_STATE.value]))
                return
                
            }
        
                                throw new Error('[int], id "n_124_1", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_124_6_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_124_6_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_124_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_124_6_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_124_6_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_124_6_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_124_6_STATE.outMessages[0] = message
                n_124_6_STATE.messageTransferFunctions.splice(0, n_124_6_STATE.messageTransferFunctions.length - 1)
                n_124_6_STATE.messageTransferFunctions[0] = function (m) {
                    return n_124_6_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_124_6_STATE.messageTransferFunctions.length; i++) {
                    n_124_1_RCVS_0(n_124_6_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_124_6", inlet "0", unsupported message : ' + msg_display(m))
                            }





function n_125_7_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                n_float_int_setValueInt(n_125_7_STATE, msg_readFloatToken(m, 0))
                n_125_2_RCVS_1(msg_floats([n_125_7_STATE.value]))
                return 

            } else if (msg_isBang(m)) {
                n_125_2_RCVS_1(msg_floats([n_125_7_STATE.value]))
                return
                
            }
        
                                throw new Error('[int], id "n_125_7", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_125_2_RCVS_0(m) {
                                
        if (!n_125_2_STATE.isClosed) {
            m_n_125_1_0__routemsg_RCVS_0(m)
        }
        return
    
                                throw new Error('[spigot], id "n_125_2", inlet "0", unsupported message : ' + msg_display(m))
                            }
function n_125_2_RCVS_1(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_spigot_setIsClosed(n_125_2_STATE, msg_readFloatToken(m, 0))
            return
        }
    
                                throw new Error('[spigot], id "n_125_2", inlet "1", unsupported message : ' + msg_display(m))
                            }

function m_n_125_1_0__routemsg_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                SND_TO_NULL(m)
                return
            } else {
                n_125_1_RCVS_0_message(m)
                return
            }
        
                                throw new Error('[_routemsg], id "m_n_125_1_0__routemsg", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_125_1_RCVS_0_message(m) {
                                
        if (msg_isBang(m)) {
            n_125_8_RCVS_0(msg_floats([n_125_1_STATE.currentValue]))
            return 
        }
    
                                throw new Error('[snapshot~], id "n_125_1", inlet "0_message", unsupported message : ' + msg_display(m))
                            }

function n_125_8_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                const newValue = msg_readFloatToken(m, 0)
                if (newValue !== n_125_8_STATE.currentValue) {
                    n_125_8_STATE.currentValue = newValue
                    n_125_11_RCVS_0(msg_floats([n_125_8_STATE.currentValue]))
                }
                return
    
            } else if (msg_isBang(m)) {
                n_125_11_RCVS_0(msg_floats([n_125_8_STATE.currentValue]))
                return 
    
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_125_8_STATE.currentValue = msg_readFloatToken(m, 1)
                return
            }
        
                                throw new Error('[change], id "n_125_8", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_125_11_RCVS_0(m) {
                                
        n_126_0_RCVS_0(msg_bang())
n_125_10_RCVS_0(msg_floats([messageTokenToFloat(m, 0)]))
        return
    
                                throw new Error('[trigger], id "n_125_11", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_125_10_RCVS_0(m) {
                                
        if (!n_125_10_STATE.isClosed) {
            n_125_13_RCVS_0(m)
        }
        return
    
                                throw new Error('[spigot], id "n_125_10", inlet "0", unsupported message : ' + msg_display(m))
                            }
function n_125_10_RCVS_1(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_spigot_setIsClosed(n_125_10_STATE, msg_readFloatToken(m, 0))
            return
        }
    
                                throw new Error('[spigot], id "n_125_10", inlet "1", unsupported message : ' + msg_display(m))
                            }

function n_125_13_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                const newValue = msg_readFloatToken(m, 0)
                if (newValue !== n_125_13_STATE.currentValue) {
                    n_125_13_STATE.currentValue = newValue
                    n_125_9_RCVS_0(msg_floats([n_125_13_STATE.currentValue]))
                }
                return
    
            } else if (msg_isBang(m)) {
                n_125_9_RCVS_0(msg_floats([n_125_13_STATE.currentValue]))
                return 
    
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_125_13_STATE.currentValue = msg_readFloatToken(m, 1)
                return
            }
        
                                throw new Error('[change], id "n_125_13", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_125_9_RCVS_0(m) {
                                
                if (n_125_9_STATE.filterType === MSG_STRING_TOKEN) {
                    if (
                        (n_125_9_STATE.stringFilter === 'float'
                            && msg_isFloatToken(m, 0))
                        || (n_125_9_STATE.stringFilter === 'symbol'
                            && msg_isStringToken(m, 0))
                        || (n_125_9_STATE.stringFilter === 'list'
                            && msg_getLength(m) > 1)
                        || (n_125_9_STATE.stringFilter === 'bang' 
                            && msg_isBang(m))
                    ) {
                        n_125_3_RCVS_0(m)
                        return
                    
                    } else if (
                        msg_isStringToken(m, 0)
                        && msg_readStringToken(m, 0) === n_125_9_STATE.stringFilter
                    ) {
                        n_125_3_RCVS_0(msg_emptyToBang(msg_shift(m)))
                        return
                    }

                } else if (
                    msg_isFloatToken(m, 0)
                    && msg_readFloatToken(m, 0) === n_125_9_STATE.floatFilter
                ) {
                    n_125_3_RCVS_0(msg_emptyToBang(msg_shift(m)))
                    return
                }
            
                SND_TO_NULL(m)
            return
            
                                throw new Error('[route], id "n_125_9", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_125_3_RCVS_0(m) {
                                
        n_125_5_RCVS_0(msg_bang())
n_47_10_RCVS_0(msg_bang())
        return
    
                                throw new Error('[trigger], id "n_125_3", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_125_5_RCVS_0(m) {
                                
        n_125_4_RCVS_0(msg_bang())
n_125_14_RCVS_0(msg_bang())
        return
    
                                throw new Error('[trigger], id "n_125_5", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_125_14_RCVS_0(m) {
                                
            if (msg_getLength(m) === 1) {
                if (msg_isStringToken(m, 0)) {
                    const action = msg_readStringToken(m, 0)
                    if (action === 'bang' || action === 'start') {
                        n_delay_scheduleDelay(
                            n_125_14_STATE, 
                            () => n_125_6_RCVS_0(msg_bang()),
                            FRAME,
                        )
                        return
                    } else if (action === 'stop') {
                        n_delay_stop(n_125_14_STATE)
                        return
                    }
                    
                } else if (msg_isFloatToken(m, 0)) {
                    n_delay_setDelay(n_125_14_STATE, msg_readFloatToken(m, 0))
                    n_delay_scheduleDelay(
                        n_125_14_STATE,
                        () => n_125_6_RCVS_0(msg_bang()),
                        FRAME,
                    )
                    return 
                }
            
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN, MSG_STRING_TOKEN])
                && msg_readStringToken(m, 0) === 'tempo'
            ) {
                n_125_14_STATE.sampleRatio = computeUnitInSamples(
                    SAMPLE_RATE, 
                    msg_readFloatToken(m, 1), 
                    msg_readStringToken(m, 2)
                )
                return
            }
        
                                throw new Error('[delay], id "n_125_14", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_125_6_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_125_6_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_125_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_125_6_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_125_6_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_125_6_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_125_6_STATE.outMessages[0] = message
                n_125_6_STATE.messageTransferFunctions.splice(0, n_125_6_STATE.messageTransferFunctions.length - 1)
                n_125_6_STATE.messageTransferFunctions[0] = function (m) {
                    return n_125_6_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_125_6_STATE.messageTransferFunctions.length; i++) {
                    n_125_7_RCVS_0(n_125_6_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_125_6", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_125_4_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_125_4_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_125_4_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_125_4_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_125_4_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_125_4_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_125_4_STATE.outMessages[0] = message
                n_125_4_STATE.messageTransferFunctions.splice(0, n_125_4_STATE.messageTransferFunctions.length - 1)
                n_125_4_STATE.messageTransferFunctions[0] = function (m) {
                    return n_125_4_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_125_4_STATE.messageTransferFunctions.length; i++) {
                    n_125_7_RCVS_0(n_125_4_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_125_4", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_126_0_RCVS_0(m) {
                                
        n_126_6_RCVS_0(msg_bang())
n_126_2_RCVS_0(msg_bang())
        return
    
                                throw new Error('[trigger], id "n_126_0", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_126_2_RCVS_0(m) {
                                
            if (msg_getLength(m) === 1) {
                if (msg_isStringToken(m, 0)) {
                    const action = msg_readStringToken(m, 0)
                    if (action === 'bang' || action === 'start') {
                        n_delay_scheduleDelay(
                            n_126_2_STATE, 
                            () => n_126_5_RCVS_0(msg_bang()),
                            FRAME,
                        )
                        return
                    } else if (action === 'stop') {
                        n_delay_stop(n_126_2_STATE)
                        return
                    }
                    
                } else if (msg_isFloatToken(m, 0)) {
                    n_delay_setDelay(n_126_2_STATE, msg_readFloatToken(m, 0))
                    n_delay_scheduleDelay(
                        n_126_2_STATE,
                        () => n_126_5_RCVS_0(msg_bang()),
                        FRAME,
                    )
                    return 
                }
            
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN, MSG_STRING_TOKEN])
                && msg_readStringToken(m, 0) === 'tempo'
            ) {
                n_126_2_STATE.sampleRatio = computeUnitInSamples(
                    SAMPLE_RATE, 
                    msg_readFloatToken(m, 1), 
                    msg_readStringToken(m, 2)
                )
                return
            }
        
                                throw new Error('[delay], id "n_126_2", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_126_5_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_126_5_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_126_5_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_126_5_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_126_5_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_126_5_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_126_5_STATE.outMessages[0] = message
                n_126_5_STATE.messageTransferFunctions.splice(0, n_126_5_STATE.messageTransferFunctions.length - 1)
                n_126_5_STATE.messageTransferFunctions[0] = function (m) {
                    return n_126_5_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_126_5_STATE.messageTransferFunctions.length; i++) {
                    n_126_1_RCVS_0(n_126_5_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_126_5", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_126_1_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                n_float_int_setValueInt(n_126_1_STATE, msg_readFloatToken(m, 0))
                n_125_10_RCVS_1(msg_floats([n_126_1_STATE.value]))
                return 

            } else if (msg_isBang(m)) {
                n_125_10_RCVS_1(msg_floats([n_126_1_STATE.value]))
                return
                
            }
        
                                throw new Error('[int], id "n_126_1", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_126_6_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_126_6_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_126_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_126_6_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_126_6_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_126_6_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_126_6_STATE.outMessages[0] = message
                n_126_6_STATE.messageTransferFunctions.splice(0, n_126_6_STATE.messageTransferFunctions.length - 1)
                n_126_6_STATE.messageTransferFunctions[0] = function (m) {
                    return n_126_6_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_126_6_STATE.messageTransferFunctions.length; i++) {
                    n_126_1_RCVS_0(n_126_6_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_126_6", inlet "0", unsupported message : ' + msg_display(m))
                            }





function n_127_7_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                n_float_int_setValueInt(n_127_7_STATE, msg_readFloatToken(m, 0))
                n_127_2_RCVS_1(msg_floats([n_127_7_STATE.value]))
                return 

            } else if (msg_isBang(m)) {
                n_127_2_RCVS_1(msg_floats([n_127_7_STATE.value]))
                return
                
            }
        
                                throw new Error('[int], id "n_127_7", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_127_2_RCVS_0(m) {
                                
        if (!n_127_2_STATE.isClosed) {
            m_n_127_1_0__routemsg_RCVS_0(m)
        }
        return
    
                                throw new Error('[spigot], id "n_127_2", inlet "0", unsupported message : ' + msg_display(m))
                            }
function n_127_2_RCVS_1(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_spigot_setIsClosed(n_127_2_STATE, msg_readFloatToken(m, 0))
            return
        }
    
                                throw new Error('[spigot], id "n_127_2", inlet "1", unsupported message : ' + msg_display(m))
                            }

function m_n_127_1_0__routemsg_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                SND_TO_NULL(m)
                return
            } else {
                n_127_1_RCVS_0_message(m)
                return
            }
        
                                throw new Error('[_routemsg], id "m_n_127_1_0__routemsg", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_127_1_RCVS_0_message(m) {
                                
        if (msg_isBang(m)) {
            n_127_8_RCVS_0(msg_floats([n_127_1_STATE.currentValue]))
            return 
        }
    
                                throw new Error('[snapshot~], id "n_127_1", inlet "0_message", unsupported message : ' + msg_display(m))
                            }

function n_127_8_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                const newValue = msg_readFloatToken(m, 0)
                if (newValue !== n_127_8_STATE.currentValue) {
                    n_127_8_STATE.currentValue = newValue
                    n_127_11_RCVS_0(msg_floats([n_127_8_STATE.currentValue]))
                }
                return
    
            } else if (msg_isBang(m)) {
                n_127_11_RCVS_0(msg_floats([n_127_8_STATE.currentValue]))
                return 
    
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_127_8_STATE.currentValue = msg_readFloatToken(m, 1)
                return
            }
        
                                throw new Error('[change], id "n_127_8", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_127_11_RCVS_0(m) {
                                
        n_128_0_RCVS_0(msg_bang())
n_127_10_RCVS_0(msg_floats([messageTokenToFloat(m, 0)]))
        return
    
                                throw new Error('[trigger], id "n_127_11", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_127_10_RCVS_0(m) {
                                
        if (!n_127_10_STATE.isClosed) {
            n_127_13_RCVS_0(m)
        }
        return
    
                                throw new Error('[spigot], id "n_127_10", inlet "0", unsupported message : ' + msg_display(m))
                            }
function n_127_10_RCVS_1(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_spigot_setIsClosed(n_127_10_STATE, msg_readFloatToken(m, 0))
            return
        }
    
                                throw new Error('[spigot], id "n_127_10", inlet "1", unsupported message : ' + msg_display(m))
                            }

function n_127_13_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                const newValue = msg_readFloatToken(m, 0)
                if (newValue !== n_127_13_STATE.currentValue) {
                    n_127_13_STATE.currentValue = newValue
                    n_127_9_RCVS_0(msg_floats([n_127_13_STATE.currentValue]))
                }
                return
    
            } else if (msg_isBang(m)) {
                n_127_9_RCVS_0(msg_floats([n_127_13_STATE.currentValue]))
                return 
    
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_127_13_STATE.currentValue = msg_readFloatToken(m, 1)
                return
            }
        
                                throw new Error('[change], id "n_127_13", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_127_9_RCVS_0(m) {
                                
                if (n_127_9_STATE.filterType === MSG_STRING_TOKEN) {
                    if (
                        (n_127_9_STATE.stringFilter === 'float'
                            && msg_isFloatToken(m, 0))
                        || (n_127_9_STATE.stringFilter === 'symbol'
                            && msg_isStringToken(m, 0))
                        || (n_127_9_STATE.stringFilter === 'list'
                            && msg_getLength(m) > 1)
                        || (n_127_9_STATE.stringFilter === 'bang' 
                            && msg_isBang(m))
                    ) {
                        n_127_3_RCVS_0(m)
                        return
                    
                    } else if (
                        msg_isStringToken(m, 0)
                        && msg_readStringToken(m, 0) === n_127_9_STATE.stringFilter
                    ) {
                        n_127_3_RCVS_0(msg_emptyToBang(msg_shift(m)))
                        return
                    }

                } else if (
                    msg_isFloatToken(m, 0)
                    && msg_readFloatToken(m, 0) === n_127_9_STATE.floatFilter
                ) {
                    n_127_3_RCVS_0(msg_emptyToBang(msg_shift(m)))
                    return
                }
            
                SND_TO_NULL(m)
            return
            
                                throw new Error('[route], id "n_127_9", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_127_3_RCVS_0(m) {
                                
        n_127_5_RCVS_0(msg_bang())
n_47_16_RCVS_0(msg_bang())
        return
    
                                throw new Error('[trigger], id "n_127_3", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_127_5_RCVS_0(m) {
                                
        n_127_4_RCVS_0(msg_bang())
n_127_14_RCVS_0(msg_bang())
        return
    
                                throw new Error('[trigger], id "n_127_5", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_127_14_RCVS_0(m) {
                                
            if (msg_getLength(m) === 1) {
                if (msg_isStringToken(m, 0)) {
                    const action = msg_readStringToken(m, 0)
                    if (action === 'bang' || action === 'start') {
                        n_delay_scheduleDelay(
                            n_127_14_STATE, 
                            () => n_127_6_RCVS_0(msg_bang()),
                            FRAME,
                        )
                        return
                    } else if (action === 'stop') {
                        n_delay_stop(n_127_14_STATE)
                        return
                    }
                    
                } else if (msg_isFloatToken(m, 0)) {
                    n_delay_setDelay(n_127_14_STATE, msg_readFloatToken(m, 0))
                    n_delay_scheduleDelay(
                        n_127_14_STATE,
                        () => n_127_6_RCVS_0(msg_bang()),
                        FRAME,
                    )
                    return 
                }
            
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN, MSG_STRING_TOKEN])
                && msg_readStringToken(m, 0) === 'tempo'
            ) {
                n_127_14_STATE.sampleRatio = computeUnitInSamples(
                    SAMPLE_RATE, 
                    msg_readFloatToken(m, 1), 
                    msg_readStringToken(m, 2)
                )
                return
            }
        
                                throw new Error('[delay], id "n_127_14", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_127_6_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_127_6_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_127_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_127_6_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_127_6_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_127_6_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_127_6_STATE.outMessages[0] = message
                n_127_6_STATE.messageTransferFunctions.splice(0, n_127_6_STATE.messageTransferFunctions.length - 1)
                n_127_6_STATE.messageTransferFunctions[0] = function (m) {
                    return n_127_6_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_127_6_STATE.messageTransferFunctions.length; i++) {
                    n_127_7_RCVS_0(n_127_6_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_127_6", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_127_4_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_127_4_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_127_4_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_127_4_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_127_4_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_127_4_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_127_4_STATE.outMessages[0] = message
                n_127_4_STATE.messageTransferFunctions.splice(0, n_127_4_STATE.messageTransferFunctions.length - 1)
                n_127_4_STATE.messageTransferFunctions[0] = function (m) {
                    return n_127_4_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_127_4_STATE.messageTransferFunctions.length; i++) {
                    n_127_7_RCVS_0(n_127_4_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_127_4", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_128_0_RCVS_0(m) {
                                
        n_128_6_RCVS_0(msg_bang())
n_128_2_RCVS_0(msg_bang())
        return
    
                                throw new Error('[trigger], id "n_128_0", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_128_2_RCVS_0(m) {
                                
            if (msg_getLength(m) === 1) {
                if (msg_isStringToken(m, 0)) {
                    const action = msg_readStringToken(m, 0)
                    if (action === 'bang' || action === 'start') {
                        n_delay_scheduleDelay(
                            n_128_2_STATE, 
                            () => n_128_5_RCVS_0(msg_bang()),
                            FRAME,
                        )
                        return
                    } else if (action === 'stop') {
                        n_delay_stop(n_128_2_STATE)
                        return
                    }
                    
                } else if (msg_isFloatToken(m, 0)) {
                    n_delay_setDelay(n_128_2_STATE, msg_readFloatToken(m, 0))
                    n_delay_scheduleDelay(
                        n_128_2_STATE,
                        () => n_128_5_RCVS_0(msg_bang()),
                        FRAME,
                    )
                    return 
                }
            
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN, MSG_STRING_TOKEN])
                && msg_readStringToken(m, 0) === 'tempo'
            ) {
                n_128_2_STATE.sampleRatio = computeUnitInSamples(
                    SAMPLE_RATE, 
                    msg_readFloatToken(m, 1), 
                    msg_readStringToken(m, 2)
                )
                return
            }
        
                                throw new Error('[delay], id "n_128_2", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_128_5_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_128_5_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_128_5_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_128_5_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_128_5_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_128_5_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_128_5_STATE.outMessages[0] = message
                n_128_5_STATE.messageTransferFunctions.splice(0, n_128_5_STATE.messageTransferFunctions.length - 1)
                n_128_5_STATE.messageTransferFunctions[0] = function (m) {
                    return n_128_5_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_128_5_STATE.messageTransferFunctions.length; i++) {
                    n_128_1_RCVS_0(n_128_5_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_128_5", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_128_1_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                n_float_int_setValueInt(n_128_1_STATE, msg_readFloatToken(m, 0))
                n_127_10_RCVS_1(msg_floats([n_128_1_STATE.value]))
                return 

            } else if (msg_isBang(m)) {
                n_127_10_RCVS_1(msg_floats([n_128_1_STATE.value]))
                return
                
            }
        
                                throw new Error('[int], id "n_128_1", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_128_6_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_128_6_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_128_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_128_6_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_128_6_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_128_6_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_128_6_STATE.outMessages[0] = message
                n_128_6_STATE.messageTransferFunctions.splice(0, n_128_6_STATE.messageTransferFunctions.length - 1)
                n_128_6_STATE.messageTransferFunctions[0] = function (m) {
                    return n_128_6_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_128_6_STATE.messageTransferFunctions.length; i++) {
                    n_128_1_RCVS_0(n_128_6_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_128_6", inlet "0", unsupported message : ' + msg_display(m))
                            }





function n_129_7_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                n_float_int_setValueInt(n_129_7_STATE, msg_readFloatToken(m, 0))
                n_129_2_RCVS_1(msg_floats([n_129_7_STATE.value]))
                return 

            } else if (msg_isBang(m)) {
                n_129_2_RCVS_1(msg_floats([n_129_7_STATE.value]))
                return
                
            }
        
                                throw new Error('[int], id "n_129_7", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_129_2_RCVS_0(m) {
                                
        if (!n_129_2_STATE.isClosed) {
            m_n_129_1_0__routemsg_RCVS_0(m)
        }
        return
    
                                throw new Error('[spigot], id "n_129_2", inlet "0", unsupported message : ' + msg_display(m))
                            }
function n_129_2_RCVS_1(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_spigot_setIsClosed(n_129_2_STATE, msg_readFloatToken(m, 0))
            return
        }
    
                                throw new Error('[spigot], id "n_129_2", inlet "1", unsupported message : ' + msg_display(m))
                            }

function m_n_129_1_0__routemsg_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                SND_TO_NULL(m)
                return
            } else {
                n_129_1_RCVS_0_message(m)
                return
            }
        
                                throw new Error('[_routemsg], id "m_n_129_1_0__routemsg", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_129_1_RCVS_0_message(m) {
                                
        if (msg_isBang(m)) {
            n_129_8_RCVS_0(msg_floats([n_129_1_STATE.currentValue]))
            return 
        }
    
                                throw new Error('[snapshot~], id "n_129_1", inlet "0_message", unsupported message : ' + msg_display(m))
                            }

function n_129_8_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                const newValue = msg_readFloatToken(m, 0)
                if (newValue !== n_129_8_STATE.currentValue) {
                    n_129_8_STATE.currentValue = newValue
                    n_129_11_RCVS_0(msg_floats([n_129_8_STATE.currentValue]))
                }
                return
    
            } else if (msg_isBang(m)) {
                n_129_11_RCVS_0(msg_floats([n_129_8_STATE.currentValue]))
                return 
    
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_129_8_STATE.currentValue = msg_readFloatToken(m, 1)
                return
            }
        
                                throw new Error('[change], id "n_129_8", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_129_11_RCVS_0(m) {
                                
        n_130_0_RCVS_0(msg_bang())
n_129_10_RCVS_0(msg_floats([messageTokenToFloat(m, 0)]))
        return
    
                                throw new Error('[trigger], id "n_129_11", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_129_10_RCVS_0(m) {
                                
        if (!n_129_10_STATE.isClosed) {
            n_129_13_RCVS_0(m)
        }
        return
    
                                throw new Error('[spigot], id "n_129_10", inlet "0", unsupported message : ' + msg_display(m))
                            }
function n_129_10_RCVS_1(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_spigot_setIsClosed(n_129_10_STATE, msg_readFloatToken(m, 0))
            return
        }
    
                                throw new Error('[spigot], id "n_129_10", inlet "1", unsupported message : ' + msg_display(m))
                            }

function n_129_13_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                const newValue = msg_readFloatToken(m, 0)
                if (newValue !== n_129_13_STATE.currentValue) {
                    n_129_13_STATE.currentValue = newValue
                    n_129_9_RCVS_0(msg_floats([n_129_13_STATE.currentValue]))
                }
                return
    
            } else if (msg_isBang(m)) {
                n_129_9_RCVS_0(msg_floats([n_129_13_STATE.currentValue]))
                return 
    
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_129_13_STATE.currentValue = msg_readFloatToken(m, 1)
                return
            }
        
                                throw new Error('[change], id "n_129_13", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_129_9_RCVS_0(m) {
                                
                if (n_129_9_STATE.filterType === MSG_STRING_TOKEN) {
                    if (
                        (n_129_9_STATE.stringFilter === 'float'
                            && msg_isFloatToken(m, 0))
                        || (n_129_9_STATE.stringFilter === 'symbol'
                            && msg_isStringToken(m, 0))
                        || (n_129_9_STATE.stringFilter === 'list'
                            && msg_getLength(m) > 1)
                        || (n_129_9_STATE.stringFilter === 'bang' 
                            && msg_isBang(m))
                    ) {
                        n_129_3_RCVS_0(m)
                        return
                    
                    } else if (
                        msg_isStringToken(m, 0)
                        && msg_readStringToken(m, 0) === n_129_9_STATE.stringFilter
                    ) {
                        n_129_3_RCVS_0(msg_emptyToBang(msg_shift(m)))
                        return
                    }

                } else if (
                    msg_isFloatToken(m, 0)
                    && msg_readFloatToken(m, 0) === n_129_9_STATE.floatFilter
                ) {
                    n_129_3_RCVS_0(msg_emptyToBang(msg_shift(m)))
                    return
                }
            
                SND_TO_NULL(m)
            return
            
                                throw new Error('[route], id "n_129_9", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_129_3_RCVS_0(m) {
                                
        n_129_5_RCVS_0(msg_bang())
n_47_28_RCVS_0(msg_bang())
        return
    
                                throw new Error('[trigger], id "n_129_3", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_129_5_RCVS_0(m) {
                                
        n_129_4_RCVS_0(msg_bang())
n_129_14_RCVS_0(msg_bang())
        return
    
                                throw new Error('[trigger], id "n_129_5", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_129_14_RCVS_0(m) {
                                
            if (msg_getLength(m) === 1) {
                if (msg_isStringToken(m, 0)) {
                    const action = msg_readStringToken(m, 0)
                    if (action === 'bang' || action === 'start') {
                        n_delay_scheduleDelay(
                            n_129_14_STATE, 
                            () => n_129_6_RCVS_0(msg_bang()),
                            FRAME,
                        )
                        return
                    } else if (action === 'stop') {
                        n_delay_stop(n_129_14_STATE)
                        return
                    }
                    
                } else if (msg_isFloatToken(m, 0)) {
                    n_delay_setDelay(n_129_14_STATE, msg_readFloatToken(m, 0))
                    n_delay_scheduleDelay(
                        n_129_14_STATE,
                        () => n_129_6_RCVS_0(msg_bang()),
                        FRAME,
                    )
                    return 
                }
            
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN, MSG_STRING_TOKEN])
                && msg_readStringToken(m, 0) === 'tempo'
            ) {
                n_129_14_STATE.sampleRatio = computeUnitInSamples(
                    SAMPLE_RATE, 
                    msg_readFloatToken(m, 1), 
                    msg_readStringToken(m, 2)
                )
                return
            }
        
                                throw new Error('[delay], id "n_129_14", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_129_6_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_129_6_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_129_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_129_6_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_129_6_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_129_6_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_129_6_STATE.outMessages[0] = message
                n_129_6_STATE.messageTransferFunctions.splice(0, n_129_6_STATE.messageTransferFunctions.length - 1)
                n_129_6_STATE.messageTransferFunctions[0] = function (m) {
                    return n_129_6_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_129_6_STATE.messageTransferFunctions.length; i++) {
                    n_129_7_RCVS_0(n_129_6_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_129_6", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_129_4_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_129_4_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_129_4_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_129_4_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_129_4_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_129_4_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_129_4_STATE.outMessages[0] = message
                n_129_4_STATE.messageTransferFunctions.splice(0, n_129_4_STATE.messageTransferFunctions.length - 1)
                n_129_4_STATE.messageTransferFunctions[0] = function (m) {
                    return n_129_4_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_129_4_STATE.messageTransferFunctions.length; i++) {
                    n_129_7_RCVS_0(n_129_4_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_129_4", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_130_0_RCVS_0(m) {
                                
        n_130_6_RCVS_0(msg_bang())
n_130_2_RCVS_0(msg_bang())
        return
    
                                throw new Error('[trigger], id "n_130_0", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_130_2_RCVS_0(m) {
                                
            if (msg_getLength(m) === 1) {
                if (msg_isStringToken(m, 0)) {
                    const action = msg_readStringToken(m, 0)
                    if (action === 'bang' || action === 'start') {
                        n_delay_scheduleDelay(
                            n_130_2_STATE, 
                            () => n_130_5_RCVS_0(msg_bang()),
                            FRAME,
                        )
                        return
                    } else if (action === 'stop') {
                        n_delay_stop(n_130_2_STATE)
                        return
                    }
                    
                } else if (msg_isFloatToken(m, 0)) {
                    n_delay_setDelay(n_130_2_STATE, msg_readFloatToken(m, 0))
                    n_delay_scheduleDelay(
                        n_130_2_STATE,
                        () => n_130_5_RCVS_0(msg_bang()),
                        FRAME,
                    )
                    return 
                }
            
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN, MSG_STRING_TOKEN])
                && msg_readStringToken(m, 0) === 'tempo'
            ) {
                n_130_2_STATE.sampleRatio = computeUnitInSamples(
                    SAMPLE_RATE, 
                    msg_readFloatToken(m, 1), 
                    msg_readStringToken(m, 2)
                )
                return
            }
        
                                throw new Error('[delay], id "n_130_2", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_130_5_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_130_5_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_130_5_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_130_5_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_130_5_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_130_5_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_130_5_STATE.outMessages[0] = message
                n_130_5_STATE.messageTransferFunctions.splice(0, n_130_5_STATE.messageTransferFunctions.length - 1)
                n_130_5_STATE.messageTransferFunctions[0] = function (m) {
                    return n_130_5_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_130_5_STATE.messageTransferFunctions.length; i++) {
                    n_130_1_RCVS_0(n_130_5_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_130_5", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_130_1_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                n_float_int_setValueInt(n_130_1_STATE, msg_readFloatToken(m, 0))
                n_129_10_RCVS_1(msg_floats([n_130_1_STATE.value]))
                return 

            } else if (msg_isBang(m)) {
                n_129_10_RCVS_1(msg_floats([n_130_1_STATE.value]))
                return
                
            }
        
                                throw new Error('[int], id "n_130_1", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_130_6_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_130_6_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_130_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_130_6_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_130_6_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_130_6_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_130_6_STATE.outMessages[0] = message
                n_130_6_STATE.messageTransferFunctions.splice(0, n_130_6_STATE.messageTransferFunctions.length - 1)
                n_130_6_STATE.messageTransferFunctions[0] = function (m) {
                    return n_130_6_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_130_6_STATE.messageTransferFunctions.length; i++) {
                    n_130_1_RCVS_0(n_130_6_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_130_6", inlet "0", unsupported message : ' + msg_display(m))
                            }







function n_50_2_RCVS_0(m) {
                                
        if (msg_getLength(m) === 1) {
            if (
                (msg_isFloatToken(m, 0) && msg_readFloatToken(m, 0) === 0)
                || msg_isAction(m, 'stop')
            ) {
                n_metro_stop(n_50_2_STATE)
                return

            } else if (
                msg_isFloatToken(m, 0)
                || msg_isBang(m)
            ) {
                n_50_2_STATE.realNextTick = toFloat(FRAME)
                n_metro_scheduleNextTick(n_50_2_STATE)
                return
            }
        }
    
                                throw new Error('[metro], id "n_50_2", inlet "0", unsupported message : ' + msg_display(m))
                            }

function m_n_50_3_0__routemsg_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                SND_TO_NULL(m)
                return
            } else {
                n_50_3_RCVS_0_message(m)
                return
            }
        
                                throw new Error('[_routemsg], id "m_n_50_3_0__routemsg", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_50_3_RCVS_0_message(m) {
                                
        if (msg_isBang(m)) {
            SND_TO_NULL(msg_floats([n_50_3_STATE.currentValue]))
            return 
        }
    
                                throw new Error('[snapshot~], id "n_50_3", inlet "0_message", unsupported message : ' + msg_display(m))
                            }



function n_52_2_RCVS_0(m) {
                                
        if (msg_getLength(m) === 1) {
            if (
                (msg_isFloatToken(m, 0) && msg_readFloatToken(m, 0) === 0)
                || msg_isAction(m, 'stop')
            ) {
                n_metro_stop(n_52_2_STATE)
                return

            } else if (
                msg_isFloatToken(m, 0)
                || msg_isBang(m)
            ) {
                n_52_2_STATE.realNextTick = toFloat(FRAME)
                n_metro_scheduleNextTick(n_52_2_STATE)
                return
            }
        }
    
                                throw new Error('[metro], id "n_52_2", inlet "0", unsupported message : ' + msg_display(m))
                            }

function m_n_52_3_0__routemsg_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                SND_TO_NULL(m)
                return
            } else {
                n_52_3_RCVS_0_message(m)
                return
            }
        
                                throw new Error('[_routemsg], id "m_n_52_3_0__routemsg", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_52_3_RCVS_0_message(m) {
                                
        if (msg_isBang(m)) {
            SND_TO_NULL(msg_floats([n_52_3_STATE.currentValue]))
            return 
        }
    
                                throw new Error('[snapshot~], id "n_52_3", inlet "0_message", unsupported message : ' + msg_display(m))
                            }



function n_54_2_RCVS_0(m) {
                                
        if (msg_getLength(m) === 1) {
            if (
                (msg_isFloatToken(m, 0) && msg_readFloatToken(m, 0) === 0)
                || msg_isAction(m, 'stop')
            ) {
                n_metro_stop(n_54_2_STATE)
                return

            } else if (
                msg_isFloatToken(m, 0)
                || msg_isBang(m)
            ) {
                n_54_2_STATE.realNextTick = toFloat(FRAME)
                n_metro_scheduleNextTick(n_54_2_STATE)
                return
            }
        }
    
                                throw new Error('[metro], id "n_54_2", inlet "0", unsupported message : ' + msg_display(m))
                            }

function m_n_54_3_0__routemsg_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                SND_TO_NULL(m)
                return
            } else {
                n_54_3_RCVS_0_message(m)
                return
            }
        
                                throw new Error('[_routemsg], id "m_n_54_3_0__routemsg", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_54_3_RCVS_0_message(m) {
                                
        if (msg_isBang(m)) {
            SND_TO_NULL(msg_floats([n_54_3_STATE.currentValue]))
            return 
        }
    
                                throw new Error('[snapshot~], id "n_54_3", inlet "0_message", unsupported message : ' + msg_display(m))
                            }



function n_56_2_RCVS_0(m) {
                                
        if (msg_getLength(m) === 1) {
            if (
                (msg_isFloatToken(m, 0) && msg_readFloatToken(m, 0) === 0)
                || msg_isAction(m, 'stop')
            ) {
                n_metro_stop(n_56_2_STATE)
                return

            } else if (
                msg_isFloatToken(m, 0)
                || msg_isBang(m)
            ) {
                n_56_2_STATE.realNextTick = toFloat(FRAME)
                n_metro_scheduleNextTick(n_56_2_STATE)
                return
            }
        }
    
                                throw new Error('[metro], id "n_56_2", inlet "0", unsupported message : ' + msg_display(m))
                            }

function m_n_56_3_0__routemsg_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                SND_TO_NULL(m)
                return
            } else {
                n_56_3_RCVS_0_message(m)
                return
            }
        
                                throw new Error('[_routemsg], id "m_n_56_3_0__routemsg", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_56_3_RCVS_0_message(m) {
                                
        if (msg_isBang(m)) {
            SND_TO_NULL(msg_floats([n_56_3_STATE.currentValue]))
            return 
        }
    
                                throw new Error('[snapshot~], id "n_56_3", inlet "0_message", unsupported message : ' + msg_display(m))
                            }

function n_57_3_RCVS_0(m) {
                                
            n_bang_receiveMessage(n_57_3_STATE, m)
            return
        
                                throw new Error('[bang], id "n_57_3", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_57_9_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_57_9_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_57_9_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_57_9_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_57_9_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_57_9_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_57_9_STATE.outMessages[0] = message
                n_57_9_STATE.messageTransferFunctions.splice(0, n_57_9_STATE.messageTransferFunctions.length - 1)
                n_57_9_STATE.messageTransferFunctions[0] = function (m) {
                    return n_57_9_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_57_9_STATE.messageTransferFunctions.length; i++) {
                    n_57_4_RCVS_0(n_57_9_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_57_9", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_57_4_RCVS_0(m) {
                                
        if (!msg_isBang(m)) {
            for (let i = 0; i < msg_getLength(m); i++) {
                n_57_4_STATE.stringValues[i] = messageTokenToString(m, i)
                n_57_4_STATE.floatValues[i] = messageTokenToFloat(m, i)
            }
        }

        const template = [MSG_FLOAT_TOKEN,MSG_FLOAT_TOKEN]

        const messageOut = msg_create(template)

        msg_writeFloatToken(messageOut, 0, n_57_4_STATE.floatValues[0])
msg_writeFloatToken(messageOut, 1, n_57_4_STATE.floatValues[1])

        n_61_3_RCVS_0(messageOut)
        return
    
                                throw new Error('[pack], id "n_57_4", inlet "0", unsupported message : ' + msg_display(m))
                            }
function n_57_4_RCVS_1(m) {
                                
                    n_57_4_STATE.floatValues[1] = messageTokenToFloat(m, 0)
                    return
                
                                throw new Error('[pack], id "n_57_4", inlet "1", unsupported message : ' + msg_display(m))
                            }

function n_61_3_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_61_3_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_61_3_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_61_3_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_61_3_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_61_3_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_61_3_STATE.outMessages[0] = message
                n_61_3_STATE.messageTransferFunctions.splice(0, n_61_3_STATE.messageTransferFunctions.length - 1)
                n_61_3_STATE.messageTransferFunctions[0] = function (m) {
                    return n_61_3_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_61_3_STATE.messageTransferFunctions.length; i++) {
                    n_61_0_RCVS_0(n_61_3_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_61_3", inlet "0", unsupported message : ' + msg_display(m))
                            }
let n_61_0_OUTS_0 = 0
function n_61_0_RCVS_0(m) {
                                
        if (
            msg_isMatching(m, [MSG_FLOAT_TOKEN])
            || msg_isMatching(m, [MSG_FLOAT_TOKEN, MSG_FLOAT_TOKEN])
        ) {
            switch (msg_getLength(m)) {
                case 2:
                    n_line_t_setNextDuration(n_61_0_STATE, msg_readFloatToken(m, 1))
                case 1:
                    n_line_t_setNewLine(n_61_0_STATE, msg_readFloatToken(m, 0))
            }
            return

        } else if (msg_isAction(m, 'stop')) {
            n_line_t_stop(n_61_0_STATE)
            return

        }
    
                                throw new Error('[line~], id "n_61_0", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_58_6_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_58_6_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_58_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_58_6_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_58_6_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_58_6_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_58_6_STATE.outMessages[0] = message
                n_58_6_STATE.messageTransferFunctions.splice(0, n_58_6_STATE.messageTransferFunctions.length - 1)
                n_58_6_STATE.messageTransferFunctions[0] = function (m) {
                    return n_58_6_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_58_6_STATE.messageTransferFunctions.length; i++) {
                    n_58_6_SNDS_0(n_58_6_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_58_6", inlet "0", unsupported message : ' + msg_display(m))
                            }
let n_58_0_OUTS_0 = 0
function n_58_0_RCVS_0(m) {
                                
        if (
            msg_isMatching(m, [MSG_FLOAT_TOKEN])
            || msg_isMatching(m, [MSG_FLOAT_TOKEN, MSG_FLOAT_TOKEN])
        ) {
            switch (msg_getLength(m)) {
                case 2:
                    n_line_t_setNextDuration(n_58_0_STATE, msg_readFloatToken(m, 1))
                case 1:
                    n_line_t_setNewLine(n_58_0_STATE, msg_readFloatToken(m, 0))
            }
            return

        } else if (msg_isAction(m, 'stop')) {
            n_line_t_stop(n_58_0_STATE)
            return

        }
    
                                throw new Error('[line~], id "n_58_0", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_58_4_RCVS_0(m) {
                                
            n_bang_receiveMessage(n_58_4_STATE, m)
            return
        
                                throw new Error('[bang], id "n_58_4", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_58_5_RCVS_0(m) {
                                
            if (msg_getLength(m) === 1) {
                if (msg_isStringToken(m, 0)) {
                    const action = msg_readStringToken(m, 0)
                    if (action === 'bang' || action === 'start') {
                        n_delay_scheduleDelay(
                            n_58_5_STATE, 
                            () => n_58_7_RCVS_0(msg_bang()),
                            FRAME,
                        )
                        return
                    } else if (action === 'stop') {
                        n_delay_stop(n_58_5_STATE)
                        return
                    }
                    
                } else if (msg_isFloatToken(m, 0)) {
                    n_delay_setDelay(n_58_5_STATE, msg_readFloatToken(m, 0))
                    n_delay_scheduleDelay(
                        n_58_5_STATE,
                        () => n_58_7_RCVS_0(msg_bang()),
                        FRAME,
                    )
                    return 
                }
            
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN, MSG_STRING_TOKEN])
                && msg_readStringToken(m, 0) === 'tempo'
            ) {
                n_58_5_STATE.sampleRatio = computeUnitInSamples(
                    SAMPLE_RATE, 
                    msg_readFloatToken(m, 1), 
                    msg_readStringToken(m, 2)
                )
                return
            }
        
                                throw new Error('[delay], id "n_58_5", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_58_7_RCVS_0(m) {
                                
        if (msg_isBang(m)) {
            n_58_8_RCVS_0(msg_floats([Math.floor(Math.random() * n_58_7_STATE.maxValue)]))
            return
        } else if (
            msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
            && msg_readStringToken(m, 0) === 'seed'
        ) {
            console.log('WARNING : seed not implemented yet for [random]')
            return
        }
    
                                throw new Error('[random], id "n_58_7", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_58_8_RCVS_0(m) {
                                
                if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                    n_add_setLeft(n_58_8_STATE, msg_readFloatToken(m, 0))
                    n_58_10_RCVS_0(msg_floats([n_58_8_STATE.leftOp + n_58_8_STATE.rightOp]))
                    return
                
                } else if (msg_isBang(m)) {
                    n_58_10_RCVS_0(msg_floats([n_58_8_STATE.leftOp + n_58_8_STATE.rightOp]))
                    return
                }
            
                                throw new Error('[+], id "n_58_8", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_58_10_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                n_float_int_setValueFloat(n_58_10_STATE, msg_readFloatToken(m, 0))
                n_58_9_RCVS_0(msg_floats([n_58_10_STATE.value]))
                return 

            } else if (msg_isBang(m)) {
                n_58_9_RCVS_0(msg_floats([n_58_10_STATE.value]))
                return
                
            }
        
                                throw new Error('[float], id "n_58_10", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_58_9_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_58_9_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_58_9_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_58_9_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_58_9_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_58_9_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_58_9_STATE.outMessages[0] = message
                n_58_9_STATE.messageTransferFunctions.splice(0, n_58_9_STATE.messageTransferFunctions.length - 1)
                n_58_9_STATE.messageTransferFunctions[0] = function (m) {
                    return n_58_9_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_58_9_STATE.messageTransferFunctions.length; i++) {
                    n_58_3_RCVS_0(n_58_9_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_58_9", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_58_3_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_58_3_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_58_3_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_58_3_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_58_3_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_58_3_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_58_3_STATE.outMessages[0] = message
                n_58_3_STATE.messageTransferFunctions.splice(0, n_58_3_STATE.messageTransferFunctions.length - 1)
                n_58_3_STATE.messageTransferFunctions[0] = function (m) {
                    return n_58_3_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_58_3_STATE.messageTransferFunctions.length; i++) {
                    n_58_0_RCVS_0(n_58_3_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_58_3", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_57_7_RCVS_0(m) {
                                
            n_bang_receiveMessage(n_57_7_STATE, m)
            return
        
                                throw new Error('[bang], id "n_57_7", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_57_22_RCVS_0(m) {
                                
        if (msg_isBang(m)) {
            n_57_6_RCVS_0(msg_floats([Math.floor(Math.random() * n_57_22_STATE.maxValue)]))
            return
        } else if (
            msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
            && msg_readStringToken(m, 0) === 'seed'
        ) {
            console.log('WARNING : seed not implemented yet for [random]')
            return
        }
    
                                throw new Error('[random], id "n_57_22", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_57_6_RCVS_0(m) {
                                
                if (n_57_6_STATE.filterType === MSG_STRING_TOKEN) {
                    if (
                        (n_57_6_STATE.stringFilter === 'float'
                            && msg_isFloatToken(m, 0))
                        || (n_57_6_STATE.stringFilter === 'symbol'
                            && msg_isStringToken(m, 0))
                        || (n_57_6_STATE.stringFilter === 'list'
                            && msg_getLength(m) > 1)
                        || (n_57_6_STATE.stringFilter === 'bang' 
                            && msg_isBang(m))
                    ) {
                        n_57_26_RCVS_0(m)
                        return
                    
                    } else if (
                        msg_isStringToken(m, 0)
                        && msg_readStringToken(m, 0) === n_57_6_STATE.stringFilter
                    ) {
                        n_57_26_RCVS_0(msg_emptyToBang(msg_shift(m)))
                        return
                    }

                } else if (
                    msg_isFloatToken(m, 0)
                    && msg_readFloatToken(m, 0) === n_57_6_STATE.floatFilter
                ) {
                    n_57_26_RCVS_0(msg_emptyToBang(msg_shift(m)))
                    return
                }
            
                SND_TO_NULL(m)
            return
            
                                throw new Error('[route], id "n_57_6", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_57_26_RCVS_0(m) {
                                
            if (msg_getLength(m) === 1) {
                if (msg_isStringToken(m, 0)) {
                    const action = msg_readStringToken(m, 0)
                    if (action === 'bang' || action === 'start') {
                        n_delay_scheduleDelay(
                            n_57_26_STATE, 
                            () => n_57_8_RCVS_0(msg_bang()),
                            FRAME,
                        )
                        return
                    } else if (action === 'stop') {
                        n_delay_stop(n_57_26_STATE)
                        return
                    }
                    
                } else if (msg_isFloatToken(m, 0)) {
                    n_delay_setDelay(n_57_26_STATE, msg_readFloatToken(m, 0))
                    n_delay_scheduleDelay(
                        n_57_26_STATE,
                        () => n_57_8_RCVS_0(msg_bang()),
                        FRAME,
                    )
                    return 
                }
            
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN, MSG_STRING_TOKEN])
                && msg_readStringToken(m, 0) === 'tempo'
            ) {
                n_57_26_STATE.sampleRatio = computeUnitInSamples(
                    SAMPLE_RATE, 
                    msg_readFloatToken(m, 1), 
                    msg_readStringToken(m, 2)
                )
                return
            }
        
                                throw new Error('[delay], id "n_57_26", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_57_8_RCVS_0(m) {
                                
            n_bang_receiveMessage(n_57_8_STATE, m)
            return
        
                                throw new Error('[bang], id "n_57_8", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_57_16_RCVS_0(m) {
                                
        n_57_12_RCVS_0(msg_bang())
n_57_35_RCVS_0(msg_bang())
        return
    
                                throw new Error('[trigger], id "n_57_16", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_57_35_RCVS_0(m) {
                                
            msgBusPublish(n_57_35_STATE.busName, m)
            return
        
                                throw new Error('[send], id "n_57_35", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_57_12_RCVS_0(m) {
                                
        if (msg_isBang(m)) {
            n_57_18_RCVS_0(msg_floats([Math.floor(Math.random() * n_57_12_STATE.maxValue)]))
            return
        } else if (
            msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
            && msg_readStringToken(m, 0) === 'seed'
        ) {
            console.log('WARNING : seed not implemented yet for [random]')
            return
        }
    
                                throw new Error('[random], id "n_57_12", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_57_18_RCVS_0(m) {
                                
        n_57_18_SNDS_1(msg_bang())
n_57_13_RCVS_0(msg_floats([messageTokenToFloat(m, 0)]))
        return
    
                                throw new Error('[trigger], id "n_57_18", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_57_13_RCVS_0(m) {
                                
                if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                    n_add_setLeft(n_57_13_STATE, msg_readFloatToken(m, 0))
                    n_57_14_RCVS_0(msg_floats([n_57_13_STATE.leftOp + n_57_13_STATE.rightOp]))
                    return
                
                } else if (msg_isBang(m)) {
                    n_57_14_RCVS_0(msg_floats([n_57_13_STATE.leftOp + n_57_13_STATE.rightOp]))
                    return
                }
            
                                throw new Error('[+], id "n_57_13", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_57_14_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_57_14_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_57_14_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_57_14_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_57_14_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_57_14_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_57_14_STATE.outMessages[0] = message
                n_57_14_STATE.messageTransferFunctions.splice(0, n_57_14_STATE.messageTransferFunctions.length - 1)
                n_57_14_STATE.messageTransferFunctions[0] = function (m) {
                    return n_57_14_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_57_14_STATE.messageTransferFunctions.length; i++) {
                    n_57_15_RCVS_0(n_57_14_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_57_14", inlet "0", unsupported message : ' + msg_display(m))
                            }
let n_57_15_OUTS_0 = 0
function n_57_15_RCVS_0(m) {
                                
        if (
            msg_isMatching(m, [MSG_FLOAT_TOKEN])
            || msg_isMatching(m, [MSG_FLOAT_TOKEN, MSG_FLOAT_TOKEN])
        ) {
            switch (msg_getLength(m)) {
                case 2:
                    n_line_t_setNextDuration(n_57_15_STATE, msg_readFloatToken(m, 1))
                case 1:
                    n_line_t_setNewLine(n_57_15_STATE, msg_readFloatToken(m, 0))
            }
            return

        } else if (msg_isAction(m, 'stop')) {
            n_line_t_stop(n_57_15_STATE)
            return

        }
    
                                throw new Error('[line~], id "n_57_15", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_60_1_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_60_1_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_60_1_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_60_1_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_60_1_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_60_1_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_60_1_STATE.outMessages[0] = message
                n_60_1_STATE.messageTransferFunctions.splice(0, n_60_1_STATE.messageTransferFunctions.length - 1)
                n_60_1_STATE.messageTransferFunctions[0] = function (m) {
                    return n_60_1_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_60_1_STATE.messageTransferFunctions.length; i++) {
                    n_60_0_RCVS_0(n_60_1_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_60_1", inlet "0", unsupported message : ' + msg_display(m))
                            }
let n_60_0_OUTS_0 = 0
function n_60_0_RCVS_0(m) {
                                
        if (
            msg_isMatching(m, [MSG_FLOAT_TOKEN])
            || msg_isMatching(m, [MSG_FLOAT_TOKEN, MSG_FLOAT_TOKEN])
        ) {
            switch (msg_getLength(m)) {
                case 2:
                    n_line_t_setNextDuration(n_60_0_STATE, msg_readFloatToken(m, 1))
                case 1:
                    n_line_t_setNewLine(n_60_0_STATE, msg_readFloatToken(m, 0))
            }
            return

        } else if (msg_isAction(m, 'stop')) {
            n_line_t_stop(n_60_0_STATE)
            return

        }
    
                                throw new Error('[line~], id "n_60_0", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_60_5_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_60_5_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_60_5_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_60_5_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_60_5_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_60_5_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_60_5_STATE.outMessages[0] = message
                n_60_5_STATE.messageTransferFunctions.splice(0, n_60_5_STATE.messageTransferFunctions.length - 1)
                n_60_5_STATE.messageTransferFunctions[0] = function (m) {
                    return n_60_5_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_60_5_STATE.messageTransferFunctions.length; i++) {
                    n_60_0_RCVS_0(n_60_5_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_60_5", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_57_34_RCVS_0(m) {
                                
            msgBusPublish(n_57_34_STATE.busName, m)
            return
        
                                throw new Error('[send], id "n_57_34", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_57_25_RCVS_0(m) {
                                
            if (msg_getLength(m) === 1) {
                if (msg_isStringToken(m, 0)) {
                    const action = msg_readStringToken(m, 0)
                    if (action === 'bang' || action === 'start') {
                        n_delay_scheduleDelay(
                            n_57_25_STATE, 
                            () => n_57_22_RCVS_0(msg_bang()),
                            FRAME,
                        )
                        return
                    } else if (action === 'stop') {
                        n_delay_stop(n_57_25_STATE)
                        return
                    }
                    
                } else if (msg_isFloatToken(m, 0)) {
                    n_delay_setDelay(n_57_25_STATE, msg_readFloatToken(m, 0))
                    n_delay_scheduleDelay(
                        n_57_25_STATE,
                        () => n_57_22_RCVS_0(msg_bang()),
                        FRAME,
                    )
                    return 
                }
            
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN, MSG_STRING_TOKEN])
                && msg_readStringToken(m, 0) === 'tempo'
            ) {
                n_57_25_STATE.sampleRatio = computeUnitInSamples(
                    SAMPLE_RATE, 
                    msg_readFloatToken(m, 1), 
                    msg_readStringToken(m, 2)
                )
                return
            }
        
                                throw new Error('[delay], id "n_57_25", inlet "0", unsupported message : ' + msg_display(m))
                            }



function n_57_29_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_57_29_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_57_29_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_57_29_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_57_29_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_57_29_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_57_29_STATE.outMessages[0] = message
                n_57_29_STATE.messageTransferFunctions.splice(0, n_57_29_STATE.messageTransferFunctions.length - 1)
                n_57_29_STATE.messageTransferFunctions[0] = function (m) {
                    return n_57_29_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_57_29_STATE.messageTransferFunctions.length; i++) {
                    n_57_2_RCVS_0(n_57_29_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_57_29", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_57_2_RCVS_0(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_57_2_STATE.currentValue = msg_readFloatToken(m, 0)
            return
        }
    
                                throw new Error('[sig~], id "n_57_2", inlet "0", unsupported message : ' + msg_display(m))
                            }



function n_57_21_RCVS_0(m) {
                                
        if (msg_isBang(m)) {
            n_57_20_RCVS_0(msg_floats([Math.floor(Math.random() * n_57_21_STATE.maxValue)]))
            return
        } else if (
            msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
            && msg_readStringToken(m, 0) === 'seed'
        ) {
            console.log('WARNING : seed not implemented yet for [random]')
            return
        }
    
                                throw new Error('[random], id "n_57_21", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_57_20_RCVS_0(m) {
                                
        n_57_38_RCVS_0(msg_bang())
n_57_5_RCVS_0(msg_floats([messageTokenToFloat(m, 0)]))
        return
    
                                throw new Error('[trigger], id "n_57_20", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_57_5_RCVS_0(m) {
                                
                if (n_57_5_STATE.filterType === MSG_STRING_TOKEN) {
                    if (
                        (n_57_5_STATE.stringFilter === 'float'
                            && msg_isFloatToken(m, 0))
                        || (n_57_5_STATE.stringFilter === 'symbol'
                            && msg_isStringToken(m, 0))
                        || (n_57_5_STATE.stringFilter === 'list'
                            && msg_getLength(m) > 1)
                        || (n_57_5_STATE.stringFilter === 'bang' 
                            && msg_isBang(m))
                    ) {
                        n_57_7_RCVS_0(m)
                        return
                    
                    } else if (
                        msg_isStringToken(m, 0)
                        && msg_readStringToken(m, 0) === n_57_5_STATE.stringFilter
                    ) {
                        n_57_7_RCVS_0(msg_emptyToBang(msg_shift(m)))
                        return
                    }

                } else if (
                    msg_isFloatToken(m, 0)
                    && msg_readFloatToken(m, 0) === n_57_5_STATE.floatFilter
                ) {
                    n_57_7_RCVS_0(msg_emptyToBang(msg_shift(m)))
                    return
                }
            
                SND_TO_NULL(m)
            return
            
                                throw new Error('[route], id "n_57_5", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_57_38_RCVS_0(m) {
                                
            msgBusPublish(n_57_38_STATE.busName, m)
            return
        
                                throw new Error('[send], id "n_57_38", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_57_23_RCVS_0(m) {
                                
        if (msg_isBang(m)) {
            n_57_24_RCVS_0(msg_floats([Math.floor(Math.random() * n_57_23_STATE.maxValue)]))
            return
        } else if (
            msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
            && msg_readStringToken(m, 0) === 'seed'
        ) {
            console.log('WARNING : seed not implemented yet for [random]')
            return
        }
    
                                throw new Error('[random], id "n_57_23", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_57_24_RCVS_0(m) {
                                
                if (n_57_24_STATE.filterType === MSG_STRING_TOKEN) {
                    if (
                        (n_57_24_STATE.stringFilter === 'float'
                            && msg_isFloatToken(m, 0))
                        || (n_57_24_STATE.stringFilter === 'symbol'
                            && msg_isStringToken(m, 0))
                        || (n_57_24_STATE.stringFilter === 'list'
                            && msg_getLength(m) > 1)
                        || (n_57_24_STATE.stringFilter === 'bang' 
                            && msg_isBang(m))
                    ) {
                        n_57_25_RCVS_0(m)
                        return
                    
                    } else if (
                        msg_isStringToken(m, 0)
                        && msg_readStringToken(m, 0) === n_57_24_STATE.stringFilter
                    ) {
                        n_57_25_RCVS_0(msg_emptyToBang(msg_shift(m)))
                        return
                    }

                } else if (
                    msg_isFloatToken(m, 0)
                    && msg_readFloatToken(m, 0) === n_57_24_STATE.floatFilter
                ) {
                    n_57_25_RCVS_0(msg_emptyToBang(msg_shift(m)))
                    return
                }
            
                SND_TO_NULL(m)
            return
            
                                throw new Error('[route], id "n_57_24", inlet "0", unsupported message : ' + msg_display(m))
                            }







function n_60_2_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_60_2_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_60_2_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_60_2_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_60_2_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_60_2_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_60_2_STATE.outMessages[0] = message
                n_60_2_STATE.messageTransferFunctions.splice(0, n_60_2_STATE.messageTransferFunctions.length - 1)
                n_60_2_STATE.messageTransferFunctions[0] = function (m) {
                    return n_60_2_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_60_2_STATE.messageTransferFunctions.length; i++) {
                    n_60_3_RCVS_0(n_60_2_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_60_2", inlet "0", unsupported message : ' + msg_display(m))
                            }
let n_60_3_OUTS_0 = 0
function n_60_3_RCVS_0(m) {
                                
        if (
            msg_isMatching(m, [MSG_FLOAT_TOKEN])
            || msg_isMatching(m, [MSG_FLOAT_TOKEN, MSG_FLOAT_TOKEN])
        ) {
            switch (msg_getLength(m)) {
                case 2:
                    n_line_t_setNextDuration(n_60_3_STATE, msg_readFloatToken(m, 1))
                case 1:
                    n_line_t_setNewLine(n_60_3_STATE, msg_readFloatToken(m, 0))
            }
            return

        } else if (msg_isAction(m, 'stop')) {
            n_line_t_stop(n_60_3_STATE)
            return

        }
    
                                throw new Error('[line~], id "n_60_3", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_60_4_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_60_4_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_60_4_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_60_4_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_60_4_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_60_4_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_60_4_STATE.outMessages[0] = message
                n_60_4_STATE.messageTransferFunctions.splice(0, n_60_4_STATE.messageTransferFunctions.length - 1)
                n_60_4_STATE.messageTransferFunctions[0] = function (m) {
                    return n_60_4_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_60_4_STATE.messageTransferFunctions.length; i++) {
                    n_60_3_RCVS_0(n_60_4_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_60_4", inlet "0", unsupported message : ' + msg_display(m))
                            }



function n_59_0_RCVS_0(m) {
                                
        if (msg_isBang(m)) {
            n_59_1_RCVS_0(msg_floats([Math.floor(Math.random() * n_59_0_STATE.maxValue)]))
            return
        } else if (
            msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
            && msg_readStringToken(m, 0) === 'seed'
        ) {
            console.log('WARNING : seed not implemented yet for [random]')
            return
        }
    
                                throw new Error('[random], id "n_59_0", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_59_1_RCVS_0(m) {
                                
                
                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 0
                        ) {
                            n_59_5_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 1
                        ) {
                            n_59_4_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 2
                        ) {
                            n_59_2_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 3
                        ) {
                            n_59_3_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                SND_TO_NULL(m)
                return
            
                                throw new Error('[route], id "n_59_1", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_59_5_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_59_5_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_59_5_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_59_5_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_59_5_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_59_5_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_59_5_STATE.outMessages[0] = message
                n_59_5_STATE.messageTransferFunctions.splice(0, n_59_5_STATE.messageTransferFunctions.length - 1)
                n_59_5_STATE.messageTransferFunctions[0] = function (m) {
                    return n_59_5_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_59_5_STATE.messageTransferFunctions.length; i++) {
                    n_57_4_RCVS_1(n_59_5_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_59_5", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_59_4_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_59_4_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_59_4_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_59_4_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_59_4_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_59_4_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_59_4_STATE.outMessages[0] = message
                n_59_4_STATE.messageTransferFunctions.splice(0, n_59_4_STATE.messageTransferFunctions.length - 1)
                n_59_4_STATE.messageTransferFunctions[0] = function (m) {
                    return n_59_4_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_59_4_STATE.messageTransferFunctions.length; i++) {
                    n_57_4_RCVS_1(n_59_4_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_59_4", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_59_2_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_59_2_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_59_2_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_59_2_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_59_2_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_59_2_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_59_2_STATE.outMessages[0] = message
                n_59_2_STATE.messageTransferFunctions.splice(0, n_59_2_STATE.messageTransferFunctions.length - 1)
                n_59_2_STATE.messageTransferFunctions[0] = function (m) {
                    return n_59_2_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_59_2_STATE.messageTransferFunctions.length; i++) {
                    n_57_4_RCVS_1(n_59_2_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_59_2", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_59_3_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_59_3_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_59_3_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_59_3_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_59_3_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_59_3_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_59_3_STATE.outMessages[0] = message
                n_59_3_STATE.messageTransferFunctions.splice(0, n_59_3_STATE.messageTransferFunctions.length - 1)
                n_59_3_STATE.messageTransferFunctions[0] = function (m) {
                    return n_59_3_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_59_3_STATE.messageTransferFunctions.length; i++) {
                    n_57_4_RCVS_1(n_59_3_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_59_3", inlet "0", unsupported message : ' + msg_display(m))
                            }



function n_62_25_RCVS_0(m) {
                                
            n_bang_receiveMessage(n_62_25_STATE, m)
            return
        
                                throw new Error('[bang], id "n_62_25", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_64_0_RCVS_0(m) {
                                
        if (msg_isBang(m)) {
            n_64_1_RCVS_0(msg_floats([Math.floor(Math.random() * n_64_0_STATE.maxValue)]))
            return
        } else if (
            msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
            && msg_readStringToken(m, 0) === 'seed'
        ) {
            console.log('WARNING : seed not implemented yet for [random]')
            return
        }
    
                                throw new Error('[random], id "n_64_0", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_64_1_RCVS_0(m) {
                                
                if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                    n_add_setLeft(n_64_1_STATE, msg_readFloatToken(m, 0))
                    n_65_5_RCVS_0(msg_floats([n_64_1_STATE.leftOp + n_64_1_STATE.rightOp]))
                    return
                
                } else if (msg_isBang(m)) {
                    n_65_5_RCVS_0(msg_floats([n_64_1_STATE.leftOp + n_64_1_STATE.rightOp]))
                    return
                }
            
                                throw new Error('[+], id "n_64_1", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_65_5_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                const newValue = msg_readFloatToken(m, 0)
                if (newValue !== n_65_5_STATE.currentValue) {
                    n_65_5_STATE.currentValue = newValue
                    n_65_16_RCVS_0(msg_floats([n_65_5_STATE.currentValue]))
                }
                return
    
            } else if (msg_isBang(m)) {
                n_65_16_RCVS_0(msg_floats([n_65_5_STATE.currentValue]))
                return 
    
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_65_5_STATE.currentValue = msg_readFloatToken(m, 1)
                return
            }
        
                                throw new Error('[change], id "n_65_5", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_65_16_RCVS_0(m) {
                                
        n_65_6_RCVS_0(msg_bang())
n_65_8_RCVS_0(msg_floats([messageTokenToFloat(m, 0)]))
n_65_9_RCVS_0(msg_floats([messageTokenToFloat(m, 0)]))
        return
    
                                throw new Error('[trigger], id "n_65_16", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_65_9_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_65_9_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_65_9_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_65_9_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_65_9_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_65_9_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_65_9_STATE.outMessages[0] = message
                n_65_9_STATE.messageTransferFunctions.splice(0, n_65_9_STATE.messageTransferFunctions.length - 1)
                n_65_9_STATE.messageTransferFunctions[0] = function (m) {
                    return n_65_9_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_65_9_STATE.messageTransferFunctions.length; i++) {
                    n_65_10_RCVS_0(n_65_9_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_65_9", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_65_10_RCVS_0(m) {
                                
        if (
            msg_isMatching(m, [MSG_FLOAT_TOKEN])
            || msg_isMatching(m, [MSG_FLOAT_TOKEN, MSG_FLOAT_TOKEN])
            || msg_isMatching(m, [MSG_FLOAT_TOKEN, MSG_FLOAT_TOKEN, MSG_FLOAT_TOKEN])
        ) {
            n_line_stopCurrentLine(n_65_10_STATE)
            switch (msg_getLength(m)) {
                case 3:
                    n_line_setGrain(n_65_10_STATE, msg_readFloatToken(m, 2))
                case 2:
                    n_line_setNextDuration(n_65_10_STATE, msg_readFloatToken(m, 1))
                case 1:
                    const targetValue = msg_readFloatToken(m, 0)
                    if (n_65_10_STATE.nextDurationSamp === 0) {
                        n_65_10_STATE.currentValue = targetValue
                        m_n_65_3_0__routemsg_RCVS_0(msg_floats([targetValue]))
                    } else {
                        m_n_65_3_0__routemsg_RCVS_0(msg_floats([n_65_10_STATE.currentValue]))
                        n_line_setNewLine(n_65_10_STATE, targetValue)
                        n_line_incrementTime(n_65_10_STATE, n_65_10_STATE.currentLine.dx)
                        n_line_scheduleNextTick(n_65_10_STATE)
                    }
                    
            }
            return

        } else if (msg_isAction(m, 'stop')) {
            n_line_stopCurrentLine(n_65_10_STATE)
            return

        } else if (
            msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
            && msg_readStringToken(m, 0) === 'set'
        ) {
            n_line_stopCurrentLine(n_65_10_STATE)
            n_65_10_STATE.currentValue = msg_readFloatToken(m, 1)
            return
        }
    
                                throw new Error('[line], id "n_65_10", inlet "0", unsupported message : ' + msg_display(m))
                            }

function m_n_65_3_0__routemsg_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                m_n_65_3_0_sig_RCVS_0(m)
                return
            } else {
                SND_TO_NULL(m)
                return
            }
        
                                throw new Error('[_routemsg], id "m_n_65_3_0__routemsg", inlet "0", unsupported message : ' + msg_display(m))
                            }

function m_n_65_3_0_sig_RCVS_0(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            m_n_65_3_0_sig_STATE.currentValue = msg_readFloatToken(m, 0)
            return
        }
    
                                throw new Error('[sig~], id "m_n_65_3_0_sig", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_65_8_RCVS_0(m) {
                                
                if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                    n_add_setLeft(n_65_8_STATE, msg_readFloatToken(m, 0))
                    n_65_11_RCVS_0(msg_floats([n_65_8_STATE.leftOp + n_65_8_STATE.rightOp]))
                    return
                
                } else if (msg_isBang(m)) {
                    n_65_11_RCVS_0(msg_floats([n_65_8_STATE.leftOp + n_65_8_STATE.rightOp]))
                    return
                }
            
                                throw new Error('[+], id "n_65_8", inlet "0", unsupported message : ' + msg_display(m))
                            }
function n_65_8_RCVS_1(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_add_setRight(n_65_8_STATE, msg_readFloatToken(m, 0))
            return
        }
    
                                throw new Error('[+], id "n_65_8", inlet "1", unsupported message : ' + msg_display(m))
                            }

function n_65_11_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_65_11_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_65_11_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_65_11_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_65_11_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_65_11_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_65_11_STATE.outMessages[0] = message
                n_65_11_STATE.messageTransferFunctions.splice(0, n_65_11_STATE.messageTransferFunctions.length - 1)
                n_65_11_STATE.messageTransferFunctions[0] = function (m) {
                    return n_65_11_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_65_11_STATE.messageTransferFunctions.length; i++) {
                    n_65_12_RCVS_0(n_65_11_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_65_11", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_65_12_RCVS_0(m) {
                                
        if (
            msg_isMatching(m, [MSG_FLOAT_TOKEN])
            || msg_isMatching(m, [MSG_FLOAT_TOKEN, MSG_FLOAT_TOKEN])
            || msg_isMatching(m, [MSG_FLOAT_TOKEN, MSG_FLOAT_TOKEN, MSG_FLOAT_TOKEN])
        ) {
            n_line_stopCurrentLine(n_65_12_STATE)
            switch (msg_getLength(m)) {
                case 3:
                    n_line_setGrain(n_65_12_STATE, msg_readFloatToken(m, 2))
                case 2:
                    n_line_setNextDuration(n_65_12_STATE, msg_readFloatToken(m, 1))
                case 1:
                    const targetValue = msg_readFloatToken(m, 0)
                    if (n_65_12_STATE.nextDurationSamp === 0) {
                        n_65_12_STATE.currentValue = targetValue
                        m_n_65_15_0__routemsg_RCVS_0(msg_floats([targetValue]))
                    } else {
                        m_n_65_15_0__routemsg_RCVS_0(msg_floats([n_65_12_STATE.currentValue]))
                        n_line_setNewLine(n_65_12_STATE, targetValue)
                        n_line_incrementTime(n_65_12_STATE, n_65_12_STATE.currentLine.dx)
                        n_line_scheduleNextTick(n_65_12_STATE)
                    }
                    
            }
            return

        } else if (msg_isAction(m, 'stop')) {
            n_line_stopCurrentLine(n_65_12_STATE)
            return

        } else if (
            msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
            && msg_readStringToken(m, 0) === 'set'
        ) {
            n_line_stopCurrentLine(n_65_12_STATE)
            n_65_12_STATE.currentValue = msg_readFloatToken(m, 1)
            return
        }
    
                                throw new Error('[line], id "n_65_12", inlet "0", unsupported message : ' + msg_display(m))
                            }

function m_n_65_15_0__routemsg_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                m_n_65_15_0_sig_RCVS_0(m)
                return
            } else {
                SND_TO_NULL(m)
                return
            }
        
                                throw new Error('[_routemsg], id "m_n_65_15_0__routemsg", inlet "0", unsupported message : ' + msg_display(m))
                            }

function m_n_65_15_0_sig_RCVS_0(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            m_n_65_15_0_sig_STATE.currentValue = msg_readFloatToken(m, 0)
            return
        }
    
                                throw new Error('[sig~], id "m_n_65_15_0_sig", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_65_6_RCVS_0(m) {
                                
        if (msg_isBang(m)) {
            n_65_7_RCVS_0(msg_floats([Math.floor(Math.random() * n_65_6_STATE.maxValue)]))
            return
        } else if (
            msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
            && msg_readStringToken(m, 0) === 'seed'
        ) {
            console.log('WARNING : seed not implemented yet for [random]')
            return
        }
    
                                throw new Error('[random], id "n_65_6", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_65_7_RCVS_0(m) {
                                
                if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                    n_sub_setLeft(n_65_7_STATE, msg_readFloatToken(m, 0))
                    n_65_8_RCVS_1(msg_floats([n_65_7_STATE.leftOp - n_65_7_STATE.rightOp]))
                    return
                
                } else if (msg_isBang(m)) {
                    n_65_8_RCVS_1(msg_floats([n_65_7_STATE.leftOp - n_65_7_STATE.rightOp]))
                    return
                }
            
                                throw new Error('[-], id "n_65_7", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_62_31_RCVS_0(m) {
                                
            if (msg_getLength(m) === 1) {
                if (msg_isStringToken(m, 0)) {
                    const action = msg_readStringToken(m, 0)
                    if (action === 'bang' || action === 'start') {
                        n_delay_scheduleDelay(
                            n_62_31_STATE, 
                            () => n_62_29_RCVS_0(msg_bang()),
                            FRAME,
                        )
                        return
                    } else if (action === 'stop') {
                        n_delay_stop(n_62_31_STATE)
                        return
                    }
                    
                } else if (msg_isFloatToken(m, 0)) {
                    n_delay_setDelay(n_62_31_STATE, msg_readFloatToken(m, 0))
                    n_delay_scheduleDelay(
                        n_62_31_STATE,
                        () => n_62_29_RCVS_0(msg_bang()),
                        FRAME,
                    )
                    return 
                }
            
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN, MSG_STRING_TOKEN])
                && msg_readStringToken(m, 0) === 'tempo'
            ) {
                n_62_31_STATE.sampleRatio = computeUnitInSamples(
                    SAMPLE_RATE, 
                    msg_readFloatToken(m, 1), 
                    msg_readStringToken(m, 2)
                )
                return
            }
        
                                throw new Error('[delay], id "n_62_31", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_62_29_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_62_29_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_62_29_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_62_29_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_62_29_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_62_29_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_62_29_STATE.outMessages[0] = message
                n_62_29_STATE.messageTransferFunctions.splice(0, n_62_29_STATE.messageTransferFunctions.length - 1)
                n_62_29_STATE.messageTransferFunctions[0] = function (m) {
                    return n_62_29_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_62_29_STATE.messageTransferFunctions.length; i++) {
                    n_62_29_SNDS_0(n_62_29_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_62_29", inlet "0", unsupported message : ' + msg_display(m))
                            }
let n_62_28_OUTS_0 = 0
function n_62_28_RCVS_0(m) {
                                
        if (
            msg_isMatching(m, [MSG_FLOAT_TOKEN])
            || msg_isMatching(m, [MSG_FLOAT_TOKEN, MSG_FLOAT_TOKEN])
        ) {
            switch (msg_getLength(m)) {
                case 2:
                    n_line_t_setNextDuration(n_62_28_STATE, msg_readFloatToken(m, 1))
                case 1:
                    n_line_t_setNewLine(n_62_28_STATE, msg_readFloatToken(m, 0))
            }
            return

        } else if (msg_isAction(m, 'stop')) {
            n_line_t_stop(n_62_28_STATE)
            return

        }
    
                                throw new Error('[line~], id "n_62_28", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_62_42_RCVS_0(m) {
                                
            n_bang_receiveMessage(n_62_42_STATE, m)
            return
        
                                throw new Error('[bang], id "n_62_42", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_68_9_RCVS_0(m) {
                                
            n_bang_receiveMessage(n_68_9_STATE, m)
            return
        
                                throw new Error('[bang], id "n_68_9", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_68_2_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_68_2_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_68_2_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_68_2_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_68_2_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_68_2_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_68_2_STATE.outMessages[0] = message
                n_68_2_STATE.messageTransferFunctions.splice(0, n_68_2_STATE.messageTransferFunctions.length - 1)
                n_68_2_STATE.messageTransferFunctions[0] = function (m) {
                    return n_68_2_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_68_2_STATE.messageTransferFunctions.length; i++) {
                    n_68_0_RCVS_0(n_68_2_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_68_2", inlet "0", unsupported message : ' + msg_display(m))
                            }
let n_68_0_OUTS_0 = 0
function n_68_0_RCVS_0(m) {
                                
        if (
            msg_isMatching(m, [MSG_FLOAT_TOKEN])
            || msg_isMatching(m, [MSG_FLOAT_TOKEN, MSG_FLOAT_TOKEN])
        ) {
            switch (msg_getLength(m)) {
                case 2:
                    n_line_t_setNextDuration(n_68_0_STATE, msg_readFloatToken(m, 1))
                case 1:
                    n_line_t_setNewLine(n_68_0_STATE, msg_readFloatToken(m, 0))
            }
            return

        } else if (msg_isAction(m, 'stop')) {
            n_line_t_stop(n_68_0_STATE)
            return

        }
    
                                throw new Error('[line~], id "n_68_0", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_67_3_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_67_3_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_67_3_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_67_3_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_67_3_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_67_3_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_67_3_STATE.outMessages[0] = message
                n_67_3_STATE.messageTransferFunctions.splice(0, n_67_3_STATE.messageTransferFunctions.length - 1)
                n_67_3_STATE.messageTransferFunctions[0] = function (m) {
                    return n_67_3_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_67_3_STATE.messageTransferFunctions.length; i++) {
                    n_67_0_RCVS_0(n_67_3_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_67_3", inlet "0", unsupported message : ' + msg_display(m))
                            }
let n_67_0_OUTS_0 = 0
function n_67_0_RCVS_0(m) {
                                
        if (
            msg_isMatching(m, [MSG_FLOAT_TOKEN])
            || msg_isMatching(m, [MSG_FLOAT_TOKEN, MSG_FLOAT_TOKEN])
        ) {
            switch (msg_getLength(m)) {
                case 2:
                    n_line_t_setNextDuration(n_67_0_STATE, msg_readFloatToken(m, 1))
                case 1:
                    n_line_t_setNewLine(n_67_0_STATE, msg_readFloatToken(m, 0))
            }
            return

        } else if (msg_isAction(m, 'stop')) {
            n_line_t_stop(n_67_0_STATE)
            return

        }
    
                                throw new Error('[line~], id "n_67_0", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_62_32_RCVS_0(m) {
                                
            n_bang_receiveMessage(n_62_32_STATE, m)
            return
        
                                throw new Error('[bang], id "n_62_32", inlet "0", unsupported message : ' + msg_display(m))
                            }



function n_62_47_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_62_47_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_62_47_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_62_47_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_62_47_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_62_47_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_62_47_STATE.outMessages[0] = message
                n_62_47_STATE.messageTransferFunctions.splice(0, n_62_47_STATE.messageTransferFunctions.length - 1)
                n_62_47_STATE.messageTransferFunctions[0] = function (m) {
                    return n_62_47_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_62_47_STATE.messageTransferFunctions.length; i++) {
                    n_131_17_RCVS_1(n_62_47_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_62_47", inlet "0", unsupported message : ' + msg_display(m))
                            }
let n_131_17_OUTS_0 = 0
function n_131_17_RCVS_1(m) {
                                
                            n_131_17_STATE.floatInputs.set(1, messageTokenToFloat(m, 0))
                            return
                        
                                throw new Error('[expr~], id "n_131_17", inlet "1", unsupported message : ' + msg_display(m))
                            }

function n_68_8_RCVS_0(m) {
                                
            n_bang_receiveMessage(n_68_8_STATE, m)
            return
        
                                throw new Error('[bang], id "n_68_8", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_68_1_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_68_1_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_68_1_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_68_1_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_68_1_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_68_1_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_68_1_STATE.outMessages[0] = message
                n_68_1_STATE.messageTransferFunctions.splice(0, n_68_1_STATE.messageTransferFunctions.length - 1)
                n_68_1_STATE.messageTransferFunctions[0] = function (m) {
                    return n_68_1_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_68_1_STATE.messageTransferFunctions.length; i++) {
                    n_68_0_RCVS_0(n_68_1_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_68_1", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_131_7_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                n_float_int_setValueInt(n_131_7_STATE, msg_readFloatToken(m, 0))
                n_131_2_RCVS_1(msg_floats([n_131_7_STATE.value]))
                return 

            } else if (msg_isBang(m)) {
                n_131_2_RCVS_1(msg_floats([n_131_7_STATE.value]))
                return
                
            }
        
                                throw new Error('[int], id "n_131_7", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_131_2_RCVS_0(m) {
                                
        if (!n_131_2_STATE.isClosed) {
            m_n_131_1_0__routemsg_RCVS_0(m)
        }
        return
    
                                throw new Error('[spigot], id "n_131_2", inlet "0", unsupported message : ' + msg_display(m))
                            }
function n_131_2_RCVS_1(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_spigot_setIsClosed(n_131_2_STATE, msg_readFloatToken(m, 0))
            return
        }
    
                                throw new Error('[spigot], id "n_131_2", inlet "1", unsupported message : ' + msg_display(m))
                            }

function m_n_131_1_0__routemsg_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                SND_TO_NULL(m)
                return
            } else {
                n_131_1_RCVS_0_message(m)
                return
            }
        
                                throw new Error('[_routemsg], id "m_n_131_1_0__routemsg", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_131_1_RCVS_0_message(m) {
                                
        if (msg_isBang(m)) {
            n_131_8_RCVS_0(msg_floats([n_131_1_STATE.currentValue]))
            return 
        }
    
                                throw new Error('[snapshot~], id "n_131_1", inlet "0_message", unsupported message : ' + msg_display(m))
                            }

function n_131_8_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                const newValue = msg_readFloatToken(m, 0)
                if (newValue !== n_131_8_STATE.currentValue) {
                    n_131_8_STATE.currentValue = newValue
                    n_131_11_RCVS_0(msg_floats([n_131_8_STATE.currentValue]))
                }
                return
    
            } else if (msg_isBang(m)) {
                n_131_11_RCVS_0(msg_floats([n_131_8_STATE.currentValue]))
                return 
    
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_131_8_STATE.currentValue = msg_readFloatToken(m, 1)
                return
            }
        
                                throw new Error('[change], id "n_131_8", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_131_11_RCVS_0(m) {
                                
        n_132_0_RCVS_0(msg_bang())
n_131_10_RCVS_0(msg_floats([messageTokenToFloat(m, 0)]))
        return
    
                                throw new Error('[trigger], id "n_131_11", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_131_10_RCVS_0(m) {
                                
        if (!n_131_10_STATE.isClosed) {
            n_131_13_RCVS_0(m)
        }
        return
    
                                throw new Error('[spigot], id "n_131_10", inlet "0", unsupported message : ' + msg_display(m))
                            }
function n_131_10_RCVS_1(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_spigot_setIsClosed(n_131_10_STATE, msg_readFloatToken(m, 0))
            return
        }
    
                                throw new Error('[spigot], id "n_131_10", inlet "1", unsupported message : ' + msg_display(m))
                            }

function n_131_13_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                const newValue = msg_readFloatToken(m, 0)
                if (newValue !== n_131_13_STATE.currentValue) {
                    n_131_13_STATE.currentValue = newValue
                    n_131_9_RCVS_0(msg_floats([n_131_13_STATE.currentValue]))
                }
                return
    
            } else if (msg_isBang(m)) {
                n_131_9_RCVS_0(msg_floats([n_131_13_STATE.currentValue]))
                return 
    
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_131_13_STATE.currentValue = msg_readFloatToken(m, 1)
                return
            }
        
                                throw new Error('[change], id "n_131_13", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_131_9_RCVS_0(m) {
                                
                if (n_131_9_STATE.filterType === MSG_STRING_TOKEN) {
                    if (
                        (n_131_9_STATE.stringFilter === 'float'
                            && msg_isFloatToken(m, 0))
                        || (n_131_9_STATE.stringFilter === 'symbol'
                            && msg_isStringToken(m, 0))
                        || (n_131_9_STATE.stringFilter === 'list'
                            && msg_getLength(m) > 1)
                        || (n_131_9_STATE.stringFilter === 'bang' 
                            && msg_isBang(m))
                    ) {
                        n_131_3_RCVS_0(m)
                        return
                    
                    } else if (
                        msg_isStringToken(m, 0)
                        && msg_readStringToken(m, 0) === n_131_9_STATE.stringFilter
                    ) {
                        n_131_3_RCVS_0(msg_emptyToBang(msg_shift(m)))
                        return
                    }

                } else if (
                    msg_isFloatToken(m, 0)
                    && msg_readFloatToken(m, 0) === n_131_9_STATE.floatFilter
                ) {
                    n_131_3_RCVS_0(msg_emptyToBang(msg_shift(m)))
                    return
                }
            
                SND_TO_NULL(m)
            return
            
                                throw new Error('[route], id "n_131_9", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_131_3_RCVS_0(m) {
                                
        n_131_5_RCVS_0(msg_bang())
n_131_3_SNDS_0(msg_bang())
        return
    
                                throw new Error('[trigger], id "n_131_3", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_62_26_RCVS_0(m) {
                                
        if (msg_isBang(m)) {
            n_62_30_RCVS_0(msg_floats([Math.floor(Math.random() * n_62_26_STATE.maxValue)]))
            return
        } else if (
            msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
            && msg_readStringToken(m, 0) === 'seed'
        ) {
            console.log('WARNING : seed not implemented yet for [random]')
            return
        }
    
                                throw new Error('[random], id "n_62_26", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_62_30_RCVS_0(m) {
                                
                
                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 0
                        ) {
                            n_62_38_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 6
                        ) {
                            n_62_29_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                SND_TO_NULL(m)
                return
            
                                throw new Error('[route], id "n_62_30", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_62_38_RCVS_0(m) {
                                
        n_62_38_SNDS_2(msg_bang())
n_66_0_RCVS_0(msg_bang())
n_62_27_RCVS_0(msg_bang())
        return
    
                                throw new Error('[trigger], id "n_62_38", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_62_27_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_62_27_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_62_27_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_62_27_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_62_27_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_62_27_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_62_27_STATE.outMessages[0] = message
                n_62_27_STATE.messageTransferFunctions.splice(0, n_62_27_STATE.messageTransferFunctions.length - 1)
                n_62_27_STATE.messageTransferFunctions[0] = function (m) {
                    return n_62_27_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_62_27_STATE.messageTransferFunctions.length; i++) {
                    n_62_27_SNDS_0(n_62_27_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_62_27", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_66_0_RCVS_0(m) {
                                
        if (msg_isBang(m)) {
            n_66_1_RCVS_0(msg_floats([Math.floor(Math.random() * n_66_0_STATE.maxValue)]))
            return
        } else if (
            msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
            && msg_readStringToken(m, 0) === 'seed'
        ) {
            console.log('WARNING : seed not implemented yet for [random]')
            return
        }
    
                                throw new Error('[random], id "n_66_0", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_66_1_RCVS_0(m) {
                                
                
                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 0
                        ) {
                            n_66_2_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 1
                        ) {
                            n_66_3_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 2
                        ) {
                            n_66_5_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                        if (
                            msg_isFloatToken(m, 0)
                            && msg_readFloatToken(m, 0) === 3
                        ) {
                            n_66_4_RCVS_0(msg_emptyToBang(msg_shift(m)))
                            return
                        }
                    

                SND_TO_NULL(m)
                return
            
                                throw new Error('[route], id "n_66_1", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_66_2_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_66_2_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_66_2_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_66_2_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_66_2_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_66_2_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_66_2_STATE.outMessages[0] = message
                n_66_2_STATE.messageTransferFunctions.splice(0, n_66_2_STATE.messageTransferFunctions.length - 1)
                n_66_2_STATE.messageTransferFunctions[0] = function (m) {
                    return n_66_2_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_66_2_STATE.messageTransferFunctions.length; i++) {
                    n_66_6_RCVS_0(n_66_2_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_66_2", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_66_6_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_66_6_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_66_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_66_6_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_66_6_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_66_6_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_66_6_STATE.outMessages[0] = message
                n_66_6_STATE.messageTransferFunctions.splice(0, n_66_6_STATE.messageTransferFunctions.length - 1)
                n_66_6_STATE.messageTransferFunctions[0] = function (m) {
                    return n_66_6_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_66_6_STATE.messageTransferFunctions.length; i++) {
                    n_62_36_RCVS_0(n_66_6_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_66_6", inlet "0", unsupported message : ' + msg_display(m))
                            }
let n_62_36_OUTS_0 = 0
function n_62_36_RCVS_0(m) {
                                
        if (
            msg_isMatching(m, [MSG_FLOAT_TOKEN])
            || msg_isMatching(m, [MSG_FLOAT_TOKEN, MSG_FLOAT_TOKEN])
        ) {
            switch (msg_getLength(m)) {
                case 2:
                    n_line_t_setNextDuration(n_62_36_STATE, msg_readFloatToken(m, 1))
                case 1:
                    n_line_t_setNewLine(n_62_36_STATE, msg_readFloatToken(m, 0))
            }
            return

        } else if (msg_isAction(m, 'stop')) {
            n_line_t_stop(n_62_36_STATE)
            return

        }
    
                                throw new Error('[line~], id "n_62_36", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_66_3_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_66_3_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_66_3_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_66_3_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_66_3_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_66_3_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_66_3_STATE.outMessages[0] = message
                n_66_3_STATE.messageTransferFunctions.splice(0, n_66_3_STATE.messageTransferFunctions.length - 1)
                n_66_3_STATE.messageTransferFunctions[0] = function (m) {
                    return n_66_3_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_66_3_STATE.messageTransferFunctions.length; i++) {
                    n_66_6_RCVS_0(n_66_3_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_66_3", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_66_5_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_66_5_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_66_5_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_66_5_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_66_5_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_66_5_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_66_5_STATE.outMessages[0] = message
                n_66_5_STATE.messageTransferFunctions.splice(0, n_66_5_STATE.messageTransferFunctions.length - 1)
                n_66_5_STATE.messageTransferFunctions[0] = function (m) {
                    return n_66_5_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_66_5_STATE.messageTransferFunctions.length; i++) {
                    n_66_6_RCVS_0(n_66_5_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_66_5", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_66_4_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_66_4_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_66_4_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_66_4_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_66_4_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_66_4_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_66_4_STATE.outMessages[0] = message
                n_66_4_STATE.messageTransferFunctions.splice(0, n_66_4_STATE.messageTransferFunctions.length - 1)
                n_66_4_STATE.messageTransferFunctions[0] = function (m) {
                    return n_66_4_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_66_4_STATE.messageTransferFunctions.length; i++) {
                    n_66_6_RCVS_0(n_66_4_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_66_4", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_67_1_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_67_1_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_67_1_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_67_1_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_67_1_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_67_1_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_67_1_STATE.outMessages[0] = message
                n_67_1_STATE.messageTransferFunctions.splice(0, n_67_1_STATE.messageTransferFunctions.length - 1)
                n_67_1_STATE.messageTransferFunctions[0] = function (m) {
                    return n_67_1_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_67_1_STATE.messageTransferFunctions.length; i++) {
                    n_67_0_RCVS_0(n_67_1_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_67_1", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_131_5_RCVS_0(m) {
                                
        n_131_4_RCVS_0(msg_bang())
n_131_14_RCVS_0(msg_bang())
        return
    
                                throw new Error('[trigger], id "n_131_5", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_131_14_RCVS_0(m) {
                                
            if (msg_getLength(m) === 1) {
                if (msg_isStringToken(m, 0)) {
                    const action = msg_readStringToken(m, 0)
                    if (action === 'bang' || action === 'start') {
                        n_delay_scheduleDelay(
                            n_131_14_STATE, 
                            () => n_131_6_RCVS_0(msg_bang()),
                            FRAME,
                        )
                        return
                    } else if (action === 'stop') {
                        n_delay_stop(n_131_14_STATE)
                        return
                    }
                    
                } else if (msg_isFloatToken(m, 0)) {
                    n_delay_setDelay(n_131_14_STATE, msg_readFloatToken(m, 0))
                    n_delay_scheduleDelay(
                        n_131_14_STATE,
                        () => n_131_6_RCVS_0(msg_bang()),
                        FRAME,
                    )
                    return 
                }
            
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN, MSG_STRING_TOKEN])
                && msg_readStringToken(m, 0) === 'tempo'
            ) {
                n_131_14_STATE.sampleRatio = computeUnitInSamples(
                    SAMPLE_RATE, 
                    msg_readFloatToken(m, 1), 
                    msg_readStringToken(m, 2)
                )
                return
            }
        
                                throw new Error('[delay], id "n_131_14", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_131_6_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_131_6_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_131_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_131_6_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_131_6_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_131_6_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_131_6_STATE.outMessages[0] = message
                n_131_6_STATE.messageTransferFunctions.splice(0, n_131_6_STATE.messageTransferFunctions.length - 1)
                n_131_6_STATE.messageTransferFunctions[0] = function (m) {
                    return n_131_6_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_131_6_STATE.messageTransferFunctions.length; i++) {
                    n_131_7_RCVS_0(n_131_6_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_131_6", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_131_4_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_131_4_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_131_4_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_131_4_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_131_4_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_131_4_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_131_4_STATE.outMessages[0] = message
                n_131_4_STATE.messageTransferFunctions.splice(0, n_131_4_STATE.messageTransferFunctions.length - 1)
                n_131_4_STATE.messageTransferFunctions[0] = function (m) {
                    return n_131_4_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_131_4_STATE.messageTransferFunctions.length; i++) {
                    n_131_7_RCVS_0(n_131_4_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_131_4", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_132_0_RCVS_0(m) {
                                
        n_132_6_RCVS_0(msg_bang())
n_132_2_RCVS_0(msg_bang())
        return
    
                                throw new Error('[trigger], id "n_132_0", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_132_2_RCVS_0(m) {
                                
            if (msg_getLength(m) === 1) {
                if (msg_isStringToken(m, 0)) {
                    const action = msg_readStringToken(m, 0)
                    if (action === 'bang' || action === 'start') {
                        n_delay_scheduleDelay(
                            n_132_2_STATE, 
                            () => n_132_5_RCVS_0(msg_bang()),
                            FRAME,
                        )
                        return
                    } else if (action === 'stop') {
                        n_delay_stop(n_132_2_STATE)
                        return
                    }
                    
                } else if (msg_isFloatToken(m, 0)) {
                    n_delay_setDelay(n_132_2_STATE, msg_readFloatToken(m, 0))
                    n_delay_scheduleDelay(
                        n_132_2_STATE,
                        () => n_132_5_RCVS_0(msg_bang()),
                        FRAME,
                    )
                    return 
                }
            
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN, MSG_STRING_TOKEN])
                && msg_readStringToken(m, 0) === 'tempo'
            ) {
                n_132_2_STATE.sampleRatio = computeUnitInSamples(
                    SAMPLE_RATE, 
                    msg_readFloatToken(m, 1), 
                    msg_readStringToken(m, 2)
                )
                return
            }
        
                                throw new Error('[delay], id "n_132_2", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_132_5_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_132_5_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_132_5_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_132_5_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_132_5_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_132_5_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_132_5_STATE.outMessages[0] = message
                n_132_5_STATE.messageTransferFunctions.splice(0, n_132_5_STATE.messageTransferFunctions.length - 1)
                n_132_5_STATE.messageTransferFunctions[0] = function (m) {
                    return n_132_5_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_132_5_STATE.messageTransferFunctions.length; i++) {
                    n_132_1_RCVS_0(n_132_5_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_132_5", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_132_1_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                n_float_int_setValueInt(n_132_1_STATE, msg_readFloatToken(m, 0))
                n_131_10_RCVS_1(msg_floats([n_132_1_STATE.value]))
                return 

            } else if (msg_isBang(m)) {
                n_131_10_RCVS_1(msg_floats([n_132_1_STATE.value]))
                return
                
            }
        
                                throw new Error('[int], id "n_132_1", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_132_6_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_132_6_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_132_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_132_6_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_132_6_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_132_6_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_132_6_STATE.outMessages[0] = message
                n_132_6_STATE.messageTransferFunctions.splice(0, n_132_6_STATE.messageTransferFunctions.length - 1)
                n_132_6_STATE.messageTransferFunctions[0] = function (m) {
                    return n_132_6_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_132_6_STATE.messageTransferFunctions.length; i++) {
                    n_132_1_RCVS_0(n_132_6_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_132_6", inlet "0", unsupported message : ' + msg_display(m))
                            }





function n_133_7_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                n_float_int_setValueInt(n_133_7_STATE, msg_readFloatToken(m, 0))
                n_133_2_RCVS_1(msg_floats([n_133_7_STATE.value]))
                return 

            } else if (msg_isBang(m)) {
                n_133_2_RCVS_1(msg_floats([n_133_7_STATE.value]))
                return
                
            }
        
                                throw new Error('[int], id "n_133_7", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_133_2_RCVS_0(m) {
                                
        if (!n_133_2_STATE.isClosed) {
            m_n_133_1_0__routemsg_RCVS_0(m)
        }
        return
    
                                throw new Error('[spigot], id "n_133_2", inlet "0", unsupported message : ' + msg_display(m))
                            }
function n_133_2_RCVS_1(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_spigot_setIsClosed(n_133_2_STATE, msg_readFloatToken(m, 0))
            return
        }
    
                                throw new Error('[spigot], id "n_133_2", inlet "1", unsupported message : ' + msg_display(m))
                            }

function m_n_133_1_0__routemsg_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                SND_TO_NULL(m)
                return
            } else {
                n_133_1_RCVS_0_message(m)
                return
            }
        
                                throw new Error('[_routemsg], id "m_n_133_1_0__routemsg", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_133_1_RCVS_0_message(m) {
                                
        if (msg_isBang(m)) {
            n_133_8_RCVS_0(msg_floats([n_133_1_STATE.currentValue]))
            return 
        }
    
                                throw new Error('[snapshot~], id "n_133_1", inlet "0_message", unsupported message : ' + msg_display(m))
                            }

function n_133_8_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                const newValue = msg_readFloatToken(m, 0)
                if (newValue !== n_133_8_STATE.currentValue) {
                    n_133_8_STATE.currentValue = newValue
                    n_133_11_RCVS_0(msg_floats([n_133_8_STATE.currentValue]))
                }
                return
    
            } else if (msg_isBang(m)) {
                n_133_11_RCVS_0(msg_floats([n_133_8_STATE.currentValue]))
                return 
    
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_133_8_STATE.currentValue = msg_readFloatToken(m, 1)
                return
            }
        
                                throw new Error('[change], id "n_133_8", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_133_11_RCVS_0(m) {
                                
        n_134_0_RCVS_0(msg_bang())
n_133_10_RCVS_0(msg_floats([messageTokenToFloat(m, 0)]))
        return
    
                                throw new Error('[trigger], id "n_133_11", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_133_10_RCVS_0(m) {
                                
        if (!n_133_10_STATE.isClosed) {
            n_133_13_RCVS_0(m)
        }
        return
    
                                throw new Error('[spigot], id "n_133_10", inlet "0", unsupported message : ' + msg_display(m))
                            }
function n_133_10_RCVS_1(m) {
                                
        if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
            n_spigot_setIsClosed(n_133_10_STATE, msg_readFloatToken(m, 0))
            return
        }
    
                                throw new Error('[spigot], id "n_133_10", inlet "1", unsupported message : ' + msg_display(m))
                            }

function n_133_13_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                const newValue = msg_readFloatToken(m, 0)
                if (newValue !== n_133_13_STATE.currentValue) {
                    n_133_13_STATE.currentValue = newValue
                    n_133_9_RCVS_0(msg_floats([n_133_13_STATE.currentValue]))
                }
                return
    
            } else if (msg_isBang(m)) {
                n_133_9_RCVS_0(msg_floats([n_133_13_STATE.currentValue]))
                return 
    
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN])
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_133_13_STATE.currentValue = msg_readFloatToken(m, 1)
                return
            }
        
                                throw new Error('[change], id "n_133_13", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_133_9_RCVS_0(m) {
                                
                if (n_133_9_STATE.filterType === MSG_STRING_TOKEN) {
                    if (
                        (n_133_9_STATE.stringFilter === 'float'
                            && msg_isFloatToken(m, 0))
                        || (n_133_9_STATE.stringFilter === 'symbol'
                            && msg_isStringToken(m, 0))
                        || (n_133_9_STATE.stringFilter === 'list'
                            && msg_getLength(m) > 1)
                        || (n_133_9_STATE.stringFilter === 'bang' 
                            && msg_isBang(m))
                    ) {
                        n_133_3_RCVS_0(m)
                        return
                    
                    } else if (
                        msg_isStringToken(m, 0)
                        && msg_readStringToken(m, 0) === n_133_9_STATE.stringFilter
                    ) {
                        n_133_3_RCVS_0(msg_emptyToBang(msg_shift(m)))
                        return
                    }

                } else if (
                    msg_isFloatToken(m, 0)
                    && msg_readFloatToken(m, 0) === n_133_9_STATE.floatFilter
                ) {
                    n_133_3_RCVS_0(msg_emptyToBang(msg_shift(m)))
                    return
                }
            
                SND_TO_NULL(m)
            return
            
                                throw new Error('[route], id "n_133_9", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_133_3_RCVS_0(m) {
                                
        n_133_5_RCVS_0(msg_bang())
n_0_74_RCVS_0(msg_bang())
        return
    
                                throw new Error('[trigger], id "n_133_3", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_133_5_RCVS_0(m) {
                                
        n_133_4_RCVS_0(msg_bang())
n_133_14_RCVS_0(msg_bang())
        return
    
                                throw new Error('[trigger], id "n_133_5", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_133_14_RCVS_0(m) {
                                
            if (msg_getLength(m) === 1) {
                if (msg_isStringToken(m, 0)) {
                    const action = msg_readStringToken(m, 0)
                    if (action === 'bang' || action === 'start') {
                        n_delay_scheduleDelay(
                            n_133_14_STATE, 
                            () => n_133_6_RCVS_0(msg_bang()),
                            FRAME,
                        )
                        return
                    } else if (action === 'stop') {
                        n_delay_stop(n_133_14_STATE)
                        return
                    }
                    
                } else if (msg_isFloatToken(m, 0)) {
                    n_delay_setDelay(n_133_14_STATE, msg_readFloatToken(m, 0))
                    n_delay_scheduleDelay(
                        n_133_14_STATE,
                        () => n_133_6_RCVS_0(msg_bang()),
                        FRAME,
                    )
                    return 
                }
            
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN, MSG_STRING_TOKEN])
                && msg_readStringToken(m, 0) === 'tempo'
            ) {
                n_133_14_STATE.sampleRatio = computeUnitInSamples(
                    SAMPLE_RATE, 
                    msg_readFloatToken(m, 1), 
                    msg_readStringToken(m, 2)
                )
                return
            }
        
                                throw new Error('[delay], id "n_133_14", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_133_6_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_133_6_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_133_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_133_6_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_133_6_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_133_6_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_133_6_STATE.outMessages[0] = message
                n_133_6_STATE.messageTransferFunctions.splice(0, n_133_6_STATE.messageTransferFunctions.length - 1)
                n_133_6_STATE.messageTransferFunctions[0] = function (m) {
                    return n_133_6_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_133_6_STATE.messageTransferFunctions.length; i++) {
                    n_133_7_RCVS_0(n_133_6_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_133_6", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_133_4_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_133_4_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_133_4_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_133_4_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_133_4_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_133_4_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_133_4_STATE.outMessages[0] = message
                n_133_4_STATE.messageTransferFunctions.splice(0, n_133_4_STATE.messageTransferFunctions.length - 1)
                n_133_4_STATE.messageTransferFunctions[0] = function (m) {
                    return n_133_4_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_133_4_STATE.messageTransferFunctions.length; i++) {
                    n_133_7_RCVS_0(n_133_4_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_133_4", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_134_0_RCVS_0(m) {
                                
        n_134_6_RCVS_0(msg_bang())
n_134_2_RCVS_0(msg_bang())
        return
    
                                throw new Error('[trigger], id "n_134_0", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_134_2_RCVS_0(m) {
                                
            if (msg_getLength(m) === 1) {
                if (msg_isStringToken(m, 0)) {
                    const action = msg_readStringToken(m, 0)
                    if (action === 'bang' || action === 'start') {
                        n_delay_scheduleDelay(
                            n_134_2_STATE, 
                            () => n_134_5_RCVS_0(msg_bang()),
                            FRAME,
                        )
                        return
                    } else if (action === 'stop') {
                        n_delay_stop(n_134_2_STATE)
                        return
                    }
                    
                } else if (msg_isFloatToken(m, 0)) {
                    n_delay_setDelay(n_134_2_STATE, msg_readFloatToken(m, 0))
                    n_delay_scheduleDelay(
                        n_134_2_STATE,
                        () => n_134_5_RCVS_0(msg_bang()),
                        FRAME,
                    )
                    return 
                }
            
            } else if (
                msg_isMatching(m, [MSG_STRING_TOKEN, MSG_FLOAT_TOKEN, MSG_STRING_TOKEN])
                && msg_readStringToken(m, 0) === 'tempo'
            ) {
                n_134_2_STATE.sampleRatio = computeUnitInSamples(
                    SAMPLE_RATE, 
                    msg_readFloatToken(m, 1), 
                    msg_readStringToken(m, 2)
                )
                return
            }
        
                                throw new Error('[delay], id "n_134_2", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_134_5_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_134_5_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_134_5_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_134_5_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_134_5_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_134_5_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_134_5_STATE.outMessages[0] = message
                n_134_5_STATE.messageTransferFunctions.splice(0, n_134_5_STATE.messageTransferFunctions.length - 1)
                n_134_5_STATE.messageTransferFunctions[0] = function (m) {
                    return n_134_5_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_134_5_STATE.messageTransferFunctions.length; i++) {
                    n_134_1_RCVS_0(n_134_5_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_134_5", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_134_1_RCVS_0(m) {
                                
            if (msg_isMatching(m, [MSG_FLOAT_TOKEN])) {
                n_float_int_setValueInt(n_134_1_STATE, msg_readFloatToken(m, 0))
                n_133_10_RCVS_1(msg_floats([n_134_1_STATE.value]))
                return 

            } else if (msg_isBang(m)) {
                n_133_10_RCVS_1(msg_floats([n_134_1_STATE.value]))
                return
                
            }
        
                                throw new Error('[int], id "n_134_1", inlet "0", unsupported message : ' + msg_display(m))
                            }

function n_134_6_RCVS_0(m) {
                                
            if (
                msg_isStringToken(m, 0) 
                && msg_readStringToken(m, 0) === 'set'
            ) {
                n_134_6_STATE.outTemplates = [[]]
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        n_134_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
                    } else {
                        n_134_6_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                        n_134_6_STATE.outTemplates[0].push(msg_readStringToken(m, i).length)
                    }
                }

                const message = msg_create(n_134_6_STATE.outTemplates[0])
                for (let i = 1; i < msg_getLength(m); i++) {
                    if (msg_isFloatToken(m, i)) {
                        msg_writeFloatToken(
                            message, i - 1, msg_readFloatToken(m, i)
                        )
                    } else {
                        msg_writeStringToken(
                            message, i - 1, msg_readStringToken(m, i)
                        )
                    }
                }
                n_134_6_STATE.outMessages[0] = message
                n_134_6_STATE.messageTransferFunctions.splice(0, n_134_6_STATE.messageTransferFunctions.length - 1)
                n_134_6_STATE.messageTransferFunctions[0] = function (m) {
                    return n_134_6_STATE.outMessages[0]
                }
                return

            } else {
                for (let i = 0; i < n_134_6_STATE.messageTransferFunctions.length; i++) {
                    n_134_1_RCVS_0(n_134_6_STATE.messageTransferFunctions[i](m))
                }
                return
            }
        
                                throw new Error('[msg], id "n_134_6", inlet "0", unsupported message : ' + msg_display(m))
                            }






let n_0_4_OUTS_0 = 0









let n_0_11_OUTS_0 = 0











let n_0_12_OUTS_0 = 0













let n_49_4_OUTS_0 = 0













let n_0_105_OUTS_0 = 0







let n_0_26_OUTS_0 = 0











let n_0_53_OUTS_0 = 0













let n_51_3_OUTS_0 = 0













let n_0_107_OUTS_0 = 0





let n_0_28_OUTS_0 = 0











let n_0_27_OUTS_0 = 0













let n_53_2_OUTS_0 = 0













let n_0_109_OUTS_0 = 0





let n_0_29_OUTS_0 = 0











let n_0_30_OUTS_0 = 0













let n_55_2_OUTS_0 = 0













let n_0_111_OUTS_0 = 0











let n_0_81_OUTS_0 = 0



let n_0_68_OUTS_0 = 0





let n_0_63_OUTS_0 = 0



let n_0_76_OUTS_0 = 0

let n_0_72_OUTS_0 = 0









let n_79_5_OUTS_0 = 0





let n_82_5_OUTS_0 = 0





let n_82_17_OUTS_0 = 0





let n_81_5_OUTS_0 = 0

let n_81_24_OUTS_0 = 0





let n_81_17_OUTS_0 = 0





let n_80_5_OUTS_0 = 0





let n_80_17_OUTS_0 = 0









let n_31_30_OUTS_0 = 0

let n_31_0_OUTS_0 = 0



let n_31_110_OUTS_0 = 0



















let n_71_2_OUTS_0 = 0

















let n_71_1_OUTS_0 = 0



let n_71_41_OUTS_0 = 0



















let n_30_2_OUTS_0 = 0



let n_30_3_OUTS_0 = 0



let n_30_4_OUTS_0 = 0



let n_30_5_OUTS_0 = 0



let n_29_17_OUTS_0 = 0

let n_29_16_OUTS_0 = 0





let n_31_33_OUTS_0 = 0



let n_31_1_OUTS_0 = 0







let n_31_89_OUTS_0 = 0















let n_73_2_OUTS_0 = 0

















let n_73_1_OUTS_0 = 0



let n_73_41_OUTS_0 = 0



















let n_38_2_OUTS_0 = 0



let n_38_3_OUTS_0 = 0



let n_38_4_OUTS_0 = 0



let n_38_5_OUTS_0 = 0



let n_29_21_OUTS_0 = 0

let n_29_20_OUTS_0 = 0





let n_31_34_OUTS_0 = 0



let n_31_2_OUTS_0 = 0







let n_31_90_OUTS_0 = 0















let n_75_2_OUTS_0 = 0

















let n_75_1_OUTS_0 = 0



let n_75_41_OUTS_0 = 0



















let n_39_2_OUTS_0 = 0



let n_39_3_OUTS_0 = 0



let n_39_4_OUTS_0 = 0



let n_39_5_OUTS_0 = 0



let n_29_24_OUTS_0 = 0

let n_29_23_OUTS_0 = 0





let n_40_4_OUTS_0 = 0



let n_40_5_OUTS_0 = 0



let n_29_27_OUTS_0 = 0

let n_29_26_OUTS_0 = 0

let n_29_36_OUTS_0 = 0







let n_29_69_OUTS_0 = 0



























let n_29_37_OUTS_0 = 0

































let n_79_17_OUTS_0 = 0











let n_31_35_OUTS_0 = 0

















let n_79_19_OUTS_0 = 0























let n_80_19_OUTS_0 = 0























let n_81_19_OUTS_0 = 0























let n_82_19_OUTS_0 = 0















let n_41_20_OUTS_0 = 0

let n_41_18_OUTS_0 = 0









let n_43_23_OUTS_0 = 0

let n_43_21_OUTS_0 = 0









let n_45_24_OUTS_0 = 0

let n_45_22_OUTS_0 = 0









let n_47_26_OUTS_0 = 0

let n_47_25_OUTS_0 = 0







let n_61_1_OUTS_0 = 0









let n_57_1_OUTS_0 = 0

let n_58_1_OUTS_0 = 0











let n_57_11_OUTS_0 = 0







let n_65_3_OUTS_0 = 0

let n_65_15_OUTS_0 = 0





















let n_62_1_OUTS_0 = 0

let n_62_3_OUTS_0 = 0







let n_62_8_OUTS_0 = 0

let n_62_5_OUTS_0 = 0











let n_62_7_OUTS_0 = 0



let n_62_20_OUTS_0 = 0



let n_62_21_OUTS_0 = 0





let n_62_19_OUTS_0 = 0

let n_63_2_OUTS_0 = 0

let n_63_3_OUTS_0 = 0

let n_63_4_OUTS_0 = 0

let n_63_5_OUTS_0 = 0



let n_62_43_OUTS_0 = 0

let n_62_35_OUTS_0 = 0













let n_65_17_OUTS_0 = 0



let n_62_14_OUTS_0 = 0



let n_62_15_OUTS_0 = 0















let n_62_11_OUTS_0 = 0



let n_62_10_OUTS_0 = 0























function n_0_75_SNDS_0(m) {
                    n_0_82_RCVS_0(m)
n_0_90_RCVS_0(m)
                }
function n_0_82_SNDS_1(m) {
                    n_0_77_RCVS_0(m)
n_0_99_RCVS_0(m)
                }






function n_0_78_SNDS_0(m) {
                    n_0_79_RCVS_1(m)
n_0_80_RCVS_0(m)
                }



















function n_1_9_SNDS_0(m) {
                    n_1_83_RCVS_0(m)
n_1_84_RCVS_0(m)
n_1_85_RCVS_0(m)
n_1_86_RCVS_0(m)
n_1_87_RCVS_0(m)
n_1_88_RCVS_0(m)
n_1_89_RCVS_0(m)
n_1_90_RCVS_0(m)
n_1_91_RCVS_0(m)
n_1_92_RCVS_0(m)
n_1_93_RCVS_0(m)
n_1_94_RCVS_0(m)
                }




function n_1_14_SNDS_0(m) {
                    n_1_27_RCVS_0(m)
n_1_97_RCVS_0(m)
                }







function n_1_31_SNDS_0(m) {
                    n_1_82_RCVS_0(m)
n_1_100_RCVS_0(m)
                }







function n_1_35_SNDS_0(m) {
                    n_1_81_RCVS_0(m)
n_1_103_RCVS_0(m)
                }







function n_1_39_SNDS_0(m) {
                    n_1_80_RCVS_0(m)
n_1_105_RCVS_0(m)
                }







function n_1_43_SNDS_0(m) {
                    n_1_79_RCVS_0(m)
n_1_109_RCVS_0(m)
                }







function n_1_47_SNDS_0(m) {
                    n_1_78_RCVS_0(m)
n_1_111_RCVS_0(m)
                }







function n_1_51_SNDS_0(m) {
                    n_1_77_RCVS_0(m)
n_1_113_RCVS_0(m)
                }







function n_1_55_SNDS_0(m) {
                    n_1_76_RCVS_0(m)
n_1_115_RCVS_0(m)
                }







function n_1_59_SNDS_0(m) {
                    n_1_75_RCVS_0(m)
n_1_121_RCVS_0(m)
                }







function n_1_63_SNDS_0(m) {
                    n_1_74_RCVS_0(m)
n_1_123_RCVS_0(m)
                }







function n_1_67_SNDS_0(m) {
                    n_1_73_RCVS_0(m)
n_1_125_RCVS_0(m)
                }







function n_1_71_SNDS_0(m) {
                    n_1_72_RCVS_0(m)
n_1_127_RCVS_0(m)
                }



function n_1_7_SNDS_0(m) {
                    n_1_10_RCVS_0(m)
n_1_12_RCVS_1(m)
n_1_29_RCVS_1(m)
n_1_33_RCVS_1(m)
n_1_37_RCVS_1(m)
n_1_41_RCVS_1(m)
n_1_45_RCVS_1(m)
n_1_49_RCVS_1(m)
n_1_53_RCVS_1(m)
n_1_57_RCVS_1(m)
n_1_61_RCVS_1(m)
n_1_65_RCVS_1(m)
n_1_69_RCVS_1(m)
                }







function n_1_141_SNDS_0(m) {
                    n_1_142_RCVS_1(m)
n_1_143_RCVS_0(m)
                }










function n_1_176_SNDS_0(m) {
                    n_1_157_RCVS_0(m)
n_1_178_RCVS_0(m)
                }









function n_1_173_SNDS_0(m) {
                    n_1_176_RCVS_1(m)
n_1_177_RCVS_0(m)
                }











function n_28_7_SNDS_0(m) {
                    n_28_2_RCVS_0(m)
n_28_16_RCVS_0(m)
                }
function n_28_7_SNDS_1(m) {
                    n_28_2_RCVS_0(m)
n_28_16_RCVS_0(m)
                }
function n_28_7_SNDS_2(m) {
                    n_28_9_RCVS_0(m)
n_28_16_RCVS_0(m)
                }



function n_28_12_SNDS_0(m) {
                    n_28_15_RCVS_1(m)
n_28_18_RCVS_0(m)
                }






function n_28_3_SNDS_0(m) {
                    n_1_135_RCVS_0(m)
n_28_8_RCVS_0(m)
                }



















function n_29_2_SNDS_0(m) {
                    n_29_3_RCVS_0(m)
n_29_7_RCVS_0(m)
n_29_8_RCVS_0(m)
n_29_9_RCVS_0(m)
                }


























































































function n_29_39_SNDS_0(m) {
                    m_n_29_38_1__routemsg_RCVS_0(m)
m_n_29_40_1__routemsg_RCVS_0(m)
                }



















function n_31_17_SNDS_0(m) {
                    n_31_14_RCVS_1(m)
n_31_15_RCVS_1(m)
n_31_16_RCVS_1(m)
                }





























































function n_33_16_SNDS_0(m) {
                    n_31_67_RCVS_0(m)
n_31_68_RCVS_0(m)
n_31_69_RCVS_0(m)
n_31_70_RCVS_0(m)
                }






function n_31_61_SNDS_1(m) {
                    n_31_80_RCVS_0(m)
n_31_84_RCVS_0(m)
n_31_85_RCVS_0(m)
n_31_86_RCVS_0(m)
                }
function n_31_66_SNDS_0(m) {
                    n_31_62_RCVS_0(m)
n_31_63_RCVS_0(m)
n_31_64_RCVS_0(m)
n_31_65_RCVS_0(m)
                }


































































































function n_31_78_SNDS_0(m) {
                    m_n_71_38_1__routemsg_RCVS_0(m)
m_n_73_38_1__routemsg_RCVS_0(m)
m_n_75_38_1__routemsg_RCVS_0(m)
m_n_77_38_1__routemsg_RCVS_0(m)
                }









































































































function n_41_44_SNDS_0(m) {
                    n_41_10_RCVS_0(m)
n_41_12_RCVS_0(m)
                }























function n_41_34_SNDS_0(m) {
                    n_41_35_RCVS_0(m)
n_41_36_RCVS_0(m)
n_41_37_RCVS_0(m)
n_41_38_RCVS_0(m)
n_41_39_RCVS_0(m)
n_41_40_RCVS_0(m)
                }





















































function n_42_18_SNDS_0(m) {
                    n_42_0_RCVS_0(m)
n_42_5_RCVS_0(m)
n_42_9_RCVS_0(m)
n_42_12_RCVS_0(m)
n_42_15_RCVS_0(m)
                }



































































































































function n_43_46_SNDS_0(m) {
                    n_43_1_RCVS_0(m)
n_43_3_RCVS_0(m)
                }





function n_43_47_SNDS_0(m) {
                    n_43_6_RCVS_0(m)
n_43_8_RCVS_0(m)
                }





function n_43_48_SNDS_0(m) {
                    n_43_10_RCVS_0(m)
n_43_12_RCVS_0(m)
                }





function n_43_49_SNDS_0(m) {
                    n_43_14_RCVS_0(m)
n_43_16_RCVS_0(m)
                }













function n_43_45_SNDS_0(m) {
                    n_43_32_RCVS_0(m)
n_43_34_RCVS_0(m)
                }





function n_43_38_SNDS_0(m) {
                    n_43_39_RCVS_0(m)
n_43_40_RCVS_0(m)
n_43_41_RCVS_0(m)
n_43_42_RCVS_0(m)
n_43_43_RCVS_0(m)
n_43_44_RCVS_0(m)
                }

























































function n_44_27_SNDS_0(m) {
                    n_44_4_RCVS_0(m)
n_44_9_RCVS_0(m)
n_44_13_RCVS_0(m)
n_44_17_RCVS_0(m)
n_44_20_RCVS_0(m)
                }































































































































function n_45_25_SNDS_0(m) {
                    n_45_1_RCVS_0(m)
n_45_3_RCVS_0(m)
                }





function n_45_26_SNDS_0(m) {
                    n_45_6_RCVS_0(m)
n_45_8_RCVS_0(m)
                }





function n_45_27_SNDS_0(m) {
                    n_45_10_RCVS_0(m)
n_45_12_RCVS_0(m)
                }





function n_45_17_SNDS_0(m) {
                    n_45_14_RCVS_0(m)
n_45_16_RCVS_0(m)
                }













function n_45_40_SNDS_0(m) {
                    n_45_37_RCVS_0(m)
n_45_39_RCVS_0(m)
                }





function n_45_44_SNDS_0(m) {
                    n_45_45_RCVS_0(m)
n_45_46_RCVS_0(m)
n_45_47_RCVS_0(m)
n_45_48_RCVS_0(m)
n_45_49_RCVS_0(m)
n_45_50_RCVS_0(m)
                }





















































function n_46_18_SNDS_0(m) {
                    n_46_0_RCVS_0(m)
n_46_5_RCVS_0(m)
n_46_9_RCVS_0(m)
n_46_12_RCVS_0(m)
n_46_15_RCVS_0(m)
                }



































































































































function n_47_1_SNDS_0(m) {
                    n_47_2_RCVS_0(m)
n_47_4_RCVS_0(m)
                }





function n_47_15_SNDS_0(m) {
                    n_47_7_RCVS_0(m)
n_47_9_RCVS_0(m)
                }





function n_47_14_SNDS_0(m) {
                    n_47_11_RCVS_0(m)
n_47_13_RCVS_0(m)
                }





function n_47_20_SNDS_0(m) {
                    n_47_17_RCVS_0(m)
n_47_19_RCVS_0(m)
                }













function n_47_40_SNDS_0(m) {
                    n_47_37_RCVS_0(m)
n_47_39_RCVS_0(m)
                }





function n_47_44_SNDS_0(m) {
                    n_47_45_RCVS_0(m)
n_47_46_RCVS_0(m)
n_47_47_RCVS_0(m)
n_47_48_RCVS_0(m)
n_47_49_RCVS_0(m)
n_47_50_RCVS_0(m)
                }





















































function n_48_18_SNDS_0(m) {
                    n_48_0_RCVS_0(m)
n_48_5_RCVS_0(m)
n_48_9_RCVS_0(m)
n_48_12_RCVS_0(m)
n_48_15_RCVS_0(m)
                }


















































































































































function n_57_3_SNDS_0(m) {
                    n_57_9_RCVS_0(m)
n_58_6_RCVS_0(m)
                }




function n_58_6_SNDS_0(m) {
                    n_58_0_RCVS_0(m)
n_58_4_RCVS_0(m)
                }








function n_57_7_SNDS_0(m) {
                    n_57_22_RCVS_0(m)
n_57_34_RCVS_0(m)
                }







function n_57_18_SNDS_1(m) {
                    n_60_1_RCVS_0(m)
n_60_5_RCVS_0(m)
                }











function n_57_30_SNDS_0(m) {
                    n_57_21_RCVS_0(m)
n_57_23_RCVS_0(m)
                }








function n_57_39_SNDS_0(m) {
                    n_60_2_RCVS_0(m)
n_60_4_RCVS_0(m)
                }




























function n_62_29_SNDS_0(m) {
                    n_62_28_RCVS_0(m)
n_62_42_RCVS_0(m)
n_67_3_RCVS_0(m)
                }






















function n_131_3_SNDS_0(m) {
                    n_62_25_RCVS_0(m)
n_62_26_RCVS_0(m)
                }


function n_62_38_SNDS_2(m) {
                    n_67_1_RCVS_0(m)
n_68_8_RCVS_0(m)
                }
function n_62_27_SNDS_0(m) {
                    n_62_28_RCVS_0(m)
n_62_32_RCVS_0(m)
                }














































































































































































































































































































































































































































































































































        commons_setArray("hanning", createFloatArray(256))
commons_getArray("hanning").set([0,0.00015059100405778736,0.0006022750167176127,0.0013547800481319427,0.0024076399859040976,0.003760220017284155,0.005411739926785231,0.007361169904470444,0.009607340209186077,0.012148899957537651,0.01498430036008358,0.018111899495124817,0.021529799327254295,0.025235900655388832,0.02922789938747883,0.03350349888205528,0.03806009888648987,0.04289500042796135,0.048005200922489166,0.05338770151138306,0.05903920158743858,0.06495629996061325,0.0711354985833168,0.07757300138473511,0.08426500111818314,0.09120730310678482,0.09839589893817902,0.1058259978890419,0.11349400132894516,0.12139499932527542,0.12952400743961334,0.1378760039806366,0.14644600450992584,0.15522900223731995,0.16422000527381897,0.1734129935503006,0.18280300498008728,0.1923840045928955,0.20215000212192535,0.2120950073003769,0.2222139984369278,0.23250000178813934,0.2429479956626892,0.2535499930381775,0.26430100202560425,0.275193989276886,0.28622201085090637,0.2973789870738983,0.30865800380706787,0.32005199790000916,0.33155500888824463,0.3431589901447296,0.3548569977283478,0.3666430115699768,0.3785090148448944,0.39044898748397827,0.4024539887905121,0.4145190119743347,0.4266340136528015,0.43879398703575134,0.4509910047054291,0.46321800351142883,0.4754660129547119,0.487729012966156,0.5,0.512270987033844,0.5245339870452881,0.5367820262908936,0.5490090250968933,0.5612050294876099,0.5733649730682373,0.5854809880256653,0.5975450277328491,0.6095510125160217,0.6214900016784668,0.6333569884300232,0.6451429724693298,0.656840980052948,0.6684449911117554,0.6799479722976685,0.6913419961929321,0.7026209831237793,0.713778018951416,0.724806010723114,0.7356989979743958,0.7464500069618225,0.7570520043373108,0.7674990296363831,0.7777860164642334,0.7879049777984619,0.7978500127792358,0.8076159954071045,0.8171970248222351,0.8265870213508606,0.8357800245285034,0.8447710275650024,0.8535540103912354,0.8621240258216858,0.8704760074615479,0.8786050081253052,0.8865060210227966,0.8941739797592163,0.9016050100326538,0.9087929725646973,0.9157360196113586,0.9224280118942261,0.9288650155067444,0.93504399061203,0.9409610033035278,0.9466130137443542,0.9519950151443481,0.9571059942245483,0.9619399905204773,0.966497004032135,0.9707729816436768,0.9747650027275085,0.9784709811210632,0.981889009475708,0.9850159883499146,0.9878519773483276,0.9903929829597473,0.9926390051841736,0.9945889711380005,0.9962400197982788,0.9975929856300354,0.998645007610321,0.9993979930877686,0.9998490214347839,1,0.9998490214347839,0.9993979930877686,0.998645007610321,0.9975919723510742,0.9962390065193176,0.9945880174636841,0.9926379919052124,0.9903920292854309,0.9878510236740112,0.9850149750709534,0.9818869829177856,0.9784690141677856,0.9747629761695862,0.9707710146903992,0.9664949774742126,0.9619389772415161,0.9571040272712708,0.9519929885864258,0.9466109871864319,0.9409589767456055,0.9350420236587524,0.928862988948822,0.9224249720573425,0.9157329797744751,0.9087910056114197,0.901602029800415,0.8941709995269775,0.8865029811859131,0.8786020278930664,0.8704730272293091,0.8621209859848022,0.8535509705543518,0.8447679877281189,0.8357769846916199,0.826583981513977,0.8171939849853516,0.8076130151748657,0.7978469729423523,0.787900984287262,0.7777820229530334,0.7674959897994995,0.7570480108261108,0.7464460134506226,0.7356950044631958,0.7248020172119141,0.7137740254402161,0.7026169896125793,0.6913380026817322,0.6799439787864685,0.6684409976005554,0.656836986541748,0.6451389789581299,0.6333529949188232,0.6214860081672668,0.6095470190048218,0.5975409746170044,0.5854769945144653,0.5733609795570374,0.5612009763717651,0.5490040183067322,0.5367779731750488,0.5245299935340881,0.5122659802436829,0.49999600648880005,0.48772498965263367,0.4754619896411896,0.4632129967212677,0.4509870111942291,0.4387899935245514,0.4266299903392792,0.4145149886608124,0.40244999527931213,0.3904449939727783,0.37850499153137207,0.36663898825645447,0.3548530042171478,0.34315499663352966,0.3315509855747223,0.3200480043888092,0.3086540102958679,0.29737499356269836,0.28621798753738403,0.27518999576568604,0.2642970085144043,0.2535470128059387,0.24294400215148926,0.23249700665473938,0.22221100330352783,0.21209199726581573,0.2021459937095642,0.19237999618053436,0.18279899656772614,0.17340999841690063,0.1642169952392578,0.15522600710391998,0.14644299447536469,0.13787299394607544,0.12952099740505219,0.12139199674129486,0.1134909987449646,0.10582300275564194,0.09839289635419846,0.09120439738035202,0.08426210284233093,0.07757019996643066,0.07113280147314072,0.06495369970798492,0.05903669819235802,0.05338529869914055,0.04800289869308472,0.04289279878139496,0.038058001548051834,0.03350149840116501,0.029225999489426613,0.025234000757336617,0.021528100594878197,0.018110400065779686,0.014982899650931358,0.012147599831223488,0.009606149978935719,0.0073600998148322105,0.0054108197800815105,0.0037594400346279144,0.00240700994618237,0.0013543099630624056,0.0006019470165483654,0.0001504420069977641])
commons_setArray("crown", createFloatArray(22050))
commons_getArray("crown").set([0,0.0007558580255135894,0.0015117200091481209,0.002267570002004504,0.0030234300065785646,0.003779290011152625,0.004535149782896042,0.005291009787470102,0.006046860013157129,0.00680272001773119,0.00755858002230525,0.00831444002687931,0.009070290252566338,0.00982614979147911,0.010582000017166138,0.01133789960294962,0.012093699537217617,0.012849600054323673,0.013605399988591671,0.014361299574375153,0.015117200091481209,0.015873000025749207,0.016628900542855263,0.01738470047712326,0.018140599131584167,0.018896400928497314,0.01965229958295822,0.020408200100064278,0.021164000034332275,0.02191990055143833,0.02267570048570633,0.023431599140167236,0.024187499657273293,0.02494329959154129,0.025699200108647346,0.026455000042915344,0.0272109005600214,0.027966700494289398,0.028722599148750305,0.02947849966585636,0.03023429960012436,0.030990200117230415,0.03174600005149841,0.03250189870595932,0.03325770050287247,0.034013599157333374,0.03476950153708458,0.03552529960870743,0.036281198263168335,0.03703700006008148,0.03779289871454239,0.038548801094293594,0.03930459916591644,0.04006050154566765,0.0408162996172905,0.041572198271751404,0.04232800006866455,0.04308389872312546,0.04383980110287666,0.04459559917449951,0.04535150155425072,0.046107299625873566,0.04686319828033447,0.04761900007724762,0.04837489873170853,0.04913080111145973,0.04988659918308258,0.050642501562833786,0.051398299634456635,0.05215419828891754,0.05291010066866875,0.053665898740291595,0.0544218011200428,0.05517759919166565,0.055933501571416855,0.0566892996430397,0.05744519829750061,0.058201100677251816,0.058956898748874664,0.05971280112862587,0.06046859920024872,0.061224501579999924,0.06198029965162277,0.06273619830608368,0.06349209696054459,0.06424789875745773,0.06500379741191864,0.06575959920883179,0.0665154978632927,0.0672713965177536,0.06802719831466675,0.06878309696912766,0.0695388987660408,0.07029479742050171,0.07105059921741486,0.07180649787187576,0.07256239652633667,0.07331819832324982,0.07407409697771072,0.07482989877462387,0.07558579742908478,0.07634170353412628,0.07709749788045883,0.07785339653491974,0.07860919833183289,0.07936509698629379,0.08012089878320694,0.08087679743766785,0.08163270354270935,0.0823884978890419,0.08314439654350281,0.08390019834041595,0.08465609699487686,0.08541189879179001,0.08616779744625092,0.08692370355129242,0.08767949789762497,0.08843539655208588,0.08919119834899902,0.08994709700345993,0.09070300310850143,0.09145879745483398,0.09221470355987549,0.09297049790620804,0.09372639656066895,0.09448219835758209,0.095238097012043,0.0959940031170845,0.09674979746341705,0.09750570356845856,0.09826149791479111,0.09901739656925201,0.09977319836616516,0.10052900016307831,0.10128500312566757,0.10204099863767624,0.1027970016002655,0.10355299711227417,0.10430800169706345,0.10506399720907211,0.10582000017166138,0.10657600313425064,0.10733199864625931,0.10808800160884857,0.10884399712085724,0.10959900170564651,0.11035499721765518,0.11111100018024445,0.11186700314283371,0.11262299865484238,0.11337900161743164,0.11413499712944031,0.11489000171422958,0.11564599722623825,0.11640200018882751,0.11715800315141678,0.11791399866342545,0.11867000162601471,0.11942599713802338,0.12018100172281265,0.12093699723482132,0.12169300019741058,0.12244900315999985,0.12320499867200851,0.12396100163459778,0.12471699714660645,0.12547199428081512,0.12622800469398499,0.12698400020599365,0.12773999571800232,0.12849600613117218,0.12925200164318085,0.13000799715518951,0.1307629942893982,0.13151900470256805,0.13227500021457672,0.1330309957265854,0.13378700613975525,0.13454300165176392,0.13529899716377258,0.13605399429798126,0.13681000471115112,0.1375660002231598,0.13832199573516846,0.13907800614833832,0.13983400166034698,0.14058999717235565,0.14134499430656433,0.1421010047197342,0.14285700023174286,0.14361299574375153,0.1443690061569214,0.14512500166893005,0.14588099718093872,0.1466359943151474,0.14739200472831726,0.14814800024032593,0.1489039957523346,0.14966000616550446,0.15041600167751312,0.1511719971895218,0.15192699432373047,0.15268300473690033,0.153439000248909,0.15419499576091766,0.15495100617408752,0.1557070016860962,0.15646299719810486,0.15721799433231354,0.1579740047454834,0.15873000025749207,0.15948599576950073,0.1602420061826706,0.16099800169467926,0.16175399720668793,0.1625089943408966,0.16326500475406647,0.16402100026607513,0.1647769957780838,0.16553300619125366,0.16628900170326233,0.167044997215271,0.16779999434947968,0.16855600476264954,0.1693120002746582,0.17006799578666687,0.17082400619983673,0.1715800017118454,0.17233599722385406,0.17309099435806274,0.1738470047712326,0.17460300028324127,0.17535899579524994,0.1761150062084198,0.17687100172042847,0.17762699723243713,0.1783819943666458,0.17913800477981567,0.17989400029182434,0.180649995803833,0.18140600621700287,0.18216200172901154,0.1829179972410202,0.18367299437522888,0.18442900478839874,0.1851850003004074,0.18594099581241608,0.18669700622558594,0.1874530017375946,0.18820899724960327,0.18896399438381195,0.1897200047969818,0.19047600030899048,0.19123199582099915,0.191988006234169,0.19274400174617767,0.19349999725818634,0.19425499439239502,0.19501100480556488,0.19576700031757355,0.19652299582958221,0.19727900624275208,0.19803500175476074,0.1987909972667694,0.1995459944009781,0.20030200481414795,0.20105800032615662,0.20181399583816528,0.20257000625133514,0.2033260017633438,0.20408199727535248,0.20483699440956116,0.20559300482273102,0.20634900033473969,0.20710499584674835,0.2078610062599182,0.20861700177192688,0.20937299728393555,0.2101289927959442,0.2108840048313141,0.21164000034332275,0.21239599585533142,0.21315200626850128,0.21390800178050995,0.21466399729251862,0.21541999280452728,0.21617500483989716,0.21693100035190582,0.2176869958639145,0.21844300627708435,0.21919900178909302,0.21995499730110168,0.22071099281311035,0.22146600484848022,0.2222220003604889,0.22297799587249756,0.22373400628566742,0.2244900017976761,0.22524599730968475,0.22600199282169342,0.2267570048570633,0.22751300036907196,0.22826899588108063,0.2290250062942505,0.22978100180625916,0.23053699731826782,0.2312929928302765,0.23204800486564636,0.23280400037765503,0.2335599958896637,0.23431600630283356,0.23507200181484222,0.2358279973268509,0.23658399283885956,0.23733900487422943,0.2380950003862381,0.23885099589824677,0.23960700631141663,0.2403630018234253,0.24111899733543396,0.24187499284744263,0.2426300048828125,0.24338600039482117,0.24414199590682983,0.2448980063199997,0.24565400183200836,0.24640999734401703,0.2471659928560257,0.24792100489139557,0.24867700040340424,0.2494329959154129,0.25018900632858276,0.25094500184059143,0.2517009973526001,0.25245699286460876,0.25321200489997864,0.2539680004119873,0.25472399592399597,0.25547999143600464,0.2562359869480133,0.25699201226234436,0.257748007774353,0.2585029900074005,0.2592589855194092,0.26001501083374023,0.2607710063457489,0.26152700185775757,0.26228299736976624,0.2630389928817749,0.2637940049171448,0.26455000042915344,0.2653059959411621,0.2660619914531708,0.26681798696517944,0.2675740122795105,0.26833000779151917,0.26908499002456665,0.2698409855365753,0.27059701085090637,0.27135300636291504,0.2721090018749237,0.2728649973869324,0.27362099289894104,0.2743760049343109,0.2751320004463196,0.27588799595832825,0.2766439914703369,0.2773999869823456,0.27815601229667664,0.2789120078086853,0.2796669900417328,0.28042298555374146,0.2811790108680725,0.2819350063800812,0.28269100189208984,0.2834469974040985,0.2842029929161072,0.28495800495147705,0.2857140004634857,0.2864699959754944,0.28722599148750305,0.2879819869995117,0.2887380123138428,0.28949400782585144,0.2902489900588989,0.2910049855709076,0.29176101088523865,0.2925170063972473,0.293273001909256,0.29402899742126465,0.2947849929332733,0.2955400049686432,0.29629600048065186,0.2970519959926605,0.2978079915046692,0.29856398701667786,0.2993200123310089,0.3000760078430176,0.30083099007606506,0.30158698558807373,0.3023430109024048,0.30309900641441345,0.3038550019264221,0.3046109974384308,0.30536699295043945,0.3061220049858093,0.306878000497818,0.30763399600982666,0.3083899915218353,0.309145987033844,0.30990201234817505,0.3106580078601837,0.3114129900932312,0.31216898560523987,0.3129250109195709,0.3136810064315796,0.31443700194358826,0.3151929974555969,0.3159489929676056,0.31670400500297546,0.31746000051498413,0.3182159960269928,0.31897199153900146,0.31972798705101013,0.3204840123653412,0.32124000787734985,0.32199499011039734,0.322750985622406,0.32350701093673706,0.3242630064487457,0.3250190019607544,0.32577499747276306,0.32653099298477173,0.3272860050201416,0.32804200053215027,0.32879799604415894,0.3295539915561676,0.33030998706817627,0.3310660123825073,0.331822007894516,0.3325769901275635,0.33333298563957214,0.3340890109539032,0.33484500646591187,0.33560100197792053,0.3363569974899292,0.33711299300193787,0.33786800503730774,0.3386240005493164,0.3393799960613251,0.34013599157333374,0.3408919870853424,0.34164801239967346,0.34240400791168213,0.3431589901447296,0.3439149856567383,0.34467101097106934,0.345427006483078,0.34618300199508667,0.34693899750709534,0.347694993019104,0.3484500050544739,0.34920600056648254,0.3499619960784912,0.3507179915904999,0.35147398710250854,0.3522300124168396,0.35298600792884827,0.35374099016189575,0.3544969856739044,0.3552530109882355,0.35600900650024414,0.3567650020122528,0.3575209975242615,0.35827699303627014,0.3590329885482788,0.3597880005836487,0.36054399609565735,0.361299991607666,0.3620559871196747,0.36281201243400574,0.3635680079460144,0.3643229901790619,0.36507898569107056,0.3658350110054016,0.3665910065174103,0.36734700202941895,0.3681029975414276,0.3688589930534363,0.36961498856544495,0.3703700006008148,0.3711259961128235,0.37188199162483215,0.3726379871368408,0.3733940124511719,0.37415000796318054,0.3749060034751892,0.3756609857082367,0.37641701102256775,0.3771730065345764,0.3779290020465851,0.37868499755859375,0.3794409930706024,0.3801969885826111,0.38095200061798096,0.3817079961299896,0.3824639916419983,0.38321998715400696,0.383976012468338,0.3847320079803467,0.38548800349235535,0.38624298572540283,0.3869990110397339,0.38775500655174255,0.3885110020637512,0.3892669975757599,0.39002299308776855,0.3907789885997772,0.3915340006351471,0.39228999614715576,0.39304599165916443,0.3938019871711731,0.39455801248550415,0.3953140079975128,0.3960700035095215,0.39682498574256897,0.3975810110569,0.3983370065689087,0.39909300208091736,0.399848997592926,0.4006049931049347,0.40136098861694336,0.40211600065231323,0.4028719961643219,0.40362799167633057,0.40438398718833923,0.4051400125026703,0.40589600801467896,0.4066520035266876,0.4074069857597351,0.40816301107406616,0.40891900658607483,0.4096750020980835,0.41043099761009216,0.41118699312210083,0.4119429886341095,0.41269800066947937,0.41345399618148804,0.4142099916934967,0.41496598720550537,0.4157220125198364,0.4164780080318451,0.41723400354385376,0.41798898577690125,0.4187450110912323,0.41950100660324097,0.42025700211524963,0.4210129976272583,0.42176899313926697,0.42252498865127563,0.4232800006866455,0.4240359961986542,0.42479199171066284,0.4255479872226715,0.42630401253700256,0.42706000804901123,0.4278160035610199,0.4285709857940674,0.42932701110839844,0.4300830066204071,0.43083900213241577,0.43159499764442444,0.4323509931564331,0.4331069886684418,0.43386200070381165,0.4346179962158203,0.435373991727829,0.43612998723983765,0.4368860125541687,0.43764200806617737,0.43839800357818604,0.4391529858112335,0.4399090111255646,0.44066500663757324,0.4414210021495819,0.4421769976615906,0.44293299317359924,0.4436889886856079,0.4444440007209778,0.44519999623298645,0.4459559917449951,0.4467119872570038,0.44746801257133484,0.4482240080833435,0.4489800035953522,0.44973498582839966,0.4504910111427307,0.4512470066547394,0.45200300216674805,0.4527589976787567,0.4535149931907654,0.45427098870277405,0.4550260007381439,0.4557819962501526,0.45653799176216125,0.4572939872741699,0.458050012588501,0.45880600810050964,0.4595620036125183,0.4603169858455658,0.46107301115989685,0.4618290066719055,0.4625850021839142,0.46334099769592285,0.4640969932079315,0.4648529887199402,0.46560800075531006,0.4663639962673187,0.4671199917793274,0.46787598729133606,0.4686320126056671,0.4693880081176758,0.47014400362968445,0.47089898586273193,0.471655011177063,0.47241100668907166,0.4731670022010803,0.473922997713089,0.47467899322509766,0.4754349887371063,0.4761900007724762,0.47694599628448486,0.47770199179649353,0.4784579873085022,0.47921401262283325,0.4799700081348419,0.4807260036468506,0.48148098587989807,0.4822370111942291,0.4829930067062378,0.48374900221824646,0.4845049977302551,0.4852609932422638,0.48601698875427246,0.48677200078964233,0.487527996301651,0.48828399181365967,0.48903998732566833,0.4897960126399994,0.49055200815200806,0.4913080036640167,0.4920629858970642,0.49281901121139526,0.49357500672340393,0.4943310022354126,0.49508699774742126,0.49584299325942993,0.4965989887714386,0.49735501408576965,0.49810999631881714,0.4988659918308258,0.4996219873428345,0.5003780126571655,0.5011339783668518,0.5018900036811829,0.5026450157165527,0.503400981426239,0.5041570067405701,0.5049129724502563,0.5056689977645874,0.5064250230789185,0.5071809887886047,0.5079370141029358,0.5086920261383057,0.5094479918479919,0.510204017162323,0.5109599828720093,0.5117160081863403,0.5124719738960266,0.5132279992103577,0.5139830112457275,0.5147389769554138,0.5154950022697449,0.5162510275840759,0.5170069932937622,0.5177630186080933,0.5185189843177795,0.5192739963531494,0.5200300216674805,0.5207859873771667,0.5215420126914978,0.5222979784011841,0.5230540037155151,0.5238100290298462,0.5245649814605713,0.5253210067749023,0.5260769724845886,0.5268329977989197,0.5275890231132507,0.528344988822937,0.5291010141372681,0.5298560261726379,0.5306119918823242,0.5313680171966553,0.5321239829063416,0.5328800082206726,0.5336359739303589,0.5343919992446899,0.5351470112800598,0.5359029769897461,0.5366590023040771,0.5374150276184082,0.5381709933280945,0.5389270186424255,0.5396829843521118,0.5404379963874817,0.5411940217018127,0.541949987411499,0.5427060127258301,0.5434619784355164,0.5442180037498474,0.5449740290641785,0.5457289814949036,0.5464850068092346,0.5472409725189209,0.547996997833252,0.548753023147583,0.5495089888572693,0.5502650141716003,0.5510200262069702,0.5517759919166565,0.5525320172309875,0.5532879829406738,0.5540440082550049,0.5547999739646912,0.5555559992790222,0.5563110113143921,0.5570669770240784,0.5578230023384094,0.5585790276527405,0.5593349933624268,0.5600910186767578,0.5608469843864441,0.561601996421814,0.562358021736145,0.5631139874458313,0.5638700127601624,0.5646259784698486,0.5653820037841797,0.5661380290985107,0.5668929815292358,0.5676490068435669,0.5684049725532532,0.5691609978675842,0.5699170231819153,0.5706729888916016,0.5714290142059326,0.5721840262413025,0.5729399919509888,0.5736960172653198,0.5744519829750061,0.5752080082893372,0.5759639739990234,0.5767199993133545,0.5774750113487244,0.5782309770584106,0.5789870023727417,0.5797430276870728,0.580498993396759,0.5812550187110901,0.5820109844207764,0.5827659964561462,0.5835220217704773,0.5842779874801636,0.5850340127944946,0.5857899785041809,0.586546003818512,0.587302029132843,0.5880569815635681,0.5888130068778992,0.5895689725875854,0.5903249979019165,0.5910810232162476,0.5918369889259338,0.5925930142402649,0.5933480262756348,0.594103991985321,0.5948600172996521,0.5956159830093384,0.5963720083236694,0.5971279740333557,0.5978839993476868,0.5986390113830566,0.5993949770927429,0.600151002407074,0.600907027721405,0.6016629934310913,0.6024190187454224,0.6031749844551086,0.6039299964904785,0.6046860218048096,0.6054419875144958,0.6061980128288269,0.6069539785385132,0.6077100038528442,0.6084660291671753,0.6092209815979004,0.6099770069122314,0.6107329726219177,0.6114889979362488,0.6122450232505798,0.6130009889602661,0.6137570142745972,0.614512026309967,0.6152679920196533,0.6160240173339844,0.6167799830436707,0.6175360083580017,0.618291974067688,0.619047999382019,0.6198030114173889,0.6205589771270752,0.6213150024414062,0.6220710277557373,0.6228269934654236,0.6235830187797546,0.6243389844894409,0.6250939965248108,0.6258500218391418,0.6266059875488281,0.6273620128631592,0.6281179785728455,0.6288740038871765,0.6296300292015076,0.6303849816322327,0.6311410069465637,0.63189697265625,0.632652997970581,0.6334090232849121,0.6341649889945984,0.6349210143089294,0.6356769800186157,0.6364319920539856,0.6371880173683167,0.6379439830780029,0.638700008392334,0.6394559741020203,0.6402119994163513,0.6409670114517212,0.6417229771614075,0.6424790024757385,0.6432350277900696,0.6439909934997559,0.6447470188140869,0.6455029845237732,0.6462590098381042,0.6470140218734741,0.6477699875831604,0.6485260128974915,0.6492819786071777,0.6500380039215088,0.6507940292358398,0.6515499949455261,0.652305006980896,0.6530609726905823,0.6538169980049133,0.6545730233192444,0.6553289890289307,0.6560850143432617,0.656840980052948,0.6575959920883179,0.6583520174026489,0.6591079831123352,0.6598640084266663,0.6606199741363525,0.6613759994506836,0.6621320247650146,0.6628869771957397,0.6636430025100708,0.6643990278244019,0.6651549935340881,0.6659110188484192,0.6666669845581055,0.6674230098724365,0.6681780219078064,0.6689339876174927,0.6696900129318237,0.67044597864151,0.6712020039558411,0.6719580292701721,0.6727139949798584,0.6734690070152283,0.6742249727249146,0.6749809980392456,0.6757370233535767,0.6764929890632629,0.677249014377594,0.6780049800872803,0.6787599921226501,0.6795160174369812,0.6802719831466675,0.6810280084609985,0.6817839741706848,0.6825399994850159,0.6832960247993469,0.684050977230072,0.6848070025444031,0.6855630278587341,0.6863189935684204,0.6870750188827515,0.6878309845924377,0.6885870099067688,0.6893420219421387,0.690097987651825,0.690854012966156,0.6916099786758423,0.6923660039901733,0.6931220293045044,0.6938779950141907,0.6946330070495605,0.6953889727592468,0.6961449980735779,0.6969010233879089,0.6976569890975952,0.6984130144119263,0.6991689801216125,0.6999239921569824,0.7006800174713135,0.7014359831809998,0.7021920084953308,0.7029479742050171,0.7037039995193481,0.7044600248336792,0.7052149772644043,0.7059710025787354,0.7067270278930664,0.7074829936027527,0.7082390189170837,0.70899498462677,0.7097510099411011,0.710506021976471,0.7112619876861572,0.7120180130004883,0.7127739787101746,0.7135300040245056,0.7142860293388367,0.715041995048523,0.7157970070838928,0.7165529727935791,0.7173089981079102,0.7180650234222412,0.7188209891319275,0.7195770144462585,0.7203329801559448,0.7210879921913147,0.7218440175056458,0.722599983215332,0.7233560085296631,0.7241119742393494,0.7248679995536804,0.7256240248680115,0.7263789772987366,0.7271350026130676,0.7278910279273987,0.728646993637085,0.729403018951416,0.7301589846611023,0.7309150099754333,0.7316700220108032,0.7324259877204895,0.7331820130348206,0.7339379787445068,0.7346940040588379,0.735450029373169,0.7362059950828552,0.7369610071182251,0.7377169728279114,0.7384729981422424,0.7392290234565735,0.7399849891662598,0.7407410144805908,0.7414969801902771,0.742251992225647,0.743008017539978,0.7437639832496643,0.7445200085639954,0.7452759742736816,0.7460319995880127,0.7467880249023438,0.7475429773330688,0.7482990026473999,0.749055027961731,0.7498109936714172,0.7505670189857483,0.7513229846954346,0.7520790100097656,0.7528340220451355,0.7535899877548218,0.7543460130691528,0.7551019787788391,0.7558580040931702,0.7566140294075012,0.7573699951171875,0.7581250071525574,0.7588809728622437,0.7596369981765747,0.7603930234909058,0.761148989200592,0.7619050145149231,0.7626609802246094,0.7634159922599792,0.7641720175743103,0.7649279832839966,0.7656840085983276,0.7664399743080139,0.767195999622345,0.767952024936676,0.7687069773674011,0.7694630026817322,0.7702190279960632,0.7709749937057495,0.7717310190200806,0.7724869847297668,0.7732430100440979,0.7739980220794678,0.774753987789154,0.7755100131034851,0.7762659788131714,0.7770220041275024,0.7777780294418335,0.7785339951515198,0.7792890071868896,0.7800449728965759,0.780800998210907,0.781557023525238,0.7823129892349243,0.7830690145492554,0.7838249802589417,0.7845799922943115,0.7853360176086426,0.7860919833183289,0.7868480086326599,0.7876039743423462,0.7883599996566772,0.7891160249710083,0.7898719906806946,0.7906270027160645,0.7913830280303955,0.7921389937400818,0.7928950190544128,0.7936509847640991,0.7944070100784302,0.7951620221138,0.7959179878234863,0.7966740131378174,0.7974299788475037,0.7981860041618347,0.7989420294761658,0.799697995185852,0.8004540205001831,0.8012089729309082,0.8019649982452393,0.8027210235595703,0.8034769892692566,0.8042330145835876,0.8049889802932739,0.805745005607605,0.8065000176429749,0.8072559833526611,0.8080120086669922,0.8087679743766785,0.8095239996910095,0.8102800250053406,0.8110359907150269,0.8117910027503967,0.8125470280647278,0.8133029937744141,0.8140590190887451,0.8148149847984314,0.8155710101127625,0.8163269758224487,0.8170819878578186,0.8178380131721497,0.8185939788818359,0.819350004196167,0.820106029510498,0.8208619952201843,0.8216180205345154,0.8223729729652405,0.8231289982795715,0.8238850235939026,0.8246409893035889,0.8253970146179199,0.8261529803276062,0.8269090056419373,0.8276640176773071,0.8284199833869934,0.8291760087013245,0.8299319744110107,0.8306879997253418,0.8314440250396729,0.8321999907493591,0.832955002784729,0.8337110280990601,0.8344669938087463,0.8352230191230774,0.8359789848327637,0.8367350101470947,0.837490975856781,0.8382459878921509,0.8390020132064819,0.8397579789161682,0.8405140042304993,0.8412700295448303,0.8420259952545166,0.8427820205688477,0.8435369729995728,0.8442929983139038,0.8450490236282349,0.8458049893379211,0.8465610146522522,0.8473169803619385,0.8480730056762695,0.8488280177116394,0.8495839834213257,0.8503400087356567,0.851095974445343,0.8518519997596741,0.8526080250740051,0.8533639907836914,0.8541190028190613,0.8548750281333923,0.8556309938430786,0.8563870191574097,0.857142984867096,0.857899010181427,0.8586549758911133,0.8594099879264832,0.8601660132408142,0.8609219789505005,0.8616780042648315,0.8624340295791626,0.8631899952888489,0.8639460206031799,0.864700973033905,0.8654569983482361,0.8662130236625671,0.8669689893722534,0.8677250146865845,0.8684809803962708,0.8692370057106018,0.8699920177459717,0.870747983455658,0.871504008769989,0.8722599744796753,0.8730159997940063,0.8737720251083374,0.8745279908180237,0.8752830028533936,0.8760390281677246,0.8767949938774109,0.8775510191917419,0.8783069849014282,0.8790630102157593,0.8798189759254456,0.8805739879608154,0.8813300132751465,0.8820859789848328,0.8828420042991638,0.8835980296134949,0.8843539953231812,0.8851100206375122,0.8858649730682373,0.8866209983825684,0.8873770236968994,0.8881329894065857,0.8888890147209167,0.889644980430603,0.8904010057449341,0.891156017780304,0.8919119834899902,0.8926680088043213,0.8934239745140076,0.8941799998283386,0.8949360251426697,0.895691990852356,0.8964470028877258,0.8972030282020569,0.8979589939117432,0.8987150192260742,0.8994709849357605,0.9002270102500916,0.9009829759597778,0.9017379879951477,0.9024940133094788,0.903249979019165,0.9040060043334961,0.9047620296478271,0.9055179953575134,0.9062740206718445,0.9070289731025696,0.9077849984169006,0.9085410237312317,0.909296989440918,0.910053014755249,0.9108089804649353,0.9115650057792664,0.9123200178146362,0.9130759835243225,0.9138320088386536,0.9145879745483398,0.9153439998626709,0.916100025177002,0.9168559908866882,0.9176110029220581,0.9183670282363892,0.9191229939460754,0.9198790192604065,0.9206349849700928,0.9213910102844238,0.9221469759941101,0.92290198802948,0.923658013343811,0.9244139790534973,0.9251700043678284,0.9259260296821594,0.9266819953918457,0.9274380207061768,0.928193986415863,0.9289489984512329,0.929705023765564,0.9304609894752502,0.9312170147895813,0.9319729804992676,0.9327290058135986,0.9334840178489685,0.9342399835586548,0.9349960088729858,0.9357519745826721,0.9365079998970032,0.9372640252113342,0.9380199909210205,0.9387760162353516,0.9395310282707214,0.9402869939804077,0.9410430192947388,0.941798985004425,0.9425550103187561,0.9433109760284424,0.9440670013427734,0.9448220133781433,0.9455779790878296,0.9463340044021606,0.9470900297164917,0.947845995426178,0.948602020740509,0.9493579864501953,0.9501129984855652,0.9508690237998962,0.9516249895095825,0.9523810148239136,0.9531369805335999,0.9538930058479309,0.9546489715576172,0.9554039835929871,0.9561600089073181,0.9569159746170044,0.9576719999313354,0.9584280252456665,0.9591839909553528,0.9599400162696838,0.9606950283050537,0.96145099401474,0.962207019329071,0.9629629850387573,0.9637190103530884,0.9644749760627747,0.9652310013771057,0.9659860134124756,0.9667419791221619,0.9674980044364929,0.968254029750824,0.9690099954605103,0.9697660207748413,0.9705219864845276,0.9712769985198975,0.9720330238342285,0.9727889895439148,0.9735450148582458,0.9743009805679321,0.9750570058822632,0.9758129715919495,0.9765679836273193,0.9773240089416504,0.9780799746513367,0.9788359999656677,0.9795920252799988,0.9803479909896851,0.9811040163040161,0.981859028339386,0.9826149940490723,0.9833710193634033,0.9841269850730896,0.9848830103874207,0.9856389760971069,0.986395001411438,0.9871500134468079,0.9879059791564941,0.9886620044708252,0.9894180297851562,0.9901739954948425,0.9909300208091736,0.9916859865188599,0.9924409985542297,0.9931970238685608,0.9939529895782471,0.9947090148925781,0.9954649806022644,0.9962210059165955,0.9969769716262817,0.9977319836616516,0.9984880089759827,0.999243974685669,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0.999243974685669,0.9984880089759827,0.9977319836616516,0.9969769716262817,0.9962210059165955,0.9954649806022644,0.9947090148925781,0.9939529895782471,0.9931970238685608,0.9924409985542297,0.9916859865188599,0.9909300208091736,0.9901739954948425,0.9894180297851562,0.9886620044708252,0.9879059791564941,0.9871500134468079,0.986395001411438,0.9856389760971069,0.9848830103874207,0.9841269850730896,0.9833710193634033,0.9826149940490723,0.981859028339386,0.9811040163040161,0.9803479909896851,0.9795920252799988,0.9788359999656677,0.9780799746513367,0.9773240089416504,0.9765679836273193,0.9758129715919495,0.9750570058822632,0.9743009805679321,0.9735450148582458,0.9727889895439148,0.9720330238342285,0.9712769985198975,0.9705219864845276,0.9697660207748413,0.9690099954605103,0.968254029750824,0.9674980044364929,0.9667419791221619,0.9659860134124756,0.9652310013771057,0.9644749760627747,0.9637190103530884,0.9629629850387573,0.962207019329071,0.96145099401474,0.9606950283050537,0.9599400162696838,0.9591839909553528,0.9584280252456665,0.9576719999313354,0.9569159746170044,0.9561600089073181,0.9554039835929871,0.9546480178833008,0.9538930058479309,0.9531369805335999,0.9523810148239136,0.9516249895095825,0.9508690237998962,0.9501129984855652,0.9493579864501953,0.948602020740509,0.947845995426178,0.9470900297164917,0.9463340044021606,0.9455779790878296,0.9448220133781433,0.9440670013427734,0.9433109760284424,0.9425550103187561,0.941798985004425,0.9410430192947388,0.9402869939804077,0.9395310282707214,0.9387760162353516,0.9380199909210205,0.9372640252113342,0.9365079998970032,0.9357519745826721,0.9349960088729858,0.9342399835586548,0.9334840178489685,0.9327290058135986,0.9319729804992676,0.9312170147895813,0.9304609894752502,0.929705023765564,0.9289489984512329,0.928193986415863,0.9274380207061768,0.9266819953918457,0.9259260296821594,0.9251700043678284,0.9244139790534973,0.923658013343811,0.92290198802948,0.9221469759941101,0.9213910102844238,0.9206349849700928,0.9198790192604065,0.9191229939460754,0.9183670282363892,0.9176110029220581,0.9168559908866882,0.916100025177002,0.9153439998626709,0.9145879745483398,0.9138320088386536,0.9130759835243225,0.9123200178146362,0.9115650057792664,0.9108089804649353,0.910053014755249,0.909296989440918,0.9085410237312317,0.9077849984169006,0.9070299863815308,0.9062740206718445,0.9055179953575134,0.9047620296478271,0.9040060043334961,0.903249979019165,0.9024940133094788,0.9017379879951477,0.9009829759597778,0.9002270102500916,0.8994709849357605,0.8987150192260742,0.8979589939117432,0.8972030282020569,0.8964470028877258,0.895691990852356,0.8949360251426697,0.8941799998283386,0.8934239745140076,0.8926680088043213,0.8919119834899902,0.891156017780304,0.8904010057449341,0.889644980430603,0.8888890147209167,0.8881329894065857,0.8873770236968994,0.8866209983825684,0.8858649730682373,0.8851100206375122,0.8843539953231812,0.8835980296134949,0.8828420042991638,0.8820859789848328,0.8813300132751465,0.8805739879608154,0.8798189759254456,0.8790630102157593,0.8783069849014282,0.8775510191917419,0.8767949938774109,0.8760390281677246,0.8752830028533936,0.8745279908180237,0.8737720251083374,0.8730159997940063,0.8722599744796753,0.871504008769989,0.870747983455658,0.8699920177459717,0.8692370057106018,0.8684809803962708,0.8677250146865845,0.8669689893722534,0.8662130236625671,0.8654569983482361,0.864700973033905,0.8639460206031799,0.8631899952888489,0.8624340295791626,0.8616780042648315,0.8609219789505005,0.8601660132408142,0.8594099879264832,0.8586549758911133,0.857899010181427,0.857142984867096,0.8563870191574097,0.8556309938430786,0.8548750281333923,0.8541190028190613,0.8533639907836914,0.8526080250740051,0.8518519997596741,0.851095974445343,0.8503400087356567,0.8495839834213257,0.8488280177116394,0.8480730056762695,0.8473169803619385,0.8465610146522522,0.8458049893379211,0.8450490236282349,0.8442929983139038,0.8435369729995728,0.8427820205688477,0.8420259952545166,0.8412700295448303,0.8405140042304993,0.8397579789161682,0.8390020132064819,0.8382459878921509,0.837490975856781,0.8367350101470947,0.8359789848327637,0.8352230191230774,0.8344669938087463,0.8337110280990601,0.832955002784729,0.8321999907493591,0.8314440250396729,0.8306879997253418,0.8299319744110107,0.8291760087013245,0.8284199833869934,0.8276640176773071,0.8269090056419373,0.8261529803276062,0.8253970146179199,0.8246409893035889,0.8238850235939026,0.8231289982795715,0.8223729729652405,0.8216180205345154,0.8208619952201843,0.820106029510498,0.819350004196167,0.8185939788818359,0.8178380131721497,0.8170819878578186,0.8163260221481323,0.8155710101127625,0.8148149847984314,0.8140590190887451,0.8133029937744141,0.8125470280647278,0.8117910027503967,0.8110359907150269,0.8102800250053406,0.8095239996910095,0.8087679743766785,0.8080120086669922,0.8072559833526611,0.8065000176429749,0.805745005607605,0.8049889802932739,0.8042330145835876,0.8034769892692566,0.8027210235595703,0.8019649982452393,0.8012089729309082,0.8004540205001831,0.799697995185852,0.7989420294761658,0.7981860041618347,0.7974299788475037,0.7966740131378174,0.7959179878234863,0.7951620221138,0.7944070100784302,0.7936509847640991,0.7928950190544128,0.7921389937400818,0.7913830280303955,0.7906270027160645,0.7898719906806946,0.7891160249710083,0.7883599996566772,0.7876039743423462,0.7868480086326599,0.7860919833183289,0.7853360176086426,0.7845799922943115,0.7838249802589417,0.7830690145492554,0.7823129892349243,0.781557023525238,0.780800998210907,0.7800449728965759,0.7792890071868896,0.7785339951515198,0.7777780294418335,0.7770220041275024,0.7762659788131714,0.7755100131034851,0.774753987789154,0.7739980220794678,0.7732430100440979,0.7724869847297668,0.7717310190200806,0.7709749937057495,0.7702190279960632,0.7694630026817322,0.7687079906463623,0.767952024936676,0.767195999622345,0.7664399743080139,0.7656840085983276,0.7649279832839966,0.7641720175743103,0.7634159922599792,0.7626609802246094,0.7619050145149231,0.761148989200592,0.7603930234909058,0.7596369981765747,0.7588809728622437,0.7581250071525574,0.7573699951171875,0.7566140294075012,0.7558580040931702,0.7551019787788391,0.7543460130691528,0.7535899877548218,0.7528340220451355,0.7520790100097656,0.7513229846954346,0.7505670189857483,0.7498109936714172,0.749055027961731,0.7482990026473999,0.7475429773330688,0.7467880249023438,0.7460319995880127,0.7452759742736816,0.7445200085639954,0.7437639832496643,0.743008017539978,0.742251992225647,0.7414969801902771,0.7407410144805908,0.7399849891662598,0.7392290234565735,0.7384729981422424,0.7377169728279114,0.7369610071182251,0.7362059950828552,0.735450029373169,0.7346940040588379,0.7339379787445068,0.7331820130348206,0.7324259877204895,0.7316700220108032,0.7309150099754333,0.7301589846611023,0.729403018951416,0.728646993637085,0.7278910279273987,0.7271350026130676,0.7263789772987366,0.7256240248680115,0.7248679995536804,0.7241119742393494,0.7233560085296631,0.722599983215332,0.7218440175056458,0.7210879921913147,0.7203329801559448,0.7195770144462585,0.7188209891319275,0.7180650234222412,0.7173089981079102,0.7165529727935791,0.7157970070838928,0.715041995048523,0.7142860293388367,0.7135300040245056,0.7127739787101746,0.7120180130004883,0.7112619876861572,0.710506021976471,0.7097510099411011,0.70899498462677,0.7082390189170837,0.7074829936027527,0.7067270278930664,0.7059710025787354,0.7052149772644043,0.7044600248336792,0.7037039995193481,0.7029479742050171,0.7021920084953308,0.7014359831809998,0.7006800174713135,0.6999239921569824,0.6991689801216125,0.6984130144119263,0.6976569890975952,0.6969010233879089,0.6961449980735779,0.6953889727592468,0.6946330070495605,0.6938779950141907,0.6931220293045044,0.6923660039901733,0.6916099786758423,0.690854012966156,0.690097987651825,0.6893420219421387,0.6885870099067688,0.6878309845924377,0.6870750188827515,0.6863189935684204,0.6855630278587341,0.6848070025444031,0.684050977230072,0.6832960247993469,0.6825399994850159,0.6817839741706848,0.6810280084609985,0.6802719831466675,0.6795160174369812,0.6787599921226501,0.6780049800872803,0.677249014377594,0.6764929890632629,0.6757370233535767,0.6749809980392456,0.6742249727249146,0.6734690070152283,0.6727139949798584,0.6719580292701721,0.6712020039558411,0.67044597864151,0.6696900129318237,0.6689339876174927,0.6681780219078064,0.6674230098724365,0.6666669845581055,0.6659110188484192,0.6651549935340881,0.6643990278244019,0.6636430025100708,0.6628869771957397,0.6621320247650146,0.6613759994506836,0.6606199741363525,0.6598640084266663,0.6591079831123352,0.6583520174026489,0.6575959920883179,0.656840980052948,0.6560850143432617,0.6553289890289307,0.6545730233192444,0.6538169980049133,0.6530609726905823,0.652305006980896,0.6515499949455261,0.6507940292358398,0.6500380039215088,0.6492819786071777,0.6485260128974915,0.6477699875831604,0.6470140218734741,0.6462579965591431,0.6455029845237732,0.6447470188140869,0.6439909934997559,0.6432350277900696,0.6424790024757385,0.6417229771614075,0.6409670114517212,0.6402119994163513,0.6394559741020203,0.638700008392334,0.6379439830780029,0.6371880173683167,0.6364319920539856,0.6356769800186157,0.6349210143089294,0.6341649889945984,0.6334090232849121,0.632652997970581,0.63189697265625,0.6311410069465637,0.6303859949111938,0.6296300292015076,0.6288740038871765,0.6281179785728455,0.6273620128631592,0.6266059875488281,0.6258500218391418,0.6250939965248108,0.6243389844894409,0.6235830187797546,0.6228269934654236,0.6220710277557373,0.6213150024414062,0.6205589771270752,0.6198030114173889,0.619047999382019,0.618291974067688,0.6175360083580017,0.6167799830436707,0.6160240173339844,0.6152679920196533,0.614512026309967,0.6137570142745972,0.6130009889602661,0.6122450232505798,0.6114889979362488,0.6107329726219177,0.6099770069122314,0.6092209815979004,0.6084660291671753,0.6077100038528442,0.6069539785385132,0.6061980128288269,0.6054419875144958,0.6046860218048096,0.6039299964904785,0.6031749844551086,0.6024190187454224,0.6016629934310913,0.600907027721405,0.600151002407074,0.5993949770927429,0.5986390113830566,0.5978839993476868,0.5971279740333557,0.5963720083236694,0.5956159830093384,0.5948600172996521,0.594103991985321,0.5933480262756348,0.5925930142402649,0.5918369889259338,0.5910810232162476,0.5903249979019165,0.5895689725875854,0.5888130068778992,0.5880569815635681,0.587302029132843,0.586546003818512,0.5857899785041809,0.5850340127944946,0.5842779874801636,0.5835220217704773,0.5827659964561462,0.5820109844207764,0.5812550187110901,0.580498993396759,0.5797430276870728,0.5789870023727417,0.5782309770584106,0.5774750113487244,0.5767199993133545,0.5759639739990234,0.5752080082893372,0.5744519829750061,0.5736960172653198,0.5729399919509888,0.5721840262413025,0.5714290142059326,0.5706729888916016,0.5699170231819153,0.5691609978675842,0.5684049725532532,0.5676490068435669,0.5668929815292358,0.5661380290985107,0.5653820037841797,0.5646259784698486,0.5638700127601624,0.5631139874458313,0.562358021736145,0.561601996421814,0.5608469843864441,0.5600910186767578,0.5593349933624268,0.5585790276527405,0.5578230023384094,0.5570669770240784,0.5563110113143921,0.5555559992790222,0.5547999739646912,0.5540440082550049,0.5532879829406738,0.5525320172309875,0.5517759919166565,0.5510200262069702,0.5502650141716003,0.5495089888572693,0.548753023147583,0.547996997833252,0.5472409725189209,0.5464850068092346,0.5457289814949036,0.5449740290641785,0.5442180037498474,0.5434619784355164,0.5427060127258301,0.541949987411499,0.5411940217018127,0.5404379963874817,0.5396829843521118,0.5389270186424255,0.5381709933280945,0.5374150276184082,0.5366590023040771,0.5359029769897461,0.5351470112800598,0.5343919992446899,0.5336359739303589,0.5328800082206726,0.5321239829063416,0.5313680171966553,0.5306119918823242,0.5298560261726379,0.5291010141372681,0.528344988822937,0.5275890231132507,0.5268329977989197,0.5260769724845886,0.5253210067749023,0.5245649814605713,0.5238100290298462,0.5230540037155151,0.5222979784011841,0.5215420126914978,0.5207859873771667,0.5200300216674805,0.5192739963531494,0.5185189843177795,0.5177630186080933,0.5170069932937622,0.5162510275840759,0.5154950022697449,0.5147389769554138,0.5139830112457275,0.5132279992103577,0.5124719738960266,0.5117160081863403,0.5109599828720093,0.510204017162323,0.5094479918479919,0.5086920261383057,0.5079360008239746,0.5071809887886047,0.5064250230789185,0.5056689977645874,0.5049129724502563,0.5041570067405701,0.503400981426239,0.5026450157165527,0.5018900036811829,0.5011339783668518,0.5003780126571655,0.4996219873428345,0.4988659918308258,0.49810999631881714,0.49735501408576965,0.4965989887714386,0.49584299325942993,0.49508699774742126,0.4943310022354126,0.49357500672340393,0.49281901121139526,0.4920629858970642,0.4913080036640167,0.49055200815200806,0.4897960126399994,0.48903998732566833,0.48828399181365967,0.487527996301651,0.48677200078964233,0.48601698875427246,0.4852609932422638,0.4845049977302551,0.48374900221824646,0.4829930067062378,0.4822370111942291,0.48148098587989807,0.4807260036468506,0.4799700081348419,0.47921401262283325,0.4784579873085022,0.47770199179649353,0.47694599628448486,0.4761900007724762,0.4754349887371063,0.47467899322509766,0.473922997713089,0.4731670022010803,0.47241100668907166,0.471655011177063,0.47089898586273193,0.47014400362968445,0.4693880081176758,0.4686320126056671,0.46787598729133606,0.4671199917793274,0.4663639962673187,0.46560800075531006,0.4648529887199402,0.4640969932079315,0.46334099769592285,0.4625850021839142,0.4618290066719055,0.46107301115989685,0.4603169858455658,0.4595620036125183,0.45880600810050964,0.458050012588501,0.4572939872741699,0.45653799176216125,0.4557819962501526,0.4550260007381439,0.45427098870277405,0.4535149931907654,0.4527589976787567,0.45200300216674805,0.4512470066547394,0.4504910111427307,0.44973498582839966,0.4489800035953522,0.4482240080833435,0.44746801257133484,0.4467119872570038,0.4459559917449951,0.44519999623298645,0.4444440007209778,0.4436889886856079,0.44293299317359924,0.4421769976615906,0.4414210021495819,0.44066500663757324,0.4399090111255646,0.4391529858112335,0.43839800357818604,0.43764200806617737,0.4368860125541687,0.43612998723983765,0.435373991727829,0.4346179962158203,0.43386200070381165,0.4331069886684418,0.4323509931564331,0.43159499764442444,0.43083900213241577,0.4300830066204071,0.42932701110839844,0.4285709857940674,0.4278160035610199,0.42706000804901123,0.42630401253700256,0.4255479872226715,0.42479199171066284,0.4240359961986542,0.4232800006866455,0.42252498865127563,0.42176899313926697,0.4210129976272583,0.42025700211524963,0.41950100660324097,0.4187450110912323,0.41798898577690125,0.41723400354385376,0.4164780080318451,0.4157220125198364,0.41496598720550537,0.4142099916934967,0.41345399618148804,0.41269800066947937,0.4119429886341095,0.41118699312210083,0.41043099761009216,0.4096750020980835,0.40891900658607483,0.40816301107406616,0.4074069857597351,0.4066520035266876,0.40589600801467896,0.4051400125026703,0.40438398718833923,0.40362799167633057,0.4028719961643219,0.40211600065231323,0.40136098861694336,0.4006049931049347,0.399848997592926,0.39909300208091736,0.3983370065689087,0.3975810110569,0.39682498574256897,0.3960700035095215,0.3953140079975128,0.39455801248550415,0.3938019871711731,0.39304599165916443,0.39228999614715576,0.3915340006351471,0.3907789885997772,0.39002299308776855,0.3892669975757599,0.3885110020637512,0.38775500655174255,0.3869990110397339,0.38624298572540283,0.38548800349235535,0.3847320079803467,0.383976012468338,0.38321998715400696,0.3824639916419983,0.3817079961299896,0.38095200061798096,0.3801969885826111,0.3794409930706024,0.37868499755859375,0.3779290020465851,0.3771730065345764,0.37641701102256775,0.3756609857082367,0.3749060034751892,0.37415000796318054,0.3733940124511719,0.3726379871368408,0.37188199162483215,0.3711259961128235,0.3703700006008148,0.36961498856544495,0.3688589930534363,0.3681029975414276,0.36734700202941895,0.3665910065174103,0.3658350110054016,0.36507898569107056,0.3643229901790619,0.3635680079460144,0.36281201243400574,0.3620559871196747,0.361299991607666,0.36054399609565735,0.3597880005836487,0.3590329885482788,0.35827699303627014,0.3575209975242615,0.3567650020122528,0.35600900650024414,0.3552530109882355,0.3544969856739044,0.35374099016189575,0.35298600792884827,0.3522300124168396,0.35147398710250854,0.3507179915904999,0.3499619960784912,0.34920600056648254,0.3484500050544739,0.347694993019104,0.34693899750709534,0.34618300199508667,0.345427006483078,0.34467101097106934,0.3439149856567383,0.3431589901447296,0.34240400791168213,0.34164801239967346,0.3408919870853424,0.34013599157333374,0.3393799960613251,0.3386240005493164,0.33786800503730774,0.33711299300193787,0.3363569974899292,0.33560100197792053,0.33484500646591187,0.3340890109539032,0.33333298563957214,0.3325769901275635,0.331822007894516,0.3310660123825073,0.33030998706817627,0.3295539915561676,0.32879799604415894,0.32804200053215027,0.3272860050201416,0.32653099298477173,0.32577499747276306,0.3250190019607544,0.3242630064487457,0.32350701093673706,0.322750985622406,0.32199499011039734,0.32124000787734985,0.3204840123653412,0.31972798705101013,0.31897199153900146,0.3182159960269928,0.31746000051498413,0.31670400500297546,0.3159489929676056,0.3151929974555969,0.31443700194358826,0.3136810064315796,0.3129250109195709,0.31216898560523987,0.3114129900932312,0.3106580078601837,0.30990201234817505,0.309145987033844,0.3083899915218353,0.30763399600982666,0.306878000497818,0.3061220049858093,0.30536699295043945,0.3046109974384308,0.3038550019264221,0.30309900641441345,0.3023430109024048,0.30158698558807373,0.30083099007606506,0.3000760078430176,0.2993200123310089,0.29856398701667786,0.2978079915046692,0.2970519959926605,0.29629600048065186,0.2955400049686432,0.2947849929332733,0.29402899742126465,0.293273001909256,0.2925170063972473,0.29176101088523865,0.2910049855709076,0.2902489900588989,0.28949400782585144,0.2887380123138428,0.2879819869995117,0.28722599148750305,0.2864699959754944,0.2857140004634857,0.28495800495147705,0.2842029929161072,0.2834469974040985,0.28269100189208984,0.2819350063800812,0.2811790108680725,0.28042298555374146,0.2796669900417328,0.2789120078086853,0.27815601229667664,0.2773999869823456,0.2766439914703369,0.27588799595832825,0.2751320004463196,0.2743760049343109,0.27362099289894104,0.2728649973869324,0.2721090018749237,0.27135300636291504,0.27059701085090637,0.2698409855365753,0.26908499002456665,0.26833000779151917,0.2675740122795105,0.26681798696517944,0.2660619914531708,0.2653059959411621,0.26455000042915344,0.2637940049171448,0.2630389928817749,0.26228299736976624,0.26152700185775757,0.2607710063457489,0.26001501083374023,0.2592589855194092,0.2585029900074005,0.257748007774353,0.25699201226234436,0.2562359869480133,0.25547999143600464,0.25472399592399597,0.2539680004119873,0.25321200489997864,0.25245699286460876,0.2517009973526001,0.25094500184059143,0.25018900632858276,0.2494329959154129,0.24867700040340424,0.24792100489139557,0.2471659928560257,0.24640999734401703,0.24565400183200836,0.2448980063199997,0.24414199590682983,0.24338600039482117,0.2426300048828125,0.24187499284744263,0.24111899733543396,0.2403630018234253,0.23960700631141663,0.23885099589824677,0.2380950003862381,0.23733900487422943,0.23658399283885956,0.2358279973268509,0.23507200181484222,0.23431600630283356,0.2335599958896637,0.23280400037765503,0.23204800486564636,0.2312929928302765,0.23053699731826782,0.22978100180625916,0.2290250062942505,0.22826899588108063,0.22751300036907196,0.2267570048570633,0.22600199282169342,0.22524599730968475,0.2244900017976761,0.22373400628566742,0.22297799587249756,0.2222220003604889,0.22146600484848022,0.22071099281311035,0.21995499730110168,0.21919900178909302,0.21844300627708435,0.2176869958639145,0.21693100035190582,0.21617500483989716,0.21541999280452728,0.21466399729251862,0.21390800178050995,0.21315200626850128,0.21239599585533142,0.21164000034332275,0.2108840048313141,0.21012799441814423,0.20937299728393555,0.20861700177192688,0.2078610062599182,0.20710499584674835,0.20634900033473969,0.20559300482273102,0.20483799278736115,0.20408199727535248,0.2033260017633438,0.20257000625133514,0.20181399583816528,0.20105800032615662,0.20030200481414795,0.1995459944009781,0.1987909972667694,0.19803500175476074,0.19727900624275208,0.19652299582958221,0.19576700031757355,0.19501100480556488,0.19425499439239502,0.19349999725818634,0.19274400174617767,0.191988006234169,0.19123199582099915,0.19047600030899048,0.1897200047969818,0.18896399438381195,0.18820899724960327,0.1874530017375946,0.18669700622558594,0.18594099581241608,0.1851850003004074,0.18442900478839874,0.18367299437522888,0.1829179972410202,0.18216200172901154,0.18140600621700287,0.180649995803833,0.17989400029182434,0.17913800477981567,0.1783819943666458,0.17762699723243713,0.17687100172042847,0.1761150062084198,0.17535899579524994,0.17460300028324127,0.1738470047712326,0.17309099435806274,0.17233599722385406,0.1715800017118454,0.17082400619983673,0.17006799578666687,0.1693120002746582,0.16855600476264954,0.16779999434947968,0.167044997215271,0.16628900170326233,0.16553300619125366,0.1647769957780838,0.16402100026607513,0.16326500475406647,0.1625089943408966,0.16175399720668793,0.16099800169467926,0.1602420061826706,0.15948599576950073,0.15873000025749207,0.1579740047454834,0.15721799433231354,0.15646299719810486,0.1557070016860962,0.15495100617408752,0.15419499576091766,0.153439000248909,0.15268300473690033,0.15192699432373047,0.1511719971895218,0.15041600167751312,0.14966000616550446,0.1489039957523346,0.14814800024032593,0.14739200472831726,0.1466359943151474,0.14588099718093872,0.14512500166893005,0.1443690061569214,0.14361299574375153,0.14285700023174286,0.1421010047197342,0.14134499430656433,0.14058999717235565,0.13983400166034698,0.13907800614833832,0.13832199573516846,0.1375660002231598,0.13681000471115112,0.13605399429798126,0.13529899716377258,0.13454300165176392,0.13378700613975525,0.1330309957265854,0.13227500021457672,0.13151900470256805,0.1307629942893982,0.13000799715518951,0.12925200164318085,0.12849600613117218,0.12773999571800232,0.12698400020599365,0.12622800469398499,0.12547199428081512,0.12471699714660645,0.12396100163459778,0.12320499867200851,0.12244900315999985,0.12169300019741058,0.12093699723482132,0.12018100172281265,0.11942599713802338,0.11867000162601471,0.11791399866342545,0.11715800315141678,0.11640200018882751,0.11564599722623825,0.11489000171422958,0.11413499712944031,0.11337900161743164,0.11262299865484238,0.11186700314283371,0.11111100018024445,0.11035499721765518,0.10959900170564651,0.10884399712085724,0.10808800160884857,0.10733199864625931,0.10657600313425064,0.10582000017166138,0.10506399720907211,0.10430800169706345,0.10355299711227417,0.1027970016002655,0.10204099863767624,0.10128500312566757,0.10052900016307831,0.09977319836616516,0.09901739656925201,0.09826149791479111,0.09750570356845856,0.09674979746341705,0.09599389880895615,0.095238097012043,0.09448219835758209,0.09372639656066895,0.0929706022143364,0.09221459925174713,0.09145879745483398,0.09070300310850143,0.08994709700345993,0.08919130265712738,0.08843539655208588,0.08767949789762497,0.08692370355129242,0.08616779744625092,0.08541200309991837,0.08465609699487686,0.08390019834041595,0.08314439654350281,0.0823884978890419,0.08163270354270935,0.08087679743766785,0.08012089878320694,0.07936509698629379,0.07860919833183289,0.07785339653491974,0.07709749788045883,0.07634159922599792,0.07558579742908478,0.07482989877462387,0.07407409697771072,0.07331819832324982,0.07256229966878891,0.07180649787187576,0.07105059921741486,0.07029479742050171,0.06953900307416916,0.0687830001115799,0.06802719831466675,0.0672713965177536,0.0665154978632927,0.06575970351696014,0.06500379741191864,0.06424789875745773,0.06349209696054459,0.06273619830608368,0.06198040023446083,0.061224501579999924,0.06046859920024872,0.05971280112862587,0.058956898748874664,0.058201100677251816,0.05744519829750061,0.0566892996430397,0.055933501571416855,0.05517759919166565,0.0544218011200428,0.053665898740291595,0.05291000008583069,0.05215419828891754,0.051398299634456635,0.050642501562833786,0.04988659918308258,0.049130700528621674,0.04837489873170853,0.04761900007724762,0.04686319828033447,0.046107400208711624,0.04535140097141266,0.04459559917449951,0.04383980110287666,0.04308389872312546,0.04232810065150261,0.041572198271751404,0.0408162996172905,0.04006050154566765,0.03930459916591644,0.038548801094293594,0.03779289871454239,0.03703700006008148,0.036281198263168335,0.03552529960870743,0.03476950153708458,0.034013599157333374,0.03325770050287247,0.03250189870595932,0.03174600005149841,0.030990200117230415,0.03023429960012436,0.029478399083018303,0.028722599148750305,0.027966700494289398,0.0272109005600214,0.026455000042915344,0.025699200108647346,0.02494329959154129,0.024187399074435234,0.023431599140167236,0.02267579920589924,0.02191990055143833,0.021164000034332275,0.020408200100064278,0.01965229958295822,0.018896499648690224,0.018140599131584167,0.01738470047712326,0.016628900542855263,0.015873000025749207,0.015117200091481209,0.014361299574375153,0.013605399988591671,0.012849600054323673,0.012093699537217617,0.01133789960294962,0.010582000017166138,0.009826119989156723,0.009070280008018017,0.00831442978233099,0.00755858002230525,0.006802740041166544,0.006046889815479517,0.005290990229696035,0.004535140004009008,0.003779290011152625,0.003023450030013919,0.0022676000371575356,0.0015116899739950895,0])
commons_setArray("n1", createFloatArray(100))
commons_getArray("n1").set([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])
commons_setArray("n2", createFloatArray(100))
commons_getArray("n2").set([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])
commons_setArray("n3", createFloatArray(100))
commons_getArray("n3").set([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])
commons_setArray("n4", createFloatArray(100))
commons_getArray("n4").set([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])
commons_setArray("n5", createFloatArray(100))
commons_getArray("n5").set([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])
commons_setArray("n6", createFloatArray(100))
commons_getArray("n6").set([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])
commons_setArray("n7", createFloatArray(100))
commons_getArray("n7").set([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])
commons_setArray("n8", createFloatArray(100))
commons_getArray("n8").set([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])
commons_setArray("n9", createFloatArray(100))
commons_getArray("n9").set([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])
commons_setArray("n10", createFloatArray(100))
commons_getArray("n10").set([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])
commons_setArray("n11", createFloatArray(100))
commons_getArray("n11").set([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])
commons_setArray("n12", createFloatArray(100))
commons_getArray("n12").set([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])

        function ioRcv_n_0_65_0(m) {n_0_65_RCVS_0(m)}
function ioRcv_n_0_67_0(m) {n_0_67_RCVS_0(m)}
function ioRcv_n_0_70_0(m) {n_0_70_RCVS_0(m)}
function ioRcv_n_0_74_0(m) {n_0_74_RCVS_0(m)}
function ioRcv_n_0_75_0(m) {n_0_75_RCVS_0(m)}
function ioRcv_n_0_80_0(m) {n_0_80_RCVS_0(m)}
function ioRcv_n_0_113_0(m) {n_0_113_RCVS_0(m)}
function ioRcv_n_0_117_0(m) {n_0_117_RCVS_0(m)}
        

        
                const n_0_65_STATE = {
                    minValue: 0,
                    maxValue: 20,
                    valueFloat: 0,
                    value: msg_create([]),
                    receiveBusName: "empty",
                    sendBusName: "empty",
                    messageReceiver: n_control_defaultMessageHandler,
                    messageSender: n_control_defaultMessageHandler,
                }
    
                commons_waitEngineConfigure(() => {
                    n_0_65_STATE.messageReceiver = function (m) {
                        n_sl_receiveMessage(n_0_65_STATE, m)
                    }
                    n_0_65_STATE.messageSender = n_0_67_RCVS_0
                    n_control_setReceiveBusName(n_0_65_STATE, "empty")
                })
    
                
            

        const n_0_67_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
        
        n_0_67_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
            
            
            let stringMem = []
            n_0_67_STATE.outTemplates[0] = []
            
                n_0_67_STATE.outTemplates[0].push(msg_getTokenType(inMessage, 0))
                if (msg_isStringToken(inMessage, 0)) {
                    stringMem[0] = msg_readStringToken(inMessage, 0)
                    n_0_67_STATE.outTemplates[0].push(stringMem[0].length)
                }
            

                n_0_67_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_0_67_STATE.outMessages[0] = msg_create(n_0_67_STATE.outTemplates[0])
            
                if (msg_isFloatToken(inMessage, 0)) {
                    msg_writeFloatToken(n_0_67_STATE.outMessages[0], 0, msg_readFloatToken(inMessage, 0))
                } else if (msg_isStringToken(inMessage, 0)) {
                    msg_writeStringToken(n_0_67_STATE.outMessages[0], 0, stringMem[0])
                }
            

                msg_writeFloatToken(n_0_67_STATE.outMessages[0], 1, 50)
            
        
                    return n_0_67_STATE.outMessages[0]
                }
,
        ]
    

        const n_0_66_STATE = {
            currentLine: n_line_t_defaultLine,
            currentValue: 0,
            nextDurationSamp: 0,
        }
    

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("nuSong", n_0_71_RCVS_0)
            })
        

        const n_0_71_STATE = {
                leftOp: 0,
                rightOp: 0,
            }
            n_add_setLeft(n_0_71_STATE, 0)
            n_add_setRight(n_0_71_STATE, 1)
        

            const n_0_70_STATE = {
                value: msg_floats([0]),
                receiveBusName: "empty",
                sendBusName: "empty",
                messageReceiver: n_control_defaultMessageHandler,
                messageSender: n_control_defaultMessageHandler,
            }
        
            commons_waitEngineConfigure(() => {
                n_0_70_STATE.messageReceiver = function (m) {
                    n_floatatom_receiveMessage(n_0_70_STATE, m)
                }
                n_0_70_STATE.messageSender = n_0_83_RCVS_0
                n_control_setReceiveBusName(n_0_70_STATE, "empty")
            })
        


        const n_0_74_STATE = {
            value: msg_create([]),
            receiveBusName: "empty",
            sendBusName: "empty",
            messageReceiver: n_control_defaultMessageHandler,
            messageSender: n_control_defaultMessageHandler,
        }
    
        commons_waitEngineConfigure(() => {
            n_0_74_STATE.messageReceiver = function (m) {
                n_bang_receiveMessage(n_0_74_STATE, m)
            }
            n_0_74_STATE.messageSender = m_n_0_73_0__routemsg_RCVS_0
            n_control_setReceiveBusName(n_0_74_STATE, "empty")
        })

        
    


        const n_0_73_STATE = {
            currentValue: 0
        }
    

            const n_0_75_STATE = {
                value: msg_floats([0]),
                receiveBusName: "empty",
                sendBusName: "empty",
                messageReceiver: n_control_defaultMessageHandler,
                messageSender: n_control_defaultMessageHandler,
            }
        
            commons_waitEngineConfigure(() => {
                n_0_75_STATE.messageReceiver = function (m) {
                    n_floatatom_receiveMessage(n_0_75_STATE, m)
                }
                n_0_75_STATE.messageSender = n_0_75_SNDS_0
                n_control_setReceiveBusName(n_0_75_STATE, "empty")
            })
        


        const n_0_79_STATE = {
                leftOp: 0,
                rightOp: 0,
            }
            n_div_setLeft(n_0_79_STATE, 0)
            n_div_setRight(n_0_79_STATE, 1)
        

        const n_0_85_STATE = {
                leftOp: 0,
                rightOp: 0,
            }
            n_mul_setLeft(n_0_85_STATE, 0)
            n_mul_setRight(n_0_85_STATE, 0.1)
        

        const n_0_86_STATE = {
                leftOp: 0,
                rightOp: 0,
            }
            n_add_setLeft(n_0_86_STATE, 0)
            n_add_setRight(n_0_86_STATE, 0.005)
        


            const m_n_0_76_0_sig_STATE = {
                currentValue: 0.09
            }
        

        const n_0_77_STATE = {
            maxValue: 9
        }
    

        const n_0_78_STATE = {
                leftOp: 0,
                rightOp: 0,
            }
            n_add_setLeft(n_0_78_STATE, 0)
            n_add_setRight(n_0_78_STATE, 1)
        

            const n_0_80_STATE = {
                value: msg_floats([0]),
                receiveBusName: "empty",
                sendBusName: "empty",
                messageReceiver: n_control_defaultMessageHandler,
                messageSender: n_control_defaultMessageHandler,
            }
        
            commons_waitEngineConfigure(() => {
                n_0_80_STATE.messageReceiver = function (m) {
                    n_floatatom_receiveMessage(n_0_80_STATE, m)
                }
                n_0_80_STATE.messageSender = SND_TO_NULL
                n_control_setReceiveBusName(n_0_80_STATE, "empty")
            })
        

            const n_0_99_STATE = {
                busName: "bassTrig",
            }
        

            const n_0_84_STATE = {
                busName: "songSelectaBang",
            }
        

        const n_0_90_STATE = {
                leftOp: 0,
                rightOp: 0,
            }
            n_mul_setLeft(n_0_90_STATE, 0)
            n_mul_setRight(n_0_90_STATE, 0.3)
        
commons_waitFrame(0, () => n_0_103_RCVS_0(msg_bang()))

        const n_0_103_STATE = {
            delay: 0,
            sampleRatio: 1,
            scheduledBang: SKED_ID_NULL,
        }

        commons_waitEngineConfigure(() => {
            n_0_103_STATE.sampleRatio = computeUnitInSamples(SAMPLE_RATE, 1, "msec")
            n_delay_setDelay(n_0_103_STATE, 40)
        })
    

            const n_0_88_STATE = {
                busName: "startBang",
            }
        
commons_waitFrame(0, () => n_0_113_RCVS_0(msg_bang()))

                const n_0_113_STATE = {
                    minValue: 0,
                    maxValue: 1,
                    valueFloat: 0,
                    value: msg_create([]),
                    receiveBusName: "empty",
                    sendBusName: "empty",
                    messageReceiver: n_control_defaultMessageHandler,
                    messageSender: n_control_defaultMessageHandler,
                }
    
                commons_waitEngineConfigure(() => {
                    n_0_113_STATE.messageReceiver = function (m) {
                        n_tgl_receiveMessage(n_0_113_STATE, m)
                    }
                    n_0_113_STATE.messageSender = n_0_120_RCVS_0
                    n_control_setReceiveBusName(n_0_113_STATE, "empty")
                })
    
                
            

        const n_0_120_STATE = {
            rate: 0,
            sampleRatio: 1,
            skedId: SKED_ID_NULL,
            realNextTick: -1,
            snd0: n_0_114_RCVS_0,
            tickCallback: function () {},
        }

        commons_waitEngineConfigure(() => {
            n_0_120_STATE.sampleRatio = computeUnitInSamples(SAMPLE_RATE, 1, "msec")
            n_metro_setRate(n_0_120_STATE, 200)
            n_0_120_STATE.tickCallback = function () {
                n_metro_scheduleNextTick(n_0_120_STATE)
            }
        })
    

            const n_0_114_STATE = {
                busName: "genMetro",
            }
        
commons_waitFrame(0, () => n_0_117_RCVS_0(msg_bang()))

        const n_0_117_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_0_117_STATE.outTemplates[0] = []
            
                n_0_117_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_0_117_STATE.outMessages[0] = msg_create(n_0_117_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_0_117_STATE.outMessages[0], 0, 0.01)
            
        
        
        n_0_117_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_0_117_STATE.outMessages[0]
                }
,
        ]
    

        const n_133_17_STATE = {
            floatInputs: new Map(),
            stringInputs: new Map(),
            outputs: new Array(1),
        }

        n_133_17_STATE.floatInputs.set(1, 0)
        
    

                const n_1_1_STATE = {
                    minValue: 0,
                    maxValue: 1,
                    valueFloat: 0,
                    value: msg_create([]),
                    receiveBusName: "empty",
                    sendBusName: "empty",
                    messageReceiver: n_control_defaultMessageHandler,
                    messageSender: n_control_defaultMessageHandler,
                }
    
                commons_waitEngineConfigure(() => {
                    n_1_1_STATE.messageReceiver = function (m) {
                        n_tgl_receiveMessage(n_1_1_STATE, m)
                    }
                    n_1_1_STATE.messageSender = n_1_5_RCVS_0
                    n_control_setReceiveBusName(n_1_1_STATE, "empty")
                })
    
                
            

        const n_1_5_STATE = {
            rate: 0,
            sampleRatio: 1,
            skedId: SKED_ID_NULL,
            realNextTick: -1,
            snd0: n_1_2_RCVS_0,
            tickCallback: function () {},
        }

        commons_waitEngineConfigure(() => {
            n_1_5_STATE.sampleRatio = computeUnitInSamples(SAMPLE_RATE, 1, "msec")
            n_metro_setRate(n_1_5_STATE, 20000)
            n_1_5_STATE.tickCallback = function () {
                n_metro_scheduleNextTick(n_1_5_STATE)
            }
        })
    

        const n_1_2_STATE = {
            value: msg_create([]),
            receiveBusName: "empty",
            sendBusName: "empty",
            messageReceiver: n_control_defaultMessageHandler,
            messageSender: n_control_defaultMessageHandler,
        }
    
        commons_waitEngineConfigure(() => {
            n_1_2_STATE.messageReceiver = function (m) {
                n_bang_receiveMessage(n_1_2_STATE, m)
            }
            n_1_2_STATE.messageSender = n_1_3_RCVS_0
            n_control_setReceiveBusName(n_1_2_STATE, "empty")
        })

        
    

            const n_1_3_STATE = {
                busName: "tempo",
            }
        

        const n_1_6_STATE = {
            value: msg_create([]),
            receiveBusName: "empty",
            sendBusName: "empty",
            messageReceiver: n_control_defaultMessageHandler,
            messageSender: n_control_defaultMessageHandler,
        }
    
        commons_waitEngineConfigure(() => {
            n_1_6_STATE.messageReceiver = function (m) {
                n_bang_receiveMessage(n_1_6_STATE, m)
            }
            n_1_6_STATE.messageSender = n_1_9_RCVS_0
            n_control_setReceiveBusName(n_1_6_STATE, "empty")
        })

        
    


        const n_1_83_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_1_83_STATE.outTemplates[0] = []
            
                n_1_83_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_1_83_STATE.outTemplates[0].push(4)
            

                n_1_83_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_1_83_STATE.outTemplates[0].push(7)
            

                n_1_83_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_1_83_STATE.outTemplates[0].push(5)
            

                n_1_83_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_1_83_STATE.outTemplates[0].push(2)
            
            n_1_83_STATE.outMessages[0] = msg_create(n_1_83_STATE.outTemplates[0])
            
                msg_writeStringToken(n_1_83_STATE.outMessages[0], 0, "read")
            

                msg_writeStringToken(n_1_83_STATE.outMessages[0], 1, "-resize")
            

                msg_writeStringToken(n_1_83_STATE.outMessages[0], 2, "1.wav")
            

                msg_writeStringToken(n_1_83_STATE.outMessages[0], 3, "n1")
            
        
        
        n_1_83_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_1_83_STATE.outMessages[0]
                }
,
        ]
    

        const n_1_8_STATE = {
            operations: new Map(),
        }
    

        const n_1_12_STATE = {
                leftOp: 0,
                rightOp: 0,
            }
            n_div_setLeft(n_1_12_STATE, 0)
            n_div_setRight(n_1_12_STATE, 1)
        

        const n_1_13_STATE = {
                leftOp: 0,
                rightOp: 0,
            }
            n_mul_setLeft(n_1_13_STATE, 0)
            n_mul_setRight(n_1_13_STATE, 1000)
        

            const n_1_14_STATE = {
                value: msg_floats([0]),
                receiveBusName: "empty",
                sendBusName: "empty",
                messageReceiver: n_control_defaultMessageHandler,
                messageSender: n_control_defaultMessageHandler,
            }
        
            commons_waitEngineConfigure(() => {
                n_1_14_STATE.messageReceiver = function (m) {
                    n_floatatom_receiveMessage(n_1_14_STATE, m)
                }
                n_1_14_STATE.messageSender = n_1_14_SNDS_0
                n_control_setReceiveBusName(n_1_14_STATE, "empty")
            })
        

            const n_1_27_STATE = {
                busName: "totalSampleLength_n1",
            }
        


        const n_1_99_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_1_99_STATE.outTemplates[0] = []
            
                n_1_99_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_1_99_STATE.outMessages[0] = msg_create(n_1_99_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_1_99_STATE.outMessages[0], 0, 0)
            
        
        
        n_1_99_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_1_99_STATE.outMessages[0]
                }
,
        ]
    

        const n_1_84_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_1_84_STATE.outTemplates[0] = []
            
                n_1_84_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_1_84_STATE.outTemplates[0].push(4)
            

                n_1_84_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_1_84_STATE.outTemplates[0].push(7)
            

                n_1_84_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_1_84_STATE.outTemplates[0].push(5)
            

                n_1_84_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_1_84_STATE.outTemplates[0].push(2)
            
            n_1_84_STATE.outMessages[0] = msg_create(n_1_84_STATE.outTemplates[0])
            
                msg_writeStringToken(n_1_84_STATE.outMessages[0], 0, "read")
            

                msg_writeStringToken(n_1_84_STATE.outMessages[0], 1, "-resize")
            

                msg_writeStringToken(n_1_84_STATE.outMessages[0], 2, "2.wav")
            

                msg_writeStringToken(n_1_84_STATE.outMessages[0], 3, "n2")
            
        
        
        n_1_84_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_1_84_STATE.outMessages[0]
                }
,
        ]
    

        const n_1_28_STATE = {
            operations: new Map(),
        }
    

        const n_1_29_STATE = {
                leftOp: 0,
                rightOp: 0,
            }
            n_div_setLeft(n_1_29_STATE, 0)
            n_div_setRight(n_1_29_STATE, 1)
        

        const n_1_30_STATE = {
                leftOp: 0,
                rightOp: 0,
            }
            n_mul_setLeft(n_1_30_STATE, 0)
            n_mul_setRight(n_1_30_STATE, 1000)
        

            const n_1_31_STATE = {
                value: msg_floats([0]),
                receiveBusName: "empty",
                sendBusName: "empty",
                messageReceiver: n_control_defaultMessageHandler,
                messageSender: n_control_defaultMessageHandler,
            }
        
            commons_waitEngineConfigure(() => {
                n_1_31_STATE.messageReceiver = function (m) {
                    n_floatatom_receiveMessage(n_1_31_STATE, m)
                }
                n_1_31_STATE.messageSender = n_1_31_SNDS_0
                n_control_setReceiveBusName(n_1_31_STATE, "empty")
            })
        

            const n_1_82_STATE = {
                busName: "totalSampleLength_n2",
            }
        


        const n_1_102_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_1_102_STATE.outTemplates[0] = []
            
                n_1_102_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_1_102_STATE.outMessages[0] = msg_create(n_1_102_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_1_102_STATE.outMessages[0], 0, 1)
            
        
        
        n_1_102_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_1_102_STATE.outMessages[0]
                }
,
        ]
    

        const n_1_85_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_1_85_STATE.outTemplates[0] = []
            
                n_1_85_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_1_85_STATE.outTemplates[0].push(4)
            

                n_1_85_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_1_85_STATE.outTemplates[0].push(7)
            

                n_1_85_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_1_85_STATE.outTemplates[0].push(5)
            

                n_1_85_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_1_85_STATE.outTemplates[0].push(2)
            
            n_1_85_STATE.outMessages[0] = msg_create(n_1_85_STATE.outTemplates[0])
            
                msg_writeStringToken(n_1_85_STATE.outMessages[0], 0, "read")
            

                msg_writeStringToken(n_1_85_STATE.outMessages[0], 1, "-resize")
            

                msg_writeStringToken(n_1_85_STATE.outMessages[0], 2, "3.wav")
            

                msg_writeStringToken(n_1_85_STATE.outMessages[0], 3, "n3")
            
        
        
        n_1_85_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_1_85_STATE.outMessages[0]
                }
,
        ]
    

        const n_1_32_STATE = {
            operations: new Map(),
        }
    

        const n_1_33_STATE = {
                leftOp: 0,
                rightOp: 0,
            }
            n_div_setLeft(n_1_33_STATE, 0)
            n_div_setRight(n_1_33_STATE, 1)
        

        const n_1_34_STATE = {
                leftOp: 0,
                rightOp: 0,
            }
            n_mul_setLeft(n_1_34_STATE, 0)
            n_mul_setRight(n_1_34_STATE, 1000)
        

            const n_1_35_STATE = {
                value: msg_floats([0]),
                receiveBusName: "empty",
                sendBusName: "empty",
                messageReceiver: n_control_defaultMessageHandler,
                messageSender: n_control_defaultMessageHandler,
            }
        
            commons_waitEngineConfigure(() => {
                n_1_35_STATE.messageReceiver = function (m) {
                    n_floatatom_receiveMessage(n_1_35_STATE, m)
                }
                n_1_35_STATE.messageSender = n_1_35_SNDS_0
                n_control_setReceiveBusName(n_1_35_STATE, "empty")
            })
        

            const n_1_81_STATE = {
                busName: "totalSampleLength_n3",
            }
        


        const n_1_107_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_1_107_STATE.outTemplates[0] = []
            
                n_1_107_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_1_107_STATE.outMessages[0] = msg_create(n_1_107_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_1_107_STATE.outMessages[0], 0, 2)
            
        
        
        n_1_107_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_1_107_STATE.outMessages[0]
                }
,
        ]
    

        const n_1_86_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_1_86_STATE.outTemplates[0] = []
            
                n_1_86_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_1_86_STATE.outTemplates[0].push(4)
            

                n_1_86_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_1_86_STATE.outTemplates[0].push(7)
            

                n_1_86_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_1_86_STATE.outTemplates[0].push(5)
            

                n_1_86_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_1_86_STATE.outTemplates[0].push(2)
            
            n_1_86_STATE.outMessages[0] = msg_create(n_1_86_STATE.outTemplates[0])
            
                msg_writeStringToken(n_1_86_STATE.outMessages[0], 0, "read")
            

                msg_writeStringToken(n_1_86_STATE.outMessages[0], 1, "-resize")
            

                msg_writeStringToken(n_1_86_STATE.outMessages[0], 2, "4.wav")
            

                msg_writeStringToken(n_1_86_STATE.outMessages[0], 3, "n4")
            
        
        
        n_1_86_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_1_86_STATE.outMessages[0]
                }
,
        ]
    

        const n_1_36_STATE = {
            operations: new Map(),
        }
    

        const n_1_37_STATE = {
                leftOp: 0,
                rightOp: 0,
            }
            n_div_setLeft(n_1_37_STATE, 0)
            n_div_setRight(n_1_37_STATE, 1)
        

        const n_1_38_STATE = {
                leftOp: 0,
                rightOp: 0,
            }
            n_mul_setLeft(n_1_38_STATE, 0)
            n_mul_setRight(n_1_38_STATE, 1000)
        

            const n_1_39_STATE = {
                value: msg_floats([0]),
                receiveBusName: "empty",
                sendBusName: "empty",
                messageReceiver: n_control_defaultMessageHandler,
                messageSender: n_control_defaultMessageHandler,
            }
        
            commons_waitEngineConfigure(() => {
                n_1_39_STATE.messageReceiver = function (m) {
                    n_floatatom_receiveMessage(n_1_39_STATE, m)
                }
                n_1_39_STATE.messageSender = n_1_39_SNDS_0
                n_control_setReceiveBusName(n_1_39_STATE, "empty")
            })
        

            const n_1_80_STATE = {
                busName: "totalSampleLength_n4",
            }
        


        const n_1_108_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_1_108_STATE.outTemplates[0] = []
            
                n_1_108_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_1_108_STATE.outMessages[0] = msg_create(n_1_108_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_1_108_STATE.outMessages[0], 0, 3)
            
        
        
        n_1_108_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_1_108_STATE.outMessages[0]
                }
,
        ]
    

        const n_1_87_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_1_87_STATE.outTemplates[0] = []
            
                n_1_87_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_1_87_STATE.outTemplates[0].push(4)
            

                n_1_87_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_1_87_STATE.outTemplates[0].push(7)
            

                n_1_87_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_1_87_STATE.outTemplates[0].push(5)
            

                n_1_87_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_1_87_STATE.outTemplates[0].push(2)
            
            n_1_87_STATE.outMessages[0] = msg_create(n_1_87_STATE.outTemplates[0])
            
                msg_writeStringToken(n_1_87_STATE.outMessages[0], 0, "read")
            

                msg_writeStringToken(n_1_87_STATE.outMessages[0], 1, "-resize")
            

                msg_writeStringToken(n_1_87_STATE.outMessages[0], 2, "5.wav")
            

                msg_writeStringToken(n_1_87_STATE.outMessages[0], 3, "n5")
            
        
        
        n_1_87_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_1_87_STATE.outMessages[0]
                }
,
        ]
    

        const n_1_40_STATE = {
            operations: new Map(),
        }
    

        const n_1_41_STATE = {
                leftOp: 0,
                rightOp: 0,
            }
            n_div_setLeft(n_1_41_STATE, 0)
            n_div_setRight(n_1_41_STATE, 1)
        

        const n_1_42_STATE = {
                leftOp: 0,
                rightOp: 0,
            }
            n_mul_setLeft(n_1_42_STATE, 0)
            n_mul_setRight(n_1_42_STATE, 1000)
        

            const n_1_43_STATE = {
                value: msg_floats([0]),
                receiveBusName: "empty",
                sendBusName: "empty",
                messageReceiver: n_control_defaultMessageHandler,
                messageSender: n_control_defaultMessageHandler,
            }
        
            commons_waitEngineConfigure(() => {
                n_1_43_STATE.messageReceiver = function (m) {
                    n_floatatom_receiveMessage(n_1_43_STATE, m)
                }
                n_1_43_STATE.messageSender = n_1_43_SNDS_0
                n_control_setReceiveBusName(n_1_43_STATE, "empty")
            })
        

            const n_1_79_STATE = {
                busName: "totalSampleLength_n5",
            }
        


        const n_1_117_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_1_117_STATE.outTemplates[0] = []
            
                n_1_117_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_1_117_STATE.outMessages[0] = msg_create(n_1_117_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_1_117_STATE.outMessages[0], 0, 4)
            
        
        
        n_1_117_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_1_117_STATE.outMessages[0]
                }
,
        ]
    

        const n_1_88_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_1_88_STATE.outTemplates[0] = []
            
                n_1_88_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_1_88_STATE.outTemplates[0].push(4)
            

                n_1_88_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_1_88_STATE.outTemplates[0].push(7)
            

                n_1_88_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_1_88_STATE.outTemplates[0].push(5)
            

                n_1_88_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_1_88_STATE.outTemplates[0].push(2)
            
            n_1_88_STATE.outMessages[0] = msg_create(n_1_88_STATE.outTemplates[0])
            
                msg_writeStringToken(n_1_88_STATE.outMessages[0], 0, "read")
            

                msg_writeStringToken(n_1_88_STATE.outMessages[0], 1, "-resize")
            

                msg_writeStringToken(n_1_88_STATE.outMessages[0], 2, "6.wav")
            

                msg_writeStringToken(n_1_88_STATE.outMessages[0], 3, "n6")
            
        
        
        n_1_88_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_1_88_STATE.outMessages[0]
                }
,
        ]
    

        const n_1_44_STATE = {
            operations: new Map(),
        }
    

        const n_1_45_STATE = {
                leftOp: 0,
                rightOp: 0,
            }
            n_div_setLeft(n_1_45_STATE, 0)
            n_div_setRight(n_1_45_STATE, 1)
        

        const n_1_46_STATE = {
                leftOp: 0,
                rightOp: 0,
            }
            n_mul_setLeft(n_1_46_STATE, 0)
            n_mul_setRight(n_1_46_STATE, 1000)
        

            const n_1_47_STATE = {
                value: msg_floats([0]),
                receiveBusName: "empty",
                sendBusName: "empty",
                messageReceiver: n_control_defaultMessageHandler,
                messageSender: n_control_defaultMessageHandler,
            }
        
            commons_waitEngineConfigure(() => {
                n_1_47_STATE.messageReceiver = function (m) {
                    n_floatatom_receiveMessage(n_1_47_STATE, m)
                }
                n_1_47_STATE.messageSender = n_1_47_SNDS_0
                n_control_setReceiveBusName(n_1_47_STATE, "empty")
            })
        

            const n_1_78_STATE = {
                busName: "totalSampleLength_n6",
            }
        


        const n_1_118_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_1_118_STATE.outTemplates[0] = []
            
                n_1_118_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_1_118_STATE.outMessages[0] = msg_create(n_1_118_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_1_118_STATE.outMessages[0], 0, 5)
            
        
        
        n_1_118_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_1_118_STATE.outMessages[0]
                }
,
        ]
    

        const n_1_89_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_1_89_STATE.outTemplates[0] = []
            
                n_1_89_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_1_89_STATE.outTemplates[0].push(4)
            

                n_1_89_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_1_89_STATE.outTemplates[0].push(7)
            

                n_1_89_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_1_89_STATE.outTemplates[0].push(5)
            

                n_1_89_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_1_89_STATE.outTemplates[0].push(2)
            
            n_1_89_STATE.outMessages[0] = msg_create(n_1_89_STATE.outTemplates[0])
            
                msg_writeStringToken(n_1_89_STATE.outMessages[0], 0, "read")
            

                msg_writeStringToken(n_1_89_STATE.outMessages[0], 1, "-resize")
            

                msg_writeStringToken(n_1_89_STATE.outMessages[0], 2, "7.wav")
            

                msg_writeStringToken(n_1_89_STATE.outMessages[0], 3, "n7")
            
        
        
        n_1_89_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_1_89_STATE.outMessages[0]
                }
,
        ]
    

        const n_1_48_STATE = {
            operations: new Map(),
        }
    

        const n_1_49_STATE = {
                leftOp: 0,
                rightOp: 0,
            }
            n_div_setLeft(n_1_49_STATE, 0)
            n_div_setRight(n_1_49_STATE, 1)
        

        const n_1_50_STATE = {
                leftOp: 0,
                rightOp: 0,
            }
            n_mul_setLeft(n_1_50_STATE, 0)
            n_mul_setRight(n_1_50_STATE, 1000)
        

            const n_1_51_STATE = {
                value: msg_floats([0]),
                receiveBusName: "empty",
                sendBusName: "empty",
                messageReceiver: n_control_defaultMessageHandler,
                messageSender: n_control_defaultMessageHandler,
            }
        
            commons_waitEngineConfigure(() => {
                n_1_51_STATE.messageReceiver = function (m) {
                    n_floatatom_receiveMessage(n_1_51_STATE, m)
                }
                n_1_51_STATE.messageSender = n_1_51_SNDS_0
                n_control_setReceiveBusName(n_1_51_STATE, "empty")
            })
        

            const n_1_77_STATE = {
                busName: "totalSampleLength_n7",
            }
        


        const n_1_119_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_1_119_STATE.outTemplates[0] = []
            
                n_1_119_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_1_119_STATE.outMessages[0] = msg_create(n_1_119_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_1_119_STATE.outMessages[0], 0, 6)
            
        
        
        n_1_119_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_1_119_STATE.outMessages[0]
                }
,
        ]
    

        const n_1_90_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_1_90_STATE.outTemplates[0] = []
            
                n_1_90_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_1_90_STATE.outTemplates[0].push(4)
            

                n_1_90_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_1_90_STATE.outTemplates[0].push(7)
            

                n_1_90_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_1_90_STATE.outTemplates[0].push(5)
            

                n_1_90_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_1_90_STATE.outTemplates[0].push(2)
            
            n_1_90_STATE.outMessages[0] = msg_create(n_1_90_STATE.outTemplates[0])
            
                msg_writeStringToken(n_1_90_STATE.outMessages[0], 0, "read")
            

                msg_writeStringToken(n_1_90_STATE.outMessages[0], 1, "-resize")
            

                msg_writeStringToken(n_1_90_STATE.outMessages[0], 2, "8.wav")
            

                msg_writeStringToken(n_1_90_STATE.outMessages[0], 3, "n8")
            
        
        
        n_1_90_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_1_90_STATE.outMessages[0]
                }
,
        ]
    

        const n_1_52_STATE = {
            operations: new Map(),
        }
    

        const n_1_53_STATE = {
                leftOp: 0,
                rightOp: 0,
            }
            n_div_setLeft(n_1_53_STATE, 0)
            n_div_setRight(n_1_53_STATE, 1)
        

        const n_1_54_STATE = {
                leftOp: 0,
                rightOp: 0,
            }
            n_mul_setLeft(n_1_54_STATE, 0)
            n_mul_setRight(n_1_54_STATE, 1000)
        

            const n_1_55_STATE = {
                value: msg_floats([0]),
                receiveBusName: "empty",
                sendBusName: "empty",
                messageReceiver: n_control_defaultMessageHandler,
                messageSender: n_control_defaultMessageHandler,
            }
        
            commons_waitEngineConfigure(() => {
                n_1_55_STATE.messageReceiver = function (m) {
                    n_floatatom_receiveMessage(n_1_55_STATE, m)
                }
                n_1_55_STATE.messageSender = n_1_55_SNDS_0
                n_control_setReceiveBusName(n_1_55_STATE, "empty")
            })
        

            const n_1_76_STATE = {
                busName: "totalSampleLength_n8",
            }
        


        const n_1_120_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_1_120_STATE.outTemplates[0] = []
            
                n_1_120_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_1_120_STATE.outMessages[0] = msg_create(n_1_120_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_1_120_STATE.outMessages[0], 0, 7)
            
        
        
        n_1_120_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_1_120_STATE.outMessages[0]
                }
,
        ]
    

        const n_1_91_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_1_91_STATE.outTemplates[0] = []
            
                n_1_91_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_1_91_STATE.outTemplates[0].push(4)
            

                n_1_91_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_1_91_STATE.outTemplates[0].push(7)
            

                n_1_91_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_1_91_STATE.outTemplates[0].push(5)
            

                n_1_91_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_1_91_STATE.outTemplates[0].push(2)
            
            n_1_91_STATE.outMessages[0] = msg_create(n_1_91_STATE.outTemplates[0])
            
                msg_writeStringToken(n_1_91_STATE.outMessages[0], 0, "read")
            

                msg_writeStringToken(n_1_91_STATE.outMessages[0], 1, "-resize")
            

                msg_writeStringToken(n_1_91_STATE.outMessages[0], 2, "9.wav")
            

                msg_writeStringToken(n_1_91_STATE.outMessages[0], 3, "n9")
            
        
        
        n_1_91_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_1_91_STATE.outMessages[0]
                }
,
        ]
    

        const n_1_56_STATE = {
            operations: new Map(),
        }
    

        const n_1_57_STATE = {
                leftOp: 0,
                rightOp: 0,
            }
            n_div_setLeft(n_1_57_STATE, 0)
            n_div_setRight(n_1_57_STATE, 1)
        

        const n_1_58_STATE = {
                leftOp: 0,
                rightOp: 0,
            }
            n_mul_setLeft(n_1_58_STATE, 0)
            n_mul_setRight(n_1_58_STATE, 1000)
        

            const n_1_59_STATE = {
                value: msg_floats([0]),
                receiveBusName: "empty",
                sendBusName: "empty",
                messageReceiver: n_control_defaultMessageHandler,
                messageSender: n_control_defaultMessageHandler,
            }
        
            commons_waitEngineConfigure(() => {
                n_1_59_STATE.messageReceiver = function (m) {
                    n_floatatom_receiveMessage(n_1_59_STATE, m)
                }
                n_1_59_STATE.messageSender = n_1_59_SNDS_0
                n_control_setReceiveBusName(n_1_59_STATE, "empty")
            })
        

            const n_1_75_STATE = {
                busName: "totalSampleLength_n9",
            }
        


        const n_1_129_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_1_129_STATE.outTemplates[0] = []
            
                n_1_129_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_1_129_STATE.outMessages[0] = msg_create(n_1_129_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_1_129_STATE.outMessages[0], 0, 8)
            
        
        
        n_1_129_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_1_129_STATE.outMessages[0]
                }
,
        ]
    

        const n_1_92_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_1_92_STATE.outTemplates[0] = []
            
                n_1_92_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_1_92_STATE.outTemplates[0].push(4)
            

                n_1_92_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_1_92_STATE.outTemplates[0].push(7)
            

                n_1_92_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_1_92_STATE.outTemplates[0].push(6)
            

                n_1_92_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_1_92_STATE.outTemplates[0].push(3)
            
            n_1_92_STATE.outMessages[0] = msg_create(n_1_92_STATE.outTemplates[0])
            
                msg_writeStringToken(n_1_92_STATE.outMessages[0], 0, "read")
            

                msg_writeStringToken(n_1_92_STATE.outMessages[0], 1, "-resize")
            

                msg_writeStringToken(n_1_92_STATE.outMessages[0], 2, "10.wav")
            

                msg_writeStringToken(n_1_92_STATE.outMessages[0], 3, "n10")
            
        
        
        n_1_92_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_1_92_STATE.outMessages[0]
                }
,
        ]
    

        const n_1_60_STATE = {
            operations: new Map(),
        }
    

        const n_1_61_STATE = {
                leftOp: 0,
                rightOp: 0,
            }
            n_div_setLeft(n_1_61_STATE, 0)
            n_div_setRight(n_1_61_STATE, 1)
        

        const n_1_62_STATE = {
                leftOp: 0,
                rightOp: 0,
            }
            n_mul_setLeft(n_1_62_STATE, 0)
            n_mul_setRight(n_1_62_STATE, 1000)
        

            const n_1_63_STATE = {
                value: msg_floats([0]),
                receiveBusName: "empty",
                sendBusName: "empty",
                messageReceiver: n_control_defaultMessageHandler,
                messageSender: n_control_defaultMessageHandler,
            }
        
            commons_waitEngineConfigure(() => {
                n_1_63_STATE.messageReceiver = function (m) {
                    n_floatatom_receiveMessage(n_1_63_STATE, m)
                }
                n_1_63_STATE.messageSender = n_1_63_SNDS_0
                n_control_setReceiveBusName(n_1_63_STATE, "empty")
            })
        

            const n_1_74_STATE = {
                busName: "totalSampleLength_n10",
            }
        


        const n_1_130_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_1_130_STATE.outTemplates[0] = []
            
                n_1_130_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_1_130_STATE.outMessages[0] = msg_create(n_1_130_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_1_130_STATE.outMessages[0], 0, 9)
            
        
        
        n_1_130_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_1_130_STATE.outMessages[0]
                }
,
        ]
    

        const n_1_93_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_1_93_STATE.outTemplates[0] = []
            
                n_1_93_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_1_93_STATE.outTemplates[0].push(4)
            

                n_1_93_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_1_93_STATE.outTemplates[0].push(7)
            

                n_1_93_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_1_93_STATE.outTemplates[0].push(6)
            

                n_1_93_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_1_93_STATE.outTemplates[0].push(3)
            
            n_1_93_STATE.outMessages[0] = msg_create(n_1_93_STATE.outTemplates[0])
            
                msg_writeStringToken(n_1_93_STATE.outMessages[0], 0, "read")
            

                msg_writeStringToken(n_1_93_STATE.outMessages[0], 1, "-resize")
            

                msg_writeStringToken(n_1_93_STATE.outMessages[0], 2, "11.wav")
            

                msg_writeStringToken(n_1_93_STATE.outMessages[0], 3, "n11")
            
        
        
        n_1_93_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_1_93_STATE.outMessages[0]
                }
,
        ]
    

        const n_1_64_STATE = {
            operations: new Map(),
        }
    

        const n_1_65_STATE = {
                leftOp: 0,
                rightOp: 0,
            }
            n_div_setLeft(n_1_65_STATE, 0)
            n_div_setRight(n_1_65_STATE, 1)
        

        const n_1_66_STATE = {
                leftOp: 0,
                rightOp: 0,
            }
            n_mul_setLeft(n_1_66_STATE, 0)
            n_mul_setRight(n_1_66_STATE, 1000)
        

            const n_1_67_STATE = {
                value: msg_floats([0]),
                receiveBusName: "empty",
                sendBusName: "empty",
                messageReceiver: n_control_defaultMessageHandler,
                messageSender: n_control_defaultMessageHandler,
            }
        
            commons_waitEngineConfigure(() => {
                n_1_67_STATE.messageReceiver = function (m) {
                    n_floatatom_receiveMessage(n_1_67_STATE, m)
                }
                n_1_67_STATE.messageSender = n_1_67_SNDS_0
                n_control_setReceiveBusName(n_1_67_STATE, "empty")
            })
        

            const n_1_73_STATE = {
                busName: "totalSampleLength_n11",
            }
        


        const n_1_131_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_1_131_STATE.outTemplates[0] = []
            
                n_1_131_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_1_131_STATE.outMessages[0] = msg_create(n_1_131_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_1_131_STATE.outMessages[0], 0, 10)
            
        
        
        n_1_131_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_1_131_STATE.outMessages[0]
                }
,
        ]
    

        const n_1_94_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_1_94_STATE.outTemplates[0] = []
            
                n_1_94_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_1_94_STATE.outTemplates[0].push(4)
            

                n_1_94_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_1_94_STATE.outTemplates[0].push(7)
            

                n_1_94_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_1_94_STATE.outTemplates[0].push(6)
            

                n_1_94_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_1_94_STATE.outTemplates[0].push(3)
            
            n_1_94_STATE.outMessages[0] = msg_create(n_1_94_STATE.outTemplates[0])
            
                msg_writeStringToken(n_1_94_STATE.outMessages[0], 0, "read")
            

                msg_writeStringToken(n_1_94_STATE.outMessages[0], 1, "-resize")
            

                msg_writeStringToken(n_1_94_STATE.outMessages[0], 2, "12.wav")
            

                msg_writeStringToken(n_1_94_STATE.outMessages[0], 3, "n12")
            
        
        
        n_1_94_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_1_94_STATE.outMessages[0]
                }
,
        ]
    

        const n_1_68_STATE = {
            operations: new Map(),
        }
    

        const n_1_69_STATE = {
                leftOp: 0,
                rightOp: 0,
            }
            n_div_setLeft(n_1_69_STATE, 0)
            n_div_setRight(n_1_69_STATE, 1)
        

        const n_1_70_STATE = {
                leftOp: 0,
                rightOp: 0,
            }
            n_mul_setLeft(n_1_70_STATE, 0)
            n_mul_setRight(n_1_70_STATE, 1000)
        

            const n_1_71_STATE = {
                value: msg_floats([0]),
                receiveBusName: "empty",
                sendBusName: "empty",
                messageReceiver: n_control_defaultMessageHandler,
                messageSender: n_control_defaultMessageHandler,
            }
        
            commons_waitEngineConfigure(() => {
                n_1_71_STATE.messageReceiver = function (m) {
                    n_floatatom_receiveMessage(n_1_71_STATE, m)
                }
                n_1_71_STATE.messageSender = n_1_71_SNDS_0
                n_control_setReceiveBusName(n_1_71_STATE, "empty")
            })
        

            const n_1_72_STATE = {
                busName: "totalSampleLength_n12",
            }
        


        const n_1_132_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_1_132_STATE.outTemplates[0] = []
            
                n_1_132_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_1_132_STATE.outMessages[0] = msg_create(n_1_132_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_1_132_STATE.outMessages[0], 0, 11)
            
        
        
        n_1_132_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_1_132_STATE.outMessages[0]
                }
,
        ]
    


        const n_1_10_STATE = {
                leftOp: 0,
                rightOp: 0,
            }
            n_div_setLeft(n_1_10_STATE, 0)
            n_div_setRight(n_1_10_STATE, 1000)
        

            const n_1_11_STATE = {
                busName: "msRate",
            }
        
commons_waitFrame(0, () => n_1_9_RCVS_0(msg_bang()))
commons_waitFrame(0, () => n_1_138_RCVS_0(msg_bang()))

        const n_1_138_STATE = {
            delay: 0,
            sampleRatio: 1,
            scheduledBang: SKED_ID_NULL,
        }

        commons_waitEngineConfigure(() => {
            n_1_138_STATE.sampleRatio = computeUnitInSamples(SAMPLE_RATE, 1, "msec")
            n_delay_setDelay(n_1_138_STATE, 5)
        })
    

        const n_1_140_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_1_140_STATE.outTemplates[0] = []
            
                n_1_140_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_1_140_STATE.outMessages[0] = msg_create(n_1_140_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_1_140_STATE.outMessages[0], 0, 1)
            
        
        
        n_1_140_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_1_140_STATE.outMessages[0]
                }
,
        ]
    

        const n_1_142_STATE = {
                leftOp: 0,
                rightOp: 0,
            }
            n_add_setLeft(n_1_142_STATE, 0)
            n_add_setRight(n_1_142_STATE, 0)
        

            const n_1_141_STATE = {
                value: msg_floats([0]),
                receiveBusName: "empty",
                sendBusName: "empty",
                messageReceiver: n_control_defaultMessageHandler,
                messageSender: n_control_defaultMessageHandler,
            }
        
            commons_waitEngineConfigure(() => {
                n_1_141_STATE.messageReceiver = function (m) {
                    n_floatatom_receiveMessage(n_1_141_STATE, m)
                }
                n_1_141_STATE.messageSender = n_1_141_SNDS_0
                n_control_setReceiveBusName(n_1_141_STATE, "empty")
            })
        

        const n_1_143_STATE = {
                leftOp: 0,
                rightOp: 0,
            }
            n_modlegacy_setLeft(n_1_143_STATE, 0)
            n_modlegacy_setRight(n_1_143_STATE, 12)
        

            const n_1_144_STATE = {
                value: msg_floats([0]),
                receiveBusName: "empty",
                sendBusName: "empty",
                messageReceiver: n_control_defaultMessageHandler,
                messageSender: n_control_defaultMessageHandler,
            }
        
            commons_waitEngineConfigure(() => {
                n_1_144_STATE.messageReceiver = function (m) {
                    n_floatatom_receiveMessage(n_1_144_STATE, m)
                }
                n_1_144_STATE.messageSender = n_1_145_RCVS_0
                n_control_setReceiveBusName(n_1_144_STATE, "empty")
            })
        

            const n_1_145_STATE = {
                value: 0,
            }
            n_float_int_setValueInt(n_1_145_STATE, 0)
        


        const n_69_10_STATE = {
            floatFilter: 0,
            stringFilter: "seed",
            filterType: MSG_STRING_TOKEN,
        }
    

        const n_69_11_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
        
        n_69_11_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
            
            
            let stringMem = []
            n_69_11_STATE.outTemplates[0] = []
            
                n_69_11_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_69_11_STATE.outTemplates[0].push(4)
            

                n_69_11_STATE.outTemplates[0].push(msg_getTokenType(inMessage, 0))
                if (msg_isStringToken(inMessage, 0)) {
                    stringMem[0] = msg_readStringToken(inMessage, 0)
                    n_69_11_STATE.outTemplates[0].push(stringMem[0].length)
                }
            
            n_69_11_STATE.outMessages[0] = msg_create(n_69_11_STATE.outTemplates[0])
            
                msg_writeStringToken(n_69_11_STATE.outMessages[0], 0, "seed")
            

                if (msg_isFloatToken(inMessage, 0)) {
                    msg_writeFloatToken(n_69_11_STATE.outMessages[0], 1, msg_readFloatToken(inMessage, 0))
                } else if (msg_isStringToken(inMessage, 0)) {
                    msg_writeStringToken(n_69_11_STATE.outMessages[0], 1, stringMem[0])
                }
            
        
                    return n_69_11_STATE.outMessages[0]
                }
,
        ]
    

        const n_69_5_STATE = {
            maxValue: 12
        }
    


        const n_1_150_STATE = {
                leftOp: 0,
                rightOp: 0,
            }
            n_eq_setLeft(n_1_150_STATE, 0)
            n_eq_setRight(n_1_150_STATE, 0)
        

        const n_1_156_STATE = {
                leftOp: 0,
                rightOp: 0,
            }
            n_add_setLeft(n_1_156_STATE, 0)
            n_add_setRight(n_1_156_STATE, 0)
        

        const n_1_176_STATE = {
                leftOp: 0,
                rightOp: 0,
            }
            n_add_setLeft(n_1_176_STATE, 0)
            n_add_setRight(n_1_176_STATE, 0)
        

        const n_1_157_STATE = {
            floatFilter: 0,
            stringFilter: "0",
            filterType: MSG_FLOAT_TOKEN,
        }
    

        const n_1_158_STATE = {
            value: msg_create([]),
            receiveBusName: "empty",
            sendBusName: "empty",
            messageReceiver: n_control_defaultMessageHandler,
            messageSender: n_control_defaultMessageHandler,
        }
    
        commons_waitEngineConfigure(() => {
            n_1_158_STATE.messageReceiver = function (m) {
                n_bang_receiveMessage(n_1_158_STATE, m)
            }
            n_1_158_STATE.messageSender = n_1_161_RCVS_0
            n_control_setReceiveBusName(n_1_158_STATE, "empty")
        })

        
    

            const n_1_161_STATE = {
                value: 0,
            }
            n_float_int_setValueFloat(n_1_161_STATE, 0)
        

            const n_1_162_STATE = {
                busName: "nuSong",
            }
        

        const n_1_159_STATE = {
            value: msg_create([]),
            receiveBusName: "empty",
            sendBusName: "empty",
            messageReceiver: n_control_defaultMessageHandler,
            messageSender: n_control_defaultMessageHandler,
        }
    
        commons_waitEngineConfigure(() => {
            n_1_159_STATE.messageReceiver = function (m) {
                n_bang_receiveMessage(n_1_159_STATE, m)
            }
            n_1_159_STATE.messageSender = n_1_160_RCVS_0
            n_control_setReceiveBusName(n_1_159_STATE, "empty")
        })

        
    

            const n_1_160_STATE = {
                busName: "getNewSong",
            }
        

            const n_1_178_STATE = {
                value: msg_floats([0]),
                receiveBusName: "empty",
                sendBusName: "empty",
                messageReceiver: n_control_defaultMessageHandler,
                messageSender: n_control_defaultMessageHandler,
            }
        
            commons_waitEngineConfigure(() => {
                n_1_178_STATE.messageReceiver = function (m) {
                    n_floatatom_receiveMessage(n_1_178_STATE, m)
                }
                n_1_178_STATE.messageSender = SND_TO_NULL
                n_control_setReceiveBusName(n_1_178_STATE, "empty")
            })
        

        const n_1_153_STATE = {
                leftOp: 0,
                rightOp: 0,
            }
            n_eq_setLeft(n_1_153_STATE, 0)
            n_eq_setRight(n_1_153_STATE, 0)
        

        const n_1_165_STATE = {
                leftOp: 0,
                rightOp: 0,
            }
            n_eq_setLeft(n_1_165_STATE, 0)
            n_eq_setRight(n_1_165_STATE, 0)
        

        const n_1_173_STATE = {
                leftOp: 0,
                rightOp: 0,
            }
            n_add_setLeft(n_1_173_STATE, 0)
            n_add_setRight(n_1_173_STATE, 0)
        

            const n_1_177_STATE = {
                value: msg_floats([0]),
                receiveBusName: "empty",
                sendBusName: "empty",
                messageReceiver: n_control_defaultMessageHandler,
                messageSender: n_control_defaultMessageHandler,
            }
        
            commons_waitEngineConfigure(() => {
                n_1_177_STATE.messageReceiver = function (m) {
                    n_floatatom_receiveMessage(n_1_177_STATE, m)
                }
                n_1_177_STATE.messageSender = SND_TO_NULL
                n_control_setReceiveBusName(n_1_177_STATE, "empty")
            })
        

        const n_1_169_STATE = {
                leftOp: 0,
                rightOp: 0,
            }
            n_eq_setLeft(n_1_169_STATE, 0)
            n_eq_setRight(n_1_169_STATE, 0)
        


        const n_1_175_STATE = {
                leftOp: 0,
                rightOp: 0,
            }
            n_sub_setLeft(n_1_175_STATE, 0)
            n_sub_setRight(n_1_175_STATE, 4)
        

        const n_1_174_STATE = {
                leftOp: 0,
                rightOp: 0,
            }
            n_sub_setLeft(n_1_174_STATE, 0)
            n_sub_setRight(n_1_174_STATE, 3)
        

        const n_1_166_STATE = {
                leftOp: 0,
                rightOp: 0,
            }
            n_sub_setLeft(n_1_166_STATE, 0)
            n_sub_setRight(n_1_166_STATE, 2)
        

        const n_1_172_STATE = {
                leftOp: 0,
                rightOp: 0,
            }
            n_sub_setLeft(n_1_172_STATE, 0)
            n_sub_setRight(n_1_172_STATE, 1)
        

        const n_1_135_STATE = {
            value: msg_create([]),
            receiveBusName: "empty",
            sendBusName: "empty",
            messageReceiver: n_control_defaultMessageHandler,
            messageSender: n_control_defaultMessageHandler,
        }
    
        commons_waitEngineConfigure(() => {
            n_1_135_STATE.messageReceiver = function (m) {
                n_bang_receiveMessage(n_1_135_STATE, m)
            }
            n_1_135_STATE.messageSender = n_1_140_RCVS_0
            n_control_setReceiveBusName(n_1_135_STATE, "empty")
        })

        
    

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("songSelectaBang", n_28_17_RCVS_0)
            })
        

        const n_28_17_STATE = {
            maxValue: 20
        }
    

            const n_28_1_STATE = {
                value: msg_floats([0]),
                receiveBusName: "empty",
                sendBusName: "empty",
                messageReceiver: n_control_defaultMessageHandler,
                messageSender: n_control_defaultMessageHandler,
            }
        
            commons_waitEngineConfigure(() => {
                n_28_1_STATE.messageReceiver = function (m) {
                    n_floatatom_receiveMessage(n_28_1_STATE, m)
                }
                n_28_1_STATE.messageSender = n_28_7_RCVS_0
                n_control_setReceiveBusName(n_28_1_STATE, "empty")
            })
        

        const n_28_7_STATE = {
            floatFilter: 0,
            stringFilter: "0",
            filterType: MSG_FLOAT_TOKEN,
        }
    

        const n_28_2_STATE = {
            value: msg_create([]),
            receiveBusName: "empty",
            sendBusName: "empty",
            messageReceiver: n_control_defaultMessageHandler,
            messageSender: n_control_defaultMessageHandler,
        }
    
        commons_waitEngineConfigure(() => {
            n_28_2_STATE.messageReceiver = function (m) {
                n_bang_receiveMessage(n_28_2_STATE, m)
            }
            n_28_2_STATE.messageSender = n_1_135_RCVS_0
            n_control_setReceiveBusName(n_28_2_STATE, "empty")
        })

        
    

        const n_28_16_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_28_16_STATE.outTemplates[0] = []
            
                n_28_16_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_28_16_STATE.outMessages[0] = msg_create(n_28_16_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_28_16_STATE.outMessages[0], 0, 0)
            
        
        
        n_28_16_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_28_16_STATE.outMessages[0]
                }
,
        ]
    

        const n_28_15_STATE = {
                leftOp: 0,
                rightOp: 0,
            }
            n_add_setLeft(n_28_15_STATE, 0)
            n_add_setRight(n_28_15_STATE, 0)
        

            const n_28_12_STATE = {
                value: msg_floats([0]),
                receiveBusName: "empty",
                sendBusName: "empty",
                messageReceiver: n_control_defaultMessageHandler,
                messageSender: n_control_defaultMessageHandler,
            }
        
            commons_waitEngineConfigure(() => {
                n_28_12_STATE.messageReceiver = function (m) {
                    n_floatatom_receiveMessage(n_28_12_STATE, m)
                }
                n_28_12_STATE.messageSender = n_28_12_SNDS_0
                n_control_setReceiveBusName(n_28_12_STATE, "empty")
            })
        

        const n_28_18_STATE = {
                leftOp: 0,
                rightOp: 0,
            }
            n_modlegacy_setLeft(n_28_18_STATE, 0)
            n_modlegacy_setRight(n_28_18_STATE, 70)
        

            const n_28_13_STATE = {
                value: msg_floats([0]),
                receiveBusName: "empty",
                sendBusName: "empty",
                messageReceiver: n_control_defaultMessageHandler,
                messageSender: n_control_defaultMessageHandler,
            }
        
            commons_waitEngineConfigure(() => {
                n_28_13_STATE.messageReceiver = function (m) {
                    n_floatatom_receiveMessage(n_28_13_STATE, m)
                }
                n_28_13_STATE.messageSender = n_28_14_RCVS_0
                n_control_setReceiveBusName(n_28_13_STATE, "empty")
            })
        

        const n_28_14_STATE = {
            floatFilter: 0,
            stringFilter: "0",
            filterType: MSG_FLOAT_TOKEN,
        }
    

        const n_28_9_STATE = {
            maxValue: 5
        }
    

        const n_28_10_STATE = {
            floatFilter: 0,
            stringFilter: "0",
            filterType: MSG_FLOAT_TOKEN,
        }
    

        const n_28_6_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_28_6_STATE.outTemplates[0] = []
            
                n_28_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_28_6_STATE.outMessages[0] = msg_create(n_28_6_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_28_6_STATE.outMessages[0], 0, 5)
            
        
        
        n_28_6_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_28_6_STATE.outMessages[0]
                }
,
        ]
    

        const n_28_3_STATE = {
            continueIter: true,
        }
    

        const n_28_8_STATE = {
            delay: 0,
            sampleRatio: 1,
            scheduledBang: SKED_ID_NULL,
        }

        commons_waitEngineConfigure(() => {
            n_28_8_STATE.sampleRatio = computeUnitInSamples(SAMPLE_RATE, 1, "msec")
            n_delay_setDelay(n_28_8_STATE, 210000)
        })
    

        const n_28_11_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_28_11_STATE.outTemplates[0] = []
            
                n_28_11_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_28_11_STATE.outMessages[0] = msg_create(n_28_11_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_28_11_STATE.outMessages[0], 0, 1)
            
        
        
        n_28_11_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_28_11_STATE.outMessages[0]
                }
,
        ]
    

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("getNewSong", n_1_145_RCVS_0)
            })
        

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("nuSong", SND_TO_NULL)
            })
        

            const n_1_152_STATE = {
                value: 0,
            }
            n_float_int_setValueFloat(n_1_152_STATE, 0)
        

            const n_1_155_STATE = {
                value: 0,
            }
            n_float_int_setValueFloat(n_1_155_STATE, 0)
        

            const n_1_168_STATE = {
                value: 0,
            }
            n_float_int_setValueFloat(n_1_168_STATE, 0)
        

            const n_1_171_STATE = {
                value: 0,
            }
            n_float_int_setValueFloat(n_1_171_STATE, 0)
        

            const n_1_180_STATE = {
                value: msg_floats([0]),
                receiveBusName: "empty",
                sendBusName: "empty",
                messageReceiver: n_control_defaultMessageHandler,
                messageSender: n_control_defaultMessageHandler,
            }
        
            commons_waitEngineConfigure(() => {
                n_1_180_STATE.messageReceiver = function (m) {
                    n_floatatom_receiveMessage(n_1_180_STATE, m)
                }
                n_1_180_STATE.messageSender = SND_TO_NULL
                n_control_setReceiveBusName(n_1_180_STATE, "empty")
            })
        

            const n_1_181_STATE = {
                value: msg_floats([0]),
                receiveBusName: "empty",
                sendBusName: "empty",
                messageReceiver: n_control_defaultMessageHandler,
                messageSender: n_control_defaultMessageHandler,
            }
        
            commons_waitEngineConfigure(() => {
                n_1_181_STATE.messageReceiver = function (m) {
                    n_floatatom_receiveMessage(n_1_181_STATE, m)
                }
                n_1_181_STATE.messageSender = n_1_179_RCVS_0
                n_control_setReceiveBusName(n_1_181_STATE, "empty")
            })
        

        const n_1_179_STATE = {
                leftOp: 0,
                rightOp: 0,
            }
            n_eq_setLeft(n_1_179_STATE, 0)
            n_eq_setRight(n_1_179_STATE, 0)
        

            const n_1_182_STATE = {
                value: msg_floats([0]),
                receiveBusName: "empty",
                sendBusName: "empty",
                messageReceiver: n_control_defaultMessageHandler,
                messageSender: n_control_defaultMessageHandler,
            }
        
            commons_waitEngineConfigure(() => {
                n_1_182_STATE.messageReceiver = function (m) {
                    n_floatatom_receiveMessage(n_1_182_STATE, m)
                }
                n_1_182_STATE.messageSender = n_1_179_RCVS_1
                n_control_setReceiveBusName(n_1_182_STATE, "empty")
            })
        

        const n_28_5_STATE = {
            value: msg_create([]),
            receiveBusName: "empty",
            sendBusName: "empty",
            messageReceiver: n_control_defaultMessageHandler,
            messageSender: n_control_defaultMessageHandler,
        }
    
        commons_waitEngineConfigure(() => {
            n_28_5_STATE.messageReceiver = function (m) {
                n_bang_receiveMessage(n_28_5_STATE, m)
            }
            n_28_5_STATE.messageSender = n_28_17_RCVS_0
            n_control_setReceiveBusName(n_28_5_STATE, "empty")
        })

        
    
commons_waitFrame(0, () => n_69_1_RCVS_0(msg_bang()))


        const n_69_4_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_69_4_STATE.outTemplates[0] = []
            
                n_69_4_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_69_4_STATE.outTemplates[0].push(5)
            
            n_69_4_STATE.outMessages[0] = msg_create(n_69_4_STATE.outTemplates[0])
            
                msg_writeStringToken(n_69_4_STATE.outMessages[0], 0, "Seed:")
            
        
        
        n_69_4_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_69_4_STATE.outMessages[0]
                }
,
        ]
    

        const n_69_17_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_69_17_STATE.outTemplates[0] = []
            
                n_69_17_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_69_17_STATE.outTemplates[0].push(4)
            

                n_69_17_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_69_17_STATE.outTemplates[0].push(10)
            
            n_69_17_STATE.outMessages[0] = msg_create(n_69_17_STATE.outTemplates[0])
            
                msg_writeStringToken(n_69_17_STATE.outMessages[0], 0, "read")
            

                msg_writeStringToken(n_69_17_STATE.outMessages[0], 1, "random2.pd")
            
        
        
        n_69_17_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_69_17_STATE.outMessages[0]
                }
,
        ]
    

            const n_69_20_STATE = {
                busName: "69-random2",
            }
        

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("69-seed", n_69_11_RCVS_0)
            })
        
commons_waitFrame(0, () => n_29_2_SNDS_0(msg_bang()))

        const n_29_3_STATE = {
            value: msg_create([]),
            receiveBusName: "empty",
            sendBusName: "empty",
            messageReceiver: n_control_defaultMessageHandler,
            messageSender: n_control_defaultMessageHandler,
        }
    
        commons_waitEngineConfigure(() => {
            n_29_3_STATE.messageReceiver = function (m) {
                n_bang_receiveMessage(n_29_3_STATE, m)
            }
            n_29_3_STATE.messageSender = n_34_1_RCVS_0
            n_control_setReceiveBusName(n_29_3_STATE, "empty")
        })

        
    

        const n_34_1_STATE = {
            maxValue: 800
        }
    

        const n_34_2_STATE = {
                leftOp: 0,
                rightOp: 0,
            }
            n_add_setLeft(n_34_2_STATE, 0)
            n_add_setRight(n_34_2_STATE, 30)
        

            const n_79_7_STATE = {
                currentValue: 0
            }
        


        const n_79_11_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
        
        n_79_11_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
            
            
            let stringMem = []
            n_79_11_STATE.outTemplates[0] = []
            
                n_79_11_STATE.outTemplates[0].push(msg_getTokenType(inMessage, 0))
                if (msg_isStringToken(inMessage, 0)) {
                    stringMem[0] = msg_readStringToken(inMessage, 0)
                    n_79_11_STATE.outTemplates[0].push(stringMem[0].length)
                }
            

                n_79_11_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_79_11_STATE.outMessages[0] = msg_create(n_79_11_STATE.outTemplates[0])
            
                if (msg_isFloatToken(inMessage, 0)) {
                    msg_writeFloatToken(n_79_11_STATE.outMessages[0], 0, msg_readFloatToken(inMessage, 0))
                } else if (msg_isStringToken(inMessage, 0)) {
                    msg_writeStringToken(n_79_11_STATE.outMessages[0], 0, stringMem[0])
                }
            

                msg_writeFloatToken(n_79_11_STATE.outMessages[0], 1, 100)
            
        
                    return n_79_11_STATE.outMessages[0]
                }
,
        ]
    

        const n_79_12_STATE = {
            currentLine: {
                p0: {x: -1, y: 0},
                p1: {x: -1, y: 0},
                dx: 1,
                dy: 0,
            },
            currentValue: 0,
            nextSamp: -1,
            nextSampInt: -1,
            grainSamp: 0,
            nextDurationSamp: 0,
            skedId: SKED_ID_NULL,
            snd0: m_n_79_5_0__routemsg_RCVS_0,
            tickCallback: function () {},
        }

        commons_waitEngineConfigure(() => {
            n_line_setGrain(n_79_12_STATE, 20)
            n_79_12_STATE.tickCallback = function () {
                n_line_tick(n_79_12_STATE)
            }
        })
    


            const m_n_79_5_0_sig_STATE = {
                currentValue: 250
            }
        

        const n_79_10_STATE = {
                leftOp: 0,
                rightOp: 0,
            }
            n_add_setLeft(n_79_10_STATE, 0)
            n_add_setRight(n_79_10_STATE, 0)
        

        const n_79_13_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
        
        n_79_13_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
            
            
            let stringMem = []
            n_79_13_STATE.outTemplates[0] = []
            
                n_79_13_STATE.outTemplates[0].push(msg_getTokenType(inMessage, 0))
                if (msg_isStringToken(inMessage, 0)) {
                    stringMem[0] = msg_readStringToken(inMessage, 0)
                    n_79_13_STATE.outTemplates[0].push(stringMem[0].length)
                }
            

                n_79_13_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_79_13_STATE.outMessages[0] = msg_create(n_79_13_STATE.outTemplates[0])
            
                if (msg_isFloatToken(inMessage, 0)) {
                    msg_writeFloatToken(n_79_13_STATE.outMessages[0], 0, msg_readFloatToken(inMessage, 0))
                } else if (msg_isStringToken(inMessage, 0)) {
                    msg_writeStringToken(n_79_13_STATE.outMessages[0], 0, stringMem[0])
                }
            

                msg_writeFloatToken(n_79_13_STATE.outMessages[0], 1, 100)
            
        
                    return n_79_13_STATE.outMessages[0]
                }
,
        ]
    

        const n_79_14_STATE = {
            currentLine: {
                p0: {x: -1, y: 0},
                p1: {x: -1, y: 0},
                dx: 1,
                dy: 0,
            },
            currentValue: 0,
            nextSamp: -1,
            nextSampInt: -1,
            grainSamp: 0,
            nextDurationSamp: 0,
            skedId: SKED_ID_NULL,
            snd0: m_n_79_17_0__routemsg_RCVS_0,
            tickCallback: function () {},
        }

        commons_waitEngineConfigure(() => {
            n_line_setGrain(n_79_14_STATE, 20)
            n_79_14_STATE.tickCallback = function () {
                n_line_tick(n_79_14_STATE)
            }
        })
    


            const m_n_79_17_0_sig_STATE = {
                currentValue: 250
            }
        

        const n_79_8_STATE = {
            maxValue: 50
        }
    

        const n_79_9_STATE = {
                leftOp: 0,
                rightOp: 0,
            }
            n_sub_setLeft(n_79_9_STATE, 0)
            n_sub_setRight(n_79_9_STATE, 25)
        

        const n_29_7_STATE = {
            value: msg_create([]),
            receiveBusName: "empty",
            sendBusName: "empty",
            messageReceiver: n_control_defaultMessageHandler,
            messageSender: n_control_defaultMessageHandler,
        }
    
        commons_waitEngineConfigure(() => {
            n_29_7_STATE.messageReceiver = function (m) {
                n_bang_receiveMessage(n_29_7_STATE, m)
            }
            n_29_7_STATE.messageSender = n_37_1_RCVS_0
            n_control_setReceiveBusName(n_29_7_STATE, "empty")
        })

        
    

        const n_37_1_STATE = {
            maxValue: 800
        }
    

        const n_37_2_STATE = {
                leftOp: 0,
                rightOp: 0,
            }
            n_add_setLeft(n_37_2_STATE, 0)
            n_add_setRight(n_37_2_STATE, 30)
        

            const n_82_7_STATE = {
                currentValue: 0
            }
        


        const n_82_11_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
        
        n_82_11_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
            
            
            let stringMem = []
            n_82_11_STATE.outTemplates[0] = []
            
                n_82_11_STATE.outTemplates[0].push(msg_getTokenType(inMessage, 0))
                if (msg_isStringToken(inMessage, 0)) {
                    stringMem[0] = msg_readStringToken(inMessage, 0)
                    n_82_11_STATE.outTemplates[0].push(stringMem[0].length)
                }
            

                n_82_11_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_82_11_STATE.outMessages[0] = msg_create(n_82_11_STATE.outTemplates[0])
            
                if (msg_isFloatToken(inMessage, 0)) {
                    msg_writeFloatToken(n_82_11_STATE.outMessages[0], 0, msg_readFloatToken(inMessage, 0))
                } else if (msg_isStringToken(inMessage, 0)) {
                    msg_writeStringToken(n_82_11_STATE.outMessages[0], 0, stringMem[0])
                }
            

                msg_writeFloatToken(n_82_11_STATE.outMessages[0], 1, 100)
            
        
                    return n_82_11_STATE.outMessages[0]
                }
,
        ]
    

        const n_82_12_STATE = {
            currentLine: {
                p0: {x: -1, y: 0},
                p1: {x: -1, y: 0},
                dx: 1,
                dy: 0,
            },
            currentValue: 0,
            nextSamp: -1,
            nextSampInt: -1,
            grainSamp: 0,
            nextDurationSamp: 0,
            skedId: SKED_ID_NULL,
            snd0: m_n_82_5_0__routemsg_RCVS_0,
            tickCallback: function () {},
        }

        commons_waitEngineConfigure(() => {
            n_line_setGrain(n_82_12_STATE, 20)
            n_82_12_STATE.tickCallback = function () {
                n_line_tick(n_82_12_STATE)
            }
        })
    


            const m_n_82_5_0_sig_STATE = {
                currentValue: 250
            }
        

        const n_82_10_STATE = {
                leftOp: 0,
                rightOp: 0,
            }
            n_add_setLeft(n_82_10_STATE, 0)
            n_add_setRight(n_82_10_STATE, 0)
        

        const n_82_13_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
        
        n_82_13_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
            
            
            let stringMem = []
            n_82_13_STATE.outTemplates[0] = []
            
                n_82_13_STATE.outTemplates[0].push(msg_getTokenType(inMessage, 0))
                if (msg_isStringToken(inMessage, 0)) {
                    stringMem[0] = msg_readStringToken(inMessage, 0)
                    n_82_13_STATE.outTemplates[0].push(stringMem[0].length)
                }
            

                n_82_13_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_82_13_STATE.outMessages[0] = msg_create(n_82_13_STATE.outTemplates[0])
            
                if (msg_isFloatToken(inMessage, 0)) {
                    msg_writeFloatToken(n_82_13_STATE.outMessages[0], 0, msg_readFloatToken(inMessage, 0))
                } else if (msg_isStringToken(inMessage, 0)) {
                    msg_writeStringToken(n_82_13_STATE.outMessages[0], 0, stringMem[0])
                }
            

                msg_writeFloatToken(n_82_13_STATE.outMessages[0], 1, 100)
            
        
                    return n_82_13_STATE.outMessages[0]
                }
,
        ]
    

        const n_82_14_STATE = {
            currentLine: {
                p0: {x: -1, y: 0},
                p1: {x: -1, y: 0},
                dx: 1,
                dy: 0,
            },
            currentValue: 0,
            nextSamp: -1,
            nextSampInt: -1,
            grainSamp: 0,
            nextDurationSamp: 0,
            skedId: SKED_ID_NULL,
            snd0: m_n_82_17_0__routemsg_RCVS_0,
            tickCallback: function () {},
        }

        commons_waitEngineConfigure(() => {
            n_line_setGrain(n_82_14_STATE, 20)
            n_82_14_STATE.tickCallback = function () {
                n_line_tick(n_82_14_STATE)
            }
        })
    


            const m_n_82_17_0_sig_STATE = {
                currentValue: 250
            }
        

        const n_82_8_STATE = {
            maxValue: 50
        }
    

        const n_82_9_STATE = {
                leftOp: 0,
                rightOp: 0,
            }
            n_sub_setLeft(n_82_9_STATE, 0)
            n_sub_setRight(n_82_9_STATE, 25)
        

        const n_29_8_STATE = {
            value: msg_create([]),
            receiveBusName: "empty",
            sendBusName: "empty",
            messageReceiver: n_control_defaultMessageHandler,
            messageSender: n_control_defaultMessageHandler,
        }
    
        commons_waitEngineConfigure(() => {
            n_29_8_STATE.messageReceiver = function (m) {
                n_bang_receiveMessage(n_29_8_STATE, m)
            }
            n_29_8_STATE.messageSender = n_36_1_RCVS_0
            n_control_setReceiveBusName(n_29_8_STATE, "empty")
        })

        
    

        const n_36_1_STATE = {
            maxValue: 800
        }
    

        const n_36_2_STATE = {
                leftOp: 0,
                rightOp: 0,
            }
            n_add_setLeft(n_36_2_STATE, 0)
            n_add_setRight(n_36_2_STATE, 30)
        

            const n_81_7_STATE = {
                currentValue: 0
            }
        


        const n_81_11_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
        
        n_81_11_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
            
            
            let stringMem = []
            n_81_11_STATE.outTemplates[0] = []
            
                n_81_11_STATE.outTemplates[0].push(msg_getTokenType(inMessage, 0))
                if (msg_isStringToken(inMessage, 0)) {
                    stringMem[0] = msg_readStringToken(inMessage, 0)
                    n_81_11_STATE.outTemplates[0].push(stringMem[0].length)
                }
            

                n_81_11_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_81_11_STATE.outMessages[0] = msg_create(n_81_11_STATE.outTemplates[0])
            
                if (msg_isFloatToken(inMessage, 0)) {
                    msg_writeFloatToken(n_81_11_STATE.outMessages[0], 0, msg_readFloatToken(inMessage, 0))
                } else if (msg_isStringToken(inMessage, 0)) {
                    msg_writeStringToken(n_81_11_STATE.outMessages[0], 0, stringMem[0])
                }
            

                msg_writeFloatToken(n_81_11_STATE.outMessages[0], 1, 100)
            
        
                    return n_81_11_STATE.outMessages[0]
                }
,
        ]
    

        const n_81_12_STATE = {
            currentLine: {
                p0: {x: -1, y: 0},
                p1: {x: -1, y: 0},
                dx: 1,
                dy: 0,
            },
            currentValue: 0,
            nextSamp: -1,
            nextSampInt: -1,
            grainSamp: 0,
            nextDurationSamp: 0,
            skedId: SKED_ID_NULL,
            snd0: m_n_81_5_0__routemsg_RCVS_0,
            tickCallback: function () {},
        }

        commons_waitEngineConfigure(() => {
            n_line_setGrain(n_81_12_STATE, 20)
            n_81_12_STATE.tickCallback = function () {
                n_line_tick(n_81_12_STATE)
            }
        })
    


            const m_n_81_5_0_sig_STATE = {
                currentValue: 250
            }
        

        const n_81_10_STATE = {
                leftOp: 0,
                rightOp: 0,
            }
            n_add_setLeft(n_81_10_STATE, 0)
            n_add_setRight(n_81_10_STATE, 0)
        

        const n_81_13_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
        
        n_81_13_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
            
            
            let stringMem = []
            n_81_13_STATE.outTemplates[0] = []
            
                n_81_13_STATE.outTemplates[0].push(msg_getTokenType(inMessage, 0))
                if (msg_isStringToken(inMessage, 0)) {
                    stringMem[0] = msg_readStringToken(inMessage, 0)
                    n_81_13_STATE.outTemplates[0].push(stringMem[0].length)
                }
            

                n_81_13_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_81_13_STATE.outMessages[0] = msg_create(n_81_13_STATE.outTemplates[0])
            
                if (msg_isFloatToken(inMessage, 0)) {
                    msg_writeFloatToken(n_81_13_STATE.outMessages[0], 0, msg_readFloatToken(inMessage, 0))
                } else if (msg_isStringToken(inMessage, 0)) {
                    msg_writeStringToken(n_81_13_STATE.outMessages[0], 0, stringMem[0])
                }
            

                msg_writeFloatToken(n_81_13_STATE.outMessages[0], 1, 100)
            
        
                    return n_81_13_STATE.outMessages[0]
                }
,
        ]
    

        const n_81_14_STATE = {
            currentLine: {
                p0: {x: -1, y: 0},
                p1: {x: -1, y: 0},
                dx: 1,
                dy: 0,
            },
            currentValue: 0,
            nextSamp: -1,
            nextSampInt: -1,
            grainSamp: 0,
            nextDurationSamp: 0,
            skedId: SKED_ID_NULL,
            snd0: m_n_81_17_0__routemsg_RCVS_0,
            tickCallback: function () {},
        }

        commons_waitEngineConfigure(() => {
            n_line_setGrain(n_81_14_STATE, 20)
            n_81_14_STATE.tickCallback = function () {
                n_line_tick(n_81_14_STATE)
            }
        })
    


            const m_n_81_17_0_sig_STATE = {
                currentValue: 250
            }
        

        const n_81_8_STATE = {
            maxValue: 50
        }
    

        const n_81_9_STATE = {
                leftOp: 0,
                rightOp: 0,
            }
            n_sub_setLeft(n_81_9_STATE, 0)
            n_sub_setRight(n_81_9_STATE, 25)
        

        const n_29_9_STATE = {
            value: msg_create([]),
            receiveBusName: "empty",
            sendBusName: "empty",
            messageReceiver: n_control_defaultMessageHandler,
            messageSender: n_control_defaultMessageHandler,
        }
    
        commons_waitEngineConfigure(() => {
            n_29_9_STATE.messageReceiver = function (m) {
                n_bang_receiveMessage(n_29_9_STATE, m)
            }
            n_29_9_STATE.messageSender = n_35_1_RCVS_0
            n_control_setReceiveBusName(n_29_9_STATE, "empty")
        })

        
    

        const n_35_1_STATE = {
            maxValue: 800
        }
    

        const n_35_2_STATE = {
                leftOp: 0,
                rightOp: 0,
            }
            n_add_setLeft(n_35_2_STATE, 0)
            n_add_setRight(n_35_2_STATE, 30)
        

            const n_80_7_STATE = {
                currentValue: 0
            }
        


        const n_80_11_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
        
        n_80_11_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
            
            
            let stringMem = []
            n_80_11_STATE.outTemplates[0] = []
            
                n_80_11_STATE.outTemplates[0].push(msg_getTokenType(inMessage, 0))
                if (msg_isStringToken(inMessage, 0)) {
                    stringMem[0] = msg_readStringToken(inMessage, 0)
                    n_80_11_STATE.outTemplates[0].push(stringMem[0].length)
                }
            

                n_80_11_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_80_11_STATE.outMessages[0] = msg_create(n_80_11_STATE.outTemplates[0])
            
                if (msg_isFloatToken(inMessage, 0)) {
                    msg_writeFloatToken(n_80_11_STATE.outMessages[0], 0, msg_readFloatToken(inMessage, 0))
                } else if (msg_isStringToken(inMessage, 0)) {
                    msg_writeStringToken(n_80_11_STATE.outMessages[0], 0, stringMem[0])
                }
            

                msg_writeFloatToken(n_80_11_STATE.outMessages[0], 1, 100)
            
        
                    return n_80_11_STATE.outMessages[0]
                }
,
        ]
    

        const n_80_12_STATE = {
            currentLine: {
                p0: {x: -1, y: 0},
                p1: {x: -1, y: 0},
                dx: 1,
                dy: 0,
            },
            currentValue: 0,
            nextSamp: -1,
            nextSampInt: -1,
            grainSamp: 0,
            nextDurationSamp: 0,
            skedId: SKED_ID_NULL,
            snd0: m_n_80_5_0__routemsg_RCVS_0,
            tickCallback: function () {},
        }

        commons_waitEngineConfigure(() => {
            n_line_setGrain(n_80_12_STATE, 20)
            n_80_12_STATE.tickCallback = function () {
                n_line_tick(n_80_12_STATE)
            }
        })
    


            const m_n_80_5_0_sig_STATE = {
                currentValue: 250
            }
        

        const n_80_10_STATE = {
                leftOp: 0,
                rightOp: 0,
            }
            n_add_setLeft(n_80_10_STATE, 0)
            n_add_setRight(n_80_10_STATE, 0)
        

        const n_80_13_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
        
        n_80_13_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
            
            
            let stringMem = []
            n_80_13_STATE.outTemplates[0] = []
            
                n_80_13_STATE.outTemplates[0].push(msg_getTokenType(inMessage, 0))
                if (msg_isStringToken(inMessage, 0)) {
                    stringMem[0] = msg_readStringToken(inMessage, 0)
                    n_80_13_STATE.outTemplates[0].push(stringMem[0].length)
                }
            

                n_80_13_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_80_13_STATE.outMessages[0] = msg_create(n_80_13_STATE.outTemplates[0])
            
                if (msg_isFloatToken(inMessage, 0)) {
                    msg_writeFloatToken(n_80_13_STATE.outMessages[0], 0, msg_readFloatToken(inMessage, 0))
                } else if (msg_isStringToken(inMessage, 0)) {
                    msg_writeStringToken(n_80_13_STATE.outMessages[0], 0, stringMem[0])
                }
            

                msg_writeFloatToken(n_80_13_STATE.outMessages[0], 1, 100)
            
        
                    return n_80_13_STATE.outMessages[0]
                }
,
        ]
    

        const n_80_14_STATE = {
            currentLine: {
                p0: {x: -1, y: 0},
                p1: {x: -1, y: 0},
                dx: 1,
                dy: 0,
            },
            currentValue: 0,
            nextSamp: -1,
            nextSampInt: -1,
            grainSamp: 0,
            nextDurationSamp: 0,
            skedId: SKED_ID_NULL,
            snd0: m_n_80_17_0__routemsg_RCVS_0,
            tickCallback: function () {},
        }

        commons_waitEngineConfigure(() => {
            n_line_setGrain(n_80_14_STATE, 20)
            n_80_14_STATE.tickCallback = function () {
                n_line_tick(n_80_14_STATE)
            }
        })
    


            const m_n_80_17_0_sig_STATE = {
                currentValue: 250
            }
        

        const n_80_8_STATE = {
            maxValue: 50
        }
    

        const n_80_9_STATE = {
                leftOp: 0,
                rightOp: 0,
            }
            n_sub_setLeft(n_80_9_STATE, 0)
            n_sub_setRight(n_80_9_STATE, 25)
        

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("randDel1", n_29_3_RCVS_0)
            })
        

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("delVol_1", n_79_23_RCVS_0)
            })
        

        const n_79_23_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
        
        n_79_23_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
            
            
            let stringMem = []
            n_79_23_STATE.outTemplates[0] = []
            
                n_79_23_STATE.outTemplates[0].push(msg_getTokenType(inMessage, 0))
                if (msg_isStringToken(inMessage, 0)) {
                    stringMem[0] = msg_readStringToken(inMessage, 0)
                    n_79_23_STATE.outTemplates[0].push(stringMem[0].length)
                }
            

                n_79_23_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_79_23_STATE.outMessages[0] = msg_create(n_79_23_STATE.outTemplates[0])
            
                if (msg_isFloatToken(inMessage, 0)) {
                    msg_writeFloatToken(n_79_23_STATE.outMessages[0], 0, msg_readFloatToken(inMessage, 0))
                } else if (msg_isStringToken(inMessage, 0)) {
                    msg_writeStringToken(n_79_23_STATE.outMessages[0], 0, stringMem[0])
                }
            

                msg_writeFloatToken(n_79_23_STATE.outMessages[0], 1, 10)
            
        
                    return n_79_23_STATE.outMessages[0]
                }
,
        ]
    

        const n_79_24_STATE = {
            currentLine: n_line_t_defaultLine,
            currentValue: 0,
            nextDurationSamp: 0,
        }
    

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("randDel2", n_29_7_RCVS_0)
            })
        

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("delVol_2", n_82_23_RCVS_0)
            })
        

        const n_82_23_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
        
        n_82_23_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
            
            
            let stringMem = []
            n_82_23_STATE.outTemplates[0] = []
            
                n_82_23_STATE.outTemplates[0].push(msg_getTokenType(inMessage, 0))
                if (msg_isStringToken(inMessage, 0)) {
                    stringMem[0] = msg_readStringToken(inMessage, 0)
                    n_82_23_STATE.outTemplates[0].push(stringMem[0].length)
                }
            

                n_82_23_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_82_23_STATE.outMessages[0] = msg_create(n_82_23_STATE.outTemplates[0])
            
                if (msg_isFloatToken(inMessage, 0)) {
                    msg_writeFloatToken(n_82_23_STATE.outMessages[0], 0, msg_readFloatToken(inMessage, 0))
                } else if (msg_isStringToken(inMessage, 0)) {
                    msg_writeStringToken(n_82_23_STATE.outMessages[0], 0, stringMem[0])
                }
            

                msg_writeFloatToken(n_82_23_STATE.outMessages[0], 1, 10)
            
        
                    return n_82_23_STATE.outMessages[0]
                }
,
        ]
    

        const n_82_24_STATE = {
            currentLine: n_line_t_defaultLine,
            currentValue: 0,
            nextDurationSamp: 0,
        }
    

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("randDel3", n_29_8_RCVS_0)
            })
        

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("delVol_3", SND_TO_NULL)
            })
        

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("delVol_4", n_80_23_RCVS_0)
            })
        

        const n_80_23_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
        
        n_80_23_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
            
            
            let stringMem = []
            n_80_23_STATE.outTemplates[0] = []
            
                n_80_23_STATE.outTemplates[0].push(msg_getTokenType(inMessage, 0))
                if (msg_isStringToken(inMessage, 0)) {
                    stringMem[0] = msg_readStringToken(inMessage, 0)
                    n_80_23_STATE.outTemplates[0].push(stringMem[0].length)
                }
            

                n_80_23_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_80_23_STATE.outMessages[0] = msg_create(n_80_23_STATE.outTemplates[0])
            
                if (msg_isFloatToken(inMessage, 0)) {
                    msg_writeFloatToken(n_80_23_STATE.outMessages[0], 0, msg_readFloatToken(inMessage, 0))
                } else if (msg_isStringToken(inMessage, 0)) {
                    msg_writeStringToken(n_80_23_STATE.outMessages[0], 0, stringMem[0])
                }
            

                msg_writeFloatToken(n_80_23_STATE.outMessages[0], 1, 10)
            
        
                    return n_80_23_STATE.outMessages[0]
                }
,
        ]
    

        const n_80_24_STATE = {
            currentLine: n_line_t_defaultLine,
            currentValue: 0,
            nextDurationSamp: 0,
        }
    

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("randDel4", n_29_9_RCVS_0)
            })
        

                const n_29_18_STATE = {
                    minValue: 0,
                    maxValue: 1,
                    valueFloat: 1,
                    value: msg_create([]),
                    receiveBusName: "empty",
                    sendBusName: "empty",
                    messageReceiver: n_control_defaultMessageHandler,
                    messageSender: n_control_defaultMessageHandler,
                }
    
                commons_waitEngineConfigure(() => {
                    n_29_18_STATE.messageReceiver = function (m) {
                        n_tgl_receiveMessage(n_29_18_STATE, m)
                    }
                    n_29_18_STATE.messageSender = m_n_29_16_1__routemsg_RCVS_0
                    n_control_setReceiveBusName(n_29_18_STATE, "empty")
                })
    
                commons_waitFrame(0, () => m_n_29_16_1__routemsg_RCVS_0(msg_floats([n_29_18_STATE.valueFloat])))
            


            const m_n_29_16_1_sig_STATE = {
                currentValue: 0
            }
        

                const n_29_22_STATE = {
                    minValue: 0,
                    maxValue: 1,
                    valueFloat: 1,
                    value: msg_create([]),
                    receiveBusName: "empty",
                    sendBusName: "empty",
                    messageReceiver: n_control_defaultMessageHandler,
                    messageSender: n_control_defaultMessageHandler,
                }
    
                commons_waitEngineConfigure(() => {
                    n_29_22_STATE.messageReceiver = function (m) {
                        n_tgl_receiveMessage(n_29_22_STATE, m)
                    }
                    n_29_22_STATE.messageSender = m_n_29_20_1__routemsg_RCVS_0
                    n_control_setReceiveBusName(n_29_22_STATE, "empty")
                })
    
                commons_waitFrame(0, () => m_n_29_20_1__routemsg_RCVS_0(msg_floats([n_29_22_STATE.valueFloat])))
            


            const m_n_29_20_1_sig_STATE = {
                currentValue: 0
            }
        

                const n_29_25_STATE = {
                    minValue: 0,
                    maxValue: 1,
                    valueFloat: 1,
                    value: msg_create([]),
                    receiveBusName: "empty",
                    sendBusName: "empty",
                    messageReceiver: n_control_defaultMessageHandler,
                    messageSender: n_control_defaultMessageHandler,
                }
    
                commons_waitEngineConfigure(() => {
                    n_29_25_STATE.messageReceiver = function (m) {
                        n_tgl_receiveMessage(n_29_25_STATE, m)
                    }
                    n_29_25_STATE.messageSender = m_n_29_23_1__routemsg_RCVS_0
                    n_control_setReceiveBusName(n_29_25_STATE, "empty")
                })
    
                commons_waitFrame(0, () => m_n_29_23_1__routemsg_RCVS_0(msg_floats([n_29_25_STATE.valueFloat])))
            


            const m_n_29_23_1_sig_STATE = {
                currentValue: 0
            }
        

                const n_29_28_STATE = {
                    minValue: 0,
                    maxValue: 1,
                    valueFloat: 1,
                    value: msg_create([]),
                    receiveBusName: "empty",
                    sendBusName: "empty",
                    messageReceiver: n_control_defaultMessageHandler,
                    messageSender: n_control_defaultMessageHandler,
                }
    
                commons_waitEngineConfigure(() => {
                    n_29_28_STATE.messageReceiver = function (m) {
                        n_tgl_receiveMessage(n_29_28_STATE, m)
                    }
                    n_29_28_STATE.messageSender = m_n_29_26_1__routemsg_RCVS_0
                    n_control_setReceiveBusName(n_29_28_STATE, "empty")
                })
    
                commons_waitFrame(0, () => m_n_29_26_1__routemsg_RCVS_0(msg_floats([n_29_28_STATE.valueFloat])))
            


            const m_n_29_26_1_sig_STATE = {
                currentValue: 0
            }
        

                const n_29_39_STATE = {
                    minValue: 0,
                    maxValue: 1,
                    valueFloat: 1,
                    value: msg_create([]),
                    receiveBusName: "empty",
                    sendBusName: "empty",
                    messageReceiver: n_control_defaultMessageHandler,
                    messageSender: n_control_defaultMessageHandler,
                }
    
                commons_waitEngineConfigure(() => {
                    n_29_39_STATE.messageReceiver = function (m) {
                        n_tgl_receiveMessage(n_29_39_STATE, m)
                    }
                    n_29_39_STATE.messageSender = n_29_39_SNDS_0
                    n_control_setReceiveBusName(n_29_39_STATE, "empty")
                })
    
                commons_waitFrame(0, () => n_29_39_SNDS_0(msg_floats([n_29_39_STATE.valueFloat])))
            


            const m_n_29_38_1_sig_STATE = {
                currentValue: 0
            }
        


            const m_n_29_40_1_sig_STATE = {
                currentValue: 0
            }
        
commons_waitFrame(0, () => n_29_65_RCVS_0(msg_bang()))

        const n_29_65_STATE = {
            delay: 0,
            sampleRatio: 1,
            scheduledBang: SKED_ID_NULL,
        }

        commons_waitEngineConfigure(() => {
            n_29_65_STATE.sampleRatio = computeUnitInSamples(SAMPLE_RATE, 1, "msec")
            n_delay_setDelay(n_29_65_STATE, 500)
        })
    

        const n_29_68_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_29_68_STATE.outTemplates[0] = []
            
                n_29_68_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            

                n_29_68_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_29_68_STATE.outMessages[0] = msg_create(n_29_68_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_29_68_STATE.outMessages[0], 0, 1)
            

                msg_writeFloatToken(n_29_68_STATE.outMessages[0], 1, 3500)
            
        
        
        n_29_68_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_29_68_STATE.outMessages[0]
                }
,
        ]
    

        const n_29_66_STATE = {
            currentLine: n_line_t_defaultLine,
            currentValue: 0,
            nextDurationSamp: 0,
        }
    

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("randomPos_1", n_71_24_RCVS_0)
            })
        

        const n_71_24_STATE = {
                leftOp: 0,
                rightOp: 0,
            }
            n_mul_setLeft(n_71_24_STATE, 0)
            n_mul_setRight(n_71_24_STATE, 0.001)
        


            const m_n_71_23_1_sig_STATE = {
                currentValue: 0.1
            }
        

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("randomPitch_1", SND_TO_NULL)
            })
        

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("positionOffset_2", n_31_24_RCVS_0)
            })
        

        const n_31_24_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
        
        n_31_24_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
            
            
            let stringMem = []
            n_31_24_STATE.outTemplates[0] = []
            
                n_31_24_STATE.outTemplates[0].push(msg_getTokenType(inMessage, 0))
                if (msg_isStringToken(inMessage, 0)) {
                    stringMem[0] = msg_readStringToken(inMessage, 0)
                    n_31_24_STATE.outTemplates[0].push(stringMem[0].length)
                }
            

                n_31_24_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_31_24_STATE.outMessages[0] = msg_create(n_31_24_STATE.outTemplates[0])
            
                if (msg_isFloatToken(inMessage, 0)) {
                    msg_writeFloatToken(n_31_24_STATE.outMessages[0], 0, msg_readFloatToken(inMessage, 0))
                } else if (msg_isStringToken(inMessage, 0)) {
                    msg_writeStringToken(n_31_24_STATE.outMessages[0], 0, stringMem[0])
                }
            

                msg_writeFloatToken(n_31_24_STATE.outMessages[0], 1, 1000)
            
        
                    return n_31_24_STATE.outMessages[0]
                }
,
        ]
    

        const n_31_101_STATE = {
            currentLine: n_line_t_defaultLine,
            currentValue: 0,
            nextDurationSamp: 0,
        }
    

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("positionOffset_3", n_31_25_RCVS_0)
            })
        

        const n_31_25_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
        
        n_31_25_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
            
            
            let stringMem = []
            n_31_25_STATE.outTemplates[0] = []
            
                n_31_25_STATE.outTemplates[0].push(msg_getTokenType(inMessage, 0))
                if (msg_isStringToken(inMessage, 0)) {
                    stringMem[0] = msg_readStringToken(inMessage, 0)
                    n_31_25_STATE.outTemplates[0].push(stringMem[0].length)
                }
            

                n_31_25_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_31_25_STATE.outMessages[0] = msg_create(n_31_25_STATE.outTemplates[0])
            
                if (msg_isFloatToken(inMessage, 0)) {
                    msg_writeFloatToken(n_31_25_STATE.outMessages[0], 0, msg_readFloatToken(inMessage, 0))
                } else if (msg_isStringToken(inMessage, 0)) {
                    msg_writeStringToken(n_31_25_STATE.outMessages[0], 0, stringMem[0])
                }
            

                msg_writeFloatToken(n_31_25_STATE.outMessages[0], 1, 1000)
            
        
                    return n_31_25_STATE.outMessages[0]
                }
,
        ]
    

        const n_31_99_STATE = {
            currentLine: n_line_t_defaultLine,
            currentValue: 0,
            nextDurationSamp: 0,
        }
    

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("phaseBang", n_31_17_SNDS_0)
            })
        

            const n_31_14_STATE = {
                phase: 0,
                J: 0,
            }
            
            commons_waitEngineConfigure(() => {
                n_31_14_STATE.J = 1 / SAMPLE_RATE
            })
        

            const n_31_15_STATE = {
                phase: 0,
                J: 0,
            }
            
            commons_waitEngineConfigure(() => {
                n_31_15_STATE.J = 1 / SAMPLE_RATE
            })
        

            const n_31_16_STATE = {
                phase: 0,
                J: 0,
            }
            
            commons_waitEngineConfigure(() => {
                n_31_16_STATE.J = 1 / SAMPLE_RATE
            })
        

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("pitch_1", n_71_48_RCVS_0)
            })
        

            const n_71_48_STATE = {
                currentValue: 0
            }
        

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("positionOffset_4", n_31_26_RCVS_0)
            })
        

        const n_31_26_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
        
        n_31_26_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
            
            
            let stringMem = []
            n_31_26_STATE.outTemplates[0] = []
            
                n_31_26_STATE.outTemplates[0].push(msg_getTokenType(inMessage, 0))
                if (msg_isStringToken(inMessage, 0)) {
                    stringMem[0] = msg_readStringToken(inMessage, 0)
                    n_31_26_STATE.outTemplates[0].push(stringMem[0].length)
                }
            

                n_31_26_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_31_26_STATE.outMessages[0] = msg_create(n_31_26_STATE.outTemplates[0])
            
                if (msg_isFloatToken(inMessage, 0)) {
                    msg_writeFloatToken(n_31_26_STATE.outMessages[0], 0, msg_readFloatToken(inMessage, 0))
                } else if (msg_isStringToken(inMessage, 0)) {
                    msg_writeStringToken(n_31_26_STATE.outMessages[0], 0, stringMem[0])
                }
            

                msg_writeFloatToken(n_31_26_STATE.outMessages[0], 1, 1000)
            
        
                    return n_31_26_STATE.outMessages[0]
                }
,
        ]
    

        const n_31_96_STATE = {
            currentLine: n_line_t_defaultLine,
            currentValue: 0,
            nextDurationSamp: 0,
        }
    

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("modPos_1", n_31_92_RCVS_0)
            })
        

        const n_31_92_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
        
        n_31_92_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
            
            
            let stringMem = []
            n_31_92_STATE.outTemplates[0] = []
            
                n_31_92_STATE.outTemplates[0].push(msg_getTokenType(inMessage, 0))
                if (msg_isStringToken(inMessage, 0)) {
                    stringMem[0] = msg_readStringToken(inMessage, 0)
                    n_31_92_STATE.outTemplates[0].push(stringMem[0].length)
                }
            

                n_31_92_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_31_92_STATE.outMessages[0] = msg_create(n_31_92_STATE.outTemplates[0])
            
                if (msg_isFloatToken(inMessage, 0)) {
                    msg_writeFloatToken(n_31_92_STATE.outMessages[0], 0, msg_readFloatToken(inMessage, 0))
                } else if (msg_isStringToken(inMessage, 0)) {
                    msg_writeStringToken(n_31_92_STATE.outMessages[0], 0, stringMem[0])
                }
            

                msg_writeFloatToken(n_31_92_STATE.outMessages[0], 1, 10)
            
        
                    return n_31_92_STATE.outMessages[0]
                }
,
        ]
    

        const n_31_106_STATE = {
            currentLine: n_line_t_defaultLine,
            currentValue: 0,
            nextDurationSamp: 0,
        }
    

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("forwardAmt_1", n_71_29_RCVS_0)
            })
        

                const n_71_29_STATE = {
                    minValue: 0,
                    maxValue: 3,
                    valueFloat: 0,
                    value: msg_create([]),
                    receiveBusName: "empty",
                    sendBusName: "empty",
                    messageReceiver: n_control_defaultMessageHandler,
                    messageSender: n_control_defaultMessageHandler,
                }
    
                commons_waitEngineConfigure(() => {
                    n_71_29_STATE.messageReceiver = function (m) {
                        n_sl_receiveMessage(n_71_29_STATE, m)
                    }
                    n_71_29_STATE.messageSender = m_n_71_40_1__routemsg_RCVS_0
                    n_control_setReceiveBusName(n_71_29_STATE, "empty")
                })
    
                
            


            const m_n_71_40_1_sig_STATE = {
                currentValue: 0
            }
        

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("modPos_2", n_31_93_RCVS_0)
            })
        

        const n_31_93_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
        
        n_31_93_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
            
            
            let stringMem = []
            n_31_93_STATE.outTemplates[0] = []
            
                n_31_93_STATE.outTemplates[0].push(msg_getTokenType(inMessage, 0))
                if (msg_isStringToken(inMessage, 0)) {
                    stringMem[0] = msg_readStringToken(inMessage, 0)
                    n_31_93_STATE.outTemplates[0].push(stringMem[0].length)
                }
            

                n_31_93_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_31_93_STATE.outMessages[0] = msg_create(n_31_93_STATE.outTemplates[0])
            
                if (msg_isFloatToken(inMessage, 0)) {
                    msg_writeFloatToken(n_31_93_STATE.outMessages[0], 0, msg_readFloatToken(inMessage, 0))
                } else if (msg_isStringToken(inMessage, 0)) {
                    msg_writeStringToken(n_31_93_STATE.outMessages[0], 0, stringMem[0])
                }
            

                msg_writeFloatToken(n_31_93_STATE.outMessages[0], 1, 10)
            
        
                    return n_31_93_STATE.outMessages[0]
                }
,
        ]
    

        const n_31_107_STATE = {
            currentLine: n_line_t_defaultLine,
            currentValue: 0,
            nextDurationSamp: 0,
        }
    

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("randomPos_2", n_73_24_RCVS_0)
            })
        

        const n_73_24_STATE = {
                leftOp: 0,
                rightOp: 0,
            }
            n_mul_setLeft(n_73_24_STATE, 0)
            n_mul_setRight(n_73_24_STATE, 0.001)
        


            const m_n_73_23_1_sig_STATE = {
                currentValue: 0.1
            }
        

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("pitch_2", n_73_48_RCVS_0)
            })
        

            const n_73_48_STATE = {
                currentValue: 0
            }
        

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("forwardAmt_2", n_73_29_RCVS_0)
            })
        

                const n_73_29_STATE = {
                    minValue: 0,
                    maxValue: 3,
                    valueFloat: 0,
                    value: msg_create([]),
                    receiveBusName: "empty",
                    sendBusName: "empty",
                    messageReceiver: n_control_defaultMessageHandler,
                    messageSender: n_control_defaultMessageHandler,
                }
    
                commons_waitEngineConfigure(() => {
                    n_73_29_STATE.messageReceiver = function (m) {
                        n_sl_receiveMessage(n_73_29_STATE, m)
                    }
                    n_73_29_STATE.messageSender = m_n_73_40_1__routemsg_RCVS_0
                    n_control_setReceiveBusName(n_73_29_STATE, "empty")
                })
    
                
            


            const m_n_73_40_1_sig_STATE = {
                currentValue: 0
            }
        

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("randomPitch_2", SND_TO_NULL)
            })
        

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("forwardAmt_3", n_75_29_RCVS_0)
            })
        

                const n_75_29_STATE = {
                    minValue: 0,
                    maxValue: 3,
                    valueFloat: 0,
                    value: msg_create([]),
                    receiveBusName: "empty",
                    sendBusName: "empty",
                    messageReceiver: n_control_defaultMessageHandler,
                    messageSender: n_control_defaultMessageHandler,
                }
    
                commons_waitEngineConfigure(() => {
                    n_75_29_STATE.messageReceiver = function (m) {
                        n_sl_receiveMessage(n_75_29_STATE, m)
                    }
                    n_75_29_STATE.messageSender = m_n_75_40_1__routemsg_RCVS_0
                    n_control_setReceiveBusName(n_75_29_STATE, "empty")
                })
    
                
            


            const m_n_75_40_1_sig_STATE = {
                currentValue: 0
            }
        

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("randomPitch_3", SND_TO_NULL)
            })
        

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("pitch_3", n_75_48_RCVS_0)
            })
        

            const n_75_48_STATE = {
                currentValue: 0
            }
        

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("randomPos_3", n_75_24_RCVS_0)
            })
        

        const n_75_24_STATE = {
                leftOp: 0,
                rightOp: 0,
            }
            n_mul_setLeft(n_75_24_STATE, 0)
            n_mul_setRight(n_75_24_STATE, 0.001)
        


            const m_n_75_23_1_sig_STATE = {
                currentValue: 0.1
            }
        

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("modPos_3", n_31_94_RCVS_0)
            })
        

        const n_31_94_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
        
        n_31_94_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
            
            
            let stringMem = []
            n_31_94_STATE.outTemplates[0] = []
            
                n_31_94_STATE.outTemplates[0].push(msg_getTokenType(inMessage, 0))
                if (msg_isStringToken(inMessage, 0)) {
                    stringMem[0] = msg_readStringToken(inMessage, 0)
                    n_31_94_STATE.outTemplates[0].push(stringMem[0].length)
                }
            

                n_31_94_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_31_94_STATE.outMessages[0] = msg_create(n_31_94_STATE.outTemplates[0])
            
                if (msg_isFloatToken(inMessage, 0)) {
                    msg_writeFloatToken(n_31_94_STATE.outMessages[0], 0, msg_readFloatToken(inMessage, 0))
                } else if (msg_isStringToken(inMessage, 0)) {
                    msg_writeStringToken(n_31_94_STATE.outMessages[0], 0, stringMem[0])
                }
            

                msg_writeFloatToken(n_31_94_STATE.outMessages[0], 1, 10)
            
        
                    return n_31_94_STATE.outMessages[0]
                }
,
        ]
    

        const n_31_108_STATE = {
            currentLine: n_line_t_defaultLine,
            currentValue: 0,
            nextDurationSamp: 0,
        }
    

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("forwardAmt_4", n_77_29_RCVS_0)
            })
        

                const n_77_29_STATE = {
                    minValue: 0,
                    maxValue: 3,
                    valueFloat: 0,
                    value: msg_create([]),
                    receiveBusName: "empty",
                    sendBusName: "empty",
                    messageReceiver: n_control_defaultMessageHandler,
                    messageSender: n_control_defaultMessageHandler,
                }
    
                commons_waitEngineConfigure(() => {
                    n_77_29_STATE.messageReceiver = function (m) {
                        n_sl_receiveMessage(n_77_29_STATE, m)
                    }
                    n_77_29_STATE.messageSender = m_n_77_40_1__routemsg_RCVS_0
                    n_control_setReceiveBusName(n_77_29_STATE, "empty")
                })
    
                
            


            const m_n_77_40_1_sig_STATE = {
                currentValue: 0
            }
        

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("randomPitch_4", SND_TO_NULL)
            })
        

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("pitch_4", n_77_48_RCVS_0)
            })
        

            const n_77_48_STATE = {
                currentValue: 0
            }
        

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("randomPos_4", n_77_24_RCVS_0)
            })
        

        const n_77_24_STATE = {
                leftOp: 0,
                rightOp: 0,
            }
            n_mul_setLeft(n_77_24_STATE, 0)
            n_mul_setRight(n_77_24_STATE, 0.001)
        


            const m_n_77_23_1_sig_STATE = {
                currentValue: 0.1
            }
        

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("modPos_4", n_31_95_RCVS_0)
            })
        

        const n_31_95_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
        
        n_31_95_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
            
            
            let stringMem = []
            n_31_95_STATE.outTemplates[0] = []
            
                n_31_95_STATE.outTemplates[0].push(msg_getTokenType(inMessage, 0))
                if (msg_isStringToken(inMessage, 0)) {
                    stringMem[0] = msg_readStringToken(inMessage, 0)
                    n_31_95_STATE.outTemplates[0].push(stringMem[0].length)
                }
            

                n_31_95_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_31_95_STATE.outMessages[0] = msg_create(n_31_95_STATE.outTemplates[0])
            
                if (msg_isFloatToken(inMessage, 0)) {
                    msg_writeFloatToken(n_31_95_STATE.outMessages[0], 0, msg_readFloatToken(inMessage, 0))
                } else if (msg_isStringToken(inMessage, 0)) {
                    msg_writeStringToken(n_31_95_STATE.outMessages[0], 0, stringMem[0])
                }
            

                msg_writeFloatToken(n_31_95_STATE.outMessages[0], 1, 10)
            
        
                    return n_31_95_STATE.outMessages[0]
                }
,
        ]
    

        const n_31_109_STATE = {
            currentLine: n_line_t_defaultLine,
            currentValue: 0,
            nextDurationSamp: 0,
        }
    

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("nuSong", n_33_10_RCVS_0)
            })
        


        const n_33_0_STATE = {
            isClosed: true
        }
    


            const n_33_16_STATE = {
                value: 0,
            }
            n_float_int_setValueFloat(n_33_16_STATE, 0)
        

            const n_31_67_STATE = {
                busName: "grain1_song",
            }
        

            const n_31_68_STATE = {
                busName: "grain2_song",
            }
        

            const n_31_69_STATE = {
                busName: "grain3_song",
            }
        

            const n_31_70_STATE = {
                busName: "grain4_song",
            }
        

        const n_33_8_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_33_8_STATE.outTemplates[0] = []
            
                n_33_8_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_33_8_STATE.outMessages[0] = msg_create(n_33_8_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_33_8_STATE.outMessages[0], 0, 1)
            
        
        
        n_33_8_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_33_8_STATE.outMessages[0]
                }
,
        ]
    

        const n_33_1_STATE = {
            isClosed: true
        }
    


            const n_31_66_STATE = {
                value: 0,
            }
            n_float_int_setValueFloat(n_31_66_STATE, 0)
        

        const n_31_62_STATE = {
            delay: 0,
            outputMessages: [msg_floats([0])],
            scheduledMessages: [],
            snds: [n_31_67_RCVS_0],
        }

        commons_waitEngineConfigure(() => {
            n_pipe_setDelay(n_31_62_STATE, 0)
        })
    

        const n_31_63_STATE = {
            delay: 0,
            outputMessages: [msg_floats([0])],
            scheduledMessages: [],
            snds: [n_31_68_RCVS_0],
        }

        commons_waitEngineConfigure(() => {
            n_pipe_setDelay(n_31_63_STATE, 0)
        })
    

        const n_31_64_STATE = {
            delay: 0,
            outputMessages: [msg_floats([0])],
            scheduledMessages: [],
            snds: [n_31_69_RCVS_0],
        }

        commons_waitEngineConfigure(() => {
            n_pipe_setDelay(n_31_64_STATE, 0)
        })
    

        const n_31_65_STATE = {
            delay: 0,
            outputMessages: [msg_floats([0])],
            scheduledMessages: [],
            snds: [n_31_70_RCVS_0],
        }

        commons_waitEngineConfigure(() => {
            n_pipe_setDelay(n_31_65_STATE, 0)
        })
    

        const n_31_80_STATE = {
            maxValue: 10000
        }
    

        const n_31_79_STATE = {
                leftOp: 0,
                rightOp: 0,
            }
            n_add_setLeft(n_31_79_STATE, 0)
            n_add_setRight(n_31_79_STATE, 2500)
        

        const n_31_84_STATE = {
            maxValue: 200000
        }
    

        const n_31_81_STATE = {
                leftOp: 0,
                rightOp: 0,
            }
            n_add_setLeft(n_31_81_STATE, 0)
            n_add_setRight(n_31_81_STATE, 10000)
        

        const n_31_85_STATE = {
            maxValue: 140000
        }
    

        const n_31_82_STATE = {
                leftOp: 0,
                rightOp: 0,
            }
            n_add_setLeft(n_31_82_STATE, 0)
            n_add_setRight(n_31_82_STATE, 14000)
        

        const n_31_86_STATE = {
            maxValue: 120000
        }
    

        const n_31_83_STATE = {
                leftOp: 0,
                rightOp: 0,
            }
            n_add_setLeft(n_31_83_STATE, 0)
            n_add_setRight(n_31_83_STATE, 20000)
        

        const n_33_6_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_33_6_STATE.outTemplates[0] = []
            
                n_33_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_33_6_STATE.outMessages[0] = msg_create(n_33_6_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_33_6_STATE.outMessages[0], 0, 0)
            
        
        
        n_33_6_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_33_6_STATE.outMessages[0]
                }
,
        ]
    

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("grain1_song", n_71_45_RCVS_0)
            })
        


            const n_71_44_STATE = {
                value: 0,
            }
            n_float_int_setValueFloat(n_71_44_STATE, 0)
        

        const n_72_0_STATE = {
            floatFilter: 0,
            stringFilter: "0",
            filterType: MSG_FLOAT_TOKEN,
        }
    

        const n_72_10_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_72_10_STATE.outTemplates[0] = []
            
                n_72_10_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_72_10_STATE.outTemplates[0].push(2)
            
            n_72_10_STATE.outMessages[0] = msg_create(n_72_10_STATE.outTemplates[0])
            
                msg_writeStringToken(n_72_10_STATE.outMessages[0], 0, "n1")
            
        
        
        n_72_10_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_72_10_STATE.outMessages[0]
                }
,
        ]
    

    const n_71_36_STATE = {
        splitPoint: 0,
        currentList: msg_create([]),
    }

    

     
        {
            const template = [MSG_STRING_TOKEN,3]

            n_71_36_STATE.currentList = msg_create(template)

            msg_writeStringToken(n_71_36_STATE.currentList, 0, "set")
        }
    


        const n_71_35_STATE = {
            floatFilter: 0,
            stringFilter: "list",
            filterType: MSG_STRING_TOKEN,
        }
    


        const n_71_53_STATE = n_tabbase_createState("")

        commons_waitEngineConfigure(() => {
            if (n_71_53_STATE.arrayName.length) {
                n_tabbase_setArrayName(
                    n_71_53_STATE, 
                    n_71_53_STATE.arrayName,
                    () => n_tabread_t_setArrayNameFinalize(n_71_53_STATE)
                )
            }
        })
    

        const n_72_1_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_72_1_STATE.outTemplates[0] = []
            
                n_72_1_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_72_1_STATE.outTemplates[0].push(2)
            
            n_72_1_STATE.outMessages[0] = msg_create(n_72_1_STATE.outTemplates[0])
            
                msg_writeStringToken(n_72_1_STATE.outMessages[0], 0, "n2")
            
        
        
        n_72_1_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_72_1_STATE.outMessages[0]
                }
,
        ]
    

        const n_72_2_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_72_2_STATE.outTemplates[0] = []
            
                n_72_2_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_72_2_STATE.outTemplates[0].push(2)
            
            n_72_2_STATE.outMessages[0] = msg_create(n_72_2_STATE.outTemplates[0])
            
                msg_writeStringToken(n_72_2_STATE.outMessages[0], 0, "n3")
            
        
        
        n_72_2_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_72_2_STATE.outMessages[0]
                }
,
        ]
    

        const n_72_3_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_72_3_STATE.outTemplates[0] = []
            
                n_72_3_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_72_3_STATE.outTemplates[0].push(2)
            
            n_72_3_STATE.outMessages[0] = msg_create(n_72_3_STATE.outTemplates[0])
            
                msg_writeStringToken(n_72_3_STATE.outMessages[0], 0, "n4")
            
        
        
        n_72_3_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_72_3_STATE.outMessages[0]
                }
,
        ]
    

        const n_72_12_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_72_12_STATE.outTemplates[0] = []
            
                n_72_12_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_72_12_STATE.outTemplates[0].push(2)
            
            n_72_12_STATE.outMessages[0] = msg_create(n_72_12_STATE.outTemplates[0])
            
                msg_writeStringToken(n_72_12_STATE.outMessages[0], 0, "n5")
            
        
        
        n_72_12_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_72_12_STATE.outMessages[0]
                }
,
        ]
    

        const n_72_4_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_72_4_STATE.outTemplates[0] = []
            
                n_72_4_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_72_4_STATE.outTemplates[0].push(2)
            
            n_72_4_STATE.outMessages[0] = msg_create(n_72_4_STATE.outTemplates[0])
            
                msg_writeStringToken(n_72_4_STATE.outMessages[0], 0, "n6")
            
        
        
        n_72_4_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_72_4_STATE.outMessages[0]
                }
,
        ]
    

        const n_72_5_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_72_5_STATE.outTemplates[0] = []
            
                n_72_5_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_72_5_STATE.outTemplates[0].push(2)
            
            n_72_5_STATE.outMessages[0] = msg_create(n_72_5_STATE.outTemplates[0])
            
                msg_writeStringToken(n_72_5_STATE.outMessages[0], 0, "n7")
            
        
        
        n_72_5_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_72_5_STATE.outMessages[0]
                }
,
        ]
    

        const n_72_6_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_72_6_STATE.outTemplates[0] = []
            
                n_72_6_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_72_6_STATE.outTemplates[0].push(2)
            
            n_72_6_STATE.outMessages[0] = msg_create(n_72_6_STATE.outTemplates[0])
            
                msg_writeStringToken(n_72_6_STATE.outMessages[0], 0, "n8")
            
        
        
        n_72_6_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_72_6_STATE.outMessages[0]
                }
,
        ]
    

        const n_72_7_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_72_7_STATE.outTemplates[0] = []
            
                n_72_7_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_72_7_STATE.outTemplates[0].push(2)
            
            n_72_7_STATE.outMessages[0] = msg_create(n_72_7_STATE.outTemplates[0])
            
                msg_writeStringToken(n_72_7_STATE.outMessages[0], 0, "n9")
            
        
        
        n_72_7_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_72_7_STATE.outMessages[0]
                }
,
        ]
    

        const n_72_8_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_72_8_STATE.outTemplates[0] = []
            
                n_72_8_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_72_8_STATE.outTemplates[0].push(3)
            
            n_72_8_STATE.outMessages[0] = msg_create(n_72_8_STATE.outTemplates[0])
            
                msg_writeStringToken(n_72_8_STATE.outMessages[0], 0, "n10")
            
        
        
        n_72_8_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_72_8_STATE.outMessages[0]
                }
,
        ]
    

        const n_72_9_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_72_9_STATE.outTemplates[0] = []
            
                n_72_9_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_72_9_STATE.outTemplates[0].push(3)
            
            n_72_9_STATE.outMessages[0] = msg_create(n_72_9_STATE.outTemplates[0])
            
                msg_writeStringToken(n_72_9_STATE.outMessages[0], 0, "n11")
            
        
        
        n_72_9_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_72_9_STATE.outMessages[0]
                }
,
        ]
    

        const n_72_11_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_72_11_STATE.outTemplates[0] = []
            
                n_72_11_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_72_11_STATE.outTemplates[0].push(3)
            
            n_72_11_STATE.outMessages[0] = msg_create(n_72_11_STATE.outTemplates[0])
            
                msg_writeStringToken(n_72_11_STATE.outMessages[0], 0, "n12")
            
        
        
        n_72_11_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_72_11_STATE.outMessages[0]
                }
,
        ]
    

        const n_71_46_STATE = {
            delay: 0,
            sampleRatio: 1,
            scheduledBang: SKED_ID_NULL,
        }

        commons_waitEngineConfigure(() => {
            n_71_46_STATE.sampleRatio = computeUnitInSamples(SAMPLE_RATE, 1, "msec")
            n_delay_setDelay(n_71_46_STATE, 10)
        })
    

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("grain2_song", n_73_45_RCVS_0)
            })
        


            const n_73_44_STATE = {
                value: 0,
            }
            n_float_int_setValueFloat(n_73_44_STATE, 0)
        

        const n_74_0_STATE = {
            floatFilter: 0,
            stringFilter: "0",
            filterType: MSG_FLOAT_TOKEN,
        }
    

        const n_74_10_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_74_10_STATE.outTemplates[0] = []
            
                n_74_10_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_74_10_STATE.outTemplates[0].push(2)
            
            n_74_10_STATE.outMessages[0] = msg_create(n_74_10_STATE.outTemplates[0])
            
                msg_writeStringToken(n_74_10_STATE.outMessages[0], 0, "n1")
            
        
        
        n_74_10_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_74_10_STATE.outMessages[0]
                }
,
        ]
    

    const n_73_36_STATE = {
        splitPoint: 0,
        currentList: msg_create([]),
    }

    

     
        {
            const template = [MSG_STRING_TOKEN,3]

            n_73_36_STATE.currentList = msg_create(template)

            msg_writeStringToken(n_73_36_STATE.currentList, 0, "set")
        }
    


        const n_73_35_STATE = {
            floatFilter: 0,
            stringFilter: "list",
            filterType: MSG_STRING_TOKEN,
        }
    


        const n_73_53_STATE = n_tabbase_createState("")

        commons_waitEngineConfigure(() => {
            if (n_73_53_STATE.arrayName.length) {
                n_tabbase_setArrayName(
                    n_73_53_STATE, 
                    n_73_53_STATE.arrayName,
                    () => n_tabread_t_setArrayNameFinalize(n_73_53_STATE)
                )
            }
        })
    

        const n_74_1_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_74_1_STATE.outTemplates[0] = []
            
                n_74_1_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_74_1_STATE.outTemplates[0].push(2)
            
            n_74_1_STATE.outMessages[0] = msg_create(n_74_1_STATE.outTemplates[0])
            
                msg_writeStringToken(n_74_1_STATE.outMessages[0], 0, "n2")
            
        
        
        n_74_1_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_74_1_STATE.outMessages[0]
                }
,
        ]
    

        const n_74_2_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_74_2_STATE.outTemplates[0] = []
            
                n_74_2_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_74_2_STATE.outTemplates[0].push(2)
            
            n_74_2_STATE.outMessages[0] = msg_create(n_74_2_STATE.outTemplates[0])
            
                msg_writeStringToken(n_74_2_STATE.outMessages[0], 0, "n3")
            
        
        
        n_74_2_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_74_2_STATE.outMessages[0]
                }
,
        ]
    

        const n_74_3_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_74_3_STATE.outTemplates[0] = []
            
                n_74_3_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_74_3_STATE.outTemplates[0].push(2)
            
            n_74_3_STATE.outMessages[0] = msg_create(n_74_3_STATE.outTemplates[0])
            
                msg_writeStringToken(n_74_3_STATE.outMessages[0], 0, "n4")
            
        
        
        n_74_3_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_74_3_STATE.outMessages[0]
                }
,
        ]
    

        const n_74_12_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_74_12_STATE.outTemplates[0] = []
            
                n_74_12_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_74_12_STATE.outTemplates[0].push(2)
            
            n_74_12_STATE.outMessages[0] = msg_create(n_74_12_STATE.outTemplates[0])
            
                msg_writeStringToken(n_74_12_STATE.outMessages[0], 0, "n5")
            
        
        
        n_74_12_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_74_12_STATE.outMessages[0]
                }
,
        ]
    

        const n_74_4_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_74_4_STATE.outTemplates[0] = []
            
                n_74_4_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_74_4_STATE.outTemplates[0].push(2)
            
            n_74_4_STATE.outMessages[0] = msg_create(n_74_4_STATE.outTemplates[0])
            
                msg_writeStringToken(n_74_4_STATE.outMessages[0], 0, "n6")
            
        
        
        n_74_4_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_74_4_STATE.outMessages[0]
                }
,
        ]
    

        const n_74_5_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_74_5_STATE.outTemplates[0] = []
            
                n_74_5_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_74_5_STATE.outTemplates[0].push(2)
            
            n_74_5_STATE.outMessages[0] = msg_create(n_74_5_STATE.outTemplates[0])
            
                msg_writeStringToken(n_74_5_STATE.outMessages[0], 0, "n7")
            
        
        
        n_74_5_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_74_5_STATE.outMessages[0]
                }
,
        ]
    

        const n_74_6_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_74_6_STATE.outTemplates[0] = []
            
                n_74_6_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_74_6_STATE.outTemplates[0].push(2)
            
            n_74_6_STATE.outMessages[0] = msg_create(n_74_6_STATE.outTemplates[0])
            
                msg_writeStringToken(n_74_6_STATE.outMessages[0], 0, "n8")
            
        
        
        n_74_6_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_74_6_STATE.outMessages[0]
                }
,
        ]
    

        const n_74_7_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_74_7_STATE.outTemplates[0] = []
            
                n_74_7_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_74_7_STATE.outTemplates[0].push(2)
            
            n_74_7_STATE.outMessages[0] = msg_create(n_74_7_STATE.outTemplates[0])
            
                msg_writeStringToken(n_74_7_STATE.outMessages[0], 0, "n9")
            
        
        
        n_74_7_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_74_7_STATE.outMessages[0]
                }
,
        ]
    

        const n_74_8_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_74_8_STATE.outTemplates[0] = []
            
                n_74_8_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_74_8_STATE.outTemplates[0].push(3)
            
            n_74_8_STATE.outMessages[0] = msg_create(n_74_8_STATE.outTemplates[0])
            
                msg_writeStringToken(n_74_8_STATE.outMessages[0], 0, "n10")
            
        
        
        n_74_8_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_74_8_STATE.outMessages[0]
                }
,
        ]
    

        const n_74_9_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_74_9_STATE.outTemplates[0] = []
            
                n_74_9_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_74_9_STATE.outTemplates[0].push(3)
            
            n_74_9_STATE.outMessages[0] = msg_create(n_74_9_STATE.outTemplates[0])
            
                msg_writeStringToken(n_74_9_STATE.outMessages[0], 0, "n11")
            
        
        
        n_74_9_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_74_9_STATE.outMessages[0]
                }
,
        ]
    

        const n_74_11_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_74_11_STATE.outTemplates[0] = []
            
                n_74_11_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_74_11_STATE.outTemplates[0].push(3)
            
            n_74_11_STATE.outMessages[0] = msg_create(n_74_11_STATE.outTemplates[0])
            
                msg_writeStringToken(n_74_11_STATE.outMessages[0], 0, "n12")
            
        
        
        n_74_11_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_74_11_STATE.outMessages[0]
                }
,
        ]
    

        const n_73_46_STATE = {
            delay: 0,
            sampleRatio: 1,
            scheduledBang: SKED_ID_NULL,
        }

        commons_waitEngineConfigure(() => {
            n_73_46_STATE.sampleRatio = computeUnitInSamples(SAMPLE_RATE, 1, "msec")
            n_delay_setDelay(n_73_46_STATE, 10)
        })
    

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("grain3_song", n_75_45_RCVS_0)
            })
        


            const n_75_44_STATE = {
                value: 0,
            }
            n_float_int_setValueFloat(n_75_44_STATE, 0)
        

        const n_76_0_STATE = {
            floatFilter: 0,
            stringFilter: "0",
            filterType: MSG_FLOAT_TOKEN,
        }
    

        const n_76_10_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_76_10_STATE.outTemplates[0] = []
            
                n_76_10_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_76_10_STATE.outTemplates[0].push(2)
            
            n_76_10_STATE.outMessages[0] = msg_create(n_76_10_STATE.outTemplates[0])
            
                msg_writeStringToken(n_76_10_STATE.outMessages[0], 0, "n1")
            
        
        
        n_76_10_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_76_10_STATE.outMessages[0]
                }
,
        ]
    

    const n_75_36_STATE = {
        splitPoint: 0,
        currentList: msg_create([]),
    }

    

     
        {
            const template = [MSG_STRING_TOKEN,3]

            n_75_36_STATE.currentList = msg_create(template)

            msg_writeStringToken(n_75_36_STATE.currentList, 0, "set")
        }
    


        const n_75_35_STATE = {
            floatFilter: 0,
            stringFilter: "list",
            filterType: MSG_STRING_TOKEN,
        }
    


        const n_75_53_STATE = n_tabbase_createState("")

        commons_waitEngineConfigure(() => {
            if (n_75_53_STATE.arrayName.length) {
                n_tabbase_setArrayName(
                    n_75_53_STATE, 
                    n_75_53_STATE.arrayName,
                    () => n_tabread_t_setArrayNameFinalize(n_75_53_STATE)
                )
            }
        })
    

        const n_76_1_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_76_1_STATE.outTemplates[0] = []
            
                n_76_1_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_76_1_STATE.outTemplates[0].push(2)
            
            n_76_1_STATE.outMessages[0] = msg_create(n_76_1_STATE.outTemplates[0])
            
                msg_writeStringToken(n_76_1_STATE.outMessages[0], 0, "n2")
            
        
        
        n_76_1_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_76_1_STATE.outMessages[0]
                }
,
        ]
    

        const n_76_2_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_76_2_STATE.outTemplates[0] = []
            
                n_76_2_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_76_2_STATE.outTemplates[0].push(2)
            
            n_76_2_STATE.outMessages[0] = msg_create(n_76_2_STATE.outTemplates[0])
            
                msg_writeStringToken(n_76_2_STATE.outMessages[0], 0, "n3")
            
        
        
        n_76_2_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_76_2_STATE.outMessages[0]
                }
,
        ]
    

        const n_76_3_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_76_3_STATE.outTemplates[0] = []
            
                n_76_3_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_76_3_STATE.outTemplates[0].push(2)
            
            n_76_3_STATE.outMessages[0] = msg_create(n_76_3_STATE.outTemplates[0])
            
                msg_writeStringToken(n_76_3_STATE.outMessages[0], 0, "n4")
            
        
        
        n_76_3_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_76_3_STATE.outMessages[0]
                }
,
        ]
    

        const n_76_12_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_76_12_STATE.outTemplates[0] = []
            
                n_76_12_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_76_12_STATE.outTemplates[0].push(2)
            
            n_76_12_STATE.outMessages[0] = msg_create(n_76_12_STATE.outTemplates[0])
            
                msg_writeStringToken(n_76_12_STATE.outMessages[0], 0, "n5")
            
        
        
        n_76_12_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_76_12_STATE.outMessages[0]
                }
,
        ]
    

        const n_76_4_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_76_4_STATE.outTemplates[0] = []
            
                n_76_4_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_76_4_STATE.outTemplates[0].push(2)
            
            n_76_4_STATE.outMessages[0] = msg_create(n_76_4_STATE.outTemplates[0])
            
                msg_writeStringToken(n_76_4_STATE.outMessages[0], 0, "n6")
            
        
        
        n_76_4_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_76_4_STATE.outMessages[0]
                }
,
        ]
    

        const n_76_5_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_76_5_STATE.outTemplates[0] = []
            
                n_76_5_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_76_5_STATE.outTemplates[0].push(2)
            
            n_76_5_STATE.outMessages[0] = msg_create(n_76_5_STATE.outTemplates[0])
            
                msg_writeStringToken(n_76_5_STATE.outMessages[0], 0, "n7")
            
        
        
        n_76_5_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_76_5_STATE.outMessages[0]
                }
,
        ]
    

        const n_76_6_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_76_6_STATE.outTemplates[0] = []
            
                n_76_6_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_76_6_STATE.outTemplates[0].push(2)
            
            n_76_6_STATE.outMessages[0] = msg_create(n_76_6_STATE.outTemplates[0])
            
                msg_writeStringToken(n_76_6_STATE.outMessages[0], 0, "n8")
            
        
        
        n_76_6_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_76_6_STATE.outMessages[0]
                }
,
        ]
    

        const n_76_7_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_76_7_STATE.outTemplates[0] = []
            
                n_76_7_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_76_7_STATE.outTemplates[0].push(2)
            
            n_76_7_STATE.outMessages[0] = msg_create(n_76_7_STATE.outTemplates[0])
            
                msg_writeStringToken(n_76_7_STATE.outMessages[0], 0, "n9")
            
        
        
        n_76_7_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_76_7_STATE.outMessages[0]
                }
,
        ]
    

        const n_76_8_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_76_8_STATE.outTemplates[0] = []
            
                n_76_8_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_76_8_STATE.outTemplates[0].push(3)
            
            n_76_8_STATE.outMessages[0] = msg_create(n_76_8_STATE.outTemplates[0])
            
                msg_writeStringToken(n_76_8_STATE.outMessages[0], 0, "n10")
            
        
        
        n_76_8_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_76_8_STATE.outMessages[0]
                }
,
        ]
    

        const n_76_9_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_76_9_STATE.outTemplates[0] = []
            
                n_76_9_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_76_9_STATE.outTemplates[0].push(3)
            
            n_76_9_STATE.outMessages[0] = msg_create(n_76_9_STATE.outTemplates[0])
            
                msg_writeStringToken(n_76_9_STATE.outMessages[0], 0, "n11")
            
        
        
        n_76_9_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_76_9_STATE.outMessages[0]
                }
,
        ]
    

        const n_76_11_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_76_11_STATE.outTemplates[0] = []
            
                n_76_11_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_76_11_STATE.outTemplates[0].push(3)
            
            n_76_11_STATE.outMessages[0] = msg_create(n_76_11_STATE.outTemplates[0])
            
                msg_writeStringToken(n_76_11_STATE.outMessages[0], 0, "n12")
            
        
        
        n_76_11_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_76_11_STATE.outMessages[0]
                }
,
        ]
    

        const n_75_46_STATE = {
            delay: 0,
            sampleRatio: 1,
            scheduledBang: SKED_ID_NULL,
        }

        commons_waitEngineConfigure(() => {
            n_75_46_STATE.sampleRatio = computeUnitInSamples(SAMPLE_RATE, 1, "msec")
            n_delay_setDelay(n_75_46_STATE, 10)
        })
    

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("grain4_song", n_77_45_RCVS_0)
            })
        


            const n_77_44_STATE = {
                value: 0,
            }
            n_float_int_setValueFloat(n_77_44_STATE, 0)
        

        const n_78_0_STATE = {
            floatFilter: 0,
            stringFilter: "0",
            filterType: MSG_FLOAT_TOKEN,
        }
    

        const n_78_10_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_78_10_STATE.outTemplates[0] = []
            
                n_78_10_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_78_10_STATE.outTemplates[0].push(2)
            
            n_78_10_STATE.outMessages[0] = msg_create(n_78_10_STATE.outTemplates[0])
            
                msg_writeStringToken(n_78_10_STATE.outMessages[0], 0, "n1")
            
        
        
        n_78_10_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_78_10_STATE.outMessages[0]
                }
,
        ]
    

    const n_77_36_STATE = {
        splitPoint: 0,
        currentList: msg_create([]),
    }

    

     
        {
            const template = [MSG_STRING_TOKEN,3]

            n_77_36_STATE.currentList = msg_create(template)

            msg_writeStringToken(n_77_36_STATE.currentList, 0, "set")
        }
    


        const n_77_35_STATE = {
            floatFilter: 0,
            stringFilter: "list",
            filterType: MSG_STRING_TOKEN,
        }
    


        const n_77_53_STATE = n_tabbase_createState("")

        commons_waitEngineConfigure(() => {
            if (n_77_53_STATE.arrayName.length) {
                n_tabbase_setArrayName(
                    n_77_53_STATE, 
                    n_77_53_STATE.arrayName,
                    () => n_tabread_t_setArrayNameFinalize(n_77_53_STATE)
                )
            }
        })
    

        const n_78_1_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_78_1_STATE.outTemplates[0] = []
            
                n_78_1_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_78_1_STATE.outTemplates[0].push(2)
            
            n_78_1_STATE.outMessages[0] = msg_create(n_78_1_STATE.outTemplates[0])
            
                msg_writeStringToken(n_78_1_STATE.outMessages[0], 0, "n2")
            
        
        
        n_78_1_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_78_1_STATE.outMessages[0]
                }
,
        ]
    

        const n_78_2_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_78_2_STATE.outTemplates[0] = []
            
                n_78_2_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_78_2_STATE.outTemplates[0].push(2)
            
            n_78_2_STATE.outMessages[0] = msg_create(n_78_2_STATE.outTemplates[0])
            
                msg_writeStringToken(n_78_2_STATE.outMessages[0], 0, "n3")
            
        
        
        n_78_2_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_78_2_STATE.outMessages[0]
                }
,
        ]
    

        const n_78_3_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_78_3_STATE.outTemplates[0] = []
            
                n_78_3_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_78_3_STATE.outTemplates[0].push(2)
            
            n_78_3_STATE.outMessages[0] = msg_create(n_78_3_STATE.outTemplates[0])
            
                msg_writeStringToken(n_78_3_STATE.outMessages[0], 0, "n4")
            
        
        
        n_78_3_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_78_3_STATE.outMessages[0]
                }
,
        ]
    

        const n_78_12_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_78_12_STATE.outTemplates[0] = []
            
                n_78_12_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_78_12_STATE.outTemplates[0].push(2)
            
            n_78_12_STATE.outMessages[0] = msg_create(n_78_12_STATE.outTemplates[0])
            
                msg_writeStringToken(n_78_12_STATE.outMessages[0], 0, "n5")
            
        
        
        n_78_12_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_78_12_STATE.outMessages[0]
                }
,
        ]
    

        const n_78_4_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_78_4_STATE.outTemplates[0] = []
            
                n_78_4_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_78_4_STATE.outTemplates[0].push(2)
            
            n_78_4_STATE.outMessages[0] = msg_create(n_78_4_STATE.outTemplates[0])
            
                msg_writeStringToken(n_78_4_STATE.outMessages[0], 0, "n6")
            
        
        
        n_78_4_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_78_4_STATE.outMessages[0]
                }
,
        ]
    

        const n_78_5_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_78_5_STATE.outTemplates[0] = []
            
                n_78_5_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_78_5_STATE.outTemplates[0].push(2)
            
            n_78_5_STATE.outMessages[0] = msg_create(n_78_5_STATE.outTemplates[0])
            
                msg_writeStringToken(n_78_5_STATE.outMessages[0], 0, "n7")
            
        
        
        n_78_5_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_78_5_STATE.outMessages[0]
                }
,
        ]
    

        const n_78_6_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_78_6_STATE.outTemplates[0] = []
            
                n_78_6_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_78_6_STATE.outTemplates[0].push(2)
            
            n_78_6_STATE.outMessages[0] = msg_create(n_78_6_STATE.outTemplates[0])
            
                msg_writeStringToken(n_78_6_STATE.outMessages[0], 0, "n8")
            
        
        
        n_78_6_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_78_6_STATE.outMessages[0]
                }
,
        ]
    

        const n_78_7_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_78_7_STATE.outTemplates[0] = []
            
                n_78_7_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_78_7_STATE.outTemplates[0].push(2)
            
            n_78_7_STATE.outMessages[0] = msg_create(n_78_7_STATE.outTemplates[0])
            
                msg_writeStringToken(n_78_7_STATE.outMessages[0], 0, "n9")
            
        
        
        n_78_7_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_78_7_STATE.outMessages[0]
                }
,
        ]
    

        const n_78_8_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_78_8_STATE.outTemplates[0] = []
            
                n_78_8_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_78_8_STATE.outTemplates[0].push(3)
            
            n_78_8_STATE.outMessages[0] = msg_create(n_78_8_STATE.outTemplates[0])
            
                msg_writeStringToken(n_78_8_STATE.outMessages[0], 0, "n10")
            
        
        
        n_78_8_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_78_8_STATE.outMessages[0]
                }
,
        ]
    

        const n_78_9_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_78_9_STATE.outTemplates[0] = []
            
                n_78_9_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_78_9_STATE.outTemplates[0].push(3)
            
            n_78_9_STATE.outMessages[0] = msg_create(n_78_9_STATE.outTemplates[0])
            
                msg_writeStringToken(n_78_9_STATE.outMessages[0], 0, "n11")
            
        
        
        n_78_9_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_78_9_STATE.outMessages[0]
                }
,
        ]
    

        const n_78_11_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_78_11_STATE.outTemplates[0] = []
            
                n_78_11_STATE.outTemplates[0].push(MSG_STRING_TOKEN)
                n_78_11_STATE.outTemplates[0].push(3)
            
            n_78_11_STATE.outMessages[0] = msg_create(n_78_11_STATE.outTemplates[0])
            
                msg_writeStringToken(n_78_11_STATE.outMessages[0], 0, "n12")
            
        
        
        n_78_11_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_78_11_STATE.outMessages[0]
                }
,
        ]
    

        const n_77_46_STATE = {
            delay: 0,
            sampleRatio: 1,
            scheduledBang: SKED_ID_NULL,
        }

        commons_waitEngineConfigure(() => {
            n_77_46_STATE.sampleRatio = computeUnitInSamples(SAMPLE_RATE, 1, "msec")
            n_delay_setDelay(n_77_46_STATE, 10)
        })
    

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("startBang", n_31_78_RCVS_0)
            })
        

        const n_31_78_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_31_78_STATE.outTemplates[0] = []
            
                n_31_78_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_31_78_STATE.outMessages[0] = msg_create(n_31_78_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_31_78_STATE.outMessages[0], 0, 0)
            
        
        
        n_31_78_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_31_78_STATE.outMessages[0]
                }
,
        ]
    


            const m_n_71_38_1_sig_STATE = {
                currentValue: 50
            }
        


            const m_n_73_38_1_sig_STATE = {
                currentValue: 50
            }
        


            const m_n_75_38_1_sig_STATE = {
                currentValue: 50
            }
        


            const m_n_77_38_1_sig_STATE = {
                currentValue: 50
            }
        

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("positionOffset_1", n_31_111_RCVS_0)
            })
        

        const n_31_111_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
        
        n_31_111_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
            
            
            let stringMem = []
            n_31_111_STATE.outTemplates[0] = []
            
                n_31_111_STATE.outTemplates[0].push(msg_getTokenType(inMessage, 0))
                if (msg_isStringToken(inMessage, 0)) {
                    stringMem[0] = msg_readStringToken(inMessage, 0)
                    n_31_111_STATE.outTemplates[0].push(stringMem[0].length)
                }
            

                n_31_111_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_31_111_STATE.outMessages[0] = msg_create(n_31_111_STATE.outTemplates[0])
            
                if (msg_isFloatToken(inMessage, 0)) {
                    msg_writeFloatToken(n_31_111_STATE.outMessages[0], 0, msg_readFloatToken(inMessage, 0))
                } else if (msg_isStringToken(inMessage, 0)) {
                    msg_writeStringToken(n_31_111_STATE.outMessages[0], 0, stringMem[0])
                }
            

                msg_writeFloatToken(n_31_111_STATE.outMessages[0], 1, 1000)
            
        
                    return n_31_111_STATE.outMessages[0]
                }
,
        ]
    

        const n_31_113_STATE = {
            currentLine: n_line_t_defaultLine,
            currentValue: 0,
            nextDurationSamp: 0,
        }
    

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("msRate", m_n_71_0_1__routemsg_RCVS_0)
            })
        


            const m_n_71_0_1_sig_STATE = {
                currentValue: 0
            }
        

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("totalSampleLength", m_n_71_22_1__routemsg_RCVS_0)
            })
        


            const m_n_71_22_1_sig_STATE = {
                currentValue: 0
            }
        
commons_waitFrame(0, () => n_71_51_RCVS_0(msg_bang()))

        const n_71_51_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_71_51_STATE.outTemplates[0] = []
            
                n_71_51_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_71_51_STATE.outMessages[0] = msg_create(n_71_51_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_71_51_STATE.outMessages[0], 0, 1000)
            
        
        
        n_71_51_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_71_51_STATE.outMessages[0]
                }
,
        ]
    

            const n_71_52_STATE = {
                currentValue: 0
            }
        

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("preset1", n_32_6_RCVS_0)
            })
        

        const n_32_6_STATE = {
            floatFilter: 0,
            stringFilter: "grain_1",
            filterType: MSG_STRING_TOKEN,
        }
    

        const n_32_33_STATE = {
            floatFilter: 0,
            stringFilter: "grainSize",
            filterType: MSG_STRING_TOKEN,
        }
    

            const n_32_1_STATE = {
                busName: "grainSize_1",
            }
        

            const n_32_2_STATE = {
                busName: "modPos_1",
            }
        

            const n_32_3_STATE = {
                busName: "randomPos_1",
            }
        

            const n_32_4_STATE = {
                busName: "pitch_1",
            }
        

            const n_32_5_STATE = {
                busName: "randomPitch_1",
            }
        

            const n_32_28_STATE = {
                busName: "vol_1",
            }
        

            const n_32_32_STATE = {
                busName: "forwardAmt_1",
            }
        

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("preset2", n_32_8_RCVS_0)
            })
        

        const n_32_8_STATE = {
            floatFilter: 0,
            stringFilter: "grain_2",
            filterType: MSG_STRING_TOKEN,
        }
    

        const n_32_39_STATE = {
            floatFilter: 0,
            stringFilter: "grainSize",
            filterType: MSG_STRING_TOKEN,
        }
    

            const n_32_9_STATE = {
                busName: "grainSize_2",
            }
        

            const n_32_10_STATE = {
                busName: "modPos_2",
            }
        

            const n_32_11_STATE = {
                busName: "randomPos_2",
            }
        

            const n_32_12_STATE = {
                busName: "pitch_2",
            }
        

            const n_32_13_STATE = {
                busName: "randomPitch_2",
            }
        

            const n_32_29_STATE = {
                busName: "vol_2",
            }
        

            const n_32_37_STATE = {
                busName: "forwardAmt_2",
            }
        

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("preset3", n_32_15_RCVS_0)
            })
        

        const n_32_15_STATE = {
            floatFilter: 0,
            stringFilter: "grain_3",
            filterType: MSG_STRING_TOKEN,
        }
    

        const n_32_34_STATE = {
            floatFilter: 0,
            stringFilter: "grainSize",
            filterType: MSG_STRING_TOKEN,
        }
    

            const n_32_16_STATE = {
                busName: "grainSize_3",
            }
        

            const n_32_17_STATE = {
                busName: "modPos_3",
            }
        

            const n_32_18_STATE = {
                busName: "randomPos_3",
            }
        

            const n_32_19_STATE = {
                busName: "pitch_3",
            }
        

            const n_32_20_STATE = {
                busName: "randomPitch_3",
            }
        

            const n_32_31_STATE = {
                busName: "vol_3",
            }
        

            const n_32_38_STATE = {
                busName: "forwardAmt_3",
            }
        

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("preset4", n_32_22_RCVS_0)
            })
        

        const n_32_22_STATE = {
            floatFilter: 0,
            stringFilter: "grain_4",
            filterType: MSG_STRING_TOKEN,
        }
    

        const n_32_35_STATE = {
            floatFilter: 0,
            stringFilter: "grainSize",
            filterType: MSG_STRING_TOKEN,
        }
    

            const n_32_23_STATE = {
                busName: "grainSize_4",
            }
        

            const n_32_24_STATE = {
                busName: "modPos_4",
            }
        

            const n_32_25_STATE = {
                busName: "randomPos_4",
            }
        

            const n_32_26_STATE = {
                busName: "pitch_4",
            }
        

            const n_32_27_STATE = {
                busName: "randomPitch_4",
            }
        

            const n_32_30_STATE = {
                busName: "vol_4",
            }
        

            const n_32_36_STATE = {
                busName: "forwardAmt_4",
            }
        

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("msRate", m_n_73_0_1__routemsg_RCVS_0)
            })
        


            const m_n_73_0_1_sig_STATE = {
                currentValue: 0
            }
        

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("totalSampleLength", m_n_73_22_1__routemsg_RCVS_0)
            })
        


            const m_n_73_22_1_sig_STATE = {
                currentValue: 0
            }
        
commons_waitFrame(0, () => n_73_51_RCVS_0(msg_bang()))

        const n_73_51_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_73_51_STATE.outTemplates[0] = []
            
                n_73_51_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_73_51_STATE.outMessages[0] = msg_create(n_73_51_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_73_51_STATE.outMessages[0], 0, 1000)
            
        
        
        n_73_51_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_73_51_STATE.outMessages[0]
                }
,
        ]
    

            const n_73_52_STATE = {
                currentValue: 0
            }
        

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("msRate", m_n_75_0_1__routemsg_RCVS_0)
            })
        


            const m_n_75_0_1_sig_STATE = {
                currentValue: 0
            }
        

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("totalSampleLength", m_n_75_22_1__routemsg_RCVS_0)
            })
        


            const m_n_75_22_1_sig_STATE = {
                currentValue: 0
            }
        
commons_waitFrame(0, () => n_75_51_RCVS_0(msg_bang()))

        const n_75_51_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_75_51_STATE.outTemplates[0] = []
            
                n_75_51_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_75_51_STATE.outMessages[0] = msg_create(n_75_51_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_75_51_STATE.outMessages[0], 0, 1000)
            
        
        
        n_75_51_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_75_51_STATE.outMessages[0]
                }
,
        ]
    

            const n_75_52_STATE = {
                currentValue: 0
            }
        

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("msRate", m_n_77_0_1__routemsg_RCVS_0)
            })
        


            const m_n_77_0_1_sig_STATE = {
                currentValue: 0
            }
        

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("totalSampleLength", m_n_77_22_1__routemsg_RCVS_0)
            })
        


            const m_n_77_22_1_sig_STATE = {
                currentValue: 0
            }
        
commons_waitFrame(0, () => n_77_51_RCVS_0(msg_bang()))

        const n_77_51_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_77_51_STATE.outTemplates[0] = []
            
                n_77_51_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_77_51_STATE.outMessages[0] = msg_create(n_77_51_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_77_51_STATE.outMessages[0], 0, 1000)
            
        
        
        n_77_51_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_77_51_STATE.outMessages[0]
                }
,
        ]
    

            const n_77_52_STATE = {
                currentValue: 0
            }
        
commons_waitFrame(0, () => n_33_3_RCVS_0(msg_bang()))

        const n_33_3_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_33_3_STATE.outTemplates[0] = []
            
                n_33_3_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_33_3_STATE.outMessages[0] = msg_create(n_33_3_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_33_3_STATE.outMessages[0], 0, 1)
            
        
        
        n_33_3_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_33_3_STATE.outMessages[0]
                }
,
        ]
    
commons_waitFrame(0, () => n_33_15_RCVS_0(msg_bang()))

        const n_33_15_STATE = {
            delay: 0,
            sampleRatio: 1,
            scheduledBang: SKED_ID_NULL,
        }

        commons_waitEngineConfigure(() => {
            n_33_15_STATE.sampleRatio = computeUnitInSamples(SAMPLE_RATE, 1, "msec")
            n_delay_setDelay(n_33_15_STATE, 1)
        })
    

        const n_33_5_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_33_5_STATE.outTemplates[0] = []
            
                n_33_5_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_33_5_STATE.outMessages[0] = msg_create(n_33_5_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_33_5_STATE.outMessages[0], 0, 0)
            
        
        
        n_33_5_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_33_5_STATE.outMessages[0]
                }
,
        ]
    
commons_waitFrame(0, () => n_33_18_RCVS_0(msg_bang()))

        const n_33_18_STATE = {
            delay: 0,
            sampleRatio: 1,
            scheduledBang: SKED_ID_NULL,
        }

        commons_waitEngineConfigure(() => {
            n_33_18_STATE.sampleRatio = computeUnitInSamples(SAMPLE_RATE, 1, "msec")
            n_delay_setDelay(n_33_18_STATE, 8)
        })
    

        const n_41_0_STATE = {
            value: msg_create([]),
            receiveBusName: "empty",
            sendBusName: "empty",
            messageReceiver: n_control_defaultMessageHandler,
            messageSender: n_control_defaultMessageHandler,
        }
    
        commons_waitEngineConfigure(() => {
            n_41_0_STATE.messageReceiver = function (m) {
                n_bang_receiveMessage(n_41_0_STATE, m)
            }
            n_41_0_STATE.messageSender = n_41_42_RCVS_0
            n_control_setReceiveBusName(n_41_0_STATE, "empty")
        })

        
    

        const n_41_42_STATE = {
            maxValue: 8
        }
    

        const n_41_1_STATE = {
            floatFilter: 0,
            stringFilter: "0",
            filterType: MSG_FLOAT_TOKEN,
        }
    

        const n_41_2_STATE = {
            value: msg_create([]),
            receiveBusName: "empty",
            sendBusName: "empty",
            messageReceiver: n_control_defaultMessageHandler,
            messageSender: n_control_defaultMessageHandler,
        }
    
        commons_waitEngineConfigure(() => {
            n_41_2_STATE.messageReceiver = function (m) {
                n_bang_receiveMessage(n_41_2_STATE, m)
            }
            n_41_2_STATE.messageSender = n_41_3_RCVS_0
            n_control_setReceiveBusName(n_41_2_STATE, "empty")
        })

        
    

            const n_41_3_STATE = {
                busName: "grainSizeSeq_1",
            }
        

        const n_41_5_STATE = {
            value: msg_create([]),
            receiveBusName: "empty",
            sendBusName: "empty",
            messageReceiver: n_control_defaultMessageHandler,
            messageSender: n_control_defaultMessageHandler,
        }
    
        commons_waitEngineConfigure(() => {
            n_41_5_STATE.messageReceiver = function (m) {
                n_bang_receiveMessage(n_41_5_STATE, m)
            }
            n_41_5_STATE.messageSender = n_41_43_RCVS_0
            n_control_setReceiveBusName(n_41_5_STATE, "empty")
        })

        
    

        const n_41_43_STATE = {
            maxValue: 6
        }
    

        const n_41_6_STATE = {
            floatFilter: 0,
            stringFilter: "0",
            filterType: MSG_FLOAT_TOKEN,
        }
    

        const n_41_7_STATE = {
            value: msg_create([]),
            receiveBusName: "empty",
            sendBusName: "empty",
            messageReceiver: n_control_defaultMessageHandler,
            messageSender: n_control_defaultMessageHandler,
        }
    
        commons_waitEngineConfigure(() => {
            n_41_7_STATE.messageReceiver = function (m) {
                n_bang_receiveMessage(n_41_7_STATE, m)
            }
            n_41_7_STATE.messageSender = n_41_8_RCVS_0
            n_control_setReceiveBusName(n_41_7_STATE, "empty")
        })

        
    

            const n_41_8_STATE = {
                busName: "pitchSeq_1",
            }
        

        const n_41_9_STATE = {
            value: msg_create([]),
            receiveBusName: "empty",
            sendBusName: "empty",
            messageReceiver: n_control_defaultMessageHandler,
            messageSender: n_control_defaultMessageHandler,
        }
    
        commons_waitEngineConfigure(() => {
            n_41_9_STATE.messageReceiver = function (m) {
                n_bang_receiveMessage(n_41_9_STATE, m)
            }
            n_41_9_STATE.messageSender = n_41_44_RCVS_0
            n_control_setReceiveBusName(n_41_9_STATE, "empty")
        })

        
    

        const n_41_44_STATE = {
            maxValue: 6
        }
    

        const n_41_10_STATE = {
            floatFilter: 0,
            stringFilter: "0",
            filterType: MSG_FLOAT_TOKEN,
        }
    

        const n_41_11_STATE = {
            value: msg_create([]),
            receiveBusName: "empty",
            sendBusName: "empty",
            messageReceiver: n_control_defaultMessageHandler,
            messageSender: n_control_defaultMessageHandler,
        }
    
        commons_waitEngineConfigure(() => {
            n_41_11_STATE.messageReceiver = function (m) {
                n_bang_receiveMessage(n_41_11_STATE, m)
            }
            n_41_11_STATE.messageSender = n_41_13_RCVS_0
            n_control_setReceiveBusName(n_41_11_STATE, "empty")
        })

        
    

            const n_41_13_STATE = {
                busName: "modPosSeq_1",
            }
        

            const n_41_12_STATE = {
                value: msg_floats([0]),
                receiveBusName: "empty",
                sendBusName: "empty",
                messageReceiver: n_control_defaultMessageHandler,
                messageSender: n_control_defaultMessageHandler,
            }
        
            commons_waitEngineConfigure(() => {
                n_41_12_STATE.messageReceiver = function (m) {
                    n_floatatom_receiveMessage(n_41_12_STATE, m)
                }
                n_41_12_STATE.messageSender = SND_TO_NULL
                n_control_setReceiveBusName(n_41_12_STATE, "empty")
            })
        

        const n_41_14_STATE = {
            value: msg_create([]),
            receiveBusName: "empty",
            sendBusName: "empty",
            messageReceiver: n_control_defaultMessageHandler,
            messageSender: n_control_defaultMessageHandler,
        }
    
        commons_waitEngineConfigure(() => {
            n_41_14_STATE.messageReceiver = function (m) {
                n_bang_receiveMessage(n_41_14_STATE, m)
            }
            n_41_14_STATE.messageSender = n_41_45_RCVS_0
            n_control_setReceiveBusName(n_41_14_STATE, "empty")
        })

        
    

        const n_41_45_STATE = {
            maxValue: 2
        }
    

        const n_41_15_STATE = {
            floatFilter: 0,
            stringFilter: "0",
            filterType: MSG_FLOAT_TOKEN,
        }
    

        const n_41_16_STATE = {
            value: msg_create([]),
            receiveBusName: "empty",
            sendBusName: "empty",
            messageReceiver: n_control_defaultMessageHandler,
            messageSender: n_control_defaultMessageHandler,
        }
    
        commons_waitEngineConfigure(() => {
            n_41_16_STATE.messageReceiver = function (m) {
                n_bang_receiveMessage(n_41_16_STATE, m)
            }
            n_41_16_STATE.messageSender = n_41_17_RCVS_0
            n_control_setReceiveBusName(n_41_16_STATE, "empty")
        })

        
    

            const n_41_17_STATE = {
                busName: "fwdAmtSeq_1",
            }
        

        const n_41_21_STATE = {
            value: msg_create([]),
            receiveBusName: "empty",
            sendBusName: "empty",
            messageReceiver: n_control_defaultMessageHandler,
            messageSender: n_control_defaultMessageHandler,
        }
    
        commons_waitEngineConfigure(() => {
            n_41_21_STATE.messageReceiver = function (m) {
                n_bang_receiveMessage(n_41_21_STATE, m)
            }
            n_41_21_STATE.messageSender = n_41_41_RCVS_0
            n_control_setReceiveBusName(n_41_21_STATE, "empty")
        })

        
    

        const n_41_41_STATE = {
            maxValue: 8
        }
    

        const n_41_22_STATE = {
            floatFilter: 0,
            stringFilter: "0",
            filterType: MSG_FLOAT_TOKEN,
        }
    

        const n_41_23_STATE = {
            value: msg_create([]),
            receiveBusName: "empty",
            sendBusName: "empty",
            messageReceiver: n_control_defaultMessageHandler,
            messageSender: n_control_defaultMessageHandler,
        }
    
        commons_waitEngineConfigure(() => {
            n_41_23_STATE.messageReceiver = function (m) {
                n_bang_receiveMessage(n_41_23_STATE, m)
            }
            n_41_23_STATE.messageSender = n_41_25_RCVS_0
            n_control_setReceiveBusName(n_41_23_STATE, "empty")
        })

        
    

            const n_41_25_STATE = {
                busName: "randDel1",
            }
        

        const n_41_26_STATE = {
            value: msg_create([]),
            receiveBusName: "empty",
            sendBusName: "empty",
            messageReceiver: n_control_defaultMessageHandler,
            messageSender: n_control_defaultMessageHandler,
        }
    
        commons_waitEngineConfigure(() => {
            n_41_26_STATE.messageReceiver = function (m) {
                n_bang_receiveMessage(n_41_26_STATE, m)
            }
            n_41_26_STATE.messageSender = n_41_46_RCVS_0
            n_control_setReceiveBusName(n_41_26_STATE, "empty")
        })

        
    

        const n_41_46_STATE = {
            maxValue: 12
        }
    

        const n_41_27_STATE = {
            floatFilter: 0,
            stringFilter: "0",
            filterType: MSG_FLOAT_TOKEN,
        }
    

        const n_41_28_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_41_28_STATE.outTemplates[0] = []
            
                n_41_28_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_41_28_STATE.outMessages[0] = msg_create(n_41_28_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_41_28_STATE.outMessages[0], 0, 0)
            
        
        
        n_41_28_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_41_28_STATE.outMessages[0]
                }
,
        ]
    

            const n_41_32_STATE = {
                busName: "positionOffset_1",
            }
        

        const n_41_29_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_41_29_STATE.outTemplates[0] = []
            
                n_41_29_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_41_29_STATE.outMessages[0] = msg_create(n_41_29_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_41_29_STATE.outMessages[0], 0, 0.25)
            
        
        
        n_41_29_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_41_29_STATE.outMessages[0]
                }
,
        ]
    

        const n_41_30_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_41_30_STATE.outTemplates[0] = []
            
                n_41_30_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_41_30_STATE.outMessages[0] = msg_create(n_41_30_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_41_30_STATE.outMessages[0], 0, 0.5)
            
        
        
        n_41_30_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_41_30_STATE.outMessages[0]
                }
,
        ]
    

        const n_41_31_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_41_31_STATE.outTemplates[0] = []
            
                n_41_31_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_41_31_STATE.outMessages[0] = msg_create(n_41_31_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_41_31_STATE.outMessages[0], 0, 0.75)
            
        
        
        n_41_31_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_41_31_STATE.outMessages[0]
                }
,
        ]
    

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("startBang", n_41_28_RCVS_0)
            })
        
commons_waitFrame(0, () => n_41_34_SNDS_0(msg_bang()))

        const n_41_35_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_41_35_STATE.outTemplates[0] = []
            
                n_41_35_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_41_35_STATE.outMessages[0] = msg_create(n_41_35_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_41_35_STATE.outMessages[0], 0, 0.1)
            
        
        
        n_41_35_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_41_35_STATE.outMessages[0]
                }
,
        ]
    

        const n_83_17_STATE = {
            floatInputs: new Map(),
            stringInputs: new Map(),
            outputs: new Array(1),
        }

        n_83_17_STATE.floatInputs.set(1, 0)
        
    

        const n_41_36_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_41_36_STATE.outTemplates[0] = []
            
                n_41_36_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_41_36_STATE.outMessages[0] = msg_create(n_41_36_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_41_36_STATE.outMessages[0], 0, 0.9)
            
        
        
        n_41_36_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_41_36_STATE.outMessages[0]
                }
,
        ]
    

        const n_85_17_STATE = {
            floatInputs: new Map(),
            stringInputs: new Map(),
            outputs: new Array(1),
        }

        n_85_17_STATE.floatInputs.set(1, 0)
        
    

        const n_41_37_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_41_37_STATE.outTemplates[0] = []
            
                n_41_37_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_41_37_STATE.outMessages[0] = msg_create(n_41_37_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_41_37_STATE.outMessages[0], 0, 0.5)
            
        
        
        n_41_37_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_41_37_STATE.outMessages[0]
                }
,
        ]
    

        const n_87_17_STATE = {
            floatInputs: new Map(),
            stringInputs: new Map(),
            outputs: new Array(1),
        }

        n_87_17_STATE.floatInputs.set(1, 0)
        
    

        const n_41_38_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_41_38_STATE.outTemplates[0] = []
            
                n_41_38_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_41_38_STATE.outMessages[0] = msg_create(n_41_38_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_41_38_STATE.outMessages[0], 0, 0.2)
            
        
        
        n_41_38_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_41_38_STATE.outMessages[0]
                }
,
        ]
    

        const n_89_17_STATE = {
            floatInputs: new Map(),
            stringInputs: new Map(),
            outputs: new Array(1),
        }

        n_89_17_STATE.floatInputs.set(1, 0)
        
    

        const n_41_39_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_41_39_STATE.outTemplates[0] = []
            
                n_41_39_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_41_39_STATE.outMessages[0] = msg_create(n_41_39_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_41_39_STATE.outMessages[0], 0, 0.1)
            
        
        
        n_41_39_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_41_39_STATE.outMessages[0]
                }
,
        ]
    

        const n_91_17_STATE = {
            floatInputs: new Map(),
            stringInputs: new Map(),
            outputs: new Array(1),
        }

        n_91_17_STATE.floatInputs.set(1, 0)
        
    

        const n_41_40_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_41_40_STATE.outTemplates[0] = []
            
                n_41_40_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_41_40_STATE.outMessages[0] = msg_create(n_41_40_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_41_40_STATE.outMessages[0], 0, 0.4)
            
        
        
        n_41_40_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_41_40_STATE.outMessages[0]
                }
,
        ]
    

        const n_93_17_STATE = {
            floatInputs: new Map(),
            stringInputs: new Map(),
            outputs: new Array(1),
        }

        n_93_17_STATE.floatInputs.set(1, 0)
        
    

        const n_42_0_STATE = {
            value: msg_create([]),
            receiveBusName: "empty",
            sendBusName: "empty",
            messageReceiver: n_control_defaultMessageHandler,
            messageSender: n_control_defaultMessageHandler,
        }
    
        commons_waitEngineConfigure(() => {
            n_42_0_STATE.messageReceiver = function (m) {
                n_bang_receiveMessage(n_42_0_STATE, m)
            }
            n_42_0_STATE.messageSender = n_42_1_RCVS_0
            n_control_setReceiveBusName(n_42_0_STATE, "empty")
        })

        
    

        const n_42_1_STATE = {
            maxValue: 4
        }
    

        const n_42_2_STATE = {
            floatFilter: 0,
            stringFilter: "0",
            filterType: MSG_FLOAT_TOKEN,
        }
    

        const n_42_4_STATE = {
            maxValue: 30
        }
    

        const n_42_34_STATE = {
                leftOp: 0,
                rightOp: 0,
            }
            n_mul_setLeft(n_42_34_STATE, 0)
            n_mul_setRight(n_42_34_STATE, 0.01)
        

            const n_42_40_STATE = {
                busName: "forwardAmt_1",
            }
        

        const n_42_3_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_42_3_STATE.outTemplates[0] = []
            
                n_42_3_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_42_3_STATE.outMessages[0] = msg_create(n_42_3_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_42_3_STATE.outMessages[0], 0, 0)
            
        
        
        n_42_3_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_42_3_STATE.outMessages[0]
                }
,
        ]
    

        const n_42_5_STATE = {
            value: msg_create([]),
            receiveBusName: "empty",
            sendBusName: "empty",
            messageReceiver: n_control_defaultMessageHandler,
            messageSender: n_control_defaultMessageHandler,
        }
    
        commons_waitEngineConfigure(() => {
            n_42_5_STATE.messageReceiver = function (m) {
                n_bang_receiveMessage(n_42_5_STATE, m)
            }
            n_42_5_STATE.messageSender = n_42_8_RCVS_0
            n_control_setReceiveBusName(n_42_5_STATE, "empty")
        })

        
    

        const n_42_8_STATE = {
            maxValue: 4
        }
    

        const n_42_19_STATE = {
            floatFilter: 0,
            stringFilter: "0",
            filterType: MSG_FLOAT_TOKEN,
        }
    

        const n_42_6_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_42_6_STATE.outTemplates[0] = []
            
                n_42_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_42_6_STATE.outMessages[0] = msg_create(n_42_6_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_42_6_STATE.outMessages[0], 0, 0.25)
            
        
        
        n_42_6_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_42_6_STATE.outMessages[0]
                }
,
        ]
    

            const n_42_41_STATE = {
                busName: "pitch_1",
            }
        

        const n_42_17_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_42_17_STATE.outTemplates[0] = []
            
                n_42_17_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_42_17_STATE.outMessages[0] = msg_create(n_42_17_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_42_17_STATE.outMessages[0], 0, 0.125)
            
        
        
        n_42_17_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_42_17_STATE.outMessages[0]
                }
,
        ]
    

        const n_42_7_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_42_7_STATE.outTemplates[0] = []
            
                n_42_7_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_42_7_STATE.outMessages[0] = msg_create(n_42_7_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_42_7_STATE.outMessages[0], 0, 0.125)
            
        
        
        n_42_7_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_42_7_STATE.outMessages[0]
                }
,
        ]
    

        const n_42_16_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_42_16_STATE.outTemplates[0] = []
            
                n_42_16_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_42_16_STATE.outMessages[0] = msg_create(n_42_16_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_42_16_STATE.outMessages[0], 0, 0.0625)
            
        
        
        n_42_16_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_42_16_STATE.outMessages[0]
                }
,
        ]
    

        const n_42_9_STATE = {
            value: msg_create([]),
            receiveBusName: "empty",
            sendBusName: "empty",
            messageReceiver: n_control_defaultMessageHandler,
            messageSender: n_control_defaultMessageHandler,
        }
    
        commons_waitEngineConfigure(() => {
            n_42_9_STATE.messageReceiver = function (m) {
                n_bang_receiveMessage(n_42_9_STATE, m)
            }
            n_42_9_STATE.messageSender = n_42_10_RCVS_0
            n_control_setReceiveBusName(n_42_9_STATE, "empty")
        })

        
    

        const n_42_10_STATE = {
            maxValue: 10
        }
    

        const n_42_11_STATE = {
                leftOp: 0,
                rightOp: 0,
            }
            n_mul_setLeft(n_42_11_STATE, 0)
            n_mul_setRight(n_42_11_STATE, 0.1)
        

            const n_42_35_STATE = {
                busName: "delVol_1",
            }
        

        const n_42_12_STATE = {
            value: msg_create([]),
            receiveBusName: "empty",
            sendBusName: "empty",
            messageReceiver: n_control_defaultMessageHandler,
            messageSender: n_control_defaultMessageHandler,
        }
    
        commons_waitEngineConfigure(() => {
            n_42_12_STATE.messageReceiver = function (m) {
                n_bang_receiveMessage(n_42_12_STATE, m)
            }
            n_42_12_STATE.messageSender = n_42_13_RCVS_0
            n_control_setReceiveBusName(n_42_12_STATE, "empty")
        })

        
    

        const n_42_13_STATE = {
            maxValue: 100
        }
    

        const n_42_14_STATE = {
                leftOp: 0,
                rightOp: 0,
            }
            n_mul_setLeft(n_42_14_STATE, 0)
            n_mul_setRight(n_42_14_STATE, 0.01)
        

            const n_42_42_STATE = {
                busName: "modPos_1",
            }
        

        const n_42_15_STATE = {
            value: msg_create([]),
            receiveBusName: "empty",
            sendBusName: "empty",
            messageReceiver: n_control_defaultMessageHandler,
            messageSender: n_control_defaultMessageHandler,
        }
    
        commons_waitEngineConfigure(() => {
            n_42_15_STATE.messageReceiver = function (m) {
                n_bang_receiveMessage(n_42_15_STATE, m)
            }
            n_42_15_STATE.messageSender = n_42_33_RCVS_0
            n_control_setReceiveBusName(n_42_15_STATE, "empty")
        })

        
    


        const n_42_24_STATE = {
            maxValue: 6
        }
    

        const n_42_25_STATE = {
            floatFilter: 0,
            stringFilter: "0",
            filterType: MSG_FLOAT_TOKEN,
        }
    

        const n_42_21_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_42_21_STATE.outTemplates[0] = []
            
                n_42_21_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_42_21_STATE.outMessages[0] = msg_create(n_42_21_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_42_21_STATE.outMessages[0], 0, 1)
            
        
        
        n_42_21_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_42_21_STATE.outMessages[0]
                }
,
        ]
    


            const m_n_42_31_0_sig_STATE = {
                currentValue: 0
            }
        

        const n_42_22_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_42_22_STATE.outTemplates[0] = []
            
                n_42_22_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_42_22_STATE.outMessages[0] = msg_create(n_42_22_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_42_22_STATE.outMessages[0], 0, 0.75)
            
        
        
        n_42_22_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_42_22_STATE.outMessages[0]
                }
,
        ]
    

        const n_42_27_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_42_27_STATE.outTemplates[0] = []
            
                n_42_27_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_42_27_STATE.outMessages[0] = msg_create(n_42_27_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_42_27_STATE.outMessages[0], 0, 0.125)
            
        
        
        n_42_27_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_42_27_STATE.outMessages[0]
                }
,
        ]
    

        const n_42_20_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_42_20_STATE.outTemplates[0] = []
            
                n_42_20_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_42_20_STATE.outMessages[0] = msg_create(n_42_20_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_42_20_STATE.outMessages[0], 0, 0.075)
            
        
        
        n_42_20_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_42_20_STATE.outMessages[0]
                }
,
        ]
    

        const n_42_23_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_42_23_STATE.outTemplates[0] = []
            
                n_42_23_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_42_23_STATE.outMessages[0] = msg_create(n_42_23_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_42_23_STATE.outMessages[0], 0, 0.5)
            
        
        
        n_42_23_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_42_23_STATE.outMessages[0]
                }
,
        ]
    

        const n_42_26_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_42_26_STATE.outTemplates[0] = []
            
                n_42_26_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_42_26_STATE.outMessages[0] = msg_create(n_42_26_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_42_26_STATE.outMessages[0], 0, 0.025)
            
        
        
        n_42_26_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_42_26_STATE.outMessages[0]
                }
,
        ]
    

        const n_42_32_STATE = {
            maxValue: 3
        }
    

        const n_42_28_STATE = {
            floatFilter: 0,
            stringFilter: "0",
            filterType: MSG_FLOAT_TOKEN,
        }
    

        const n_42_29_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_42_29_STATE.outTemplates[0] = []
            
                n_42_29_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_42_29_STATE.outMessages[0] = msg_create(n_42_29_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_42_29_STATE.outMessages[0], 0, -1)
            
        
        
        n_42_29_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_42_29_STATE.outMessages[0]
                }
,
        ]
    


            const m_n_42_31_1_sig_STATE = {
                currentValue: 0
            }
        

        const n_42_30_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_42_30_STATE.outTemplates[0] = []
            
                n_42_30_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_42_30_STATE.outMessages[0] = msg_create(n_42_30_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_42_30_STATE.outMessages[0], 0, 1)
            
        
        
        n_42_30_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_42_30_STATE.outMessages[0]
                }
,
        ]
    

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("startBang", n_42_18_SNDS_0)
            })
        

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("grainSizeSeq_1", n_42_15_RCVS_0)
            })
        

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("modPosSeq_1", n_42_12_RCVS_0)
            })
        

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("pitchSeq_1", n_42_5_RCVS_0)
            })
        

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("fwdAmtSeq_1", n_42_0_RCVS_0)
            })
        

            const n_83_7_STATE = {
                value: 0,
            }
            n_float_int_setValueInt(n_83_7_STATE, 0)
        

        const n_83_2_STATE = {
            isClosed: true
        }
    


        const n_83_1_STATE = {
            currentValue: 0
        }
    

            const n_83_8_STATE = {
                currentValue: 0
            }
        


        const n_83_10_STATE = {
            isClosed: true
        }
    

            const n_83_13_STATE = {
                currentValue: 0
            }
        

        const n_83_9_STATE = {
            floatFilter: 1,
            stringFilter: "1",
            filterType: MSG_FLOAT_TOKEN,
        }
    



        const n_83_14_STATE = {
            delay: 0,
            sampleRatio: 1,
            scheduledBang: SKED_ID_NULL,
        }

        commons_waitEngineConfigure(() => {
            n_83_14_STATE.sampleRatio = computeUnitInSamples(SAMPLE_RATE, 1, "msec")
            n_delay_setDelay(n_83_14_STATE, 1200)
        })
    

        const n_83_6_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_83_6_STATE.outTemplates[0] = []
            
                n_83_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_83_6_STATE.outMessages[0] = msg_create(n_83_6_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_83_6_STATE.outMessages[0], 0, 1)
            
        
        
        n_83_6_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_83_6_STATE.outMessages[0]
                }
,
        ]
    

        const n_83_4_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_83_4_STATE.outTemplates[0] = []
            
                n_83_4_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_83_4_STATE.outMessages[0] = msg_create(n_83_4_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_83_4_STATE.outMessages[0], 0, 0)
            
        
        
        n_83_4_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_83_4_STATE.outMessages[0]
                }
,
        ]
    


        const n_84_2_STATE = {
            delay: 0,
            sampleRatio: 1,
            scheduledBang: SKED_ID_NULL,
        }

        commons_waitEngineConfigure(() => {
            n_84_2_STATE.sampleRatio = computeUnitInSamples(SAMPLE_RATE, 1, "msec")
            n_delay_setDelay(n_84_2_STATE, 1000)
        })
    

        const n_84_5_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_84_5_STATE.outTemplates[0] = []
            
                n_84_5_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_84_5_STATE.outMessages[0] = msg_create(n_84_5_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_84_5_STATE.outMessages[0], 0, 0)
            
        
        
        n_84_5_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_84_5_STATE.outMessages[0]
                }
,
        ]
    

            const n_84_1_STATE = {
                value: 0,
            }
            n_float_int_setValueInt(n_84_1_STATE, 0)
        

        const n_84_6_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_84_6_STATE.outTemplates[0] = []
            
                n_84_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_84_6_STATE.outMessages[0] = msg_create(n_84_6_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_84_6_STATE.outMessages[0], 0, 1)
            
        
        
        n_84_6_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_84_6_STATE.outMessages[0]
                }
,
        ]
    

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("genMetro", n_83_2_RCVS_0)
            })
        
commons_waitFrame(0, () => n_83_6_RCVS_0(msg_bang()))

            const n_85_7_STATE = {
                value: 0,
            }
            n_float_int_setValueInt(n_85_7_STATE, 0)
        

        const n_85_2_STATE = {
            isClosed: true
        }
    


        const n_85_1_STATE = {
            currentValue: 0
        }
    

            const n_85_8_STATE = {
                currentValue: 0
            }
        


        const n_85_10_STATE = {
            isClosed: true
        }
    

            const n_85_13_STATE = {
                currentValue: 0
            }
        

        const n_85_9_STATE = {
            floatFilter: 1,
            stringFilter: "1",
            filterType: MSG_FLOAT_TOKEN,
        }
    



        const n_85_14_STATE = {
            delay: 0,
            sampleRatio: 1,
            scheduledBang: SKED_ID_NULL,
        }

        commons_waitEngineConfigure(() => {
            n_85_14_STATE.sampleRatio = computeUnitInSamples(SAMPLE_RATE, 1, "msec")
            n_delay_setDelay(n_85_14_STATE, 1200)
        })
    

        const n_85_6_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_85_6_STATE.outTemplates[0] = []
            
                n_85_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_85_6_STATE.outMessages[0] = msg_create(n_85_6_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_85_6_STATE.outMessages[0], 0, 1)
            
        
        
        n_85_6_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_85_6_STATE.outMessages[0]
                }
,
        ]
    

        const n_85_4_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_85_4_STATE.outTemplates[0] = []
            
                n_85_4_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_85_4_STATE.outMessages[0] = msg_create(n_85_4_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_85_4_STATE.outMessages[0], 0, 0)
            
        
        
        n_85_4_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_85_4_STATE.outMessages[0]
                }
,
        ]
    


        const n_86_2_STATE = {
            delay: 0,
            sampleRatio: 1,
            scheduledBang: SKED_ID_NULL,
        }

        commons_waitEngineConfigure(() => {
            n_86_2_STATE.sampleRatio = computeUnitInSamples(SAMPLE_RATE, 1, "msec")
            n_delay_setDelay(n_86_2_STATE, 1000)
        })
    

        const n_86_5_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_86_5_STATE.outTemplates[0] = []
            
                n_86_5_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_86_5_STATE.outMessages[0] = msg_create(n_86_5_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_86_5_STATE.outMessages[0], 0, 0)
            
        
        
        n_86_5_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_86_5_STATE.outMessages[0]
                }
,
        ]
    

            const n_86_1_STATE = {
                value: 0,
            }
            n_float_int_setValueInt(n_86_1_STATE, 0)
        

        const n_86_6_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_86_6_STATE.outTemplates[0] = []
            
                n_86_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_86_6_STATE.outMessages[0] = msg_create(n_86_6_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_86_6_STATE.outMessages[0], 0, 1)
            
        
        
        n_86_6_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_86_6_STATE.outMessages[0]
                }
,
        ]
    

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("genMetro", n_85_2_RCVS_0)
            })
        
commons_waitFrame(0, () => n_85_6_RCVS_0(msg_bang()))

            const n_87_7_STATE = {
                value: 0,
            }
            n_float_int_setValueInt(n_87_7_STATE, 0)
        

        const n_87_2_STATE = {
            isClosed: true
        }
    


        const n_87_1_STATE = {
            currentValue: 0
        }
    

            const n_87_8_STATE = {
                currentValue: 0
            }
        


        const n_87_10_STATE = {
            isClosed: true
        }
    

            const n_87_13_STATE = {
                currentValue: 0
            }
        

        const n_87_9_STATE = {
            floatFilter: 1,
            stringFilter: "1",
            filterType: MSG_FLOAT_TOKEN,
        }
    



        const n_87_14_STATE = {
            delay: 0,
            sampleRatio: 1,
            scheduledBang: SKED_ID_NULL,
        }

        commons_waitEngineConfigure(() => {
            n_87_14_STATE.sampleRatio = computeUnitInSamples(SAMPLE_RATE, 1, "msec")
            n_delay_setDelay(n_87_14_STATE, 1200)
        })
    

        const n_87_6_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_87_6_STATE.outTemplates[0] = []
            
                n_87_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_87_6_STATE.outMessages[0] = msg_create(n_87_6_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_87_6_STATE.outMessages[0], 0, 1)
            
        
        
        n_87_6_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_87_6_STATE.outMessages[0]
                }
,
        ]
    

        const n_87_4_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_87_4_STATE.outTemplates[0] = []
            
                n_87_4_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_87_4_STATE.outMessages[0] = msg_create(n_87_4_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_87_4_STATE.outMessages[0], 0, 0)
            
        
        
        n_87_4_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_87_4_STATE.outMessages[0]
                }
,
        ]
    


        const n_88_2_STATE = {
            delay: 0,
            sampleRatio: 1,
            scheduledBang: SKED_ID_NULL,
        }

        commons_waitEngineConfigure(() => {
            n_88_2_STATE.sampleRatio = computeUnitInSamples(SAMPLE_RATE, 1, "msec")
            n_delay_setDelay(n_88_2_STATE, 1000)
        })
    

        const n_88_5_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_88_5_STATE.outTemplates[0] = []
            
                n_88_5_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_88_5_STATE.outMessages[0] = msg_create(n_88_5_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_88_5_STATE.outMessages[0], 0, 0)
            
        
        
        n_88_5_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_88_5_STATE.outMessages[0]
                }
,
        ]
    

            const n_88_1_STATE = {
                value: 0,
            }
            n_float_int_setValueInt(n_88_1_STATE, 0)
        

        const n_88_6_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_88_6_STATE.outTemplates[0] = []
            
                n_88_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_88_6_STATE.outMessages[0] = msg_create(n_88_6_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_88_6_STATE.outMessages[0], 0, 1)
            
        
        
        n_88_6_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_88_6_STATE.outMessages[0]
                }
,
        ]
    

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("genMetro", n_87_2_RCVS_0)
            })
        
commons_waitFrame(0, () => n_87_6_RCVS_0(msg_bang()))

            const n_89_7_STATE = {
                value: 0,
            }
            n_float_int_setValueInt(n_89_7_STATE, 0)
        

        const n_89_2_STATE = {
            isClosed: true
        }
    


        const n_89_1_STATE = {
            currentValue: 0
        }
    

            const n_89_8_STATE = {
                currentValue: 0
            }
        


        const n_89_10_STATE = {
            isClosed: true
        }
    

            const n_89_13_STATE = {
                currentValue: 0
            }
        

        const n_89_9_STATE = {
            floatFilter: 1,
            stringFilter: "1",
            filterType: MSG_FLOAT_TOKEN,
        }
    



        const n_89_14_STATE = {
            delay: 0,
            sampleRatio: 1,
            scheduledBang: SKED_ID_NULL,
        }

        commons_waitEngineConfigure(() => {
            n_89_14_STATE.sampleRatio = computeUnitInSamples(SAMPLE_RATE, 1, "msec")
            n_delay_setDelay(n_89_14_STATE, 1200)
        })
    

        const n_89_6_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_89_6_STATE.outTemplates[0] = []
            
                n_89_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_89_6_STATE.outMessages[0] = msg_create(n_89_6_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_89_6_STATE.outMessages[0], 0, 1)
            
        
        
        n_89_6_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_89_6_STATE.outMessages[0]
                }
,
        ]
    

        const n_89_4_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_89_4_STATE.outTemplates[0] = []
            
                n_89_4_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_89_4_STATE.outMessages[0] = msg_create(n_89_4_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_89_4_STATE.outMessages[0], 0, 0)
            
        
        
        n_89_4_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_89_4_STATE.outMessages[0]
                }
,
        ]
    


        const n_90_2_STATE = {
            delay: 0,
            sampleRatio: 1,
            scheduledBang: SKED_ID_NULL,
        }

        commons_waitEngineConfigure(() => {
            n_90_2_STATE.sampleRatio = computeUnitInSamples(SAMPLE_RATE, 1, "msec")
            n_delay_setDelay(n_90_2_STATE, 1000)
        })
    

        const n_90_5_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_90_5_STATE.outTemplates[0] = []
            
                n_90_5_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_90_5_STATE.outMessages[0] = msg_create(n_90_5_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_90_5_STATE.outMessages[0], 0, 0)
            
        
        
        n_90_5_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_90_5_STATE.outMessages[0]
                }
,
        ]
    

            const n_90_1_STATE = {
                value: 0,
            }
            n_float_int_setValueInt(n_90_1_STATE, 0)
        

        const n_90_6_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_90_6_STATE.outTemplates[0] = []
            
                n_90_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_90_6_STATE.outMessages[0] = msg_create(n_90_6_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_90_6_STATE.outMessages[0], 0, 1)
            
        
        
        n_90_6_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_90_6_STATE.outMessages[0]
                }
,
        ]
    

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("genMetro", n_89_2_RCVS_0)
            })
        
commons_waitFrame(0, () => n_89_6_RCVS_0(msg_bang()))

            const n_91_7_STATE = {
                value: 0,
            }
            n_float_int_setValueInt(n_91_7_STATE, 0)
        

        const n_91_2_STATE = {
            isClosed: true
        }
    


        const n_91_1_STATE = {
            currentValue: 0
        }
    

            const n_91_8_STATE = {
                currentValue: 0
            }
        


        const n_91_10_STATE = {
            isClosed: true
        }
    

            const n_91_13_STATE = {
                currentValue: 0
            }
        

        const n_91_9_STATE = {
            floatFilter: 1,
            stringFilter: "1",
            filterType: MSG_FLOAT_TOKEN,
        }
    



        const n_91_14_STATE = {
            delay: 0,
            sampleRatio: 1,
            scheduledBang: SKED_ID_NULL,
        }

        commons_waitEngineConfigure(() => {
            n_91_14_STATE.sampleRatio = computeUnitInSamples(SAMPLE_RATE, 1, "msec")
            n_delay_setDelay(n_91_14_STATE, 1200)
        })
    

        const n_91_6_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_91_6_STATE.outTemplates[0] = []
            
                n_91_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_91_6_STATE.outMessages[0] = msg_create(n_91_6_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_91_6_STATE.outMessages[0], 0, 1)
            
        
        
        n_91_6_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_91_6_STATE.outMessages[0]
                }
,
        ]
    

        const n_91_4_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_91_4_STATE.outTemplates[0] = []
            
                n_91_4_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_91_4_STATE.outMessages[0] = msg_create(n_91_4_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_91_4_STATE.outMessages[0], 0, 0)
            
        
        
        n_91_4_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_91_4_STATE.outMessages[0]
                }
,
        ]
    


        const n_92_2_STATE = {
            delay: 0,
            sampleRatio: 1,
            scheduledBang: SKED_ID_NULL,
        }

        commons_waitEngineConfigure(() => {
            n_92_2_STATE.sampleRatio = computeUnitInSamples(SAMPLE_RATE, 1, "msec")
            n_delay_setDelay(n_92_2_STATE, 1000)
        })
    

        const n_92_5_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_92_5_STATE.outTemplates[0] = []
            
                n_92_5_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_92_5_STATE.outMessages[0] = msg_create(n_92_5_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_92_5_STATE.outMessages[0], 0, 0)
            
        
        
        n_92_5_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_92_5_STATE.outMessages[0]
                }
,
        ]
    

            const n_92_1_STATE = {
                value: 0,
            }
            n_float_int_setValueInt(n_92_1_STATE, 0)
        

        const n_92_6_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_92_6_STATE.outTemplates[0] = []
            
                n_92_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_92_6_STATE.outMessages[0] = msg_create(n_92_6_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_92_6_STATE.outMessages[0], 0, 1)
            
        
        
        n_92_6_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_92_6_STATE.outMessages[0]
                }
,
        ]
    

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("genMetro", n_91_2_RCVS_0)
            })
        
commons_waitFrame(0, () => n_91_6_RCVS_0(msg_bang()))

            const n_93_7_STATE = {
                value: 0,
            }
            n_float_int_setValueInt(n_93_7_STATE, 0)
        

        const n_93_2_STATE = {
            isClosed: true
        }
    


        const n_93_1_STATE = {
            currentValue: 0
        }
    

            const n_93_8_STATE = {
                currentValue: 0
            }
        


        const n_93_10_STATE = {
            isClosed: true
        }
    

            const n_93_13_STATE = {
                currentValue: 0
            }
        

        const n_93_9_STATE = {
            floatFilter: 1,
            stringFilter: "1",
            filterType: MSG_FLOAT_TOKEN,
        }
    



        const n_93_14_STATE = {
            delay: 0,
            sampleRatio: 1,
            scheduledBang: SKED_ID_NULL,
        }

        commons_waitEngineConfigure(() => {
            n_93_14_STATE.sampleRatio = computeUnitInSamples(SAMPLE_RATE, 1, "msec")
            n_delay_setDelay(n_93_14_STATE, 1200)
        })
    

        const n_93_6_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_93_6_STATE.outTemplates[0] = []
            
                n_93_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_93_6_STATE.outMessages[0] = msg_create(n_93_6_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_93_6_STATE.outMessages[0], 0, 1)
            
        
        
        n_93_6_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_93_6_STATE.outMessages[0]
                }
,
        ]
    

        const n_93_4_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_93_4_STATE.outTemplates[0] = []
            
                n_93_4_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_93_4_STATE.outMessages[0] = msg_create(n_93_4_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_93_4_STATE.outMessages[0], 0, 0)
            
        
        
        n_93_4_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_93_4_STATE.outMessages[0]
                }
,
        ]
    


        const n_94_2_STATE = {
            delay: 0,
            sampleRatio: 1,
            scheduledBang: SKED_ID_NULL,
        }

        commons_waitEngineConfigure(() => {
            n_94_2_STATE.sampleRatio = computeUnitInSamples(SAMPLE_RATE, 1, "msec")
            n_delay_setDelay(n_94_2_STATE, 1000)
        })
    

        const n_94_5_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_94_5_STATE.outTemplates[0] = []
            
                n_94_5_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_94_5_STATE.outMessages[0] = msg_create(n_94_5_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_94_5_STATE.outMessages[0], 0, 0)
            
        
        
        n_94_5_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_94_5_STATE.outMessages[0]
                }
,
        ]
    

            const n_94_1_STATE = {
                value: 0,
            }
            n_float_int_setValueInt(n_94_1_STATE, 0)
        

        const n_94_6_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_94_6_STATE.outTemplates[0] = []
            
                n_94_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_94_6_STATE.outMessages[0] = msg_create(n_94_6_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_94_6_STATE.outMessages[0], 0, 1)
            
        
        
        n_94_6_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_94_6_STATE.outMessages[0]
                }
,
        ]
    

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("genMetro", n_93_2_RCVS_0)
            })
        
commons_waitFrame(0, () => n_93_6_RCVS_0(msg_bang()))

        const n_43_0_STATE = {
            value: msg_create([]),
            receiveBusName: "empty",
            sendBusName: "empty",
            messageReceiver: n_control_defaultMessageHandler,
            messageSender: n_control_defaultMessageHandler,
        }
    
        commons_waitEngineConfigure(() => {
            n_43_0_STATE.messageReceiver = function (m) {
                n_bang_receiveMessage(n_43_0_STATE, m)
            }
            n_43_0_STATE.messageSender = n_43_46_RCVS_0
            n_control_setReceiveBusName(n_43_0_STATE, "empty")
        })

        
    

        const n_43_46_STATE = {
            maxValue: 8
        }
    

        const n_43_1_STATE = {
            floatFilter: 0,
            stringFilter: "0",
            filterType: MSG_FLOAT_TOKEN,
        }
    

        const n_43_2_STATE = {
            value: msg_create([]),
            receiveBusName: "empty",
            sendBusName: "empty",
            messageReceiver: n_control_defaultMessageHandler,
            messageSender: n_control_defaultMessageHandler,
        }
    
        commons_waitEngineConfigure(() => {
            n_43_2_STATE.messageReceiver = function (m) {
                n_bang_receiveMessage(n_43_2_STATE, m)
            }
            n_43_2_STATE.messageSender = n_43_20_RCVS_0
            n_control_setReceiveBusName(n_43_2_STATE, "empty")
        })

        
    

            const n_43_20_STATE = {
                busName: "grainSizeSeq_2",
            }
        

            const n_43_3_STATE = {
                value: msg_floats([0]),
                receiveBusName: "empty",
                sendBusName: "empty",
                messageReceiver: n_control_defaultMessageHandler,
                messageSender: n_control_defaultMessageHandler,
            }
        
            commons_waitEngineConfigure(() => {
                n_43_3_STATE.messageReceiver = function (m) {
                    n_floatatom_receiveMessage(n_43_3_STATE, m)
                }
                n_43_3_STATE.messageSender = SND_TO_NULL
                n_control_setReceiveBusName(n_43_3_STATE, "empty")
            })
        

        const n_43_5_STATE = {
            value: msg_create([]),
            receiveBusName: "empty",
            sendBusName: "empty",
            messageReceiver: n_control_defaultMessageHandler,
            messageSender: n_control_defaultMessageHandler,
        }
    
        commons_waitEngineConfigure(() => {
            n_43_5_STATE.messageReceiver = function (m) {
                n_bang_receiveMessage(n_43_5_STATE, m)
            }
            n_43_5_STATE.messageSender = n_43_47_RCVS_0
            n_control_setReceiveBusName(n_43_5_STATE, "empty")
        })

        
    

        const n_43_47_STATE = {
            maxValue: 8
        }
    

        const n_43_6_STATE = {
            floatFilter: 0,
            stringFilter: "0",
            filterType: MSG_FLOAT_TOKEN,
        }
    

        const n_43_7_STATE = {
            value: msg_create([]),
            receiveBusName: "empty",
            sendBusName: "empty",
            messageReceiver: n_control_defaultMessageHandler,
            messageSender: n_control_defaultMessageHandler,
        }
    
        commons_waitEngineConfigure(() => {
            n_43_7_STATE.messageReceiver = function (m) {
                n_bang_receiveMessage(n_43_7_STATE, m)
            }
            n_43_7_STATE.messageSender = n_43_19_RCVS_0
            n_control_setReceiveBusName(n_43_7_STATE, "empty")
        })

        
    

            const n_43_19_STATE = {
                busName: "pitchSeq_2",
            }
        

            const n_43_8_STATE = {
                value: msg_floats([0]),
                receiveBusName: "empty",
                sendBusName: "empty",
                messageReceiver: n_control_defaultMessageHandler,
                messageSender: n_control_defaultMessageHandler,
            }
        
            commons_waitEngineConfigure(() => {
                n_43_8_STATE.messageReceiver = function (m) {
                    n_floatatom_receiveMessage(n_43_8_STATE, m)
                }
                n_43_8_STATE.messageSender = SND_TO_NULL
                n_control_setReceiveBusName(n_43_8_STATE, "empty")
            })
        

        const n_43_9_STATE = {
            value: msg_create([]),
            receiveBusName: "empty",
            sendBusName: "empty",
            messageReceiver: n_control_defaultMessageHandler,
            messageSender: n_control_defaultMessageHandler,
        }
    
        commons_waitEngineConfigure(() => {
            n_43_9_STATE.messageReceiver = function (m) {
                n_bang_receiveMessage(n_43_9_STATE, m)
            }
            n_43_9_STATE.messageSender = n_43_48_RCVS_0
            n_control_setReceiveBusName(n_43_9_STATE, "empty")
        })

        
    

        const n_43_48_STATE = {
            maxValue: 8
        }
    

        const n_43_10_STATE = {
            floatFilter: 0,
            stringFilter: "0",
            filterType: MSG_FLOAT_TOKEN,
        }
    

        const n_43_11_STATE = {
            value: msg_create([]),
            receiveBusName: "empty",
            sendBusName: "empty",
            messageReceiver: n_control_defaultMessageHandler,
            messageSender: n_control_defaultMessageHandler,
        }
    
        commons_waitEngineConfigure(() => {
            n_43_11_STATE.messageReceiver = function (m) {
                n_bang_receiveMessage(n_43_11_STATE, m)
            }
            n_43_11_STATE.messageSender = n_43_18_RCVS_0
            n_control_setReceiveBusName(n_43_11_STATE, "empty")
        })

        
    

            const n_43_18_STATE = {
                busName: "modPosSeq_2",
            }
        

            const n_43_12_STATE = {
                value: msg_floats([0]),
                receiveBusName: "empty",
                sendBusName: "empty",
                messageReceiver: n_control_defaultMessageHandler,
                messageSender: n_control_defaultMessageHandler,
            }
        
            commons_waitEngineConfigure(() => {
                n_43_12_STATE.messageReceiver = function (m) {
                    n_floatatom_receiveMessage(n_43_12_STATE, m)
                }
                n_43_12_STATE.messageSender = SND_TO_NULL
                n_control_setReceiveBusName(n_43_12_STATE, "empty")
            })
        

        const n_43_13_STATE = {
            value: msg_create([]),
            receiveBusName: "empty",
            sendBusName: "empty",
            messageReceiver: n_control_defaultMessageHandler,
            messageSender: n_control_defaultMessageHandler,
        }
    
        commons_waitEngineConfigure(() => {
            n_43_13_STATE.messageReceiver = function (m) {
                n_bang_receiveMessage(n_43_13_STATE, m)
            }
            n_43_13_STATE.messageSender = n_43_49_RCVS_0
            n_control_setReceiveBusName(n_43_13_STATE, "empty")
        })

        
    

        const n_43_49_STATE = {
            maxValue: 8
        }
    

        const n_43_14_STATE = {
            floatFilter: 0,
            stringFilter: "0",
            filterType: MSG_FLOAT_TOKEN,
        }
    

        const n_43_15_STATE = {
            value: msg_create([]),
            receiveBusName: "empty",
            sendBusName: "empty",
            messageReceiver: n_control_defaultMessageHandler,
            messageSender: n_control_defaultMessageHandler,
        }
    
        commons_waitEngineConfigure(() => {
            n_43_15_STATE.messageReceiver = function (m) {
                n_bang_receiveMessage(n_43_15_STATE, m)
            }
            n_43_15_STATE.messageSender = n_43_17_RCVS_0
            n_control_setReceiveBusName(n_43_15_STATE, "empty")
        })

        
    

            const n_43_17_STATE = {
                busName: "fwdAmtSeq_2",
            }
        

            const n_43_16_STATE = {
                value: msg_floats([0]),
                receiveBusName: "empty",
                sendBusName: "empty",
                messageReceiver: n_control_defaultMessageHandler,
                messageSender: n_control_defaultMessageHandler,
            }
        
            commons_waitEngineConfigure(() => {
                n_43_16_STATE.messageReceiver = function (m) {
                    n_floatatom_receiveMessage(n_43_16_STATE, m)
                }
                n_43_16_STATE.messageSender = SND_TO_NULL
                n_control_setReceiveBusName(n_43_16_STATE, "empty")
            })
        

        const n_43_25_STATE = {
            value: msg_create([]),
            receiveBusName: "empty",
            sendBusName: "empty",
            messageReceiver: n_control_defaultMessageHandler,
            messageSender: n_control_defaultMessageHandler,
        }
    
        commons_waitEngineConfigure(() => {
            n_43_25_STATE.messageReceiver = function (m) {
                n_bang_receiveMessage(n_43_25_STATE, m)
            }
            n_43_25_STATE.messageSender = n_43_50_RCVS_0
            n_control_setReceiveBusName(n_43_25_STATE, "empty")
        })

        
    

        const n_43_50_STATE = {
            maxValue: 8
        }
    

        const n_43_26_STATE = {
            floatFilter: 0,
            stringFilter: "0",
            filterType: MSG_FLOAT_TOKEN,
        }
    

        const n_43_27_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_43_27_STATE.outTemplates[0] = []
            
                n_43_27_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_43_27_STATE.outMessages[0] = msg_create(n_43_27_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_43_27_STATE.outMessages[0], 0, 0)
            
        
        
        n_43_27_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_43_27_STATE.outMessages[0]
                }
,
        ]
    

            const n_43_24_STATE = {
                busName: "positionOffset_2",
            }
        

        const n_43_28_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_43_28_STATE.outTemplates[0] = []
            
                n_43_28_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_43_28_STATE.outMessages[0] = msg_create(n_43_28_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_43_28_STATE.outMessages[0], 0, 0.25)
            
        
        
        n_43_28_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_43_28_STATE.outMessages[0]
                }
,
        ]
    

        const n_43_29_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_43_29_STATE.outTemplates[0] = []
            
                n_43_29_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_43_29_STATE.outMessages[0] = msg_create(n_43_29_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_43_29_STATE.outMessages[0], 0, 0.5)
            
        
        
        n_43_29_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_43_29_STATE.outMessages[0]
                }
,
        ]
    

        const n_43_30_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_43_30_STATE.outTemplates[0] = []
            
                n_43_30_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_43_30_STATE.outMessages[0] = msg_create(n_43_30_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_43_30_STATE.outMessages[0], 0, 0.75)
            
        
        
        n_43_30_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_43_30_STATE.outMessages[0]
                }
,
        ]
    

        const n_43_31_STATE = {
            value: msg_create([]),
            receiveBusName: "empty",
            sendBusName: "empty",
            messageReceiver: n_control_defaultMessageHandler,
            messageSender: n_control_defaultMessageHandler,
        }
    
        commons_waitEngineConfigure(() => {
            n_43_31_STATE.messageReceiver = function (m) {
                n_bang_receiveMessage(n_43_31_STATE, m)
            }
            n_43_31_STATE.messageSender = n_43_45_RCVS_0
            n_control_setReceiveBusName(n_43_31_STATE, "empty")
        })

        
    

        const n_43_45_STATE = {
            maxValue: 8
        }
    

        const n_43_32_STATE = {
            floatFilter: 0,
            stringFilter: "0",
            filterType: MSG_FLOAT_TOKEN,
        }
    

        const n_43_33_STATE = {
            value: msg_create([]),
            receiveBusName: "empty",
            sendBusName: "empty",
            messageReceiver: n_control_defaultMessageHandler,
            messageSender: n_control_defaultMessageHandler,
        }
    
        commons_waitEngineConfigure(() => {
            n_43_33_STATE.messageReceiver = function (m) {
                n_bang_receiveMessage(n_43_33_STATE, m)
            }
            n_43_33_STATE.messageSender = n_43_36_RCVS_0
            n_control_setReceiveBusName(n_43_33_STATE, "empty")
        })

        
    

            const n_43_36_STATE = {
                busName: "randDel2",
            }
        

            const n_43_34_STATE = {
                value: msg_floats([0]),
                receiveBusName: "empty",
                sendBusName: "empty",
                messageReceiver: n_control_defaultMessageHandler,
                messageSender: n_control_defaultMessageHandler,
            }
        
            commons_waitEngineConfigure(() => {
                n_43_34_STATE.messageReceiver = function (m) {
                    n_floatatom_receiveMessage(n_43_34_STATE, m)
                }
                n_43_34_STATE.messageSender = SND_TO_NULL
                n_control_setReceiveBusName(n_43_34_STATE, "empty")
            })
        

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("startBang", n_43_28_RCVS_0)
            })
        
commons_waitFrame(0, () => n_43_38_SNDS_0(msg_bang()))

        const n_43_39_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_43_39_STATE.outTemplates[0] = []
            
                n_43_39_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_43_39_STATE.outMessages[0] = msg_create(n_43_39_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_43_39_STATE.outMessages[0], 0, 0.1)
            
        
        
        n_43_39_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_43_39_STATE.outMessages[0]
                }
,
        ]
    

        const n_95_17_STATE = {
            floatInputs: new Map(),
            stringInputs: new Map(),
            outputs: new Array(1),
        }

        n_95_17_STATE.floatInputs.set(1, 0)
        
    

        const n_43_40_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_43_40_STATE.outTemplates[0] = []
            
                n_43_40_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_43_40_STATE.outMessages[0] = msg_create(n_43_40_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_43_40_STATE.outMessages[0], 0, 0.9)
            
        
        
        n_43_40_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_43_40_STATE.outMessages[0]
                }
,
        ]
    

        const n_97_17_STATE = {
            floatInputs: new Map(),
            stringInputs: new Map(),
            outputs: new Array(1),
        }

        n_97_17_STATE.floatInputs.set(1, 0)
        
    

        const n_43_41_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_43_41_STATE.outTemplates[0] = []
            
                n_43_41_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_43_41_STATE.outMessages[0] = msg_create(n_43_41_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_43_41_STATE.outMessages[0], 0, 0.5)
            
        
        
        n_43_41_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_43_41_STATE.outMessages[0]
                }
,
        ]
    

        const n_99_17_STATE = {
            floatInputs: new Map(),
            stringInputs: new Map(),
            outputs: new Array(1),
        }

        n_99_17_STATE.floatInputs.set(1, 0)
        
    

        const n_43_42_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_43_42_STATE.outTemplates[0] = []
            
                n_43_42_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_43_42_STATE.outMessages[0] = msg_create(n_43_42_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_43_42_STATE.outMessages[0], 0, 0.2)
            
        
        
        n_43_42_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_43_42_STATE.outMessages[0]
                }
,
        ]
    

        const n_101_17_STATE = {
            floatInputs: new Map(),
            stringInputs: new Map(),
            outputs: new Array(1),
        }

        n_101_17_STATE.floatInputs.set(1, 0)
        
    

        const n_43_43_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_43_43_STATE.outTemplates[0] = []
            
                n_43_43_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_43_43_STATE.outMessages[0] = msg_create(n_43_43_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_43_43_STATE.outMessages[0], 0, 0.1)
            
        
        
        n_43_43_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_43_43_STATE.outMessages[0]
                }
,
        ]
    

        const n_103_17_STATE = {
            floatInputs: new Map(),
            stringInputs: new Map(),
            outputs: new Array(1),
        }

        n_103_17_STATE.floatInputs.set(1, 0)
        
    

        const n_43_44_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_43_44_STATE.outTemplates[0] = []
            
                n_43_44_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_43_44_STATE.outMessages[0] = msg_create(n_43_44_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_43_44_STATE.outMessages[0], 0, 0.4)
            
        
        
        n_43_44_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_43_44_STATE.outMessages[0]
                }
,
        ]
    

        const n_105_17_STATE = {
            floatInputs: new Map(),
            stringInputs: new Map(),
            outputs: new Array(1),
        }

        n_105_17_STATE.floatInputs.set(1, 0)
        
    

        const n_44_4_STATE = {
            value: msg_create([]),
            receiveBusName: "empty",
            sendBusName: "empty",
            messageReceiver: n_control_defaultMessageHandler,
            messageSender: n_control_defaultMessageHandler,
        }
    
        commons_waitEngineConfigure(() => {
            n_44_4_STATE.messageReceiver = function (m) {
                n_bang_receiveMessage(n_44_4_STATE, m)
            }
            n_44_4_STATE.messageSender = n_44_5_RCVS_0
            n_control_setReceiveBusName(n_44_4_STATE, "empty")
        })

        
    

        const n_44_5_STATE = {
            maxValue: 4
        }
    

        const n_44_6_STATE = {
            floatFilter: 0,
            stringFilter: "0",
            filterType: MSG_FLOAT_TOKEN,
        }
    

        const n_44_8_STATE = {
            maxValue: 30
        }
    

        const n_44_43_STATE = {
                leftOp: 0,
                rightOp: 0,
            }
            n_mul_setLeft(n_44_43_STATE, 0)
            n_mul_setRight(n_44_43_STATE, 0.01)
        

            const n_44_2_STATE = {
                busName: "forwardAmt_2",
            }
        

        const n_44_7_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_44_7_STATE.outTemplates[0] = []
            
                n_44_7_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_44_7_STATE.outMessages[0] = msg_create(n_44_7_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_44_7_STATE.outMessages[0], 0, 0)
            
        
        
        n_44_7_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_44_7_STATE.outMessages[0]
                }
,
        ]
    

        const n_44_9_STATE = {
            value: msg_create([]),
            receiveBusName: "empty",
            sendBusName: "empty",
            messageReceiver: n_control_defaultMessageHandler,
            messageSender: n_control_defaultMessageHandler,
        }
    
        commons_waitEngineConfigure(() => {
            n_44_9_STATE.messageReceiver = function (m) {
                n_bang_receiveMessage(n_44_9_STATE, m)
            }
            n_44_9_STATE.messageSender = n_44_12_RCVS_0
            n_control_setReceiveBusName(n_44_9_STATE, "empty")
        })

        
    

        const n_44_12_STATE = {
            maxValue: 4
        }
    

        const n_44_28_STATE = {
            floatFilter: 0,
            stringFilter: "0",
            filterType: MSG_FLOAT_TOKEN,
        }
    

        const n_44_10_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_44_10_STATE.outTemplates[0] = []
            
                n_44_10_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_44_10_STATE.outMessages[0] = msg_create(n_44_10_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_44_10_STATE.outMessages[0], 0, 0.25)
            
        
        
        n_44_10_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_44_10_STATE.outMessages[0]
                }
,
        ]
    

            const n_44_1_STATE = {
                busName: "pitch_2",
            }
        

        const n_44_26_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_44_26_STATE.outTemplates[0] = []
            
                n_44_26_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_44_26_STATE.outMessages[0] = msg_create(n_44_26_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_44_26_STATE.outMessages[0], 0, 0.125)
            
        
        
        n_44_26_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_44_26_STATE.outMessages[0]
                }
,
        ]
    

        const n_44_11_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_44_11_STATE.outTemplates[0] = []
            
                n_44_11_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_44_11_STATE.outMessages[0] = msg_create(n_44_11_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_44_11_STATE.outMessages[0], 0, 0.125)
            
        
        
        n_44_11_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_44_11_STATE.outMessages[0]
                }
,
        ]
    

        const n_44_25_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_44_25_STATE.outTemplates[0] = []
            
                n_44_25_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_44_25_STATE.outMessages[0] = msg_create(n_44_25_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_44_25_STATE.outMessages[0], 0, 0.0625)
            
        
        
        n_44_25_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_44_25_STATE.outMessages[0]
                }
,
        ]
    

        const n_44_13_STATE = {
            value: msg_create([]),
            receiveBusName: "empty",
            sendBusName: "empty",
            messageReceiver: n_control_defaultMessageHandler,
            messageSender: n_control_defaultMessageHandler,
        }
    
        commons_waitEngineConfigure(() => {
            n_44_13_STATE.messageReceiver = function (m) {
                n_bang_receiveMessage(n_44_13_STATE, m)
            }
            n_44_13_STATE.messageSender = n_44_14_RCVS_0
            n_control_setReceiveBusName(n_44_13_STATE, "empty")
        })

        
    

        const n_44_14_STATE = {
            maxValue: 10
        }
    

        const n_44_15_STATE = {
                leftOp: 0,
                rightOp: 0,
            }
            n_mul_setLeft(n_44_15_STATE, 0)
            n_mul_setRight(n_44_15_STATE, 0.1)
        

            const n_44_16_STATE = {
                busName: "delVol_2",
            }
        

        const n_44_17_STATE = {
            value: msg_create([]),
            receiveBusName: "empty",
            sendBusName: "empty",
            messageReceiver: n_control_defaultMessageHandler,
            messageSender: n_control_defaultMessageHandler,
        }
    
        commons_waitEngineConfigure(() => {
            n_44_17_STATE.messageReceiver = function (m) {
                n_bang_receiveMessage(n_44_17_STATE, m)
            }
            n_44_17_STATE.messageSender = n_44_18_RCVS_0
            n_control_setReceiveBusName(n_44_17_STATE, "empty")
        })

        
    

        const n_44_18_STATE = {
            maxValue: 100
        }
    

        const n_44_19_STATE = {
                leftOp: 0,
                rightOp: 0,
            }
            n_mul_setLeft(n_44_19_STATE, 0)
            n_mul_setRight(n_44_19_STATE, 0.01)
        

            const n_44_0_STATE = {
                busName: "modPos_2",
            }
        

        const n_44_20_STATE = {
            value: msg_create([]),
            receiveBusName: "empty",
            sendBusName: "empty",
            messageReceiver: n_control_defaultMessageHandler,
            messageSender: n_control_defaultMessageHandler,
        }
    
        commons_waitEngineConfigure(() => {
            n_44_20_STATE.messageReceiver = function (m) {
                n_bang_receiveMessage(n_44_20_STATE, m)
            }
            n_44_20_STATE.messageSender = n_44_42_RCVS_0
            n_control_setReceiveBusName(n_44_20_STATE, "empty")
        })

        
    


        const n_44_33_STATE = {
            maxValue: 6
        }
    

        const n_44_34_STATE = {
            floatFilter: 0,
            stringFilter: "0",
            filterType: MSG_FLOAT_TOKEN,
        }
    

        const n_44_30_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_44_30_STATE.outTemplates[0] = []
            
                n_44_30_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_44_30_STATE.outMessages[0] = msg_create(n_44_30_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_44_30_STATE.outMessages[0], 0, 1)
            
        
        
        n_44_30_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_44_30_STATE.outMessages[0]
                }
,
        ]
    


            const m_n_44_40_0_sig_STATE = {
                currentValue: 0
            }
        

        const n_44_31_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_44_31_STATE.outTemplates[0] = []
            
                n_44_31_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_44_31_STATE.outMessages[0] = msg_create(n_44_31_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_44_31_STATE.outMessages[0], 0, 0.75)
            
        
        
        n_44_31_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_44_31_STATE.outMessages[0]
                }
,
        ]
    

        const n_44_36_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_44_36_STATE.outTemplates[0] = []
            
                n_44_36_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_44_36_STATE.outMessages[0] = msg_create(n_44_36_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_44_36_STATE.outMessages[0], 0, 0.125)
            
        
        
        n_44_36_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_44_36_STATE.outMessages[0]
                }
,
        ]
    

        const n_44_29_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_44_29_STATE.outTemplates[0] = []
            
                n_44_29_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_44_29_STATE.outMessages[0] = msg_create(n_44_29_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_44_29_STATE.outMessages[0], 0, 0.075)
            
        
        
        n_44_29_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_44_29_STATE.outMessages[0]
                }
,
        ]
    

        const n_44_32_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_44_32_STATE.outTemplates[0] = []
            
                n_44_32_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_44_32_STATE.outMessages[0] = msg_create(n_44_32_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_44_32_STATE.outMessages[0], 0, 0.5)
            
        
        
        n_44_32_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_44_32_STATE.outMessages[0]
                }
,
        ]
    

        const n_44_35_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_44_35_STATE.outTemplates[0] = []
            
                n_44_35_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_44_35_STATE.outMessages[0] = msg_create(n_44_35_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_44_35_STATE.outMessages[0], 0, 0.025)
            
        
        
        n_44_35_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_44_35_STATE.outMessages[0]
                }
,
        ]
    

        const n_44_41_STATE = {
            maxValue: 3
        }
    

        const n_44_37_STATE = {
            floatFilter: 0,
            stringFilter: "0",
            filterType: MSG_FLOAT_TOKEN,
        }
    

        const n_44_38_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_44_38_STATE.outTemplates[0] = []
            
                n_44_38_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_44_38_STATE.outMessages[0] = msg_create(n_44_38_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_44_38_STATE.outMessages[0], 0, -1)
            
        
        
        n_44_38_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_44_38_STATE.outMessages[0]
                }
,
        ]
    


            const m_n_44_40_1_sig_STATE = {
                currentValue: 0
            }
        

        const n_44_39_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_44_39_STATE.outTemplates[0] = []
            
                n_44_39_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_44_39_STATE.outMessages[0] = msg_create(n_44_39_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_44_39_STATE.outMessages[0], 0, 1)
            
        
        
        n_44_39_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_44_39_STATE.outMessages[0]
                }
,
        ]
    

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("grainSizeSeq_2", n_44_20_RCVS_0)
            })
        

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("pitchSeq_2", n_44_9_RCVS_0)
            })
        

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("modPosSeq_2", n_44_17_RCVS_0)
            })
        

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("fwdAmtSeq_2", n_44_4_RCVS_0)
            })
        

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("startBang", n_44_27_SNDS_0)
            })
        

            const n_95_7_STATE = {
                value: 0,
            }
            n_float_int_setValueInt(n_95_7_STATE, 0)
        

        const n_95_2_STATE = {
            isClosed: true
        }
    


        const n_95_1_STATE = {
            currentValue: 0
        }
    

            const n_95_8_STATE = {
                currentValue: 0
            }
        


        const n_95_10_STATE = {
            isClosed: true
        }
    

            const n_95_13_STATE = {
                currentValue: 0
            }
        

        const n_95_9_STATE = {
            floatFilter: 1,
            stringFilter: "1",
            filterType: MSG_FLOAT_TOKEN,
        }
    



        const n_95_14_STATE = {
            delay: 0,
            sampleRatio: 1,
            scheduledBang: SKED_ID_NULL,
        }

        commons_waitEngineConfigure(() => {
            n_95_14_STATE.sampleRatio = computeUnitInSamples(SAMPLE_RATE, 1, "msec")
            n_delay_setDelay(n_95_14_STATE, 1200)
        })
    

        const n_95_6_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_95_6_STATE.outTemplates[0] = []
            
                n_95_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_95_6_STATE.outMessages[0] = msg_create(n_95_6_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_95_6_STATE.outMessages[0], 0, 1)
            
        
        
        n_95_6_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_95_6_STATE.outMessages[0]
                }
,
        ]
    

        const n_95_4_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_95_4_STATE.outTemplates[0] = []
            
                n_95_4_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_95_4_STATE.outMessages[0] = msg_create(n_95_4_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_95_4_STATE.outMessages[0], 0, 0)
            
        
        
        n_95_4_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_95_4_STATE.outMessages[0]
                }
,
        ]
    


        const n_96_2_STATE = {
            delay: 0,
            sampleRatio: 1,
            scheduledBang: SKED_ID_NULL,
        }

        commons_waitEngineConfigure(() => {
            n_96_2_STATE.sampleRatio = computeUnitInSamples(SAMPLE_RATE, 1, "msec")
            n_delay_setDelay(n_96_2_STATE, 1000)
        })
    

        const n_96_5_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_96_5_STATE.outTemplates[0] = []
            
                n_96_5_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_96_5_STATE.outMessages[0] = msg_create(n_96_5_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_96_5_STATE.outMessages[0], 0, 0)
            
        
        
        n_96_5_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_96_5_STATE.outMessages[0]
                }
,
        ]
    

            const n_96_1_STATE = {
                value: 0,
            }
            n_float_int_setValueInt(n_96_1_STATE, 0)
        

        const n_96_6_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_96_6_STATE.outTemplates[0] = []
            
                n_96_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_96_6_STATE.outMessages[0] = msg_create(n_96_6_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_96_6_STATE.outMessages[0], 0, 1)
            
        
        
        n_96_6_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_96_6_STATE.outMessages[0]
                }
,
        ]
    

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("genMetro", n_95_2_RCVS_0)
            })
        
commons_waitFrame(0, () => n_95_6_RCVS_0(msg_bang()))

            const n_97_7_STATE = {
                value: 0,
            }
            n_float_int_setValueInt(n_97_7_STATE, 0)
        

        const n_97_2_STATE = {
            isClosed: true
        }
    


        const n_97_1_STATE = {
            currentValue: 0
        }
    

            const n_97_8_STATE = {
                currentValue: 0
            }
        


        const n_97_10_STATE = {
            isClosed: true
        }
    

            const n_97_13_STATE = {
                currentValue: 0
            }
        

        const n_97_9_STATE = {
            floatFilter: 1,
            stringFilter: "1",
            filterType: MSG_FLOAT_TOKEN,
        }
    



        const n_97_14_STATE = {
            delay: 0,
            sampleRatio: 1,
            scheduledBang: SKED_ID_NULL,
        }

        commons_waitEngineConfigure(() => {
            n_97_14_STATE.sampleRatio = computeUnitInSamples(SAMPLE_RATE, 1, "msec")
            n_delay_setDelay(n_97_14_STATE, 1200)
        })
    

        const n_97_6_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_97_6_STATE.outTemplates[0] = []
            
                n_97_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_97_6_STATE.outMessages[0] = msg_create(n_97_6_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_97_6_STATE.outMessages[0], 0, 1)
            
        
        
        n_97_6_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_97_6_STATE.outMessages[0]
                }
,
        ]
    

        const n_97_4_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_97_4_STATE.outTemplates[0] = []
            
                n_97_4_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_97_4_STATE.outMessages[0] = msg_create(n_97_4_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_97_4_STATE.outMessages[0], 0, 0)
            
        
        
        n_97_4_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_97_4_STATE.outMessages[0]
                }
,
        ]
    


        const n_98_2_STATE = {
            delay: 0,
            sampleRatio: 1,
            scheduledBang: SKED_ID_NULL,
        }

        commons_waitEngineConfigure(() => {
            n_98_2_STATE.sampleRatio = computeUnitInSamples(SAMPLE_RATE, 1, "msec")
            n_delay_setDelay(n_98_2_STATE, 1000)
        })
    

        const n_98_5_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_98_5_STATE.outTemplates[0] = []
            
                n_98_5_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_98_5_STATE.outMessages[0] = msg_create(n_98_5_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_98_5_STATE.outMessages[0], 0, 0)
            
        
        
        n_98_5_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_98_5_STATE.outMessages[0]
                }
,
        ]
    

            const n_98_1_STATE = {
                value: 0,
            }
            n_float_int_setValueInt(n_98_1_STATE, 0)
        

        const n_98_6_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_98_6_STATE.outTemplates[0] = []
            
                n_98_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_98_6_STATE.outMessages[0] = msg_create(n_98_6_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_98_6_STATE.outMessages[0], 0, 1)
            
        
        
        n_98_6_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_98_6_STATE.outMessages[0]
                }
,
        ]
    

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("genMetro", n_97_2_RCVS_0)
            })
        
commons_waitFrame(0, () => n_97_6_RCVS_0(msg_bang()))

            const n_99_7_STATE = {
                value: 0,
            }
            n_float_int_setValueInt(n_99_7_STATE, 0)
        

        const n_99_2_STATE = {
            isClosed: true
        }
    


        const n_99_1_STATE = {
            currentValue: 0
        }
    

            const n_99_8_STATE = {
                currentValue: 0
            }
        


        const n_99_10_STATE = {
            isClosed: true
        }
    

            const n_99_13_STATE = {
                currentValue: 0
            }
        

        const n_99_9_STATE = {
            floatFilter: 1,
            stringFilter: "1",
            filterType: MSG_FLOAT_TOKEN,
        }
    



        const n_99_14_STATE = {
            delay: 0,
            sampleRatio: 1,
            scheduledBang: SKED_ID_NULL,
        }

        commons_waitEngineConfigure(() => {
            n_99_14_STATE.sampleRatio = computeUnitInSamples(SAMPLE_RATE, 1, "msec")
            n_delay_setDelay(n_99_14_STATE, 1200)
        })
    

        const n_99_6_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_99_6_STATE.outTemplates[0] = []
            
                n_99_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_99_6_STATE.outMessages[0] = msg_create(n_99_6_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_99_6_STATE.outMessages[0], 0, 1)
            
        
        
        n_99_6_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_99_6_STATE.outMessages[0]
                }
,
        ]
    

        const n_99_4_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_99_4_STATE.outTemplates[0] = []
            
                n_99_4_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_99_4_STATE.outMessages[0] = msg_create(n_99_4_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_99_4_STATE.outMessages[0], 0, 0)
            
        
        
        n_99_4_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_99_4_STATE.outMessages[0]
                }
,
        ]
    


        const n_100_2_STATE = {
            delay: 0,
            sampleRatio: 1,
            scheduledBang: SKED_ID_NULL,
        }

        commons_waitEngineConfigure(() => {
            n_100_2_STATE.sampleRatio = computeUnitInSamples(SAMPLE_RATE, 1, "msec")
            n_delay_setDelay(n_100_2_STATE, 1000)
        })
    

        const n_100_5_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_100_5_STATE.outTemplates[0] = []
            
                n_100_5_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_100_5_STATE.outMessages[0] = msg_create(n_100_5_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_100_5_STATE.outMessages[0], 0, 0)
            
        
        
        n_100_5_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_100_5_STATE.outMessages[0]
                }
,
        ]
    

            const n_100_1_STATE = {
                value: 0,
            }
            n_float_int_setValueInt(n_100_1_STATE, 0)
        

        const n_100_6_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_100_6_STATE.outTemplates[0] = []
            
                n_100_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_100_6_STATE.outMessages[0] = msg_create(n_100_6_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_100_6_STATE.outMessages[0], 0, 1)
            
        
        
        n_100_6_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_100_6_STATE.outMessages[0]
                }
,
        ]
    

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("genMetro", n_99_2_RCVS_0)
            })
        
commons_waitFrame(0, () => n_99_6_RCVS_0(msg_bang()))

            const n_101_7_STATE = {
                value: 0,
            }
            n_float_int_setValueInt(n_101_7_STATE, 0)
        

        const n_101_2_STATE = {
            isClosed: true
        }
    


        const n_101_1_STATE = {
            currentValue: 0
        }
    

            const n_101_8_STATE = {
                currentValue: 0
            }
        


        const n_101_10_STATE = {
            isClosed: true
        }
    

            const n_101_13_STATE = {
                currentValue: 0
            }
        

        const n_101_9_STATE = {
            floatFilter: 1,
            stringFilter: "1",
            filterType: MSG_FLOAT_TOKEN,
        }
    



        const n_101_14_STATE = {
            delay: 0,
            sampleRatio: 1,
            scheduledBang: SKED_ID_NULL,
        }

        commons_waitEngineConfigure(() => {
            n_101_14_STATE.sampleRatio = computeUnitInSamples(SAMPLE_RATE, 1, "msec")
            n_delay_setDelay(n_101_14_STATE, 1200)
        })
    

        const n_101_6_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_101_6_STATE.outTemplates[0] = []
            
                n_101_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_101_6_STATE.outMessages[0] = msg_create(n_101_6_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_101_6_STATE.outMessages[0], 0, 1)
            
        
        
        n_101_6_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_101_6_STATE.outMessages[0]
                }
,
        ]
    

        const n_101_4_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_101_4_STATE.outTemplates[0] = []
            
                n_101_4_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_101_4_STATE.outMessages[0] = msg_create(n_101_4_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_101_4_STATE.outMessages[0], 0, 0)
            
        
        
        n_101_4_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_101_4_STATE.outMessages[0]
                }
,
        ]
    


        const n_102_2_STATE = {
            delay: 0,
            sampleRatio: 1,
            scheduledBang: SKED_ID_NULL,
        }

        commons_waitEngineConfigure(() => {
            n_102_2_STATE.sampleRatio = computeUnitInSamples(SAMPLE_RATE, 1, "msec")
            n_delay_setDelay(n_102_2_STATE, 1000)
        })
    

        const n_102_5_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_102_5_STATE.outTemplates[0] = []
            
                n_102_5_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_102_5_STATE.outMessages[0] = msg_create(n_102_5_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_102_5_STATE.outMessages[0], 0, 0)
            
        
        
        n_102_5_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_102_5_STATE.outMessages[0]
                }
,
        ]
    

            const n_102_1_STATE = {
                value: 0,
            }
            n_float_int_setValueInt(n_102_1_STATE, 0)
        

        const n_102_6_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_102_6_STATE.outTemplates[0] = []
            
                n_102_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_102_6_STATE.outMessages[0] = msg_create(n_102_6_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_102_6_STATE.outMessages[0], 0, 1)
            
        
        
        n_102_6_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_102_6_STATE.outMessages[0]
                }
,
        ]
    

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("genMetro", n_101_2_RCVS_0)
            })
        
commons_waitFrame(0, () => n_101_6_RCVS_0(msg_bang()))

            const n_103_7_STATE = {
                value: 0,
            }
            n_float_int_setValueInt(n_103_7_STATE, 0)
        

        const n_103_2_STATE = {
            isClosed: true
        }
    


        const n_103_1_STATE = {
            currentValue: 0
        }
    

            const n_103_8_STATE = {
                currentValue: 0
            }
        


        const n_103_10_STATE = {
            isClosed: true
        }
    

            const n_103_13_STATE = {
                currentValue: 0
            }
        

        const n_103_9_STATE = {
            floatFilter: 1,
            stringFilter: "1",
            filterType: MSG_FLOAT_TOKEN,
        }
    



        const n_103_14_STATE = {
            delay: 0,
            sampleRatio: 1,
            scheduledBang: SKED_ID_NULL,
        }

        commons_waitEngineConfigure(() => {
            n_103_14_STATE.sampleRatio = computeUnitInSamples(SAMPLE_RATE, 1, "msec")
            n_delay_setDelay(n_103_14_STATE, 1200)
        })
    

        const n_103_6_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_103_6_STATE.outTemplates[0] = []
            
                n_103_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_103_6_STATE.outMessages[0] = msg_create(n_103_6_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_103_6_STATE.outMessages[0], 0, 1)
            
        
        
        n_103_6_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_103_6_STATE.outMessages[0]
                }
,
        ]
    

        const n_103_4_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_103_4_STATE.outTemplates[0] = []
            
                n_103_4_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_103_4_STATE.outMessages[0] = msg_create(n_103_4_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_103_4_STATE.outMessages[0], 0, 0)
            
        
        
        n_103_4_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_103_4_STATE.outMessages[0]
                }
,
        ]
    


        const n_104_2_STATE = {
            delay: 0,
            sampleRatio: 1,
            scheduledBang: SKED_ID_NULL,
        }

        commons_waitEngineConfigure(() => {
            n_104_2_STATE.sampleRatio = computeUnitInSamples(SAMPLE_RATE, 1, "msec")
            n_delay_setDelay(n_104_2_STATE, 1000)
        })
    

        const n_104_5_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_104_5_STATE.outTemplates[0] = []
            
                n_104_5_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_104_5_STATE.outMessages[0] = msg_create(n_104_5_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_104_5_STATE.outMessages[0], 0, 0)
            
        
        
        n_104_5_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_104_5_STATE.outMessages[0]
                }
,
        ]
    

            const n_104_1_STATE = {
                value: 0,
            }
            n_float_int_setValueInt(n_104_1_STATE, 0)
        

        const n_104_6_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_104_6_STATE.outTemplates[0] = []
            
                n_104_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_104_6_STATE.outMessages[0] = msg_create(n_104_6_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_104_6_STATE.outMessages[0], 0, 1)
            
        
        
        n_104_6_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_104_6_STATE.outMessages[0]
                }
,
        ]
    

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("genMetro", n_103_2_RCVS_0)
            })
        
commons_waitFrame(0, () => n_103_6_RCVS_0(msg_bang()))

            const n_105_7_STATE = {
                value: 0,
            }
            n_float_int_setValueInt(n_105_7_STATE, 0)
        

        const n_105_2_STATE = {
            isClosed: true
        }
    


        const n_105_1_STATE = {
            currentValue: 0
        }
    

            const n_105_8_STATE = {
                currentValue: 0
            }
        


        const n_105_10_STATE = {
            isClosed: true
        }
    

            const n_105_13_STATE = {
                currentValue: 0
            }
        

        const n_105_9_STATE = {
            floatFilter: 1,
            stringFilter: "1",
            filterType: MSG_FLOAT_TOKEN,
        }
    



        const n_105_14_STATE = {
            delay: 0,
            sampleRatio: 1,
            scheduledBang: SKED_ID_NULL,
        }

        commons_waitEngineConfigure(() => {
            n_105_14_STATE.sampleRatio = computeUnitInSamples(SAMPLE_RATE, 1, "msec")
            n_delay_setDelay(n_105_14_STATE, 1200)
        })
    

        const n_105_6_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_105_6_STATE.outTemplates[0] = []
            
                n_105_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_105_6_STATE.outMessages[0] = msg_create(n_105_6_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_105_6_STATE.outMessages[0], 0, 1)
            
        
        
        n_105_6_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_105_6_STATE.outMessages[0]
                }
,
        ]
    

        const n_105_4_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_105_4_STATE.outTemplates[0] = []
            
                n_105_4_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_105_4_STATE.outMessages[0] = msg_create(n_105_4_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_105_4_STATE.outMessages[0], 0, 0)
            
        
        
        n_105_4_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_105_4_STATE.outMessages[0]
                }
,
        ]
    


        const n_106_2_STATE = {
            delay: 0,
            sampleRatio: 1,
            scheduledBang: SKED_ID_NULL,
        }

        commons_waitEngineConfigure(() => {
            n_106_2_STATE.sampleRatio = computeUnitInSamples(SAMPLE_RATE, 1, "msec")
            n_delay_setDelay(n_106_2_STATE, 1000)
        })
    

        const n_106_5_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_106_5_STATE.outTemplates[0] = []
            
                n_106_5_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_106_5_STATE.outMessages[0] = msg_create(n_106_5_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_106_5_STATE.outMessages[0], 0, 0)
            
        
        
        n_106_5_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_106_5_STATE.outMessages[0]
                }
,
        ]
    

            const n_106_1_STATE = {
                value: 0,
            }
            n_float_int_setValueInt(n_106_1_STATE, 0)
        

        const n_106_6_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_106_6_STATE.outTemplates[0] = []
            
                n_106_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_106_6_STATE.outMessages[0] = msg_create(n_106_6_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_106_6_STATE.outMessages[0], 0, 1)
            
        
        
        n_106_6_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_106_6_STATE.outMessages[0]
                }
,
        ]
    

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("genMetro", n_105_2_RCVS_0)
            })
        
commons_waitFrame(0, () => n_105_6_RCVS_0(msg_bang()))

        const n_45_0_STATE = {
            value: msg_create([]),
            receiveBusName: "empty",
            sendBusName: "empty",
            messageReceiver: n_control_defaultMessageHandler,
            messageSender: n_control_defaultMessageHandler,
        }
    
        commons_waitEngineConfigure(() => {
            n_45_0_STATE.messageReceiver = function (m) {
                n_bang_receiveMessage(n_45_0_STATE, m)
            }
            n_45_0_STATE.messageSender = n_45_25_RCVS_0
            n_control_setReceiveBusName(n_45_0_STATE, "empty")
        })

        
    

        const n_45_25_STATE = {
            maxValue: 4
        }
    

        const n_45_1_STATE = {
            floatFilter: 0,
            stringFilter: "0",
            filterType: MSG_FLOAT_TOKEN,
        }
    

        const n_45_2_STATE = {
            value: msg_create([]),
            receiveBusName: "empty",
            sendBusName: "empty",
            messageReceiver: n_control_defaultMessageHandler,
            messageSender: n_control_defaultMessageHandler,
        }
    
        commons_waitEngineConfigure(() => {
            n_45_2_STATE.messageReceiver = function (m) {
                n_bang_receiveMessage(n_45_2_STATE, m)
            }
            n_45_2_STATE.messageSender = n_45_21_RCVS_0
            n_control_setReceiveBusName(n_45_2_STATE, "empty")
        })

        
    

            const n_45_21_STATE = {
                busName: "grainSizeSeq_3",
            }
        

            const n_45_3_STATE = {
                value: msg_floats([0]),
                receiveBusName: "empty",
                sendBusName: "empty",
                messageReceiver: n_control_defaultMessageHandler,
                messageSender: n_control_defaultMessageHandler,
            }
        
            commons_waitEngineConfigure(() => {
                n_45_3_STATE.messageReceiver = function (m) {
                    n_floatatom_receiveMessage(n_45_3_STATE, m)
                }
                n_45_3_STATE.messageSender = SND_TO_NULL
                n_control_setReceiveBusName(n_45_3_STATE, "empty")
            })
        

        const n_45_5_STATE = {
            value: msg_create([]),
            receiveBusName: "empty",
            sendBusName: "empty",
            messageReceiver: n_control_defaultMessageHandler,
            messageSender: n_control_defaultMessageHandler,
        }
    
        commons_waitEngineConfigure(() => {
            n_45_5_STATE.messageReceiver = function (m) {
                n_bang_receiveMessage(n_45_5_STATE, m)
            }
            n_45_5_STATE.messageSender = n_45_26_RCVS_0
            n_control_setReceiveBusName(n_45_5_STATE, "empty")
        })

        
    

        const n_45_26_STATE = {
            maxValue: 3
        }
    

        const n_45_6_STATE = {
            floatFilter: 0,
            stringFilter: "0",
            filterType: MSG_FLOAT_TOKEN,
        }
    

        const n_45_7_STATE = {
            value: msg_create([]),
            receiveBusName: "empty",
            sendBusName: "empty",
            messageReceiver: n_control_defaultMessageHandler,
            messageSender: n_control_defaultMessageHandler,
        }
    
        commons_waitEngineConfigure(() => {
            n_45_7_STATE.messageReceiver = function (m) {
                n_bang_receiveMessage(n_45_7_STATE, m)
            }
            n_45_7_STATE.messageSender = n_45_20_RCVS_0
            n_control_setReceiveBusName(n_45_7_STATE, "empty")
        })

        
    

            const n_45_20_STATE = {
                busName: "pitchSeq_3",
            }
        

            const n_45_8_STATE = {
                value: msg_floats([0]),
                receiveBusName: "empty",
                sendBusName: "empty",
                messageReceiver: n_control_defaultMessageHandler,
                messageSender: n_control_defaultMessageHandler,
            }
        
            commons_waitEngineConfigure(() => {
                n_45_8_STATE.messageReceiver = function (m) {
                    n_floatatom_receiveMessage(n_45_8_STATE, m)
                }
                n_45_8_STATE.messageSender = SND_TO_NULL
                n_control_setReceiveBusName(n_45_8_STATE, "empty")
            })
        

        const n_45_9_STATE = {
            value: msg_create([]),
            receiveBusName: "empty",
            sendBusName: "empty",
            messageReceiver: n_control_defaultMessageHandler,
            messageSender: n_control_defaultMessageHandler,
        }
    
        commons_waitEngineConfigure(() => {
            n_45_9_STATE.messageReceiver = function (m) {
                n_bang_receiveMessage(n_45_9_STATE, m)
            }
            n_45_9_STATE.messageSender = n_45_27_RCVS_0
            n_control_setReceiveBusName(n_45_9_STATE, "empty")
        })

        
    

        const n_45_27_STATE = {
            maxValue: 3
        }
    

        const n_45_10_STATE = {
            floatFilter: 0,
            stringFilter: "0",
            filterType: MSG_FLOAT_TOKEN,
        }
    

        const n_45_11_STATE = {
            value: msg_create([]),
            receiveBusName: "empty",
            sendBusName: "empty",
            messageReceiver: n_control_defaultMessageHandler,
            messageSender: n_control_defaultMessageHandler,
        }
    
        commons_waitEngineConfigure(() => {
            n_45_11_STATE.messageReceiver = function (m) {
                n_bang_receiveMessage(n_45_11_STATE, m)
            }
            n_45_11_STATE.messageSender = n_45_19_RCVS_0
            n_control_setReceiveBusName(n_45_11_STATE, "empty")
        })

        
    

            const n_45_19_STATE = {
                busName: "modPosSeq_3",
            }
        

            const n_45_12_STATE = {
                value: msg_floats([0]),
                receiveBusName: "empty",
                sendBusName: "empty",
                messageReceiver: n_control_defaultMessageHandler,
                messageSender: n_control_defaultMessageHandler,
            }
        
            commons_waitEngineConfigure(() => {
                n_45_12_STATE.messageReceiver = function (m) {
                    n_floatatom_receiveMessage(n_45_12_STATE, m)
                }
                n_45_12_STATE.messageSender = SND_TO_NULL
                n_control_setReceiveBusName(n_45_12_STATE, "empty")
            })
        

        const n_45_13_STATE = {
            value: msg_create([]),
            receiveBusName: "empty",
            sendBusName: "empty",
            messageReceiver: n_control_defaultMessageHandler,
            messageSender: n_control_defaultMessageHandler,
        }
    
        commons_waitEngineConfigure(() => {
            n_45_13_STATE.messageReceiver = function (m) {
                n_bang_receiveMessage(n_45_13_STATE, m)
            }
            n_45_13_STATE.messageSender = n_45_17_RCVS_0
            n_control_setReceiveBusName(n_45_13_STATE, "empty")
        })

        
    

        const n_45_17_STATE = {
            maxValue: 1
        }
    

        const n_45_14_STATE = {
            floatFilter: 0,
            stringFilter: "0",
            filterType: MSG_FLOAT_TOKEN,
        }
    

        const n_45_15_STATE = {
            value: msg_create([]),
            receiveBusName: "empty",
            sendBusName: "empty",
            messageReceiver: n_control_defaultMessageHandler,
            messageSender: n_control_defaultMessageHandler,
        }
    
        commons_waitEngineConfigure(() => {
            n_45_15_STATE.messageReceiver = function (m) {
                n_bang_receiveMessage(n_45_15_STATE, m)
            }
            n_45_15_STATE.messageSender = n_45_18_RCVS_0
            n_control_setReceiveBusName(n_45_15_STATE, "empty")
        })

        
    

            const n_45_18_STATE = {
                busName: "fwdAmtSeq_3",
            }
        

            const n_45_16_STATE = {
                value: msg_floats([0]),
                receiveBusName: "empty",
                sendBusName: "empty",
                messageReceiver: n_control_defaultMessageHandler,
                messageSender: n_control_defaultMessageHandler,
            }
        
            commons_waitEngineConfigure(() => {
                n_45_16_STATE.messageReceiver = function (m) {
                    n_floatatom_receiveMessage(n_45_16_STATE, m)
                }
                n_45_16_STATE.messageSender = SND_TO_NULL
                n_control_setReceiveBusName(n_45_16_STATE, "empty")
            })
        

        const n_45_28_STATE = {
            value: msg_create([]),
            receiveBusName: "empty",
            sendBusName: "empty",
            messageReceiver: n_control_defaultMessageHandler,
            messageSender: n_control_defaultMessageHandler,
        }
    
        commons_waitEngineConfigure(() => {
            n_45_28_STATE.messageReceiver = function (m) {
                n_bang_receiveMessage(n_45_28_STATE, m)
            }
            n_45_28_STATE.messageSender = n_45_29_RCVS_0
            n_control_setReceiveBusName(n_45_28_STATE, "empty")
        })

        
    

        const n_45_29_STATE = {
            maxValue: 6
        }
    

        const n_45_30_STATE = {
            floatFilter: 0,
            stringFilter: "0",
            filterType: MSG_FLOAT_TOKEN,
        }
    

        const n_45_31_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_45_31_STATE.outTemplates[0] = []
            
                n_45_31_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_45_31_STATE.outMessages[0] = msg_create(n_45_31_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_45_31_STATE.outMessages[0], 0, 0)
            
        
        
        n_45_31_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_45_31_STATE.outMessages[0]
                }
,
        ]
    

            const n_45_35_STATE = {
                busName: "positionOffset_3",
            }
        

        const n_45_32_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_45_32_STATE.outTemplates[0] = []
            
                n_45_32_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_45_32_STATE.outMessages[0] = msg_create(n_45_32_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_45_32_STATE.outMessages[0], 0, 0.25)
            
        
        
        n_45_32_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_45_32_STATE.outMessages[0]
                }
,
        ]
    

        const n_45_33_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_45_33_STATE.outTemplates[0] = []
            
                n_45_33_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_45_33_STATE.outMessages[0] = msg_create(n_45_33_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_45_33_STATE.outMessages[0], 0, 0.5)
            
        
        
        n_45_33_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_45_33_STATE.outMessages[0]
                }
,
        ]
    

        const n_45_34_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_45_34_STATE.outTemplates[0] = []
            
                n_45_34_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_45_34_STATE.outMessages[0] = msg_create(n_45_34_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_45_34_STATE.outMessages[0], 0, 0.75)
            
        
        
        n_45_34_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_45_34_STATE.outMessages[0]
                }
,
        ]
    

        const n_45_36_STATE = {
            value: msg_create([]),
            receiveBusName: "empty",
            sendBusName: "empty",
            messageReceiver: n_control_defaultMessageHandler,
            messageSender: n_control_defaultMessageHandler,
        }
    
        commons_waitEngineConfigure(() => {
            n_45_36_STATE.messageReceiver = function (m) {
                n_bang_receiveMessage(n_45_36_STATE, m)
            }
            n_45_36_STATE.messageSender = n_45_40_RCVS_0
            n_control_setReceiveBusName(n_45_36_STATE, "empty")
        })

        
    

        const n_45_40_STATE = {
            maxValue: 4
        }
    

        const n_45_37_STATE = {
            floatFilter: 0,
            stringFilter: "0",
            filterType: MSG_FLOAT_TOKEN,
        }
    

        const n_45_38_STATE = {
            value: msg_create([]),
            receiveBusName: "empty",
            sendBusName: "empty",
            messageReceiver: n_control_defaultMessageHandler,
            messageSender: n_control_defaultMessageHandler,
        }
    
        commons_waitEngineConfigure(() => {
            n_45_38_STATE.messageReceiver = function (m) {
                n_bang_receiveMessage(n_45_38_STATE, m)
            }
            n_45_38_STATE.messageSender = n_45_42_RCVS_0
            n_control_setReceiveBusName(n_45_38_STATE, "empty")
        })

        
    

            const n_45_42_STATE = {
                busName: "randDel3",
            }
        

            const n_45_39_STATE = {
                value: msg_floats([0]),
                receiveBusName: "empty",
                sendBusName: "empty",
                messageReceiver: n_control_defaultMessageHandler,
                messageSender: n_control_defaultMessageHandler,
            }
        
            commons_waitEngineConfigure(() => {
                n_45_39_STATE.messageReceiver = function (m) {
                    n_floatatom_receiveMessage(n_45_39_STATE, m)
                }
                n_45_39_STATE.messageSender = SND_TO_NULL
                n_control_setReceiveBusName(n_45_39_STATE, "empty")
            })
        

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("startBang", n_45_33_RCVS_0)
            })
        
commons_waitFrame(0, () => n_45_44_SNDS_0(msg_bang()))

        const n_45_45_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_45_45_STATE.outTemplates[0] = []
            
                n_45_45_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_45_45_STATE.outMessages[0] = msg_create(n_45_45_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_45_45_STATE.outMessages[0], 0, 0.1)
            
        
        
        n_45_45_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_45_45_STATE.outMessages[0]
                }
,
        ]
    

        const n_107_17_STATE = {
            floatInputs: new Map(),
            stringInputs: new Map(),
            outputs: new Array(1),
        }

        n_107_17_STATE.floatInputs.set(1, 0)
        
    

        const n_45_46_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_45_46_STATE.outTemplates[0] = []
            
                n_45_46_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_45_46_STATE.outMessages[0] = msg_create(n_45_46_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_45_46_STATE.outMessages[0], 0, 0.9)
            
        
        
        n_45_46_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_45_46_STATE.outMessages[0]
                }
,
        ]
    

        const n_109_17_STATE = {
            floatInputs: new Map(),
            stringInputs: new Map(),
            outputs: new Array(1),
        }

        n_109_17_STATE.floatInputs.set(1, 0)
        
    

        const n_45_47_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_45_47_STATE.outTemplates[0] = []
            
                n_45_47_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_45_47_STATE.outMessages[0] = msg_create(n_45_47_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_45_47_STATE.outMessages[0], 0, 0.5)
            
        
        
        n_45_47_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_45_47_STATE.outMessages[0]
                }
,
        ]
    

        const n_111_17_STATE = {
            floatInputs: new Map(),
            stringInputs: new Map(),
            outputs: new Array(1),
        }

        n_111_17_STATE.floatInputs.set(1, 0)
        
    

        const n_45_48_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_45_48_STATE.outTemplates[0] = []
            
                n_45_48_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_45_48_STATE.outMessages[0] = msg_create(n_45_48_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_45_48_STATE.outMessages[0], 0, 0.2)
            
        
        
        n_45_48_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_45_48_STATE.outMessages[0]
                }
,
        ]
    

        const n_113_17_STATE = {
            floatInputs: new Map(),
            stringInputs: new Map(),
            outputs: new Array(1),
        }

        n_113_17_STATE.floatInputs.set(1, 0)
        
    

        const n_45_49_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_45_49_STATE.outTemplates[0] = []
            
                n_45_49_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_45_49_STATE.outMessages[0] = msg_create(n_45_49_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_45_49_STATE.outMessages[0], 0, 0.1)
            
        
        
        n_45_49_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_45_49_STATE.outMessages[0]
                }
,
        ]
    

        const n_115_17_STATE = {
            floatInputs: new Map(),
            stringInputs: new Map(),
            outputs: new Array(1),
        }

        n_115_17_STATE.floatInputs.set(1, 0)
        
    

        const n_45_50_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_45_50_STATE.outTemplates[0] = []
            
                n_45_50_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_45_50_STATE.outMessages[0] = msg_create(n_45_50_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_45_50_STATE.outMessages[0], 0, 0.4)
            
        
        
        n_45_50_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_45_50_STATE.outMessages[0]
                }
,
        ]
    

        const n_117_17_STATE = {
            floatInputs: new Map(),
            stringInputs: new Map(),
            outputs: new Array(1),
        }

        n_117_17_STATE.floatInputs.set(1, 0)
        
    

        const n_46_0_STATE = {
            value: msg_create([]),
            receiveBusName: "empty",
            sendBusName: "empty",
            messageReceiver: n_control_defaultMessageHandler,
            messageSender: n_control_defaultMessageHandler,
        }
    
        commons_waitEngineConfigure(() => {
            n_46_0_STATE.messageReceiver = function (m) {
                n_bang_receiveMessage(n_46_0_STATE, m)
            }
            n_46_0_STATE.messageSender = n_46_1_RCVS_0
            n_control_setReceiveBusName(n_46_0_STATE, "empty")
        })

        
    

        const n_46_1_STATE = {
            maxValue: 4
        }
    

        const n_46_2_STATE = {
            floatFilter: 0,
            stringFilter: "0",
            filterType: MSG_FLOAT_TOKEN,
        }
    

        const n_46_4_STATE = {
            maxValue: 30
        }
    

        const n_46_34_STATE = {
                leftOp: 0,
                rightOp: 0,
            }
            n_mul_setLeft(n_46_34_STATE, 0)
            n_mul_setRight(n_46_34_STATE, 0.01)
        

            const n_46_40_STATE = {
                busName: "forwardAmt_3",
            }
        

        const n_46_3_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_46_3_STATE.outTemplates[0] = []
            
                n_46_3_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_46_3_STATE.outMessages[0] = msg_create(n_46_3_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_46_3_STATE.outMessages[0], 0, 0)
            
        
        
        n_46_3_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_46_3_STATE.outMessages[0]
                }
,
        ]
    

        const n_46_5_STATE = {
            value: msg_create([]),
            receiveBusName: "empty",
            sendBusName: "empty",
            messageReceiver: n_control_defaultMessageHandler,
            messageSender: n_control_defaultMessageHandler,
        }
    
        commons_waitEngineConfigure(() => {
            n_46_5_STATE.messageReceiver = function (m) {
                n_bang_receiveMessage(n_46_5_STATE, m)
            }
            n_46_5_STATE.messageSender = n_46_8_RCVS_0
            n_control_setReceiveBusName(n_46_5_STATE, "empty")
        })

        
    

        const n_46_8_STATE = {
            maxValue: 4
        }
    

        const n_46_19_STATE = {
            floatFilter: 0,
            stringFilter: "0",
            filterType: MSG_FLOAT_TOKEN,
        }
    

        const n_46_6_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_46_6_STATE.outTemplates[0] = []
            
                n_46_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_46_6_STATE.outMessages[0] = msg_create(n_46_6_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_46_6_STATE.outMessages[0], 0, 0.25)
            
        
        
        n_46_6_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_46_6_STATE.outMessages[0]
                }
,
        ]
    

            const n_46_41_STATE = {
                busName: "pitch_3",
            }
        

        const n_46_17_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_46_17_STATE.outTemplates[0] = []
            
                n_46_17_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_46_17_STATE.outMessages[0] = msg_create(n_46_17_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_46_17_STATE.outMessages[0], 0, 0.125)
            
        
        
        n_46_17_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_46_17_STATE.outMessages[0]
                }
,
        ]
    

        const n_46_7_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_46_7_STATE.outTemplates[0] = []
            
                n_46_7_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_46_7_STATE.outMessages[0] = msg_create(n_46_7_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_46_7_STATE.outMessages[0], 0, 0.125)
            
        
        
        n_46_7_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_46_7_STATE.outMessages[0]
                }
,
        ]
    

        const n_46_16_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_46_16_STATE.outTemplates[0] = []
            
                n_46_16_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_46_16_STATE.outMessages[0] = msg_create(n_46_16_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_46_16_STATE.outMessages[0], 0, 0.0625)
            
        
        
        n_46_16_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_46_16_STATE.outMessages[0]
                }
,
        ]
    

        const n_46_9_STATE = {
            value: msg_create([]),
            receiveBusName: "empty",
            sendBusName: "empty",
            messageReceiver: n_control_defaultMessageHandler,
            messageSender: n_control_defaultMessageHandler,
        }
    
        commons_waitEngineConfigure(() => {
            n_46_9_STATE.messageReceiver = function (m) {
                n_bang_receiveMessage(n_46_9_STATE, m)
            }
            n_46_9_STATE.messageSender = n_46_10_RCVS_0
            n_control_setReceiveBusName(n_46_9_STATE, "empty")
        })

        
    

        const n_46_10_STATE = {
            maxValue: 10
        }
    

        const n_46_11_STATE = {
                leftOp: 0,
                rightOp: 0,
            }
            n_mul_setLeft(n_46_11_STATE, 0)
            n_mul_setRight(n_46_11_STATE, 0.1)
        

            const n_46_35_STATE = {
                busName: "delVol_3",
            }
        

        const n_46_12_STATE = {
            value: msg_create([]),
            receiveBusName: "empty",
            sendBusName: "empty",
            messageReceiver: n_control_defaultMessageHandler,
            messageSender: n_control_defaultMessageHandler,
        }
    
        commons_waitEngineConfigure(() => {
            n_46_12_STATE.messageReceiver = function (m) {
                n_bang_receiveMessage(n_46_12_STATE, m)
            }
            n_46_12_STATE.messageSender = n_46_13_RCVS_0
            n_control_setReceiveBusName(n_46_12_STATE, "empty")
        })

        
    

        const n_46_13_STATE = {
            maxValue: 100
        }
    

        const n_46_14_STATE = {
                leftOp: 0,
                rightOp: 0,
            }
            n_mul_setLeft(n_46_14_STATE, 0)
            n_mul_setRight(n_46_14_STATE, 0.01)
        

            const n_46_42_STATE = {
                busName: "modPos_3",
            }
        

        const n_46_15_STATE = {
            value: msg_create([]),
            receiveBusName: "empty",
            sendBusName: "empty",
            messageReceiver: n_control_defaultMessageHandler,
            messageSender: n_control_defaultMessageHandler,
        }
    
        commons_waitEngineConfigure(() => {
            n_46_15_STATE.messageReceiver = function (m) {
                n_bang_receiveMessage(n_46_15_STATE, m)
            }
            n_46_15_STATE.messageSender = n_46_33_RCVS_0
            n_control_setReceiveBusName(n_46_15_STATE, "empty")
        })

        
    


        const n_46_24_STATE = {
            maxValue: 6
        }
    

        const n_46_25_STATE = {
            floatFilter: 0,
            stringFilter: "0",
            filterType: MSG_FLOAT_TOKEN,
        }
    

        const n_46_21_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_46_21_STATE.outTemplates[0] = []
            
                n_46_21_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_46_21_STATE.outMessages[0] = msg_create(n_46_21_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_46_21_STATE.outMessages[0], 0, 1)
            
        
        
        n_46_21_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_46_21_STATE.outMessages[0]
                }
,
        ]
    


            const m_n_46_31_0_sig_STATE = {
                currentValue: 0
            }
        

        const n_46_22_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_46_22_STATE.outTemplates[0] = []
            
                n_46_22_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_46_22_STATE.outMessages[0] = msg_create(n_46_22_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_46_22_STATE.outMessages[0], 0, 0.75)
            
        
        
        n_46_22_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_46_22_STATE.outMessages[0]
                }
,
        ]
    

        const n_46_27_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_46_27_STATE.outTemplates[0] = []
            
                n_46_27_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_46_27_STATE.outMessages[0] = msg_create(n_46_27_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_46_27_STATE.outMessages[0], 0, 0.125)
            
        
        
        n_46_27_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_46_27_STATE.outMessages[0]
                }
,
        ]
    

        const n_46_20_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_46_20_STATE.outTemplates[0] = []
            
                n_46_20_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_46_20_STATE.outMessages[0] = msg_create(n_46_20_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_46_20_STATE.outMessages[0], 0, 0.075)
            
        
        
        n_46_20_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_46_20_STATE.outMessages[0]
                }
,
        ]
    

        const n_46_23_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_46_23_STATE.outTemplates[0] = []
            
                n_46_23_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_46_23_STATE.outMessages[0] = msg_create(n_46_23_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_46_23_STATE.outMessages[0], 0, 0.5)
            
        
        
        n_46_23_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_46_23_STATE.outMessages[0]
                }
,
        ]
    

        const n_46_26_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_46_26_STATE.outTemplates[0] = []
            
                n_46_26_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_46_26_STATE.outMessages[0] = msg_create(n_46_26_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_46_26_STATE.outMessages[0], 0, 0.025)
            
        
        
        n_46_26_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_46_26_STATE.outMessages[0]
                }
,
        ]
    

        const n_46_32_STATE = {
            maxValue: 3
        }
    

        const n_46_28_STATE = {
            floatFilter: 0,
            stringFilter: "0",
            filterType: MSG_FLOAT_TOKEN,
        }
    

        const n_46_29_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_46_29_STATE.outTemplates[0] = []
            
                n_46_29_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_46_29_STATE.outMessages[0] = msg_create(n_46_29_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_46_29_STATE.outMessages[0], 0, -1)
            
        
        
        n_46_29_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_46_29_STATE.outMessages[0]
                }
,
        ]
    


            const m_n_46_31_1_sig_STATE = {
                currentValue: 0
            }
        

        const n_46_30_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_46_30_STATE.outTemplates[0] = []
            
                n_46_30_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_46_30_STATE.outMessages[0] = msg_create(n_46_30_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_46_30_STATE.outMessages[0], 0, 1)
            
        
        
        n_46_30_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_46_30_STATE.outMessages[0]
                }
,
        ]
    

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("startBang", n_46_18_SNDS_0)
            })
        

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("grainSizeSeq_3", n_46_15_RCVS_0)
            })
        

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("modPosSeq_3", n_46_12_RCVS_0)
            })
        

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("pitchSeq_3", n_46_5_RCVS_0)
            })
        

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("fwdAmtSeq_3", n_46_0_RCVS_0)
            })
        

            const n_107_7_STATE = {
                value: 0,
            }
            n_float_int_setValueInt(n_107_7_STATE, 0)
        

        const n_107_2_STATE = {
            isClosed: true
        }
    


        const n_107_1_STATE = {
            currentValue: 0
        }
    

            const n_107_8_STATE = {
                currentValue: 0
            }
        


        const n_107_10_STATE = {
            isClosed: true
        }
    

            const n_107_13_STATE = {
                currentValue: 0
            }
        

        const n_107_9_STATE = {
            floatFilter: 1,
            stringFilter: "1",
            filterType: MSG_FLOAT_TOKEN,
        }
    



        const n_107_14_STATE = {
            delay: 0,
            sampleRatio: 1,
            scheduledBang: SKED_ID_NULL,
        }

        commons_waitEngineConfigure(() => {
            n_107_14_STATE.sampleRatio = computeUnitInSamples(SAMPLE_RATE, 1, "msec")
            n_delay_setDelay(n_107_14_STATE, 1200)
        })
    

        const n_107_6_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_107_6_STATE.outTemplates[0] = []
            
                n_107_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_107_6_STATE.outMessages[0] = msg_create(n_107_6_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_107_6_STATE.outMessages[0], 0, 1)
            
        
        
        n_107_6_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_107_6_STATE.outMessages[0]
                }
,
        ]
    

        const n_107_4_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_107_4_STATE.outTemplates[0] = []
            
                n_107_4_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_107_4_STATE.outMessages[0] = msg_create(n_107_4_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_107_4_STATE.outMessages[0], 0, 0)
            
        
        
        n_107_4_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_107_4_STATE.outMessages[0]
                }
,
        ]
    


        const n_108_2_STATE = {
            delay: 0,
            sampleRatio: 1,
            scheduledBang: SKED_ID_NULL,
        }

        commons_waitEngineConfigure(() => {
            n_108_2_STATE.sampleRatio = computeUnitInSamples(SAMPLE_RATE, 1, "msec")
            n_delay_setDelay(n_108_2_STATE, 1000)
        })
    

        const n_108_5_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_108_5_STATE.outTemplates[0] = []
            
                n_108_5_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_108_5_STATE.outMessages[0] = msg_create(n_108_5_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_108_5_STATE.outMessages[0], 0, 0)
            
        
        
        n_108_5_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_108_5_STATE.outMessages[0]
                }
,
        ]
    

            const n_108_1_STATE = {
                value: 0,
            }
            n_float_int_setValueInt(n_108_1_STATE, 0)
        

        const n_108_6_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_108_6_STATE.outTemplates[0] = []
            
                n_108_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_108_6_STATE.outMessages[0] = msg_create(n_108_6_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_108_6_STATE.outMessages[0], 0, 1)
            
        
        
        n_108_6_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_108_6_STATE.outMessages[0]
                }
,
        ]
    

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("genMetro", n_107_2_RCVS_0)
            })
        
commons_waitFrame(0, () => n_107_6_RCVS_0(msg_bang()))

            const n_109_7_STATE = {
                value: 0,
            }
            n_float_int_setValueInt(n_109_7_STATE, 0)
        

        const n_109_2_STATE = {
            isClosed: true
        }
    


        const n_109_1_STATE = {
            currentValue: 0
        }
    

            const n_109_8_STATE = {
                currentValue: 0
            }
        


        const n_109_10_STATE = {
            isClosed: true
        }
    

            const n_109_13_STATE = {
                currentValue: 0
            }
        

        const n_109_9_STATE = {
            floatFilter: 1,
            stringFilter: "1",
            filterType: MSG_FLOAT_TOKEN,
        }
    



        const n_109_14_STATE = {
            delay: 0,
            sampleRatio: 1,
            scheduledBang: SKED_ID_NULL,
        }

        commons_waitEngineConfigure(() => {
            n_109_14_STATE.sampleRatio = computeUnitInSamples(SAMPLE_RATE, 1, "msec")
            n_delay_setDelay(n_109_14_STATE, 1200)
        })
    

        const n_109_6_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_109_6_STATE.outTemplates[0] = []
            
                n_109_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_109_6_STATE.outMessages[0] = msg_create(n_109_6_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_109_6_STATE.outMessages[0], 0, 1)
            
        
        
        n_109_6_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_109_6_STATE.outMessages[0]
                }
,
        ]
    

        const n_109_4_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_109_4_STATE.outTemplates[0] = []
            
                n_109_4_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_109_4_STATE.outMessages[0] = msg_create(n_109_4_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_109_4_STATE.outMessages[0], 0, 0)
            
        
        
        n_109_4_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_109_4_STATE.outMessages[0]
                }
,
        ]
    


        const n_110_2_STATE = {
            delay: 0,
            sampleRatio: 1,
            scheduledBang: SKED_ID_NULL,
        }

        commons_waitEngineConfigure(() => {
            n_110_2_STATE.sampleRatio = computeUnitInSamples(SAMPLE_RATE, 1, "msec")
            n_delay_setDelay(n_110_2_STATE, 1000)
        })
    

        const n_110_5_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_110_5_STATE.outTemplates[0] = []
            
                n_110_5_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_110_5_STATE.outMessages[0] = msg_create(n_110_5_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_110_5_STATE.outMessages[0], 0, 0)
            
        
        
        n_110_5_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_110_5_STATE.outMessages[0]
                }
,
        ]
    

            const n_110_1_STATE = {
                value: 0,
            }
            n_float_int_setValueInt(n_110_1_STATE, 0)
        

        const n_110_6_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_110_6_STATE.outTemplates[0] = []
            
                n_110_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_110_6_STATE.outMessages[0] = msg_create(n_110_6_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_110_6_STATE.outMessages[0], 0, 1)
            
        
        
        n_110_6_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_110_6_STATE.outMessages[0]
                }
,
        ]
    

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("genMetro", n_109_2_RCVS_0)
            })
        
commons_waitFrame(0, () => n_109_6_RCVS_0(msg_bang()))

            const n_111_7_STATE = {
                value: 0,
            }
            n_float_int_setValueInt(n_111_7_STATE, 0)
        

        const n_111_2_STATE = {
            isClosed: true
        }
    


        const n_111_1_STATE = {
            currentValue: 0
        }
    

            const n_111_8_STATE = {
                currentValue: 0
            }
        


        const n_111_10_STATE = {
            isClosed: true
        }
    

            const n_111_13_STATE = {
                currentValue: 0
            }
        

        const n_111_9_STATE = {
            floatFilter: 1,
            stringFilter: "1",
            filterType: MSG_FLOAT_TOKEN,
        }
    



        const n_111_14_STATE = {
            delay: 0,
            sampleRatio: 1,
            scheduledBang: SKED_ID_NULL,
        }

        commons_waitEngineConfigure(() => {
            n_111_14_STATE.sampleRatio = computeUnitInSamples(SAMPLE_RATE, 1, "msec")
            n_delay_setDelay(n_111_14_STATE, 1200)
        })
    

        const n_111_6_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_111_6_STATE.outTemplates[0] = []
            
                n_111_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_111_6_STATE.outMessages[0] = msg_create(n_111_6_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_111_6_STATE.outMessages[0], 0, 1)
            
        
        
        n_111_6_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_111_6_STATE.outMessages[0]
                }
,
        ]
    

        const n_111_4_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_111_4_STATE.outTemplates[0] = []
            
                n_111_4_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_111_4_STATE.outMessages[0] = msg_create(n_111_4_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_111_4_STATE.outMessages[0], 0, 0)
            
        
        
        n_111_4_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_111_4_STATE.outMessages[0]
                }
,
        ]
    


        const n_112_2_STATE = {
            delay: 0,
            sampleRatio: 1,
            scheduledBang: SKED_ID_NULL,
        }

        commons_waitEngineConfigure(() => {
            n_112_2_STATE.sampleRatio = computeUnitInSamples(SAMPLE_RATE, 1, "msec")
            n_delay_setDelay(n_112_2_STATE, 1000)
        })
    

        const n_112_5_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_112_5_STATE.outTemplates[0] = []
            
                n_112_5_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_112_5_STATE.outMessages[0] = msg_create(n_112_5_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_112_5_STATE.outMessages[0], 0, 0)
            
        
        
        n_112_5_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_112_5_STATE.outMessages[0]
                }
,
        ]
    

            const n_112_1_STATE = {
                value: 0,
            }
            n_float_int_setValueInt(n_112_1_STATE, 0)
        

        const n_112_6_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_112_6_STATE.outTemplates[0] = []
            
                n_112_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_112_6_STATE.outMessages[0] = msg_create(n_112_6_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_112_6_STATE.outMessages[0], 0, 1)
            
        
        
        n_112_6_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_112_6_STATE.outMessages[0]
                }
,
        ]
    

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("genMetro", n_111_2_RCVS_0)
            })
        
commons_waitFrame(0, () => n_111_6_RCVS_0(msg_bang()))

            const n_113_7_STATE = {
                value: 0,
            }
            n_float_int_setValueInt(n_113_7_STATE, 0)
        

        const n_113_2_STATE = {
            isClosed: true
        }
    


        const n_113_1_STATE = {
            currentValue: 0
        }
    

            const n_113_8_STATE = {
                currentValue: 0
            }
        


        const n_113_10_STATE = {
            isClosed: true
        }
    

            const n_113_13_STATE = {
                currentValue: 0
            }
        

        const n_113_9_STATE = {
            floatFilter: 1,
            stringFilter: "1",
            filterType: MSG_FLOAT_TOKEN,
        }
    



        const n_113_14_STATE = {
            delay: 0,
            sampleRatio: 1,
            scheduledBang: SKED_ID_NULL,
        }

        commons_waitEngineConfigure(() => {
            n_113_14_STATE.sampleRatio = computeUnitInSamples(SAMPLE_RATE, 1, "msec")
            n_delay_setDelay(n_113_14_STATE, 1200)
        })
    

        const n_113_6_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_113_6_STATE.outTemplates[0] = []
            
                n_113_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_113_6_STATE.outMessages[0] = msg_create(n_113_6_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_113_6_STATE.outMessages[0], 0, 1)
            
        
        
        n_113_6_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_113_6_STATE.outMessages[0]
                }
,
        ]
    

        const n_113_4_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_113_4_STATE.outTemplates[0] = []
            
                n_113_4_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_113_4_STATE.outMessages[0] = msg_create(n_113_4_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_113_4_STATE.outMessages[0], 0, 0)
            
        
        
        n_113_4_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_113_4_STATE.outMessages[0]
                }
,
        ]
    


        const n_114_2_STATE = {
            delay: 0,
            sampleRatio: 1,
            scheduledBang: SKED_ID_NULL,
        }

        commons_waitEngineConfigure(() => {
            n_114_2_STATE.sampleRatio = computeUnitInSamples(SAMPLE_RATE, 1, "msec")
            n_delay_setDelay(n_114_2_STATE, 1000)
        })
    

        const n_114_5_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_114_5_STATE.outTemplates[0] = []
            
                n_114_5_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_114_5_STATE.outMessages[0] = msg_create(n_114_5_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_114_5_STATE.outMessages[0], 0, 0)
            
        
        
        n_114_5_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_114_5_STATE.outMessages[0]
                }
,
        ]
    

            const n_114_1_STATE = {
                value: 0,
            }
            n_float_int_setValueInt(n_114_1_STATE, 0)
        

        const n_114_6_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_114_6_STATE.outTemplates[0] = []
            
                n_114_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_114_6_STATE.outMessages[0] = msg_create(n_114_6_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_114_6_STATE.outMessages[0], 0, 1)
            
        
        
        n_114_6_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_114_6_STATE.outMessages[0]
                }
,
        ]
    

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("genMetro", n_113_2_RCVS_0)
            })
        
commons_waitFrame(0, () => n_113_6_RCVS_0(msg_bang()))

            const n_115_7_STATE = {
                value: 0,
            }
            n_float_int_setValueInt(n_115_7_STATE, 0)
        

        const n_115_2_STATE = {
            isClosed: true
        }
    


        const n_115_1_STATE = {
            currentValue: 0
        }
    

            const n_115_8_STATE = {
                currentValue: 0
            }
        


        const n_115_10_STATE = {
            isClosed: true
        }
    

            const n_115_13_STATE = {
                currentValue: 0
            }
        

        const n_115_9_STATE = {
            floatFilter: 1,
            stringFilter: "1",
            filterType: MSG_FLOAT_TOKEN,
        }
    



        const n_115_14_STATE = {
            delay: 0,
            sampleRatio: 1,
            scheduledBang: SKED_ID_NULL,
        }

        commons_waitEngineConfigure(() => {
            n_115_14_STATE.sampleRatio = computeUnitInSamples(SAMPLE_RATE, 1, "msec")
            n_delay_setDelay(n_115_14_STATE, 1200)
        })
    

        const n_115_6_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_115_6_STATE.outTemplates[0] = []
            
                n_115_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_115_6_STATE.outMessages[0] = msg_create(n_115_6_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_115_6_STATE.outMessages[0], 0, 1)
            
        
        
        n_115_6_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_115_6_STATE.outMessages[0]
                }
,
        ]
    

        const n_115_4_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_115_4_STATE.outTemplates[0] = []
            
                n_115_4_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_115_4_STATE.outMessages[0] = msg_create(n_115_4_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_115_4_STATE.outMessages[0], 0, 0)
            
        
        
        n_115_4_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_115_4_STATE.outMessages[0]
                }
,
        ]
    


        const n_116_2_STATE = {
            delay: 0,
            sampleRatio: 1,
            scheduledBang: SKED_ID_NULL,
        }

        commons_waitEngineConfigure(() => {
            n_116_2_STATE.sampleRatio = computeUnitInSamples(SAMPLE_RATE, 1, "msec")
            n_delay_setDelay(n_116_2_STATE, 1000)
        })
    

        const n_116_5_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_116_5_STATE.outTemplates[0] = []
            
                n_116_5_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_116_5_STATE.outMessages[0] = msg_create(n_116_5_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_116_5_STATE.outMessages[0], 0, 0)
            
        
        
        n_116_5_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_116_5_STATE.outMessages[0]
                }
,
        ]
    

            const n_116_1_STATE = {
                value: 0,
            }
            n_float_int_setValueInt(n_116_1_STATE, 0)
        

        const n_116_6_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_116_6_STATE.outTemplates[0] = []
            
                n_116_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_116_6_STATE.outMessages[0] = msg_create(n_116_6_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_116_6_STATE.outMessages[0], 0, 1)
            
        
        
        n_116_6_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_116_6_STATE.outMessages[0]
                }
,
        ]
    

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("genMetro", n_115_2_RCVS_0)
            })
        
commons_waitFrame(0, () => n_115_6_RCVS_0(msg_bang()))

            const n_117_7_STATE = {
                value: 0,
            }
            n_float_int_setValueInt(n_117_7_STATE, 0)
        

        const n_117_2_STATE = {
            isClosed: true
        }
    


        const n_117_1_STATE = {
            currentValue: 0
        }
    

            const n_117_8_STATE = {
                currentValue: 0
            }
        


        const n_117_10_STATE = {
            isClosed: true
        }
    

            const n_117_13_STATE = {
                currentValue: 0
            }
        

        const n_117_9_STATE = {
            floatFilter: 1,
            stringFilter: "1",
            filterType: MSG_FLOAT_TOKEN,
        }
    



        const n_117_14_STATE = {
            delay: 0,
            sampleRatio: 1,
            scheduledBang: SKED_ID_NULL,
        }

        commons_waitEngineConfigure(() => {
            n_117_14_STATE.sampleRatio = computeUnitInSamples(SAMPLE_RATE, 1, "msec")
            n_delay_setDelay(n_117_14_STATE, 1200)
        })
    

        const n_117_6_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_117_6_STATE.outTemplates[0] = []
            
                n_117_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_117_6_STATE.outMessages[0] = msg_create(n_117_6_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_117_6_STATE.outMessages[0], 0, 1)
            
        
        
        n_117_6_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_117_6_STATE.outMessages[0]
                }
,
        ]
    

        const n_117_4_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_117_4_STATE.outTemplates[0] = []
            
                n_117_4_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_117_4_STATE.outMessages[0] = msg_create(n_117_4_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_117_4_STATE.outMessages[0], 0, 0)
            
        
        
        n_117_4_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_117_4_STATE.outMessages[0]
                }
,
        ]
    


        const n_118_2_STATE = {
            delay: 0,
            sampleRatio: 1,
            scheduledBang: SKED_ID_NULL,
        }

        commons_waitEngineConfigure(() => {
            n_118_2_STATE.sampleRatio = computeUnitInSamples(SAMPLE_RATE, 1, "msec")
            n_delay_setDelay(n_118_2_STATE, 1000)
        })
    

        const n_118_5_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_118_5_STATE.outTemplates[0] = []
            
                n_118_5_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_118_5_STATE.outMessages[0] = msg_create(n_118_5_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_118_5_STATE.outMessages[0], 0, 0)
            
        
        
        n_118_5_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_118_5_STATE.outMessages[0]
                }
,
        ]
    

            const n_118_1_STATE = {
                value: 0,
            }
            n_float_int_setValueInt(n_118_1_STATE, 0)
        

        const n_118_6_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_118_6_STATE.outTemplates[0] = []
            
                n_118_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_118_6_STATE.outMessages[0] = msg_create(n_118_6_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_118_6_STATE.outMessages[0], 0, 1)
            
        
        
        n_118_6_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_118_6_STATE.outMessages[0]
                }
,
        ]
    

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("genMetro", n_117_2_RCVS_0)
            })
        
commons_waitFrame(0, () => n_117_6_RCVS_0(msg_bang()))

        const n_47_0_STATE = {
            value: msg_create([]),
            receiveBusName: "empty",
            sendBusName: "empty",
            messageReceiver: n_control_defaultMessageHandler,
            messageSender: n_control_defaultMessageHandler,
        }
    
        commons_waitEngineConfigure(() => {
            n_47_0_STATE.messageReceiver = function (m) {
                n_bang_receiveMessage(n_47_0_STATE, m)
            }
            n_47_0_STATE.messageSender = n_47_1_RCVS_0
            n_control_setReceiveBusName(n_47_0_STATE, "empty")
        })

        
    

        const n_47_1_STATE = {
            maxValue: 10
        }
    

        const n_47_2_STATE = {
            floatFilter: 0,
            stringFilter: "0",
            filterType: MSG_FLOAT_TOKEN,
        }
    

        const n_47_3_STATE = {
            value: msg_create([]),
            receiveBusName: "empty",
            sendBusName: "empty",
            messageReceiver: n_control_defaultMessageHandler,
            messageSender: n_control_defaultMessageHandler,
        }
    
        commons_waitEngineConfigure(() => {
            n_47_3_STATE.messageReceiver = function (m) {
                n_bang_receiveMessage(n_47_3_STATE, m)
            }
            n_47_3_STATE.messageSender = n_47_24_RCVS_0
            n_control_setReceiveBusName(n_47_3_STATE, "empty")
        })

        
    

            const n_47_24_STATE = {
                busName: "grainSizeSeq_4",
            }
        

            const n_47_4_STATE = {
                value: msg_floats([0]),
                receiveBusName: "empty",
                sendBusName: "empty",
                messageReceiver: n_control_defaultMessageHandler,
                messageSender: n_control_defaultMessageHandler,
            }
        
            commons_waitEngineConfigure(() => {
                n_47_4_STATE.messageReceiver = function (m) {
                    n_floatatom_receiveMessage(n_47_4_STATE, m)
                }
                n_47_4_STATE.messageSender = SND_TO_NULL
                n_control_setReceiveBusName(n_47_4_STATE, "empty")
            })
        

        const n_47_6_STATE = {
            value: msg_create([]),
            receiveBusName: "empty",
            sendBusName: "empty",
            messageReceiver: n_control_defaultMessageHandler,
            messageSender: n_control_defaultMessageHandler,
        }
    
        commons_waitEngineConfigure(() => {
            n_47_6_STATE.messageReceiver = function (m) {
                n_bang_receiveMessage(n_47_6_STATE, m)
            }
            n_47_6_STATE.messageSender = n_47_15_RCVS_0
            n_control_setReceiveBusName(n_47_6_STATE, "empty")
        })

        
    

        const n_47_15_STATE = {
            maxValue: 6
        }
    

        const n_47_7_STATE = {
            floatFilter: 0,
            stringFilter: "0",
            filterType: MSG_FLOAT_TOKEN,
        }
    

        const n_47_8_STATE = {
            value: msg_create([]),
            receiveBusName: "empty",
            sendBusName: "empty",
            messageReceiver: n_control_defaultMessageHandler,
            messageSender: n_control_defaultMessageHandler,
        }
    
        commons_waitEngineConfigure(() => {
            n_47_8_STATE.messageReceiver = function (m) {
                n_bang_receiveMessage(n_47_8_STATE, m)
            }
            n_47_8_STATE.messageSender = n_47_23_RCVS_0
            n_control_setReceiveBusName(n_47_8_STATE, "empty")
        })

        
    

            const n_47_23_STATE = {
                busName: "pitchSeq_4",
            }
        

            const n_47_9_STATE = {
                value: msg_floats([0]),
                receiveBusName: "empty",
                sendBusName: "empty",
                messageReceiver: n_control_defaultMessageHandler,
                messageSender: n_control_defaultMessageHandler,
            }
        
            commons_waitEngineConfigure(() => {
                n_47_9_STATE.messageReceiver = function (m) {
                    n_floatatom_receiveMessage(n_47_9_STATE, m)
                }
                n_47_9_STATE.messageSender = SND_TO_NULL
                n_control_setReceiveBusName(n_47_9_STATE, "empty")
            })
        

        const n_47_10_STATE = {
            value: msg_create([]),
            receiveBusName: "empty",
            sendBusName: "empty",
            messageReceiver: n_control_defaultMessageHandler,
            messageSender: n_control_defaultMessageHandler,
        }
    
        commons_waitEngineConfigure(() => {
            n_47_10_STATE.messageReceiver = function (m) {
                n_bang_receiveMessage(n_47_10_STATE, m)
            }
            n_47_10_STATE.messageSender = n_47_14_RCVS_0
            n_control_setReceiveBusName(n_47_10_STATE, "empty")
        })

        
    

        const n_47_14_STATE = {
            maxValue: 7
        }
    

        const n_47_11_STATE = {
            floatFilter: 0,
            stringFilter: "0",
            filterType: MSG_FLOAT_TOKEN,
        }
    

        const n_47_12_STATE = {
            value: msg_create([]),
            receiveBusName: "empty",
            sendBusName: "empty",
            messageReceiver: n_control_defaultMessageHandler,
            messageSender: n_control_defaultMessageHandler,
        }
    
        commons_waitEngineConfigure(() => {
            n_47_12_STATE.messageReceiver = function (m) {
                n_bang_receiveMessage(n_47_12_STATE, m)
            }
            n_47_12_STATE.messageSender = n_47_22_RCVS_0
            n_control_setReceiveBusName(n_47_12_STATE, "empty")
        })

        
    

            const n_47_22_STATE = {
                busName: "modPosSeq_4",
            }
        

            const n_47_13_STATE = {
                value: msg_floats([0]),
                receiveBusName: "empty",
                sendBusName: "empty",
                messageReceiver: n_control_defaultMessageHandler,
                messageSender: n_control_defaultMessageHandler,
            }
        
            commons_waitEngineConfigure(() => {
                n_47_13_STATE.messageReceiver = function (m) {
                    n_floatatom_receiveMessage(n_47_13_STATE, m)
                }
                n_47_13_STATE.messageSender = SND_TO_NULL
                n_control_setReceiveBusName(n_47_13_STATE, "empty")
            })
        

        const n_47_16_STATE = {
            value: msg_create([]),
            receiveBusName: "empty",
            sendBusName: "empty",
            messageReceiver: n_control_defaultMessageHandler,
            messageSender: n_control_defaultMessageHandler,
        }
    
        commons_waitEngineConfigure(() => {
            n_47_16_STATE.messageReceiver = function (m) {
                n_bang_receiveMessage(n_47_16_STATE, m)
            }
            n_47_16_STATE.messageSender = n_47_20_RCVS_0
            n_control_setReceiveBusName(n_47_16_STATE, "empty")
        })

        
    

        const n_47_20_STATE = {
            maxValue: 1
        }
    

        const n_47_17_STATE = {
            floatFilter: 0,
            stringFilter: "0",
            filterType: MSG_FLOAT_TOKEN,
        }
    

        const n_47_18_STATE = {
            value: msg_create([]),
            receiveBusName: "empty",
            sendBusName: "empty",
            messageReceiver: n_control_defaultMessageHandler,
            messageSender: n_control_defaultMessageHandler,
        }
    
        commons_waitEngineConfigure(() => {
            n_47_18_STATE.messageReceiver = function (m) {
                n_bang_receiveMessage(n_47_18_STATE, m)
            }
            n_47_18_STATE.messageSender = n_47_21_RCVS_0
            n_control_setReceiveBusName(n_47_18_STATE, "empty")
        })

        
    

            const n_47_21_STATE = {
                busName: "fwdAmtSeq_4",
            }
        

            const n_47_19_STATE = {
                value: msg_floats([0]),
                receiveBusName: "empty",
                sendBusName: "empty",
                messageReceiver: n_control_defaultMessageHandler,
                messageSender: n_control_defaultMessageHandler,
            }
        
            commons_waitEngineConfigure(() => {
                n_47_19_STATE.messageReceiver = function (m) {
                    n_floatatom_receiveMessage(n_47_19_STATE, m)
                }
                n_47_19_STATE.messageSender = SND_TO_NULL
                n_control_setReceiveBusName(n_47_19_STATE, "empty")
            })
        

        const n_47_28_STATE = {
            value: msg_create([]),
            receiveBusName: "empty",
            sendBusName: "empty",
            messageReceiver: n_control_defaultMessageHandler,
            messageSender: n_control_defaultMessageHandler,
        }
    
        commons_waitEngineConfigure(() => {
            n_47_28_STATE.messageReceiver = function (m) {
                n_bang_receiveMessage(n_47_28_STATE, m)
            }
            n_47_28_STATE.messageSender = n_47_29_RCVS_0
            n_control_setReceiveBusName(n_47_28_STATE, "empty")
        })

        
    

        const n_47_29_STATE = {
            maxValue: 6
        }
    

        const n_47_30_STATE = {
            floatFilter: 0,
            stringFilter: "0",
            filterType: MSG_FLOAT_TOKEN,
        }
    

        const n_47_31_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_47_31_STATE.outTemplates[0] = []
            
                n_47_31_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_47_31_STATE.outMessages[0] = msg_create(n_47_31_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_47_31_STATE.outMessages[0], 0, 0)
            
        
        
        n_47_31_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_47_31_STATE.outMessages[0]
                }
,
        ]
    

            const n_47_35_STATE = {
                busName: "positionOffset_4",
            }
        

        const n_47_32_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_47_32_STATE.outTemplates[0] = []
            
                n_47_32_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_47_32_STATE.outMessages[0] = msg_create(n_47_32_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_47_32_STATE.outMessages[0], 0, 0.25)
            
        
        
        n_47_32_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_47_32_STATE.outMessages[0]
                }
,
        ]
    

        const n_47_33_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_47_33_STATE.outTemplates[0] = []
            
                n_47_33_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_47_33_STATE.outMessages[0] = msg_create(n_47_33_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_47_33_STATE.outMessages[0], 0, 0.5)
            
        
        
        n_47_33_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_47_33_STATE.outMessages[0]
                }
,
        ]
    

        const n_47_34_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_47_34_STATE.outTemplates[0] = []
            
                n_47_34_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_47_34_STATE.outMessages[0] = msg_create(n_47_34_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_47_34_STATE.outMessages[0], 0, 0.75)
            
        
        
        n_47_34_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_47_34_STATE.outMessages[0]
                }
,
        ]
    

        const n_47_36_STATE = {
            value: msg_create([]),
            receiveBusName: "empty",
            sendBusName: "empty",
            messageReceiver: n_control_defaultMessageHandler,
            messageSender: n_control_defaultMessageHandler,
        }
    
        commons_waitEngineConfigure(() => {
            n_47_36_STATE.messageReceiver = function (m) {
                n_bang_receiveMessage(n_47_36_STATE, m)
            }
            n_47_36_STATE.messageSender = n_47_40_RCVS_0
            n_control_setReceiveBusName(n_47_36_STATE, "empty")
        })

        
    

        const n_47_40_STATE = {
            maxValue: 4
        }
    

        const n_47_37_STATE = {
            floatFilter: 0,
            stringFilter: "0",
            filterType: MSG_FLOAT_TOKEN,
        }
    

        const n_47_38_STATE = {
            value: msg_create([]),
            receiveBusName: "empty",
            sendBusName: "empty",
            messageReceiver: n_control_defaultMessageHandler,
            messageSender: n_control_defaultMessageHandler,
        }
    
        commons_waitEngineConfigure(() => {
            n_47_38_STATE.messageReceiver = function (m) {
                n_bang_receiveMessage(n_47_38_STATE, m)
            }
            n_47_38_STATE.messageSender = n_47_42_RCVS_0
            n_control_setReceiveBusName(n_47_38_STATE, "empty")
        })

        
    

            const n_47_42_STATE = {
                busName: "randDel4",
            }
        

            const n_47_39_STATE = {
                value: msg_floats([0]),
                receiveBusName: "empty",
                sendBusName: "empty",
                messageReceiver: n_control_defaultMessageHandler,
                messageSender: n_control_defaultMessageHandler,
            }
        
            commons_waitEngineConfigure(() => {
                n_47_39_STATE.messageReceiver = function (m) {
                    n_floatatom_receiveMessage(n_47_39_STATE, m)
                }
                n_47_39_STATE.messageSender = SND_TO_NULL
                n_control_setReceiveBusName(n_47_39_STATE, "empty")
            })
        

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("startBang", n_47_34_RCVS_0)
            })
        
commons_waitFrame(0, () => n_47_44_SNDS_0(msg_bang()))

        const n_47_45_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_47_45_STATE.outTemplates[0] = []
            
                n_47_45_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_47_45_STATE.outMessages[0] = msg_create(n_47_45_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_47_45_STATE.outMessages[0], 0, 0.1)
            
        
        
        n_47_45_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_47_45_STATE.outMessages[0]
                }
,
        ]
    

        const n_119_17_STATE = {
            floatInputs: new Map(),
            stringInputs: new Map(),
            outputs: new Array(1),
        }

        n_119_17_STATE.floatInputs.set(1, 0)
        
    

        const n_47_46_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_47_46_STATE.outTemplates[0] = []
            
                n_47_46_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_47_46_STATE.outMessages[0] = msg_create(n_47_46_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_47_46_STATE.outMessages[0], 0, 0.9)
            
        
        
        n_47_46_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_47_46_STATE.outMessages[0]
                }
,
        ]
    

        const n_121_17_STATE = {
            floatInputs: new Map(),
            stringInputs: new Map(),
            outputs: new Array(1),
        }

        n_121_17_STATE.floatInputs.set(1, 0)
        
    

        const n_47_47_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_47_47_STATE.outTemplates[0] = []
            
                n_47_47_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_47_47_STATE.outMessages[0] = msg_create(n_47_47_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_47_47_STATE.outMessages[0], 0, 0.5)
            
        
        
        n_47_47_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_47_47_STATE.outMessages[0]
                }
,
        ]
    

        const n_123_17_STATE = {
            floatInputs: new Map(),
            stringInputs: new Map(),
            outputs: new Array(1),
        }

        n_123_17_STATE.floatInputs.set(1, 0)
        
    

        const n_47_48_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_47_48_STATE.outTemplates[0] = []
            
                n_47_48_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_47_48_STATE.outMessages[0] = msg_create(n_47_48_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_47_48_STATE.outMessages[0], 0, 0.2)
            
        
        
        n_47_48_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_47_48_STATE.outMessages[0]
                }
,
        ]
    

        const n_125_17_STATE = {
            floatInputs: new Map(),
            stringInputs: new Map(),
            outputs: new Array(1),
        }

        n_125_17_STATE.floatInputs.set(1, 0)
        
    

        const n_47_49_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_47_49_STATE.outTemplates[0] = []
            
                n_47_49_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_47_49_STATE.outMessages[0] = msg_create(n_47_49_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_47_49_STATE.outMessages[0], 0, 0.1)
            
        
        
        n_47_49_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_47_49_STATE.outMessages[0]
                }
,
        ]
    

        const n_127_17_STATE = {
            floatInputs: new Map(),
            stringInputs: new Map(),
            outputs: new Array(1),
        }

        n_127_17_STATE.floatInputs.set(1, 0)
        
    

        const n_47_50_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_47_50_STATE.outTemplates[0] = []
            
                n_47_50_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_47_50_STATE.outMessages[0] = msg_create(n_47_50_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_47_50_STATE.outMessages[0], 0, 0.4)
            
        
        
        n_47_50_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_47_50_STATE.outMessages[0]
                }
,
        ]
    

        const n_129_17_STATE = {
            floatInputs: new Map(),
            stringInputs: new Map(),
            outputs: new Array(1),
        }

        n_129_17_STATE.floatInputs.set(1, 0)
        
    

        const n_48_0_STATE = {
            value: msg_create([]),
            receiveBusName: "empty",
            sendBusName: "empty",
            messageReceiver: n_control_defaultMessageHandler,
            messageSender: n_control_defaultMessageHandler,
        }
    
        commons_waitEngineConfigure(() => {
            n_48_0_STATE.messageReceiver = function (m) {
                n_bang_receiveMessage(n_48_0_STATE, m)
            }
            n_48_0_STATE.messageSender = n_48_1_RCVS_0
            n_control_setReceiveBusName(n_48_0_STATE, "empty")
        })

        
    

        const n_48_1_STATE = {
            maxValue: 4
        }
    

        const n_48_2_STATE = {
            floatFilter: 0,
            stringFilter: "0",
            filterType: MSG_FLOAT_TOKEN,
        }
    

        const n_48_4_STATE = {
            maxValue: 30
        }
    

        const n_48_34_STATE = {
                leftOp: 0,
                rightOp: 0,
            }
            n_mul_setLeft(n_48_34_STATE, 0)
            n_mul_setRight(n_48_34_STATE, 0.01)
        

            const n_48_40_STATE = {
                busName: "forwardAmt_4",
            }
        

        const n_48_3_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_48_3_STATE.outTemplates[0] = []
            
                n_48_3_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_48_3_STATE.outMessages[0] = msg_create(n_48_3_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_48_3_STATE.outMessages[0], 0, 0)
            
        
        
        n_48_3_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_48_3_STATE.outMessages[0]
                }
,
        ]
    

        const n_48_5_STATE = {
            value: msg_create([]),
            receiveBusName: "empty",
            sendBusName: "empty",
            messageReceiver: n_control_defaultMessageHandler,
            messageSender: n_control_defaultMessageHandler,
        }
    
        commons_waitEngineConfigure(() => {
            n_48_5_STATE.messageReceiver = function (m) {
                n_bang_receiveMessage(n_48_5_STATE, m)
            }
            n_48_5_STATE.messageSender = n_48_8_RCVS_0
            n_control_setReceiveBusName(n_48_5_STATE, "empty")
        })

        
    

        const n_48_8_STATE = {
            maxValue: 4
        }
    

        const n_48_19_STATE = {
            floatFilter: 0,
            stringFilter: "0",
            filterType: MSG_FLOAT_TOKEN,
        }
    

        const n_48_6_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_48_6_STATE.outTemplates[0] = []
            
                n_48_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_48_6_STATE.outMessages[0] = msg_create(n_48_6_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_48_6_STATE.outMessages[0], 0, 0.25)
            
        
        
        n_48_6_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_48_6_STATE.outMessages[0]
                }
,
        ]
    

            const n_48_41_STATE = {
                busName: "pitch_4",
            }
        

        const n_48_17_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_48_17_STATE.outTemplates[0] = []
            
                n_48_17_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_48_17_STATE.outMessages[0] = msg_create(n_48_17_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_48_17_STATE.outMessages[0], 0, 0.125)
            
        
        
        n_48_17_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_48_17_STATE.outMessages[0]
                }
,
        ]
    

        const n_48_7_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_48_7_STATE.outTemplates[0] = []
            
                n_48_7_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_48_7_STATE.outMessages[0] = msg_create(n_48_7_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_48_7_STATE.outMessages[0], 0, 0.125)
            
        
        
        n_48_7_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_48_7_STATE.outMessages[0]
                }
,
        ]
    

        const n_48_16_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_48_16_STATE.outTemplates[0] = []
            
                n_48_16_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_48_16_STATE.outMessages[0] = msg_create(n_48_16_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_48_16_STATE.outMessages[0], 0, 0.0625)
            
        
        
        n_48_16_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_48_16_STATE.outMessages[0]
                }
,
        ]
    

        const n_48_9_STATE = {
            value: msg_create([]),
            receiveBusName: "empty",
            sendBusName: "empty",
            messageReceiver: n_control_defaultMessageHandler,
            messageSender: n_control_defaultMessageHandler,
        }
    
        commons_waitEngineConfigure(() => {
            n_48_9_STATE.messageReceiver = function (m) {
                n_bang_receiveMessage(n_48_9_STATE, m)
            }
            n_48_9_STATE.messageSender = n_48_10_RCVS_0
            n_control_setReceiveBusName(n_48_9_STATE, "empty")
        })

        
    

        const n_48_10_STATE = {
            maxValue: 10
        }
    

        const n_48_11_STATE = {
                leftOp: 0,
                rightOp: 0,
            }
            n_mul_setLeft(n_48_11_STATE, 0)
            n_mul_setRight(n_48_11_STATE, 0.1)
        

            const n_48_35_STATE = {
                busName: "delVol_4",
            }
        

        const n_48_12_STATE = {
            value: msg_create([]),
            receiveBusName: "empty",
            sendBusName: "empty",
            messageReceiver: n_control_defaultMessageHandler,
            messageSender: n_control_defaultMessageHandler,
        }
    
        commons_waitEngineConfigure(() => {
            n_48_12_STATE.messageReceiver = function (m) {
                n_bang_receiveMessage(n_48_12_STATE, m)
            }
            n_48_12_STATE.messageSender = n_48_13_RCVS_0
            n_control_setReceiveBusName(n_48_12_STATE, "empty")
        })

        
    

        const n_48_13_STATE = {
            maxValue: 100
        }
    

        const n_48_14_STATE = {
                leftOp: 0,
                rightOp: 0,
            }
            n_mul_setLeft(n_48_14_STATE, 0)
            n_mul_setRight(n_48_14_STATE, 0.01)
        

            const n_48_42_STATE = {
                busName: "modPos_4",
            }
        

        const n_48_15_STATE = {
            value: msg_create([]),
            receiveBusName: "empty",
            sendBusName: "empty",
            messageReceiver: n_control_defaultMessageHandler,
            messageSender: n_control_defaultMessageHandler,
        }
    
        commons_waitEngineConfigure(() => {
            n_48_15_STATE.messageReceiver = function (m) {
                n_bang_receiveMessage(n_48_15_STATE, m)
            }
            n_48_15_STATE.messageSender = n_48_33_RCVS_0
            n_control_setReceiveBusName(n_48_15_STATE, "empty")
        })

        
    


        const n_48_24_STATE = {
            maxValue: 6
        }
    

        const n_48_25_STATE = {
            floatFilter: 0,
            stringFilter: "0",
            filterType: MSG_FLOAT_TOKEN,
        }
    

        const n_48_21_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_48_21_STATE.outTemplates[0] = []
            
                n_48_21_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_48_21_STATE.outMessages[0] = msg_create(n_48_21_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_48_21_STATE.outMessages[0], 0, 1)
            
        
        
        n_48_21_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_48_21_STATE.outMessages[0]
                }
,
        ]
    


            const m_n_48_31_0_sig_STATE = {
                currentValue: 0
            }
        

        const n_48_22_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_48_22_STATE.outTemplates[0] = []
            
                n_48_22_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_48_22_STATE.outMessages[0] = msg_create(n_48_22_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_48_22_STATE.outMessages[0], 0, 0.75)
            
        
        
        n_48_22_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_48_22_STATE.outMessages[0]
                }
,
        ]
    

        const n_48_27_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_48_27_STATE.outTemplates[0] = []
            
                n_48_27_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_48_27_STATE.outMessages[0] = msg_create(n_48_27_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_48_27_STATE.outMessages[0], 0, 0.125)
            
        
        
        n_48_27_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_48_27_STATE.outMessages[0]
                }
,
        ]
    

        const n_48_20_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_48_20_STATE.outTemplates[0] = []
            
                n_48_20_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_48_20_STATE.outMessages[0] = msg_create(n_48_20_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_48_20_STATE.outMessages[0], 0, 0.075)
            
        
        
        n_48_20_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_48_20_STATE.outMessages[0]
                }
,
        ]
    

        const n_48_23_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_48_23_STATE.outTemplates[0] = []
            
                n_48_23_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_48_23_STATE.outMessages[0] = msg_create(n_48_23_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_48_23_STATE.outMessages[0], 0, 0.5)
            
        
        
        n_48_23_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_48_23_STATE.outMessages[0]
                }
,
        ]
    

        const n_48_26_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_48_26_STATE.outTemplates[0] = []
            
                n_48_26_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_48_26_STATE.outMessages[0] = msg_create(n_48_26_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_48_26_STATE.outMessages[0], 0, 0.025)
            
        
        
        n_48_26_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_48_26_STATE.outMessages[0]
                }
,
        ]
    

        const n_48_32_STATE = {
            maxValue: 3
        }
    

        const n_48_28_STATE = {
            floatFilter: 0,
            stringFilter: "0",
            filterType: MSG_FLOAT_TOKEN,
        }
    

        const n_48_29_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_48_29_STATE.outTemplates[0] = []
            
                n_48_29_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_48_29_STATE.outMessages[0] = msg_create(n_48_29_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_48_29_STATE.outMessages[0], 0, -1)
            
        
        
        n_48_29_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_48_29_STATE.outMessages[0]
                }
,
        ]
    


            const m_n_48_31_1_sig_STATE = {
                currentValue: 0
            }
        

        const n_48_30_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_48_30_STATE.outTemplates[0] = []
            
                n_48_30_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_48_30_STATE.outMessages[0] = msg_create(n_48_30_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_48_30_STATE.outMessages[0], 0, 1)
            
        
        
        n_48_30_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_48_30_STATE.outMessages[0]
                }
,
        ]
    

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("startBang", n_48_18_SNDS_0)
            })
        

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("grainSizeSeq_4", n_48_15_RCVS_0)
            })
        

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("modPosSeq_4", n_48_12_RCVS_0)
            })
        

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("pitchSeq_4", n_48_5_RCVS_0)
            })
        

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("fwdAmtSeq_4", n_48_0_RCVS_0)
            })
        

            const n_119_7_STATE = {
                value: 0,
            }
            n_float_int_setValueInt(n_119_7_STATE, 0)
        

        const n_119_2_STATE = {
            isClosed: true
        }
    


        const n_119_1_STATE = {
            currentValue: 0
        }
    

            const n_119_8_STATE = {
                currentValue: 0
            }
        


        const n_119_10_STATE = {
            isClosed: true
        }
    

            const n_119_13_STATE = {
                currentValue: 0
            }
        

        const n_119_9_STATE = {
            floatFilter: 1,
            stringFilter: "1",
            filterType: MSG_FLOAT_TOKEN,
        }
    



        const n_119_14_STATE = {
            delay: 0,
            sampleRatio: 1,
            scheduledBang: SKED_ID_NULL,
        }

        commons_waitEngineConfigure(() => {
            n_119_14_STATE.sampleRatio = computeUnitInSamples(SAMPLE_RATE, 1, "msec")
            n_delay_setDelay(n_119_14_STATE, 1200)
        })
    

        const n_119_6_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_119_6_STATE.outTemplates[0] = []
            
                n_119_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_119_6_STATE.outMessages[0] = msg_create(n_119_6_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_119_6_STATE.outMessages[0], 0, 1)
            
        
        
        n_119_6_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_119_6_STATE.outMessages[0]
                }
,
        ]
    

        const n_119_4_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_119_4_STATE.outTemplates[0] = []
            
                n_119_4_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_119_4_STATE.outMessages[0] = msg_create(n_119_4_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_119_4_STATE.outMessages[0], 0, 0)
            
        
        
        n_119_4_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_119_4_STATE.outMessages[0]
                }
,
        ]
    


        const n_120_2_STATE = {
            delay: 0,
            sampleRatio: 1,
            scheduledBang: SKED_ID_NULL,
        }

        commons_waitEngineConfigure(() => {
            n_120_2_STATE.sampleRatio = computeUnitInSamples(SAMPLE_RATE, 1, "msec")
            n_delay_setDelay(n_120_2_STATE, 1000)
        })
    

        const n_120_5_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_120_5_STATE.outTemplates[0] = []
            
                n_120_5_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_120_5_STATE.outMessages[0] = msg_create(n_120_5_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_120_5_STATE.outMessages[0], 0, 0)
            
        
        
        n_120_5_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_120_5_STATE.outMessages[0]
                }
,
        ]
    

            const n_120_1_STATE = {
                value: 0,
            }
            n_float_int_setValueInt(n_120_1_STATE, 0)
        

        const n_120_6_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_120_6_STATE.outTemplates[0] = []
            
                n_120_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_120_6_STATE.outMessages[0] = msg_create(n_120_6_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_120_6_STATE.outMessages[0], 0, 1)
            
        
        
        n_120_6_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_120_6_STATE.outMessages[0]
                }
,
        ]
    

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("genMetro", n_119_2_RCVS_0)
            })
        
commons_waitFrame(0, () => n_119_6_RCVS_0(msg_bang()))

            const n_121_7_STATE = {
                value: 0,
            }
            n_float_int_setValueInt(n_121_7_STATE, 0)
        

        const n_121_2_STATE = {
            isClosed: true
        }
    


        const n_121_1_STATE = {
            currentValue: 0
        }
    

            const n_121_8_STATE = {
                currentValue: 0
            }
        


        const n_121_10_STATE = {
            isClosed: true
        }
    

            const n_121_13_STATE = {
                currentValue: 0
            }
        

        const n_121_9_STATE = {
            floatFilter: 1,
            stringFilter: "1",
            filterType: MSG_FLOAT_TOKEN,
        }
    



        const n_121_14_STATE = {
            delay: 0,
            sampleRatio: 1,
            scheduledBang: SKED_ID_NULL,
        }

        commons_waitEngineConfigure(() => {
            n_121_14_STATE.sampleRatio = computeUnitInSamples(SAMPLE_RATE, 1, "msec")
            n_delay_setDelay(n_121_14_STATE, 1200)
        })
    

        const n_121_6_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_121_6_STATE.outTemplates[0] = []
            
                n_121_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_121_6_STATE.outMessages[0] = msg_create(n_121_6_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_121_6_STATE.outMessages[0], 0, 1)
            
        
        
        n_121_6_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_121_6_STATE.outMessages[0]
                }
,
        ]
    

        const n_121_4_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_121_4_STATE.outTemplates[0] = []
            
                n_121_4_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_121_4_STATE.outMessages[0] = msg_create(n_121_4_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_121_4_STATE.outMessages[0], 0, 0)
            
        
        
        n_121_4_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_121_4_STATE.outMessages[0]
                }
,
        ]
    


        const n_122_2_STATE = {
            delay: 0,
            sampleRatio: 1,
            scheduledBang: SKED_ID_NULL,
        }

        commons_waitEngineConfigure(() => {
            n_122_2_STATE.sampleRatio = computeUnitInSamples(SAMPLE_RATE, 1, "msec")
            n_delay_setDelay(n_122_2_STATE, 1000)
        })
    

        const n_122_5_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_122_5_STATE.outTemplates[0] = []
            
                n_122_5_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_122_5_STATE.outMessages[0] = msg_create(n_122_5_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_122_5_STATE.outMessages[0], 0, 0)
            
        
        
        n_122_5_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_122_5_STATE.outMessages[0]
                }
,
        ]
    

            const n_122_1_STATE = {
                value: 0,
            }
            n_float_int_setValueInt(n_122_1_STATE, 0)
        

        const n_122_6_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_122_6_STATE.outTemplates[0] = []
            
                n_122_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_122_6_STATE.outMessages[0] = msg_create(n_122_6_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_122_6_STATE.outMessages[0], 0, 1)
            
        
        
        n_122_6_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_122_6_STATE.outMessages[0]
                }
,
        ]
    

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("genMetro", n_121_2_RCVS_0)
            })
        
commons_waitFrame(0, () => n_121_6_RCVS_0(msg_bang()))

            const n_123_7_STATE = {
                value: 0,
            }
            n_float_int_setValueInt(n_123_7_STATE, 0)
        

        const n_123_2_STATE = {
            isClosed: true
        }
    


        const n_123_1_STATE = {
            currentValue: 0
        }
    

            const n_123_8_STATE = {
                currentValue: 0
            }
        


        const n_123_10_STATE = {
            isClosed: true
        }
    

            const n_123_13_STATE = {
                currentValue: 0
            }
        

        const n_123_9_STATE = {
            floatFilter: 1,
            stringFilter: "1",
            filterType: MSG_FLOAT_TOKEN,
        }
    



        const n_123_14_STATE = {
            delay: 0,
            sampleRatio: 1,
            scheduledBang: SKED_ID_NULL,
        }

        commons_waitEngineConfigure(() => {
            n_123_14_STATE.sampleRatio = computeUnitInSamples(SAMPLE_RATE, 1, "msec")
            n_delay_setDelay(n_123_14_STATE, 1200)
        })
    

        const n_123_6_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_123_6_STATE.outTemplates[0] = []
            
                n_123_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_123_6_STATE.outMessages[0] = msg_create(n_123_6_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_123_6_STATE.outMessages[0], 0, 1)
            
        
        
        n_123_6_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_123_6_STATE.outMessages[0]
                }
,
        ]
    

        const n_123_4_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_123_4_STATE.outTemplates[0] = []
            
                n_123_4_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_123_4_STATE.outMessages[0] = msg_create(n_123_4_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_123_4_STATE.outMessages[0], 0, 0)
            
        
        
        n_123_4_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_123_4_STATE.outMessages[0]
                }
,
        ]
    


        const n_124_2_STATE = {
            delay: 0,
            sampleRatio: 1,
            scheduledBang: SKED_ID_NULL,
        }

        commons_waitEngineConfigure(() => {
            n_124_2_STATE.sampleRatio = computeUnitInSamples(SAMPLE_RATE, 1, "msec")
            n_delay_setDelay(n_124_2_STATE, 1000)
        })
    

        const n_124_5_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_124_5_STATE.outTemplates[0] = []
            
                n_124_5_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_124_5_STATE.outMessages[0] = msg_create(n_124_5_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_124_5_STATE.outMessages[0], 0, 0)
            
        
        
        n_124_5_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_124_5_STATE.outMessages[0]
                }
,
        ]
    

            const n_124_1_STATE = {
                value: 0,
            }
            n_float_int_setValueInt(n_124_1_STATE, 0)
        

        const n_124_6_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_124_6_STATE.outTemplates[0] = []
            
                n_124_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_124_6_STATE.outMessages[0] = msg_create(n_124_6_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_124_6_STATE.outMessages[0], 0, 1)
            
        
        
        n_124_6_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_124_6_STATE.outMessages[0]
                }
,
        ]
    

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("genMetro", n_123_2_RCVS_0)
            })
        
commons_waitFrame(0, () => n_123_6_RCVS_0(msg_bang()))

            const n_125_7_STATE = {
                value: 0,
            }
            n_float_int_setValueInt(n_125_7_STATE, 0)
        

        const n_125_2_STATE = {
            isClosed: true
        }
    


        const n_125_1_STATE = {
            currentValue: 0
        }
    

            const n_125_8_STATE = {
                currentValue: 0
            }
        


        const n_125_10_STATE = {
            isClosed: true
        }
    

            const n_125_13_STATE = {
                currentValue: 0
            }
        

        const n_125_9_STATE = {
            floatFilter: 1,
            stringFilter: "1",
            filterType: MSG_FLOAT_TOKEN,
        }
    



        const n_125_14_STATE = {
            delay: 0,
            sampleRatio: 1,
            scheduledBang: SKED_ID_NULL,
        }

        commons_waitEngineConfigure(() => {
            n_125_14_STATE.sampleRatio = computeUnitInSamples(SAMPLE_RATE, 1, "msec")
            n_delay_setDelay(n_125_14_STATE, 1200)
        })
    

        const n_125_6_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_125_6_STATE.outTemplates[0] = []
            
                n_125_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_125_6_STATE.outMessages[0] = msg_create(n_125_6_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_125_6_STATE.outMessages[0], 0, 1)
            
        
        
        n_125_6_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_125_6_STATE.outMessages[0]
                }
,
        ]
    

        const n_125_4_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_125_4_STATE.outTemplates[0] = []
            
                n_125_4_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_125_4_STATE.outMessages[0] = msg_create(n_125_4_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_125_4_STATE.outMessages[0], 0, 0)
            
        
        
        n_125_4_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_125_4_STATE.outMessages[0]
                }
,
        ]
    


        const n_126_2_STATE = {
            delay: 0,
            sampleRatio: 1,
            scheduledBang: SKED_ID_NULL,
        }

        commons_waitEngineConfigure(() => {
            n_126_2_STATE.sampleRatio = computeUnitInSamples(SAMPLE_RATE, 1, "msec")
            n_delay_setDelay(n_126_2_STATE, 1000)
        })
    

        const n_126_5_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_126_5_STATE.outTemplates[0] = []
            
                n_126_5_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_126_5_STATE.outMessages[0] = msg_create(n_126_5_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_126_5_STATE.outMessages[0], 0, 0)
            
        
        
        n_126_5_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_126_5_STATE.outMessages[0]
                }
,
        ]
    

            const n_126_1_STATE = {
                value: 0,
            }
            n_float_int_setValueInt(n_126_1_STATE, 0)
        

        const n_126_6_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_126_6_STATE.outTemplates[0] = []
            
                n_126_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_126_6_STATE.outMessages[0] = msg_create(n_126_6_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_126_6_STATE.outMessages[0], 0, 1)
            
        
        
        n_126_6_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_126_6_STATE.outMessages[0]
                }
,
        ]
    

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("genMetro", n_125_2_RCVS_0)
            })
        
commons_waitFrame(0, () => n_125_6_RCVS_0(msg_bang()))

            const n_127_7_STATE = {
                value: 0,
            }
            n_float_int_setValueInt(n_127_7_STATE, 0)
        

        const n_127_2_STATE = {
            isClosed: true
        }
    


        const n_127_1_STATE = {
            currentValue: 0
        }
    

            const n_127_8_STATE = {
                currentValue: 0
            }
        


        const n_127_10_STATE = {
            isClosed: true
        }
    

            const n_127_13_STATE = {
                currentValue: 0
            }
        

        const n_127_9_STATE = {
            floatFilter: 1,
            stringFilter: "1",
            filterType: MSG_FLOAT_TOKEN,
        }
    



        const n_127_14_STATE = {
            delay: 0,
            sampleRatio: 1,
            scheduledBang: SKED_ID_NULL,
        }

        commons_waitEngineConfigure(() => {
            n_127_14_STATE.sampleRatio = computeUnitInSamples(SAMPLE_RATE, 1, "msec")
            n_delay_setDelay(n_127_14_STATE, 1200)
        })
    

        const n_127_6_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_127_6_STATE.outTemplates[0] = []
            
                n_127_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_127_6_STATE.outMessages[0] = msg_create(n_127_6_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_127_6_STATE.outMessages[0], 0, 1)
            
        
        
        n_127_6_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_127_6_STATE.outMessages[0]
                }
,
        ]
    

        const n_127_4_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_127_4_STATE.outTemplates[0] = []
            
                n_127_4_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_127_4_STATE.outMessages[0] = msg_create(n_127_4_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_127_4_STATE.outMessages[0], 0, 0)
            
        
        
        n_127_4_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_127_4_STATE.outMessages[0]
                }
,
        ]
    


        const n_128_2_STATE = {
            delay: 0,
            sampleRatio: 1,
            scheduledBang: SKED_ID_NULL,
        }

        commons_waitEngineConfigure(() => {
            n_128_2_STATE.sampleRatio = computeUnitInSamples(SAMPLE_RATE, 1, "msec")
            n_delay_setDelay(n_128_2_STATE, 1000)
        })
    

        const n_128_5_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_128_5_STATE.outTemplates[0] = []
            
                n_128_5_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_128_5_STATE.outMessages[0] = msg_create(n_128_5_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_128_5_STATE.outMessages[0], 0, 0)
            
        
        
        n_128_5_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_128_5_STATE.outMessages[0]
                }
,
        ]
    

            const n_128_1_STATE = {
                value: 0,
            }
            n_float_int_setValueInt(n_128_1_STATE, 0)
        

        const n_128_6_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_128_6_STATE.outTemplates[0] = []
            
                n_128_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_128_6_STATE.outMessages[0] = msg_create(n_128_6_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_128_6_STATE.outMessages[0], 0, 1)
            
        
        
        n_128_6_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_128_6_STATE.outMessages[0]
                }
,
        ]
    

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("genMetro", n_127_2_RCVS_0)
            })
        
commons_waitFrame(0, () => n_127_6_RCVS_0(msg_bang()))

            const n_129_7_STATE = {
                value: 0,
            }
            n_float_int_setValueInt(n_129_7_STATE, 0)
        

        const n_129_2_STATE = {
            isClosed: true
        }
    


        const n_129_1_STATE = {
            currentValue: 0
        }
    

            const n_129_8_STATE = {
                currentValue: 0
            }
        


        const n_129_10_STATE = {
            isClosed: true
        }
    

            const n_129_13_STATE = {
                currentValue: 0
            }
        

        const n_129_9_STATE = {
            floatFilter: 1,
            stringFilter: "1",
            filterType: MSG_FLOAT_TOKEN,
        }
    



        const n_129_14_STATE = {
            delay: 0,
            sampleRatio: 1,
            scheduledBang: SKED_ID_NULL,
        }

        commons_waitEngineConfigure(() => {
            n_129_14_STATE.sampleRatio = computeUnitInSamples(SAMPLE_RATE, 1, "msec")
            n_delay_setDelay(n_129_14_STATE, 1200)
        })
    

        const n_129_6_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_129_6_STATE.outTemplates[0] = []
            
                n_129_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_129_6_STATE.outMessages[0] = msg_create(n_129_6_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_129_6_STATE.outMessages[0], 0, 1)
            
        
        
        n_129_6_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_129_6_STATE.outMessages[0]
                }
,
        ]
    

        const n_129_4_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_129_4_STATE.outTemplates[0] = []
            
                n_129_4_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_129_4_STATE.outMessages[0] = msg_create(n_129_4_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_129_4_STATE.outMessages[0], 0, 0)
            
        
        
        n_129_4_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_129_4_STATE.outMessages[0]
                }
,
        ]
    


        const n_130_2_STATE = {
            delay: 0,
            sampleRatio: 1,
            scheduledBang: SKED_ID_NULL,
        }

        commons_waitEngineConfigure(() => {
            n_130_2_STATE.sampleRatio = computeUnitInSamples(SAMPLE_RATE, 1, "msec")
            n_delay_setDelay(n_130_2_STATE, 1000)
        })
    

        const n_130_5_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_130_5_STATE.outTemplates[0] = []
            
                n_130_5_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_130_5_STATE.outMessages[0] = msg_create(n_130_5_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_130_5_STATE.outMessages[0], 0, 0)
            
        
        
        n_130_5_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_130_5_STATE.outMessages[0]
                }
,
        ]
    

            const n_130_1_STATE = {
                value: 0,
            }
            n_float_int_setValueInt(n_130_1_STATE, 0)
        

        const n_130_6_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_130_6_STATE.outTemplates[0] = []
            
                n_130_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_130_6_STATE.outMessages[0] = msg_create(n_130_6_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_130_6_STATE.outMessages[0], 0, 1)
            
        
        
        n_130_6_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_130_6_STATE.outMessages[0]
                }
,
        ]
    

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("genMetro", n_129_2_RCVS_0)
            })
        
commons_waitFrame(0, () => n_129_6_RCVS_0(msg_bang()))

                const n_50_1_STATE = {
                    minValue: 0,
                    maxValue: 1,
                    valueFloat: 1,
                    value: msg_create([]),
                    receiveBusName: "empty",
                    sendBusName: "empty",
                    messageReceiver: n_control_defaultMessageHandler,
                    messageSender: n_control_defaultMessageHandler,
                }
    
                commons_waitEngineConfigure(() => {
                    n_50_1_STATE.messageReceiver = function (m) {
                        n_tgl_receiveMessage(n_50_1_STATE, m)
                    }
                    n_50_1_STATE.messageSender = n_50_2_RCVS_0
                    n_control_setReceiveBusName(n_50_1_STATE, "empty")
                })
    
                commons_waitFrame(0, () => n_50_2_RCVS_0(msg_floats([n_50_1_STATE.valueFloat])))
            

        const n_50_2_STATE = {
            rate: 0,
            sampleRatio: 1,
            skedId: SKED_ID_NULL,
            realNextTick: -1,
            snd0: m_n_50_3_0__routemsg_RCVS_0,
            tickCallback: function () {},
        }

        commons_waitEngineConfigure(() => {
            n_50_2_STATE.sampleRatio = computeUnitInSamples(SAMPLE_RATE, 1, "msec")
            n_metro_setRate(n_50_2_STATE, 100)
            n_50_2_STATE.tickCallback = function () {
                n_metro_scheduleNextTick(n_50_2_STATE)
            }
        })
    


        const n_50_3_STATE = {
            currentValue: 0
        }
    

                const n_52_1_STATE = {
                    minValue: 0,
                    maxValue: 1,
                    valueFloat: 1,
                    value: msg_create([]),
                    receiveBusName: "empty",
                    sendBusName: "empty",
                    messageReceiver: n_control_defaultMessageHandler,
                    messageSender: n_control_defaultMessageHandler,
                }
    
                commons_waitEngineConfigure(() => {
                    n_52_1_STATE.messageReceiver = function (m) {
                        n_tgl_receiveMessage(n_52_1_STATE, m)
                    }
                    n_52_1_STATE.messageSender = n_52_2_RCVS_0
                    n_control_setReceiveBusName(n_52_1_STATE, "empty")
                })
    
                commons_waitFrame(0, () => n_52_2_RCVS_0(msg_floats([n_52_1_STATE.valueFloat])))
            

        const n_52_2_STATE = {
            rate: 0,
            sampleRatio: 1,
            skedId: SKED_ID_NULL,
            realNextTick: -1,
            snd0: m_n_52_3_0__routemsg_RCVS_0,
            tickCallback: function () {},
        }

        commons_waitEngineConfigure(() => {
            n_52_2_STATE.sampleRatio = computeUnitInSamples(SAMPLE_RATE, 1, "msec")
            n_metro_setRate(n_52_2_STATE, 100)
            n_52_2_STATE.tickCallback = function () {
                n_metro_scheduleNextTick(n_52_2_STATE)
            }
        })
    


        const n_52_3_STATE = {
            currentValue: 0
        }
    

                const n_54_1_STATE = {
                    minValue: 0,
                    maxValue: 1,
                    valueFloat: 1,
                    value: msg_create([]),
                    receiveBusName: "empty",
                    sendBusName: "empty",
                    messageReceiver: n_control_defaultMessageHandler,
                    messageSender: n_control_defaultMessageHandler,
                }
    
                commons_waitEngineConfigure(() => {
                    n_54_1_STATE.messageReceiver = function (m) {
                        n_tgl_receiveMessage(n_54_1_STATE, m)
                    }
                    n_54_1_STATE.messageSender = n_54_2_RCVS_0
                    n_control_setReceiveBusName(n_54_1_STATE, "empty")
                })
    
                commons_waitFrame(0, () => n_54_2_RCVS_0(msg_floats([n_54_1_STATE.valueFloat])))
            

        const n_54_2_STATE = {
            rate: 0,
            sampleRatio: 1,
            skedId: SKED_ID_NULL,
            realNextTick: -1,
            snd0: m_n_54_3_0__routemsg_RCVS_0,
            tickCallback: function () {},
        }

        commons_waitEngineConfigure(() => {
            n_54_2_STATE.sampleRatio = computeUnitInSamples(SAMPLE_RATE, 1, "msec")
            n_metro_setRate(n_54_2_STATE, 100)
            n_54_2_STATE.tickCallback = function () {
                n_metro_scheduleNextTick(n_54_2_STATE)
            }
        })
    


        const n_54_3_STATE = {
            currentValue: 0
        }
    

                const n_56_1_STATE = {
                    minValue: 0,
                    maxValue: 1,
                    valueFloat: 1,
                    value: msg_create([]),
                    receiveBusName: "empty",
                    sendBusName: "empty",
                    messageReceiver: n_control_defaultMessageHandler,
                    messageSender: n_control_defaultMessageHandler,
                }
    
                commons_waitEngineConfigure(() => {
                    n_56_1_STATE.messageReceiver = function (m) {
                        n_tgl_receiveMessage(n_56_1_STATE, m)
                    }
                    n_56_1_STATE.messageSender = n_56_2_RCVS_0
                    n_control_setReceiveBusName(n_56_1_STATE, "empty")
                })
    
                commons_waitFrame(0, () => n_56_2_RCVS_0(msg_floats([n_56_1_STATE.valueFloat])))
            

        const n_56_2_STATE = {
            rate: 0,
            sampleRatio: 1,
            skedId: SKED_ID_NULL,
            realNextTick: -1,
            snd0: m_n_56_3_0__routemsg_RCVS_0,
            tickCallback: function () {},
        }

        commons_waitEngineConfigure(() => {
            n_56_2_STATE.sampleRatio = computeUnitInSamples(SAMPLE_RATE, 1, "msec")
            n_metro_setRate(n_56_2_STATE, 100)
            n_56_2_STATE.tickCallback = function () {
                n_metro_scheduleNextTick(n_56_2_STATE)
            }
        })
    


        const n_56_3_STATE = {
            currentValue: 0
        }
    

        const n_57_3_STATE = {
            value: msg_create([]),
            receiveBusName: "empty",
            sendBusName: "empty",
            messageReceiver: n_control_defaultMessageHandler,
            messageSender: n_control_defaultMessageHandler,
        }
    
        commons_waitEngineConfigure(() => {
            n_57_3_STATE.messageReceiver = function (m) {
                n_bang_receiveMessage(n_57_3_STATE, m)
            }
            n_57_3_STATE.messageSender = n_57_3_SNDS_0
            n_control_setReceiveBusName(n_57_3_STATE, "empty")
        })

        
    

        const n_57_9_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_57_9_STATE.outTemplates[0] = []
            
                n_57_9_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_57_9_STATE.outMessages[0] = msg_create(n_57_9_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_57_9_STATE.outMessages[0], 0, 10000)
            
        
        
        n_57_9_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_57_9_STATE.outMessages[0]
                }
,
        ]
    

        const n_57_4_STATE = {
            floatValues: [0,0],
            stringValues: ["",""]
        }
    

        const n_61_3_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
        
        n_61_3_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
            
            
            let stringMem = []
            n_61_3_STATE.outTemplates[0] = []
            
                n_61_3_STATE.outTemplates[0].push(msg_getTokenType(inMessage, 1))
                if (msg_isStringToken(inMessage, 1)) {
                    stringMem[0] = msg_readStringToken(inMessage, 1)
                    n_61_3_STATE.outTemplates[0].push(stringMem[0].length)
                }
            
            n_61_3_STATE.outMessages[0] = msg_create(n_61_3_STATE.outTemplates[0])
            
                if (msg_isFloatToken(inMessage, 1)) {
                    msg_writeFloatToken(n_61_3_STATE.outMessages[0], 0, msg_readFloatToken(inMessage, 1))
                } else if (msg_isStringToken(inMessage, 1)) {
                    msg_writeStringToken(n_61_3_STATE.outMessages[0], 0, stringMem[0])
                }
            
        
                    return n_61_3_STATE.outMessages[0]
                }
,
function (inMessage) {
                    
            
            
            let stringMem = []
            n_61_3_STATE.outTemplates[1] = []
            
                n_61_3_STATE.outTemplates[1].push(MSG_FLOAT_TOKEN)
            

                n_61_3_STATE.outTemplates[1].push(msg_getTokenType(inMessage, 0))
                if (msg_isStringToken(inMessage, 0)) {
                    stringMem[0] = msg_readStringToken(inMessage, 0)
                    n_61_3_STATE.outTemplates[1].push(stringMem[0].length)
                }
            
            n_61_3_STATE.outMessages[1] = msg_create(n_61_3_STATE.outTemplates[1])
            
                msg_writeFloatToken(n_61_3_STATE.outMessages[1], 0, 0)
            

                if (msg_isFloatToken(inMessage, 0)) {
                    msg_writeFloatToken(n_61_3_STATE.outMessages[1], 1, msg_readFloatToken(inMessage, 0))
                } else if (msg_isStringToken(inMessage, 0)) {
                    msg_writeStringToken(n_61_3_STATE.outMessages[1], 1, stringMem[0])
                }
            
        
                    return n_61_3_STATE.outMessages[1]
                }
,
        ]
    

        const n_61_0_STATE = {
            currentLine: n_line_t_defaultLine,
            currentValue: 0,
            nextDurationSamp: 0,
        }
    

        const n_58_6_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_58_6_STATE.outTemplates[0] = []
            
                n_58_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            

                n_58_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_58_6_STATE.outMessages[0] = msg_create(n_58_6_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_58_6_STATE.outMessages[0], 0, 0.9)
            

                msg_writeFloatToken(n_58_6_STATE.outMessages[0], 1, 50)
            
        
        
        n_58_6_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_58_6_STATE.outMessages[0]
                }
,
        ]
    

        const n_58_0_STATE = {
            currentLine: n_line_t_defaultLine,
            currentValue: 0,
            nextDurationSamp: 0,
        }
    

        const n_58_4_STATE = {
            value: msg_create([]),
            receiveBusName: "empty",
            sendBusName: "empty",
            messageReceiver: n_control_defaultMessageHandler,
            messageSender: n_control_defaultMessageHandler,
        }
    
        commons_waitEngineConfigure(() => {
            n_58_4_STATE.messageReceiver = function (m) {
                n_bang_receiveMessage(n_58_4_STATE, m)
            }
            n_58_4_STATE.messageSender = n_58_5_RCVS_0
            n_control_setReceiveBusName(n_58_4_STATE, "empty")
        })

        
    

        const n_58_5_STATE = {
            delay: 0,
            sampleRatio: 1,
            scheduledBang: SKED_ID_NULL,
        }

        commons_waitEngineConfigure(() => {
            n_58_5_STATE.sampleRatio = computeUnitInSamples(SAMPLE_RATE, 1, "msec")
            n_delay_setDelay(n_58_5_STATE, 100)
        })
    

        const n_58_7_STATE = {
            maxValue: 15000
        }
    

        const n_58_8_STATE = {
                leftOp: 0,
                rightOp: 0,
            }
            n_add_setLeft(n_58_8_STATE, 0)
            n_add_setRight(n_58_8_STATE, 5000)
        

            const n_58_10_STATE = {
                value: 0,
            }
            n_float_int_setValueFloat(n_58_10_STATE, 0)
        

        const n_58_9_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
        
        n_58_9_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
            
            
            let stringMem = []
            n_58_9_STATE.outTemplates[0] = []
            
                n_58_9_STATE.outTemplates[0].push(msg_getTokenType(inMessage, 0))
                if (msg_isStringToken(inMessage, 0)) {
                    stringMem[0] = msg_readStringToken(inMessage, 0)
                    n_58_9_STATE.outTemplates[0].push(stringMem[0].length)
                }
            
            n_58_9_STATE.outMessages[0] = msg_create(n_58_9_STATE.outTemplates[0])
            
                if (msg_isFloatToken(inMessage, 0)) {
                    msg_writeFloatToken(n_58_9_STATE.outMessages[0], 0, msg_readFloatToken(inMessage, 0))
                } else if (msg_isStringToken(inMessage, 0)) {
                    msg_writeStringToken(n_58_9_STATE.outMessages[0], 0, stringMem[0])
                }
            
        
                    return n_58_9_STATE.outMessages[0]
                }
,
        ]
    

        const n_58_3_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
        
        n_58_3_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
            
            
            let stringMem = []
            n_58_3_STATE.outTemplates[0] = []
            
                n_58_3_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            

                n_58_3_STATE.outTemplates[0].push(msg_getTokenType(inMessage, 0))
                if (msg_isStringToken(inMessage, 0)) {
                    stringMem[0] = msg_readStringToken(inMessage, 0)
                    n_58_3_STATE.outTemplates[0].push(stringMem[0].length)
                }
            
            n_58_3_STATE.outMessages[0] = msg_create(n_58_3_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_58_3_STATE.outMessages[0], 0, 0)
            

                if (msg_isFloatToken(inMessage, 0)) {
                    msg_writeFloatToken(n_58_3_STATE.outMessages[0], 1, msg_readFloatToken(inMessage, 0))
                } else if (msg_isStringToken(inMessage, 0)) {
                    msg_writeStringToken(n_58_3_STATE.outMessages[0], 1, stringMem[0])
                }
            
        
                    return n_58_3_STATE.outMessages[0]
                }
,
        ]
    

        const n_57_7_STATE = {
            value: msg_create([]),
            receiveBusName: "empty",
            sendBusName: "empty",
            messageReceiver: n_control_defaultMessageHandler,
            messageSender: n_control_defaultMessageHandler,
        }
    
        commons_waitEngineConfigure(() => {
            n_57_7_STATE.messageReceiver = function (m) {
                n_bang_receiveMessage(n_57_7_STATE, m)
            }
            n_57_7_STATE.messageSender = n_57_7_SNDS_0
            n_control_setReceiveBusName(n_57_7_STATE, "empty")
        })

        
    

        const n_57_22_STATE = {
            maxValue: 3
        }
    

        const n_57_6_STATE = {
            floatFilter: 0,
            stringFilter: "0",
            filterType: MSG_FLOAT_TOKEN,
        }
    

        const n_57_26_STATE = {
            delay: 0,
            sampleRatio: 1,
            scheduledBang: SKED_ID_NULL,
        }

        commons_waitEngineConfigure(() => {
            n_57_26_STATE.sampleRatio = computeUnitInSamples(SAMPLE_RATE, 1, "msec")
            n_delay_setDelay(n_57_26_STATE, 1000)
        })
    

        const n_57_8_STATE = {
            value: msg_create([]),
            receiveBusName: "empty",
            sendBusName: "empty",
            messageReceiver: n_control_defaultMessageHandler,
            messageSender: n_control_defaultMessageHandler,
        }
    
        commons_waitEngineConfigure(() => {
            n_57_8_STATE.messageReceiver = function (m) {
                n_bang_receiveMessage(n_57_8_STATE, m)
            }
            n_57_8_STATE.messageSender = n_57_16_RCVS_0
            n_control_setReceiveBusName(n_57_8_STATE, "empty")
        })

        
    


            const n_57_35_STATE = {
                busName: "wobbleBang",
            }
        

        const n_57_12_STATE = {
            maxValue: 7
        }
    


        const n_57_13_STATE = {
                leftOp: 0,
                rightOp: 0,
            }
            n_add_setLeft(n_57_13_STATE, 0)
            n_add_setRight(n_57_13_STATE, 3)
        

        const n_57_14_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
        
        n_57_14_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
            
            
            let stringMem = []
            n_57_14_STATE.outTemplates[0] = []
            
                n_57_14_STATE.outTemplates[0].push(msg_getTokenType(inMessage, 0))
                if (msg_isStringToken(inMessage, 0)) {
                    stringMem[0] = msg_readStringToken(inMessage, 0)
                    n_57_14_STATE.outTemplates[0].push(stringMem[0].length)
                }
            

                n_57_14_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_57_14_STATE.outMessages[0] = msg_create(n_57_14_STATE.outTemplates[0])
            
                if (msg_isFloatToken(inMessage, 0)) {
                    msg_writeFloatToken(n_57_14_STATE.outMessages[0], 0, msg_readFloatToken(inMessage, 0))
                } else if (msg_isStringToken(inMessage, 0)) {
                    msg_writeStringToken(n_57_14_STATE.outMessages[0], 0, stringMem[0])
                }
            

                msg_writeFloatToken(n_57_14_STATE.outMessages[0], 1, 10)
            
        
                    return n_57_14_STATE.outMessages[0]
                }
,
        ]
    

        const n_57_15_STATE = {
            currentLine: n_line_t_defaultLine,
            currentValue: 0,
            nextDurationSamp: 0,
        }
    

        const n_60_1_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_60_1_STATE.outTemplates[0] = []
            
                n_60_1_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            

                n_60_1_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_60_1_STATE.outMessages[0] = msg_create(n_60_1_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_60_1_STATE.outMessages[0], 0, 1)
            

                msg_writeFloatToken(n_60_1_STATE.outMessages[0], 1, 10)
            
        
        
        n_60_1_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_60_1_STATE.outMessages[0]
                }
,
        ]
    

        const n_60_0_STATE = {
            currentLine: n_line_t_defaultLine,
            currentValue: 0,
            nextDurationSamp: 0,
        }
    

        const n_60_5_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_60_5_STATE.outTemplates[0] = []
            
                n_60_5_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            

                n_60_5_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_60_5_STATE.outMessages[0] = msg_create(n_60_5_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_60_5_STATE.outMessages[0], 0, 0)
            

                msg_writeFloatToken(n_60_5_STATE.outMessages[0], 1, 10)
            
        
        
        n_60_5_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_60_5_STATE.outMessages[0]
                }
,
        ]
    

            const n_57_34_STATE = {
                busName: "kickBang",
            }
        

        const n_57_25_STATE = {
            delay: 0,
            sampleRatio: 1,
            scheduledBang: SKED_ID_NULL,
        }

        commons_waitEngineConfigure(() => {
            n_57_25_STATE.sampleRatio = computeUnitInSamples(SAMPLE_RATE, 1, "msec")
            n_delay_setDelay(n_57_25_STATE, 2000)
        })
    
commons_waitFrame(0, () => n_57_29_RCVS_0(msg_bang()))

        const n_57_29_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_57_29_STATE.outTemplates[0] = []
            
                n_57_29_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_57_29_STATE.outMessages[0] = msg_create(n_57_29_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_57_29_STATE.outMessages[0], 0, 45)
            
        
        
        n_57_29_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_57_29_STATE.outMessages[0]
                }
,
        ]
    

            const n_57_2_STATE = {
                currentValue: 0
            }
        

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("bassTrig", n_57_30_SNDS_0)
            })
        

        const n_57_21_STATE = {
            maxValue: 5
        }
    


        const n_57_5_STATE = {
            floatFilter: 0,
            stringFilter: "0",
            filterType: MSG_FLOAT_TOKEN,
        }
    

            const n_57_38_STATE = {
                busName: "kickEnvBang",
            }
        

        const n_57_23_STATE = {
            maxValue: 3
        }
    

        const n_57_24_STATE = {
            floatFilter: 0,
            stringFilter: "0",
            filterType: MSG_FLOAT_TOKEN,
        }
    

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("kickBang", n_57_3_RCVS_0)
            })
        

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("wobbleBang", n_57_3_RCVS_0)
            })
        

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("kickEnvBang", n_57_39_SNDS_0)
            })
        

        const n_60_2_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_60_2_STATE.outTemplates[0] = []
            
                n_60_2_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            

                n_60_2_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_60_2_STATE.outMessages[0] = msg_create(n_60_2_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_60_2_STATE.outMessages[0], 0, 1)
            

                msg_writeFloatToken(n_60_2_STATE.outMessages[0], 1, 10)
            
        
        
        n_60_2_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_60_2_STATE.outMessages[0]
                }
,
        ]
    

        const n_60_3_STATE = {
            currentLine: n_line_t_defaultLine,
            currentValue: 0,
            nextDurationSamp: 0,
        }
    

        const n_60_4_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_60_4_STATE.outTemplates[0] = []
            
                n_60_4_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            

                n_60_4_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_60_4_STATE.outMessages[0] = msg_create(n_60_4_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_60_4_STATE.outMessages[0], 0, 0)
            

                msg_writeFloatToken(n_60_4_STATE.outMessages[0], 1, 10)
            
        
        
        n_60_4_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_60_4_STATE.outMessages[0]
                }
,
        ]
    

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("kickEnvBang", n_59_0_RCVS_0)
            })
        

        const n_59_0_STATE = {
            maxValue: 4
        }
    

        const n_59_1_STATE = {
            floatFilter: 0,
            stringFilter: "0",
            filterType: MSG_FLOAT_TOKEN,
        }
    

        const n_59_5_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_59_5_STATE.outTemplates[0] = []
            
                n_59_5_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_59_5_STATE.outMessages[0] = msg_create(n_59_5_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_59_5_STATE.outMessages[0], 0, 2.1)
            
        
        
        n_59_5_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_59_5_STATE.outMessages[0]
                }
,
        ]
    

        const n_59_4_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_59_4_STATE.outTemplates[0] = []
            
                n_59_4_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_59_4_STATE.outMessages[0] = msg_create(n_59_4_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_59_4_STATE.outMessages[0], 0, 1.5)
            
        
        
        n_59_4_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_59_4_STATE.outMessages[0]
                }
,
        ]
    

        const n_59_2_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_59_2_STATE.outTemplates[0] = []
            
                n_59_2_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_59_2_STATE.outMessages[0] = msg_create(n_59_2_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_59_2_STATE.outMessages[0], 0, 1.8)
            
        
        
        n_59_2_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_59_2_STATE.outMessages[0]
                }
,
        ]
    

        const n_59_3_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_59_3_STATE.outTemplates[0] = []
            
                n_59_3_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_59_3_STATE.outMessages[0] = msg_create(n_59_3_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_59_3_STATE.outMessages[0], 0, 2)
            
        
        
        n_59_3_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_59_3_STATE.outMessages[0]
                }
,
        ]
    
commons_waitFrame(0, () => n_62_25_RCVS_0(msg_bang()))

        const n_62_25_STATE = {
            value: msg_create([]),
            receiveBusName: "empty",
            sendBusName: "empty",
            messageReceiver: n_control_defaultMessageHandler,
            messageSender: n_control_defaultMessageHandler,
        }
    
        commons_waitEngineConfigure(() => {
            n_62_25_STATE.messageReceiver = function (m) {
                n_bang_receiveMessage(n_62_25_STATE, m)
            }
            n_62_25_STATE.messageSender = n_64_0_RCVS_0
            n_control_setReceiveBusName(n_62_25_STATE, "empty")
        })

        
    

        const n_64_0_STATE = {
            maxValue: 800
        }
    

        const n_64_1_STATE = {
                leftOp: 0,
                rightOp: 0,
            }
            n_add_setLeft(n_64_1_STATE, 0)
            n_add_setRight(n_64_1_STATE, 30)
        

            const n_65_5_STATE = {
                currentValue: 0
            }
        


        const n_65_9_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
        
        n_65_9_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
            
            
            let stringMem = []
            n_65_9_STATE.outTemplates[0] = []
            
                n_65_9_STATE.outTemplates[0].push(msg_getTokenType(inMessage, 0))
                if (msg_isStringToken(inMessage, 0)) {
                    stringMem[0] = msg_readStringToken(inMessage, 0)
                    n_65_9_STATE.outTemplates[0].push(stringMem[0].length)
                }
            

                n_65_9_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_65_9_STATE.outMessages[0] = msg_create(n_65_9_STATE.outTemplates[0])
            
                if (msg_isFloatToken(inMessage, 0)) {
                    msg_writeFloatToken(n_65_9_STATE.outMessages[0], 0, msg_readFloatToken(inMessage, 0))
                } else if (msg_isStringToken(inMessage, 0)) {
                    msg_writeStringToken(n_65_9_STATE.outMessages[0], 0, stringMem[0])
                }
            

                msg_writeFloatToken(n_65_9_STATE.outMessages[0], 1, 100)
            
        
                    return n_65_9_STATE.outMessages[0]
                }
,
        ]
    

        const n_65_10_STATE = {
            currentLine: {
                p0: {x: -1, y: 0},
                p1: {x: -1, y: 0},
                dx: 1,
                dy: 0,
            },
            currentValue: 0,
            nextSamp: -1,
            nextSampInt: -1,
            grainSamp: 0,
            nextDurationSamp: 0,
            skedId: SKED_ID_NULL,
            snd0: m_n_65_3_0__routemsg_RCVS_0,
            tickCallback: function () {},
        }

        commons_waitEngineConfigure(() => {
            n_line_setGrain(n_65_10_STATE, 20)
            n_65_10_STATE.tickCallback = function () {
                n_line_tick(n_65_10_STATE)
            }
        })
    


            const m_n_65_3_0_sig_STATE = {
                currentValue: 250
            }
        

        const n_65_8_STATE = {
                leftOp: 0,
                rightOp: 0,
            }
            n_add_setLeft(n_65_8_STATE, 0)
            n_add_setRight(n_65_8_STATE, 0)
        

        const n_65_11_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
        
        n_65_11_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
            
            
            let stringMem = []
            n_65_11_STATE.outTemplates[0] = []
            
                n_65_11_STATE.outTemplates[0].push(msg_getTokenType(inMessage, 0))
                if (msg_isStringToken(inMessage, 0)) {
                    stringMem[0] = msg_readStringToken(inMessage, 0)
                    n_65_11_STATE.outTemplates[0].push(stringMem[0].length)
                }
            

                n_65_11_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_65_11_STATE.outMessages[0] = msg_create(n_65_11_STATE.outTemplates[0])
            
                if (msg_isFloatToken(inMessage, 0)) {
                    msg_writeFloatToken(n_65_11_STATE.outMessages[0], 0, msg_readFloatToken(inMessage, 0))
                } else if (msg_isStringToken(inMessage, 0)) {
                    msg_writeStringToken(n_65_11_STATE.outMessages[0], 0, stringMem[0])
                }
            

                msg_writeFloatToken(n_65_11_STATE.outMessages[0], 1, 100)
            
        
                    return n_65_11_STATE.outMessages[0]
                }
,
        ]
    

        const n_65_12_STATE = {
            currentLine: {
                p0: {x: -1, y: 0},
                p1: {x: -1, y: 0},
                dx: 1,
                dy: 0,
            },
            currentValue: 0,
            nextSamp: -1,
            nextSampInt: -1,
            grainSamp: 0,
            nextDurationSamp: 0,
            skedId: SKED_ID_NULL,
            snd0: m_n_65_15_0__routemsg_RCVS_0,
            tickCallback: function () {},
        }

        commons_waitEngineConfigure(() => {
            n_line_setGrain(n_65_12_STATE, 20)
            n_65_12_STATE.tickCallback = function () {
                n_line_tick(n_65_12_STATE)
            }
        })
    


            const m_n_65_15_0_sig_STATE = {
                currentValue: 250
            }
        

        const n_65_6_STATE = {
            maxValue: 50
        }
    

        const n_65_7_STATE = {
                leftOp: 0,
                rightOp: 0,
            }
            n_sub_setLeft(n_65_7_STATE, 0)
            n_sub_setRight(n_65_7_STATE, 25)
        

        const n_62_31_STATE = {
            delay: 0,
            sampleRatio: 1,
            scheduledBang: SKED_ID_NULL,
        }

        commons_waitEngineConfigure(() => {
            n_62_31_STATE.sampleRatio = computeUnitInSamples(SAMPLE_RATE, 1, "msec")
            n_delay_setDelay(n_62_31_STATE, 6000)
        })
    

        const n_62_29_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_62_29_STATE.outTemplates[0] = []
            
                n_62_29_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            

                n_62_29_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_62_29_STATE.outMessages[0] = msg_create(n_62_29_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_62_29_STATE.outMessages[0], 0, 0)
            

                msg_writeFloatToken(n_62_29_STATE.outMessages[0], 1, 1000)
            
        
        
        n_62_29_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_62_29_STATE.outMessages[0]
                }
,
        ]
    

        const n_62_28_STATE = {
            currentLine: n_line_t_defaultLine,
            currentValue: 0,
            nextDurationSamp: 0,
        }
    

        const n_62_42_STATE = {
            value: msg_create([]),
            receiveBusName: "empty",
            sendBusName: "empty",
            messageReceiver: n_control_defaultMessageHandler,
            messageSender: n_control_defaultMessageHandler,
        }
    
        commons_waitEngineConfigure(() => {
            n_62_42_STATE.messageReceiver = function (m) {
                n_bang_receiveMessage(n_62_42_STATE, m)
            }
            n_62_42_STATE.messageSender = n_68_9_RCVS_0
            n_control_setReceiveBusName(n_62_42_STATE, "empty")
        })

        
    

        const n_68_9_STATE = {
            value: msg_create([]),
            receiveBusName: "empty",
            sendBusName: "empty",
            messageReceiver: n_control_defaultMessageHandler,
            messageSender: n_control_defaultMessageHandler,
        }
    
        commons_waitEngineConfigure(() => {
            n_68_9_STATE.messageReceiver = function (m) {
                n_bang_receiveMessage(n_68_9_STATE, m)
            }
            n_68_9_STATE.messageSender = n_68_2_RCVS_0
            n_control_setReceiveBusName(n_68_9_STATE, "empty")
        })

        
    

        const n_68_2_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_68_2_STATE.outTemplates[0] = []
            
                n_68_2_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            

                n_68_2_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_68_2_STATE.outMessages[0] = msg_create(n_68_2_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_68_2_STATE.outMessages[0], 0, 1)
            

                msg_writeFloatToken(n_68_2_STATE.outMessages[0], 1, 100)
            
        
        
        n_68_2_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_68_2_STATE.outMessages[0]
                }
,
        ]
    

        const n_68_0_STATE = {
            currentLine: n_line_t_defaultLine,
            currentValue: 0,
            nextDurationSamp: 0,
        }
    

        const n_67_3_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_67_3_STATE.outTemplates[0] = []
            
                n_67_3_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            

                n_67_3_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_67_3_STATE.outMessages[0] = msg_create(n_67_3_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_67_3_STATE.outMessages[0], 0, 0)
            

                msg_writeFloatToken(n_67_3_STATE.outMessages[0], 1, 100)
            
        
        
        n_67_3_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_67_3_STATE.outMessages[0]
                }
,
        ]
    

        const n_67_0_STATE = {
            currentLine: n_line_t_defaultLine,
            currentValue: 0,
            nextDurationSamp: 0,
        }
    

        const n_62_32_STATE = {
            value: msg_create([]),
            receiveBusName: "empty",
            sendBusName: "empty",
            messageReceiver: n_control_defaultMessageHandler,
            messageSender: n_control_defaultMessageHandler,
        }
    
        commons_waitEngineConfigure(() => {
            n_62_32_STATE.messageReceiver = function (m) {
                n_bang_receiveMessage(n_62_32_STATE, m)
            }
            n_62_32_STATE.messageSender = n_62_31_RCVS_0
            n_control_setReceiveBusName(n_62_32_STATE, "empty")
        })

        
    
commons_waitFrame(0, () => n_62_47_RCVS_0(msg_bang()))

        const n_62_47_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_62_47_STATE.outTemplates[0] = []
            
                n_62_47_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_62_47_STATE.outMessages[0] = msg_create(n_62_47_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_62_47_STATE.outMessages[0], 0, 0.01)
            
        
        
        n_62_47_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_62_47_STATE.outMessages[0]
                }
,
        ]
    

        const n_131_17_STATE = {
            floatInputs: new Map(),
            stringInputs: new Map(),
            outputs: new Array(1),
        }

        n_131_17_STATE.floatInputs.set(1, 0)
        
    

        const n_68_8_STATE = {
            value: msg_create([]),
            receiveBusName: "empty",
            sendBusName: "empty",
            messageReceiver: n_control_defaultMessageHandler,
            messageSender: n_control_defaultMessageHandler,
        }
    
        commons_waitEngineConfigure(() => {
            n_68_8_STATE.messageReceiver = function (m) {
                n_bang_receiveMessage(n_68_8_STATE, m)
            }
            n_68_8_STATE.messageSender = n_68_1_RCVS_0
            n_control_setReceiveBusName(n_68_8_STATE, "empty")
        })

        
    

        const n_68_1_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_68_1_STATE.outTemplates[0] = []
            
                n_68_1_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            

                n_68_1_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_68_1_STATE.outMessages[0] = msg_create(n_68_1_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_68_1_STATE.outMessages[0], 0, 0)
            

                msg_writeFloatToken(n_68_1_STATE.outMessages[0], 1, 100)
            
        
        
        n_68_1_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_68_1_STATE.outMessages[0]
                }
,
        ]
    

            const n_131_7_STATE = {
                value: 0,
            }
            n_float_int_setValueInt(n_131_7_STATE, 0)
        

        const n_131_2_STATE = {
            isClosed: true
        }
    


        const n_131_1_STATE = {
            currentValue: 0
        }
    

            const n_131_8_STATE = {
                currentValue: 0
            }
        


        const n_131_10_STATE = {
            isClosed: true
        }
    

            const n_131_13_STATE = {
                currentValue: 0
            }
        

        const n_131_9_STATE = {
            floatFilter: 1,
            stringFilter: "1",
            filterType: MSG_FLOAT_TOKEN,
        }
    


        const n_62_26_STATE = {
            maxValue: 8
        }
    

        const n_62_30_STATE = {
            floatFilter: 0,
            stringFilter: "0",
            filterType: MSG_FLOAT_TOKEN,
        }
    


        const n_62_27_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_62_27_STATE.outTemplates[0] = []
            
                n_62_27_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            

                n_62_27_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_62_27_STATE.outMessages[0] = msg_create(n_62_27_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_62_27_STATE.outMessages[0], 0, 1)
            

                msg_writeFloatToken(n_62_27_STATE.outMessages[0], 1, 1000)
            
        
        
        n_62_27_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_62_27_STATE.outMessages[0]
                }
,
        ]
    

        const n_66_0_STATE = {
            maxValue: 4
        }
    

        const n_66_1_STATE = {
            floatFilter: 0,
            stringFilter: "0",
            filterType: MSG_FLOAT_TOKEN,
        }
    

        const n_66_2_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_66_2_STATE.outTemplates[0] = []
            
                n_66_2_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_66_2_STATE.outMessages[0] = msg_create(n_66_2_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_66_2_STATE.outMessages[0], 0, 10)
            
        
        
        n_66_2_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_66_2_STATE.outMessages[0]
                }
,
        ]
    

        const n_66_6_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
        
        n_66_6_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
            
            
            let stringMem = []
            n_66_6_STATE.outTemplates[0] = []
            
                n_66_6_STATE.outTemplates[0].push(msg_getTokenType(inMessage, 0))
                if (msg_isStringToken(inMessage, 0)) {
                    stringMem[0] = msg_readStringToken(inMessage, 0)
                    n_66_6_STATE.outTemplates[0].push(stringMem[0].length)
                }
            

                n_66_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_66_6_STATE.outMessages[0] = msg_create(n_66_6_STATE.outTemplates[0])
            
                if (msg_isFloatToken(inMessage, 0)) {
                    msg_writeFloatToken(n_66_6_STATE.outMessages[0], 0, msg_readFloatToken(inMessage, 0))
                } else if (msg_isStringToken(inMessage, 0)) {
                    msg_writeStringToken(n_66_6_STATE.outMessages[0], 0, stringMem[0])
                }
            

                msg_writeFloatToken(n_66_6_STATE.outMessages[0], 1, 1000)
            
        
                    return n_66_6_STATE.outMessages[0]
                }
,
        ]
    

        const n_62_36_STATE = {
            currentLine: n_line_t_defaultLine,
            currentValue: 0,
            nextDurationSamp: 0,
        }
    

        const n_66_3_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_66_3_STATE.outTemplates[0] = []
            
                n_66_3_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_66_3_STATE.outMessages[0] = msg_create(n_66_3_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_66_3_STATE.outMessages[0], 0, 7)
            
        
        
        n_66_3_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_66_3_STATE.outMessages[0]
                }
,
        ]
    

        const n_66_5_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_66_5_STATE.outTemplates[0] = []
            
                n_66_5_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_66_5_STATE.outMessages[0] = msg_create(n_66_5_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_66_5_STATE.outMessages[0], 0, 15)
            
        
        
        n_66_5_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_66_5_STATE.outMessages[0]
                }
,
        ]
    

        const n_66_4_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_66_4_STATE.outTemplates[0] = []
            
                n_66_4_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_66_4_STATE.outMessages[0] = msg_create(n_66_4_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_66_4_STATE.outMessages[0], 0, 17)
            
        
        
        n_66_4_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_66_4_STATE.outMessages[0]
                }
,
        ]
    

        const n_67_1_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_67_1_STATE.outTemplates[0] = []
            
                n_67_1_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            

                n_67_1_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_67_1_STATE.outMessages[0] = msg_create(n_67_1_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_67_1_STATE.outMessages[0], 0, 1)
            

                msg_writeFloatToken(n_67_1_STATE.outMessages[0], 1, 100)
            
        
        
        n_67_1_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_67_1_STATE.outMessages[0]
                }
,
        ]
    


        const n_131_14_STATE = {
            delay: 0,
            sampleRatio: 1,
            scheduledBang: SKED_ID_NULL,
        }

        commons_waitEngineConfigure(() => {
            n_131_14_STATE.sampleRatio = computeUnitInSamples(SAMPLE_RATE, 1, "msec")
            n_delay_setDelay(n_131_14_STATE, 1200)
        })
    

        const n_131_6_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_131_6_STATE.outTemplates[0] = []
            
                n_131_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_131_6_STATE.outMessages[0] = msg_create(n_131_6_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_131_6_STATE.outMessages[0], 0, 1)
            
        
        
        n_131_6_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_131_6_STATE.outMessages[0]
                }
,
        ]
    

        const n_131_4_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_131_4_STATE.outTemplates[0] = []
            
                n_131_4_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_131_4_STATE.outMessages[0] = msg_create(n_131_4_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_131_4_STATE.outMessages[0], 0, 0)
            
        
        
        n_131_4_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_131_4_STATE.outMessages[0]
                }
,
        ]
    


        const n_132_2_STATE = {
            delay: 0,
            sampleRatio: 1,
            scheduledBang: SKED_ID_NULL,
        }

        commons_waitEngineConfigure(() => {
            n_132_2_STATE.sampleRatio = computeUnitInSamples(SAMPLE_RATE, 1, "msec")
            n_delay_setDelay(n_132_2_STATE, 1000)
        })
    

        const n_132_5_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_132_5_STATE.outTemplates[0] = []
            
                n_132_5_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_132_5_STATE.outMessages[0] = msg_create(n_132_5_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_132_5_STATE.outMessages[0], 0, 0)
            
        
        
        n_132_5_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_132_5_STATE.outMessages[0]
                }
,
        ]
    

            const n_132_1_STATE = {
                value: 0,
            }
            n_float_int_setValueInt(n_132_1_STATE, 0)
        

        const n_132_6_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_132_6_STATE.outTemplates[0] = []
            
                n_132_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_132_6_STATE.outMessages[0] = msg_create(n_132_6_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_132_6_STATE.outMessages[0], 0, 1)
            
        
        
        n_132_6_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_132_6_STATE.outMessages[0]
                }
,
        ]
    

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("genMetro", n_131_2_RCVS_0)
            })
        
commons_waitFrame(0, () => n_131_6_RCVS_0(msg_bang()))

            const n_133_7_STATE = {
                value: 0,
            }
            n_float_int_setValueInt(n_133_7_STATE, 0)
        

        const n_133_2_STATE = {
            isClosed: true
        }
    


        const n_133_1_STATE = {
            currentValue: 0
        }
    

            const n_133_8_STATE = {
                currentValue: 0
            }
        


        const n_133_10_STATE = {
            isClosed: true
        }
    

            const n_133_13_STATE = {
                currentValue: 0
            }
        

        const n_133_9_STATE = {
            floatFilter: 1,
            stringFilter: "1",
            filterType: MSG_FLOAT_TOKEN,
        }
    



        const n_133_14_STATE = {
            delay: 0,
            sampleRatio: 1,
            scheduledBang: SKED_ID_NULL,
        }

        commons_waitEngineConfigure(() => {
            n_133_14_STATE.sampleRatio = computeUnitInSamples(SAMPLE_RATE, 1, "msec")
            n_delay_setDelay(n_133_14_STATE, 1200)
        })
    

        const n_133_6_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_133_6_STATE.outTemplates[0] = []
            
                n_133_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_133_6_STATE.outMessages[0] = msg_create(n_133_6_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_133_6_STATE.outMessages[0], 0, 1)
            
        
        
        n_133_6_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_133_6_STATE.outMessages[0]
                }
,
        ]
    

        const n_133_4_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_133_4_STATE.outTemplates[0] = []
            
                n_133_4_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_133_4_STATE.outMessages[0] = msg_create(n_133_4_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_133_4_STATE.outMessages[0], 0, 0)
            
        
        
        n_133_4_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_133_4_STATE.outMessages[0]
                }
,
        ]
    


        const n_134_2_STATE = {
            delay: 0,
            sampleRatio: 1,
            scheduledBang: SKED_ID_NULL,
        }

        commons_waitEngineConfigure(() => {
            n_134_2_STATE.sampleRatio = computeUnitInSamples(SAMPLE_RATE, 1, "msec")
            n_delay_setDelay(n_134_2_STATE, 1000)
        })
    

        const n_134_5_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_134_5_STATE.outTemplates[0] = []
            
                n_134_5_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_134_5_STATE.outMessages[0] = msg_create(n_134_5_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_134_5_STATE.outMessages[0], 0, 0)
            
        
        
        n_134_5_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_134_5_STATE.outMessages[0]
                }
,
        ]
    

            const n_134_1_STATE = {
                value: 0,
            }
            n_float_int_setValueInt(n_134_1_STATE, 0)
        

        const n_134_6_STATE = {
            outTemplates: [],
            outMessages: [],
            messageTransferFunctions: [],
        }

        
            
            
            
            n_134_6_STATE.outTemplates[0] = []
            
                n_134_6_STATE.outTemplates[0].push(MSG_FLOAT_TOKEN)
            
            n_134_6_STATE.outMessages[0] = msg_create(n_134_6_STATE.outTemplates[0])
            
                msg_writeFloatToken(n_134_6_STATE.outMessages[0], 0, 1)
            
        
        
        n_134_6_STATE.messageTransferFunctions = [
            function (inMessage) {
                    
                    return n_134_6_STATE.outMessages[0]
                }
,
        ]
    

            commons_waitEngineConfigure(() => {
                msgBusSubscribe("genMetro", n_133_2_RCVS_0)
            })
        
commons_waitFrame(0, () => n_133_6_RCVS_0(msg_bang()))

            const m_n_0_4_0_sig_STATE = {
                currentValue: 0.0001
            }
        

            const n_0_4_STATE = {
                phase: 0,
                J: 0,
            }
            
            commons_waitEngineConfigure(() => {
                n_0_4_STATE.J = 1 / SAMPLE_RATE
            })
        

            const m_n_0_89_1_sig_STATE = {
                currentValue: 5
            }
        


        const n_0_2_STATE = {
            busName: '',
        }

        n_throw_catch_send_receive_t_setBusName(n_0_2_STATE, "moveForward")
    

            const m_n_0_11_0_sig_STATE = {
                currentValue: 0.0218
            }
        

            const n_0_11_STATE = {
                phase: 0,
                J: 0,
            }
            
            commons_waitEngineConfigure(() => {
                n_0_11_STATE.J = 2 * Math.PI / SAMPLE_RATE
            })
        

        const n_0_47_STATE = {
            busName: '',
        }

        n_throw_catch_send_receive_t_setBusName(n_0_47_STATE, "masterOsc")
    

        const n_0_48_STATE = {
            busName: '',
        }

        n_throw_catch_send_receive_t_setBusName(n_0_48_STATE, "osc2SeqFb")
    



            const m_n_0_12_0_sig_STATE = {
                currentValue: 0.033
            }
        

            const n_0_12_STATE = {
                phase: 0,
                J: 0,
            }
            
            commons_waitEngineConfigure(() => {
                n_0_12_STATE.J = 2 * Math.PI / SAMPLE_RATE
            })
        


        const n_0_8_STATE = {
            busName: '',
        }

        n_throw_catch_send_receive_t_setBusName(n_0_8_STATE, "osc1SeqFb")
    

        const n_49_0_STATE = {
            busName: '',
        }

        n_throw_catch_send_receive_t_setBusName(n_49_0_STATE, "osc3SeqFb")
    

        const n_49_2_STATE = {
            busName: '',
        }

        n_throw_catch_send_receive_t_setBusName(n_49_2_STATE, "osc4SeqFb")
    


            const m_n_49_4_1_sig_STATE = {
                currentValue: 0.3
            }
        




            const n_0_6_STATE = {
                minValue: -1,
                maxValue: 1,
            }
        

            const m_n_0_104_1_sig_STATE = {
                currentValue: 1
            }
        


            const m_n_0_105_1_sig_STATE = {
                currentValue: 0.5
            }
        


        const n_0_9_STATE = {
            busName: '',
        }

        n_throw_catch_send_receive_t_setBusName(n_0_9_STATE, "osc1SeqFb")
    

        const n_0_13_STATE = {
            busName: '',
        }

        n_throw_catch_send_receive_t_setBusName(n_0_13_STATE, "bus1_vol")
    

            const m_n_0_26_0_sig_STATE = {
                currentValue: 0.0618
            }
        

            const n_0_26_STATE = {
                phase: 0,
                J: 0,
            }
            
            commons_waitEngineConfigure(() => {
                n_0_26_STATE.J = 2 * Math.PI / SAMPLE_RATE
            })
        

        const n_0_51_STATE = {
            busName: '',
        }

        n_throw_catch_send_receive_t_setBusName(n_0_51_STATE, "masterOsc")
    

        const n_0_52_STATE = {
            busName: '',
        }

        n_throw_catch_send_receive_t_setBusName(n_0_52_STATE, "osc3SeqFb")
    



            const m_n_0_53_0_sig_STATE = {
                currentValue: 0.013
            }
        

            const n_0_53_STATE = {
                phase: 0,
                J: 0,
            }
            
            commons_waitEngineConfigure(() => {
                n_0_53_STATE.J = 2 * Math.PI / SAMPLE_RATE
            })
        


        const n_0_34_STATE = {
            busName: '',
        }

        n_throw_catch_send_receive_t_setBusName(n_0_34_STATE, "osc2SeqFb")
    

        const n_51_6_STATE = {
            busName: '',
        }

        n_throw_catch_send_receive_t_setBusName(n_51_6_STATE, "osc1SeqFb")
    

        const n_51_1_STATE = {
            busName: '',
        }

        n_throw_catch_send_receive_t_setBusName(n_51_1_STATE, "osc4SeqFb")
    


            const m_n_51_3_1_sig_STATE = {
                currentValue: 0.3
            }
        




            const n_0_15_STATE = {
                minValue: -1,
                maxValue: 1,
            }
        

            const m_n_0_106_1_sig_STATE = {
                currentValue: 1
            }
        


            const m_n_0_107_1_sig_STATE = {
                currentValue: 0.5
            }
        


        const n_0_31_STATE = {
            busName: '',
        }

        n_throw_catch_send_receive_t_setBusName(n_0_31_STATE, "bus2_vol")
    

            const m_n_0_28_0_sig_STATE = {
                currentValue: 0.018
            }
        

            const n_0_28_STATE = {
                phase: 0,
                J: 0,
            }
            
            commons_waitEngineConfigure(() => {
                n_0_28_STATE.J = 2 * Math.PI / SAMPLE_RATE
            })
        

        const n_0_55_STATE = {
            busName: '',
        }

        n_throw_catch_send_receive_t_setBusName(n_0_55_STATE, "masterOsc")
    

        const n_0_57_STATE = {
            busName: '',
        }

        n_throw_catch_send_receive_t_setBusName(n_0_57_STATE, "osc4SeqFb")
    



            const m_n_0_27_0_sig_STATE = {
                currentValue: 0.093
            }
        

            const n_0_27_STATE = {
                phase: 0,
                J: 0,
            }
            
            commons_waitEngineConfigure(() => {
                n_0_27_STATE.J = 2 * Math.PI / SAMPLE_RATE
            })
        


        const n_0_38_STATE = {
            busName: '',
        }

        n_throw_catch_send_receive_t_setBusName(n_0_38_STATE, "osc3SeqFb")
    

        const n_53_5_STATE = {
            busName: '',
        }

        n_throw_catch_send_receive_t_setBusName(n_53_5_STATE, "osc1SeqFb")
    

        const n_53_6_STATE = {
            busName: '',
        }

        n_throw_catch_send_receive_t_setBusName(n_53_6_STATE, "osc2SeqFb")
    


            const m_n_53_2_1_sig_STATE = {
                currentValue: 0.3
            }
        




            const n_0_19_STATE = {
                minValue: -1,
                maxValue: 1,
            }
        

            const m_n_0_108_1_sig_STATE = {
                currentValue: 1
            }
        


            const m_n_0_109_1_sig_STATE = {
                currentValue: 0.5
            }
        


        const n_0_32_STATE = {
            busName: '',
        }

        n_throw_catch_send_receive_t_setBusName(n_0_32_STATE, "bus3_vol")
    

            const m_n_0_29_0_sig_STATE = {
                currentValue: 0.0188
            }
        

            const n_0_29_STATE = {
                phase: 0,
                J: 0,
            }
            
            commons_waitEngineConfigure(() => {
                n_0_29_STATE.J = 2 * Math.PI / SAMPLE_RATE
            })
        

        const n_0_59_STATE = {
            busName: '',
        }

        n_throw_catch_send_receive_t_setBusName(n_0_59_STATE, "masterOsc")
    

        const n_0_60_STATE = {
            busName: '',
        }

        n_throw_catch_send_receive_t_setBusName(n_0_60_STATE, "osc1SeqFb")
    



            const m_n_0_30_0_sig_STATE = {
                currentValue: 0.053
            }
        

            const n_0_30_STATE = {
                phase: 0,
                J: 0,
            }
            
            commons_waitEngineConfigure(() => {
                n_0_30_STATE.J = 2 * Math.PI / SAMPLE_RATE
            })
        


        const n_0_39_STATE = {
            busName: '',
        }

        n_throw_catch_send_receive_t_setBusName(n_0_39_STATE, "osc4SeqFb")
    

        const n_55_6_STATE = {
            busName: '',
        }

        n_throw_catch_send_receive_t_setBusName(n_55_6_STATE, "osc3SeqFb")
    

        const n_55_5_STATE = {
            busName: '',
        }

        n_throw_catch_send_receive_t_setBusName(n_55_5_STATE, "osc2SeqFb")
    


            const m_n_55_2_1_sig_STATE = {
                currentValue: 0.3
            }
        




            const n_0_23_STATE = {
                minValue: -1,
                maxValue: 1,
            }
        

            const m_n_0_110_1_sig_STATE = {
                currentValue: 1
            }
        


            const m_n_0_111_1_sig_STATE = {
                currentValue: 0.5
            }
        


        const n_0_33_STATE = {
            busName: '',
        }

        n_throw_catch_send_receive_t_setBusName(n_0_33_STATE, "bus4_vol")
    

        const n_0_35_STATE = {
            busName: '',
        }

        n_throw_catch_send_receive_t_setBusName(n_0_35_STATE, "osc2SeqFb")
    

        const n_0_36_STATE = {
            busName: '',
        }

        n_throw_catch_send_receive_t_setBusName(n_0_36_STATE, "osc3SeqFb")
    

        const n_0_37_STATE = {
            busName: '',
        }

        n_throw_catch_send_receive_t_setBusName(n_0_37_STATE, "osc4SeqFb")
    

            const m_n_0_81_0_sig_STATE = {
                currentValue: 0.05
            }
        

            const n_0_81_STATE = {
                phase: 0,
                J: 0,
            }
            
            commons_waitEngineConfigure(() => {
                n_0_81_STATE.J = 2 * Math.PI / SAMPLE_RATE
            })
        

            const m_n_0_68_0_sig_STATE = {
                currentValue: 0.075
            }
        

            const n_0_68_STATE = {
                phase: 0,
                J: 0,
            }
            
            commons_waitEngineConfigure(() => {
                n_0_68_STATE.J = 2 * Math.PI / SAMPLE_RATE
            })
        




        const n_0_46_STATE = {
            busName: '',
        }

        n_throw_catch_send_receive_t_setBusName(n_0_46_STATE, "masterOsc")
    

            const n_0_76_STATE = {
                phase: 0,
                J: 0,
            }
            
            commons_waitEngineConfigure(() => {
                n_0_76_STATE.J = 1 / SAMPLE_RATE
            })
        

        const n_0_72_STATE = {
            signalMemory: 0,
            controlMemory: 0,
        }
    

            const m_n_0_118_1_sig_STATE = {
                currentValue: 1
            }
        


            const m_n_0_119_1_sig_STATE = {
                currentValue: 10
            }
        


            const n_79_5_STATE = {
                delayName: '',
                buffer: DELAY_BUFFERS_NULL,
            }

            commons_waitEngineConfigure(() => {
                if ("79-del-L".length) {
                    n_delread_setDelayName(n_79_5_STATE, "79-del-L", () => {
                        n_79_5_STATE.buffer = DELAY_BUFFERS.get(n_79_5_STATE.delayName)
                    })
                }
            })
        


        const n_29_29_STATE = {
            busName: '',
        }

        n_throw_catch_send_receive_t_setBusName(n_29_29_STATE, "delL")
    

            const n_82_5_STATE = {
                delayName: '',
                buffer: DELAY_BUFFERS_NULL,
            }

            commons_waitEngineConfigure(() => {
                if ("82-del-L".length) {
                    n_delread_setDelayName(n_82_5_STATE, "82-del-L", () => {
                        n_82_5_STATE.buffer = DELAY_BUFFERS.get(n_82_5_STATE.delayName)
                    })
                }
            })
        


        const n_29_30_STATE = {
            busName: '',
        }

        n_throw_catch_send_receive_t_setBusName(n_29_30_STATE, "delL")
    

            const n_82_17_STATE = {
                delayName: '',
                buffer: DELAY_BUFFERS_NULL,
            }

            commons_waitEngineConfigure(() => {
                if ("82-del-R".length) {
                    n_delread_setDelayName(n_82_17_STATE, "82-del-R", () => {
                        n_82_17_STATE.buffer = DELAY_BUFFERS.get(n_82_17_STATE.delayName)
                    })
                }
            })
        


        const n_29_31_STATE = {
            busName: '',
        }

        n_throw_catch_send_receive_t_setBusName(n_29_31_STATE, "delR")
    

            const n_81_5_STATE = {
                delayName: '',
                buffer: DELAY_BUFFERS_NULL,
            }

            commons_waitEngineConfigure(() => {
                if ("81-del-L".length) {
                    n_delread_setDelayName(n_81_5_STATE, "81-del-L", () => {
                        n_81_5_STATE.buffer = DELAY_BUFFERS.get(n_81_5_STATE.delayName)
                    })
                }
            })
        

        const n_81_24_STATE = {
            currentLine: n_line_t_defaultLine,
            currentValue: 0,
            nextDurationSamp: 0,
        }
    


        const n_29_32_STATE = {
            busName: '',
        }

        n_throw_catch_send_receive_t_setBusName(n_29_32_STATE, "delL")
    

            const n_81_17_STATE = {
                delayName: '',
                buffer: DELAY_BUFFERS_NULL,
            }

            commons_waitEngineConfigure(() => {
                if ("81-del-R".length) {
                    n_delread_setDelayName(n_81_17_STATE, "81-del-R", () => {
                        n_81_17_STATE.buffer = DELAY_BUFFERS.get(n_81_17_STATE.delayName)
                    })
                }
            })
        


        const n_29_33_STATE = {
            busName: '',
        }

        n_throw_catch_send_receive_t_setBusName(n_29_33_STATE, "delR")
    

            const n_80_5_STATE = {
                delayName: '',
                buffer: DELAY_BUFFERS_NULL,
            }

            commons_waitEngineConfigure(() => {
                if ("80-del-L".length) {
                    n_delread_setDelayName(n_80_5_STATE, "80-del-L", () => {
                        n_80_5_STATE.buffer = DELAY_BUFFERS.get(n_80_5_STATE.delayName)
                    })
                }
            })
        


        const n_29_34_STATE = {
            busName: '',
        }

        n_throw_catch_send_receive_t_setBusName(n_29_34_STATE, "delL")
    

            const n_80_17_STATE = {
                delayName: '',
                buffer: DELAY_BUFFERS_NULL,
            }

            commons_waitEngineConfigure(() => {
                if ("80-del-R".length) {
                    n_delread_setDelayName(n_80_17_STATE, "80-del-R", () => {
                        n_80_17_STATE.buffer = DELAY_BUFFERS.get(n_80_17_STATE.delayName)
                    })
                }
            })
        


        const n_29_35_STATE = {
            busName: '',
        }

        n_throw_catch_send_receive_t_setBusName(n_29_35_STATE, "delR")
    

        const n_31_29_STATE = {
            busName: '',
        }

        n_throw_catch_send_receive_t_setBusName(n_31_29_STATE, "grainSize_1")
    

            const m_n_31_30_1_sig_STATE = {
                currentValue: 10
            }
        


            const n_31_0_STATE = {
                phase: 0,
                J: 0,
            }
            
            commons_waitEngineConfigure(() => {
                n_31_0_STATE.J = 1 / SAMPLE_RATE
            })
        



        const n_31_32_STATE = {
            busName: '',
        }

        n_throw_catch_send_receive_t_setBusName(n_31_32_STATE, "phFreq_1")
    


            const m_n_71_42_1_sig_STATE = {
                currentValue: 0.000001
            }
        







        const n_71_2_STATE = {
            signalMemory: 0,
            controlMemory: 0,
        }
    




        const n_71_28_STATE = {
            busName: '',
        }

        n_throw_catch_send_receive_t_setBusName(n_71_28_STATE, "moveForward")
    





        const n_71_1_STATE = {
            signalMemory: 0,
            controlMemory: 0,
        }
    

            const m_n_71_41_1_sig_STATE = {
                currentValue: 5
            }
        

        const n_71_41_STATE = {
            previous: 0,
            coeff: 0,
        }
    



            const m_n_71_19_1_sig_STATE = {
                currentValue: 22050
            }
        


        const n_71_54_STATE = n_tabbase_createState("crown")

        commons_waitEngineConfigure(() => {
            if (n_71_54_STATE.arrayName.length) {
                n_tabbase_setArrayName(
                    n_71_54_STATE, 
                    n_71_54_STATE.arrayName,
                    () => n_tabread_t_setArrayNameFinalize(n_71_54_STATE)
                )
            }
        })
    


            const m_n_31_116_1_sig_STATE = {
                currentValue: 0.4
            }
        


            const m_n_30_2_1_sig_STATE = {
                currentValue: 5000
            }
        

        const n_30_2_STATE = {
            previous: 0,
            coeff: 0,
        }
    

            const m_n_30_3_1_sig_STATE = {
                currentValue: 5000
            }
        

        const n_30_3_STATE = {
            previous: 0,
            coeff: 0,
        }
    

            const m_n_30_4_1_sig_STATE = {
                currentValue: 5000
            }
        

        const n_30_4_STATE = {
            previous: 0,
            coeff: 0,
        }
    

            const m_n_30_5_1_sig_STATE = {
                currentValue: 5000
            }
        

        const n_30_5_STATE = {
            previous: 0,
            coeff: 0,
        }
    

        const n_29_19_STATE = {
            busName: '',
        }

        n_throw_catch_send_receive_t_setBusName(n_29_19_STATE, "bus1_vol")
    



        const n_31_75_STATE = {
            busName: '',
        }

        n_throw_catch_send_receive_t_setBusName(n_31_75_STATE, "grainSize_2")
    

            const m_n_31_33_1_sig_STATE = {
                currentValue: 10
            }
        




        const n_31_46_STATE = {
            busName: '',
        }

        n_throw_catch_send_receive_t_setBusName(n_31_46_STATE, "phFreq_2")
    


            const m_n_31_89_1_sig_STATE = {
                currentValue: 5000
            }
        

        const n_31_89_STATE = {
            previous: 0,
            coeff: 0,
        }
    

            const m_n_73_42_1_sig_STATE = {
                currentValue: 0.000001
            }
        







        const n_73_2_STATE = {
            signalMemory: 0,
            controlMemory: 0,
        }
    




        const n_73_28_STATE = {
            busName: '',
        }

        n_throw_catch_send_receive_t_setBusName(n_73_28_STATE, "moveForward")
    





        const n_73_1_STATE = {
            signalMemory: 0,
            controlMemory: 0,
        }
    

            const m_n_73_41_1_sig_STATE = {
                currentValue: 5
            }
        

        const n_73_41_STATE = {
            previous: 0,
            coeff: 0,
        }
    



            const m_n_73_19_1_sig_STATE = {
                currentValue: 22050
            }
        


        const n_73_54_STATE = n_tabbase_createState("crown")

        commons_waitEngineConfigure(() => {
            if (n_73_54_STATE.arrayName.length) {
                n_tabbase_setArrayName(
                    n_73_54_STATE, 
                    n_73_54_STATE.arrayName,
                    () => n_tabread_t_setArrayNameFinalize(n_73_54_STATE)
                )
            }
        })
    


            const m_n_31_115_1_sig_STATE = {
                currentValue: 0.4
            }
        


            const m_n_38_2_1_sig_STATE = {
                currentValue: 5000
            }
        

        const n_38_2_STATE = {
            previous: 0,
            coeff: 0,
        }
    

            const m_n_38_3_1_sig_STATE = {
                currentValue: 5000
            }
        

        const n_38_3_STATE = {
            previous: 0,
            coeff: 0,
        }
    

            const m_n_38_4_1_sig_STATE = {
                currentValue: 5000
            }
        

        const n_38_4_STATE = {
            previous: 0,
            coeff: 0,
        }
    

            const m_n_38_5_1_sig_STATE = {
                currentValue: 5000
            }
        

        const n_38_5_STATE = {
            previous: 0,
            coeff: 0,
        }
    

        const n_29_70_STATE = {
            busName: '',
        }

        n_throw_catch_send_receive_t_setBusName(n_29_70_STATE, "bus2_vol")
    



        const n_31_76_STATE = {
            busName: '',
        }

        n_throw_catch_send_receive_t_setBusName(n_31_76_STATE, "grainSize_3")
    

            const m_n_31_34_1_sig_STATE = {
                currentValue: 10
            }
        




        const n_31_49_STATE = {
            busName: '',
        }

        n_throw_catch_send_receive_t_setBusName(n_31_49_STATE, "phFreq_3")
    


            const m_n_31_90_1_sig_STATE = {
                currentValue: 5000
            }
        

        const n_31_90_STATE = {
            previous: 0,
            coeff: 0,
        }
    

            const m_n_75_42_1_sig_STATE = {
                currentValue: 0.000001
            }
        







        const n_75_2_STATE = {
            signalMemory: 0,
            controlMemory: 0,
        }
    




        const n_75_28_STATE = {
            busName: '',
        }

        n_throw_catch_send_receive_t_setBusName(n_75_28_STATE, "moveForward")
    





        const n_75_1_STATE = {
            signalMemory: 0,
            controlMemory: 0,
        }
    

            const m_n_75_41_1_sig_STATE = {
                currentValue: 5
            }
        

        const n_75_41_STATE = {
            previous: 0,
            coeff: 0,
        }
    



            const m_n_75_19_1_sig_STATE = {
                currentValue: 22050
            }
        


        const n_75_54_STATE = n_tabbase_createState("crown")

        commons_waitEngineConfigure(() => {
            if (n_75_54_STATE.arrayName.length) {
                n_tabbase_setArrayName(
                    n_75_54_STATE, 
                    n_75_54_STATE.arrayName,
                    () => n_tabread_t_setArrayNameFinalize(n_75_54_STATE)
                )
            }
        })
    


            const m_n_31_117_1_sig_STATE = {
                currentValue: 0.4
            }
        


            const m_n_39_2_1_sig_STATE = {
                currentValue: 5000
            }
        

        const n_39_2_STATE = {
            previous: 0,
            coeff: 0,
        }
    

            const m_n_39_3_1_sig_STATE = {
                currentValue: 5000
            }
        

        const n_39_3_STATE = {
            previous: 0,
            coeff: 0,
        }
    

            const m_n_39_4_1_sig_STATE = {
                currentValue: 5000
            }
        

        const n_39_4_STATE = {
            previous: 0,
            coeff: 0,
        }
    

            const m_n_39_5_1_sig_STATE = {
                currentValue: 5000
            }
        

        const n_39_5_STATE = {
            previous: 0,
            coeff: 0,
        }
    

        const n_29_71_STATE = {
            busName: '',
        }

        n_throw_catch_send_receive_t_setBusName(n_29_71_STATE, "bus3_vol")
    



            const m_n_40_4_0_sig_STATE = {
                currentValue: 0
            }
        

            const m_n_40_4_1_sig_STATE = {
                currentValue: 5000
            }
        

        const n_40_4_STATE = {
            previous: 0,
            coeff: 0,
        }
    

            const m_n_40_5_1_sig_STATE = {
                currentValue: 5000
            }
        

        const n_40_5_STATE = {
            previous: 0,
            coeff: 0,
        }
    

        const n_29_72_STATE = {
            busName: '',
        }

        n_throw_catch_send_receive_t_setBusName(n_29_72_STATE, "bus4_vol")
    



        const n_29_36_STATE = {
            busName: '',
        }

        n_throw_catch_send_receive_t_setBusName(n_29_36_STATE, "delL")
    

            const m_n_29_61_1_sig_STATE = {
                currentValue: 0.8
            }
        



        const n_29_69_STATE = {
            busName: '',
        }

        n_throw_catch_send_receive_t_setBusName(n_29_69_STATE, "bus_bass")
    


            const m_n_29_49_1_sig_STATE = {
                currentValue: 0
            }
        


            const m_n_29_59_1_sig_STATE = {
                currentValue: 1
            }
        


            const m_n_29_74_1_sig_STATE = {
                currentValue: 1.5
            }
        


            const m_n_29_78_1_sig_STATE = {
                currentValue: 1
            }
        



            const m_n_29_57_1_sig_STATE = {
                currentValue: 1
            }
        



        const n_29_37_STATE = {
            busName: '',
        }

        n_throw_catch_send_receive_t_setBusName(n_29_37_STATE, "delR")
    

            const m_n_29_62_1_sig_STATE = {
                currentValue: 0.8
            }
        




            const m_n_29_50_1_sig_STATE = {
                currentValue: 0
            }
        


            const m_n_29_60_1_sig_STATE = {
                currentValue: 1
            }
        


            const m_n_29_73_1_sig_STATE = {
                currentValue: 1.5
            }
        


            const m_n_29_79_1_sig_STATE = {
                currentValue: 1
            }
        



            const m_n_29_58_1_sig_STATE = {
                currentValue: 1
            }
        



            const n_79_17_STATE = {
                delayName: '',
                buffer: DELAY_BUFFERS_NULL,
            }

            commons_waitEngineConfigure(() => {
                if ("79-del-R".length) {
                    n_delread_setDelayName(n_79_17_STATE, "79-del-R", () => {
                        n_79_17_STATE.buffer = DELAY_BUFFERS.get(n_79_17_STATE.delayName)
                    })
                }
            })
        


        const n_29_56_STATE = {
            busName: '',
        }

        n_throw_catch_send_receive_t_setBusName(n_29_56_STATE, "delR")
    

        const n_31_31_STATE = {
            busName: '',
        }

        n_throw_catch_send_receive_t_setBusName(n_31_31_STATE, "phFreq_1")
    

        const n_31_77_STATE = {
            busName: '',
        }

        n_throw_catch_send_receive_t_setBusName(n_31_77_STATE, "grainSize_4")
    

            const m_n_31_35_1_sig_STATE = {
                currentValue: 10
            }
        


        const n_31_36_STATE = {
            busName: '',
        }

        n_throw_catch_send_receive_t_setBusName(n_31_36_STATE, "phFreq_4")
    

        const n_31_37_STATE = {
            busName: '',
        }

        n_throw_catch_send_receive_t_setBusName(n_31_37_STATE, "phFreq_3")
    

        const n_31_38_STATE = {
            busName: '',
        }

        n_throw_catch_send_receive_t_setBusName(n_31_38_STATE, "phFreq_2")
    

            const m_n_79_2_1_sig_STATE = {
                currentValue: 0.6
            }
        


        const n_29_42_STATE = {
            busName: '',
        }

        n_throw_catch_send_receive_t_setBusName(n_29_42_STATE, "delSend_1")
    


            const m_n_79_19_1_sig_STATE = {
                currentValue: 1
            }
        



        const n_79_15_STATE = {
            delayName: '',
            buffer: DELAY_BUFFERS_NULL,
        }

        commons_waitEngineConfigure(() => {
            n_79_15_STATE.buffer = buf_create(
                toInt(Math.ceil(computeUnitInSamples(
                    SAMPLE_RATE, 
                    1000,
                    "msec"
                )))
            )
            if ("79-del-L".length) {
                n_delwrite_setDelayName(n_79_15_STATE, "79-del-L")
            }
        })
    

            const m_n_79_1_1_sig_STATE = {
                currentValue: 0.6
            }
        



        const n_79_16_STATE = {
            delayName: '',
            buffer: DELAY_BUFFERS_NULL,
        }

        commons_waitEngineConfigure(() => {
            n_79_16_STATE.buffer = buf_create(
                toInt(Math.ceil(computeUnitInSamples(
                    SAMPLE_RATE, 
                    1000,
                    "msec"
                )))
            )
            if ("79-del-R".length) {
                n_delwrite_setDelayName(n_79_16_STATE, "79-del-R")
            }
        })
    

            const m_n_80_2_1_sig_STATE = {
                currentValue: 0.6
            }
        


        const n_29_47_STATE = {
            busName: '',
        }

        n_throw_catch_send_receive_t_setBusName(n_29_47_STATE, "delSend_4")
    


            const m_n_80_19_1_sig_STATE = {
                currentValue: 1
            }
        



        const n_80_15_STATE = {
            delayName: '',
            buffer: DELAY_BUFFERS_NULL,
        }

        commons_waitEngineConfigure(() => {
            n_80_15_STATE.buffer = buf_create(
                toInt(Math.ceil(computeUnitInSamples(
                    SAMPLE_RATE, 
                    1000,
                    "msec"
                )))
            )
            if ("80-del-L".length) {
                n_delwrite_setDelayName(n_80_15_STATE, "80-del-L")
            }
        })
    

            const m_n_80_1_1_sig_STATE = {
                currentValue: 0.6
            }
        



        const n_80_16_STATE = {
            delayName: '',
            buffer: DELAY_BUFFERS_NULL,
        }

        commons_waitEngineConfigure(() => {
            n_80_16_STATE.buffer = buf_create(
                toInt(Math.ceil(computeUnitInSamples(
                    SAMPLE_RATE, 
                    1000,
                    "msec"
                )))
            )
            if ("80-del-R".length) {
                n_delwrite_setDelayName(n_80_16_STATE, "80-del-R")
            }
        })
    

            const m_n_81_2_1_sig_STATE = {
                currentValue: 0.6
            }
        


        const n_29_48_STATE = {
            busName: '',
        }

        n_throw_catch_send_receive_t_setBusName(n_29_48_STATE, "delSend_3")
    


            const m_n_81_19_1_sig_STATE = {
                currentValue: 1
            }
        



        const n_81_15_STATE = {
            delayName: '',
            buffer: DELAY_BUFFERS_NULL,
        }

        commons_waitEngineConfigure(() => {
            n_81_15_STATE.buffer = buf_create(
                toInt(Math.ceil(computeUnitInSamples(
                    SAMPLE_RATE, 
                    1000,
                    "msec"
                )))
            )
            if ("81-del-L".length) {
                n_delwrite_setDelayName(n_81_15_STATE, "81-del-L")
            }
        })
    

            const m_n_81_1_1_sig_STATE = {
                currentValue: 0.6
            }
        



        const n_81_16_STATE = {
            delayName: '',
            buffer: DELAY_BUFFERS_NULL,
        }

        commons_waitEngineConfigure(() => {
            n_81_16_STATE.buffer = buf_create(
                toInt(Math.ceil(computeUnitInSamples(
                    SAMPLE_RATE, 
                    1000,
                    "msec"
                )))
            )
            if ("81-del-R".length) {
                n_delwrite_setDelayName(n_81_16_STATE, "81-del-R")
            }
        })
    

            const m_n_82_2_1_sig_STATE = {
                currentValue: 0.6
            }
        


        const n_29_44_STATE = {
            busName: '',
        }

        n_throw_catch_send_receive_t_setBusName(n_29_44_STATE, "delSend_2")
    


            const m_n_82_19_1_sig_STATE = {
                currentValue: 1
            }
        



        const n_82_15_STATE = {
            delayName: '',
            buffer: DELAY_BUFFERS_NULL,
        }

        commons_waitEngineConfigure(() => {
            n_82_15_STATE.buffer = buf_create(
                toInt(Math.ceil(computeUnitInSamples(
                    SAMPLE_RATE, 
                    1000,
                    "msec"
                )))
            )
            if ("82-del-L".length) {
                n_delwrite_setDelayName(n_82_15_STATE, "82-del-L")
            }
        })
    

            const m_n_82_1_1_sig_STATE = {
                currentValue: 0.6
            }
        



        const n_82_16_STATE = {
            delayName: '',
            buffer: DELAY_BUFFERS_NULL,
        }

        commons_waitEngineConfigure(() => {
            n_82_16_STATE.buffer = buf_create(
                toInt(Math.ceil(computeUnitInSamples(
                    SAMPLE_RATE, 
                    1000,
                    "msec"
                )))
            )
            if ("82-del-R".length) {
                n_delwrite_setDelayName(n_82_16_STATE, "82-del-R")
            }
        })
    

            const m_n_41_20_0_sig_STATE = {
                currentValue: 0.25
            }
        

            const n_41_20_STATE = {
                phase: 0,
                J: 0,
            }
            
            commons_waitEngineConfigure(() => {
                n_41_20_STATE.J = 1 / SAMPLE_RATE
            })
        

        const n_41_18_STATE = {
            signalMemory: 0,
            controlMemory: 0,
        }
    

        const n_41_19_STATE = {
            busName: '',
        }

        n_throw_catch_send_receive_t_setBusName(n_41_19_STATE, "delSend_1")
    


        const n_42_43_STATE = {
            busName: '',
        }

        n_throw_catch_send_receive_t_setBusName(n_42_43_STATE, "grainSize_1")
    

            const m_n_43_23_0_sig_STATE = {
                currentValue: 0.21
            }
        

            const n_43_23_STATE = {
                phase: 0,
                J: 0,
            }
            
            commons_waitEngineConfigure(() => {
                n_43_23_STATE.J = 1 / SAMPLE_RATE
            })
        

        const n_43_21_STATE = {
            signalMemory: 0,
            controlMemory: 0,
        }
    

        const n_43_22_STATE = {
            busName: '',
        }

        n_throw_catch_send_receive_t_setBusName(n_43_22_STATE, "delSend_2")
    


        const n_44_3_STATE = {
            busName: '',
        }

        n_throw_catch_send_receive_t_setBusName(n_44_3_STATE, "grainSize_2")
    

            const m_n_45_24_0_sig_STATE = {
                currentValue: 0.27
            }
        

            const n_45_24_STATE = {
                phase: 0,
                J: 0,
            }
            
            commons_waitEngineConfigure(() => {
                n_45_24_STATE.J = 1 / SAMPLE_RATE
            })
        

        const n_45_22_STATE = {
            signalMemory: 0,
            controlMemory: 0,
        }
    

        const n_45_23_STATE = {
            busName: '',
        }

        n_throw_catch_send_receive_t_setBusName(n_45_23_STATE, "delSend_3")
    


        const n_46_43_STATE = {
            busName: '',
        }

        n_throw_catch_send_receive_t_setBusName(n_46_43_STATE, "grainSize_3")
    

            const m_n_47_26_0_sig_STATE = {
                currentValue: 0.2
            }
        

            const n_47_26_STATE = {
                phase: 0,
                J: 0,
            }
            
            commons_waitEngineConfigure(() => {
                n_47_26_STATE.J = 1 / SAMPLE_RATE
            })
        

        const n_47_25_STATE = {
            signalMemory: 0,
            controlMemory: 0,
        }
    

        const n_47_27_STATE = {
            busName: '',
        }

        n_throw_catch_send_receive_t_setBusName(n_47_27_STATE, "delSend_4")
    


        const n_48_43_STATE = {
            busName: '',
        }

        n_throw_catch_send_receive_t_setBusName(n_48_43_STATE, "grainSize_4")
    



        const n_57_44_STATE = {
            busName: '',
        }

        n_throw_catch_send_receive_t_setBusName(n_57_44_STATE, "wobbleSelecta")
    



            const n_57_1_STATE = {
                phase: 0,
                J: 0,
            }
            
            commons_waitEngineConfigure(() => {
                n_57_1_STATE.J = 2 * Math.PI / SAMPLE_RATE
            })
        




            const m_n_57_45_1_sig_STATE = {
                currentValue: 0.35
            }
        


        const n_57_41_STATE = {
            busName: '',
        }

        n_throw_catch_send_receive_t_setBusName(n_57_41_STATE, "bus_bass")
    

            const n_57_11_STATE = {
                phase: 0,
                J: 0,
            }
            
            commons_waitEngineConfigure(() => {
                n_57_11_STATE.J = 2 * Math.PI / SAMPLE_RATE
            })
        



        const n_57_43_STATE = {
            busName: '',
        }

        n_throw_catch_send_receive_t_setBusName(n_57_43_STATE, "wobbleSelecta")
    

            const n_65_3_STATE = {
                delayName: '',
                buffer: DELAY_BUFFERS_NULL,
            }

            commons_waitEngineConfigure(() => {
                if ("0-del-L".length) {
                    n_delread_setDelayName(n_65_3_STATE, "0-del-L", () => {
                        n_65_3_STATE.buffer = DELAY_BUFFERS.get(n_65_3_STATE.delayName)
                    })
                }
            })
        

            const n_65_15_STATE = {
                delayName: '',
                buffer: DELAY_BUFFERS_NULL,
            }

            commons_waitEngineConfigure(() => {
                if ("0-del-R".length) {
                    n_delread_setDelayName(n_65_15_STATE, "0-del-R", () => {
                        n_65_15_STATE.buffer = DELAY_BUFFERS.get(n_65_15_STATE.delayName)
                    })
                }
            })
        

            const m_n_62_45_1_sig_STATE = {
                currentValue: 0.25
            }
        



        const n_62_12_STATE = {
            busName: '',
        }

        n_throw_catch_send_receive_t_setBusName(n_62_12_STATE, "delL")
    

            const m_n_62_44_1_sig_STATE = {
                currentValue: 0.25
            }
        



        const n_62_23_STATE = {
            busName: '',
        }

        n_throw_catch_send_receive_t_setBusName(n_62_23_STATE, "delR")
    


            const m_n_62_1_1_sig_STATE = {
                currentValue: 140
            }
        

        const n_62_1_STATE = {
            previous: 0,
            current: 0,
            coeff: 0,
            normal: 0,
        }
    

        const n_62_3_STATE = {
            busName: '',
        }

        n_throw_catch_send_receive_t_setBusName(n_62_3_STATE, "masterOsc")
    

            const m_n_62_4_1_sig_STATE = {
                currentValue: 1
            }
        


            const m_n_62_8_0_sig_STATE = {
                currentValue: 0.2
            }
        

            const n_62_8_STATE = {
                phase: 0,
                J: 0,
            }
            
            commons_waitEngineConfigure(() => {
                n_62_8_STATE.J = 1 / SAMPLE_RATE
            })
        

        const n_62_5_STATE = {
            signalMemory: 0,
            controlMemory: 0,
        }
    

            const m_n_62_16_1_sig_STATE = {
                currentValue: 1700
            }
        


            const m_n_62_6_1_sig_STATE = {
                currentValue: 100
            }
        


            const m_n_62_7_1_sig_STATE = {
                currentValue: 0.2
            }
        

        const n_62_7_STATE = {
            previous: 0,
            coeff: 0,
        }
    

            const m_n_62_20_0_sig_STATE = {
                currentValue: 0.3
            }
        

            const n_62_20_STATE = {
                phase: 0,
                J: 0,
            }
            
            commons_waitEngineConfigure(() => {
                n_62_20_STATE.J = 2 * Math.PI / SAMPLE_RATE
            })
        

            const m_n_62_21_0_sig_STATE = {
                currentValue: 7
            }
        

            const n_62_21_STATE = {
                phase: 0,
                J: 0,
            }
            
            commons_waitEngineConfigure(() => {
                n_62_21_STATE.J = 2 * Math.PI / SAMPLE_RATE
            })
        




        const n_63_2_STATE = {
            previous: 0,
            coeff: 0,
        }
    

        const n_63_3_STATE = {
            previous: 0,
            coeff: 0,
        }
    

        const n_63_4_STATE = {
            previous: 0,
            coeff: 0,
        }
    

        const n_63_5_STATE = {
            previous: 0,
            coeff: 0,
        }
    

            const m_n_62_43_1_sig_STATE = {
                currentValue: 0.025
            }
        


            const n_62_35_STATE = {
                phase: 0,
                J: 0,
            }
            
            commons_waitEngineConfigure(() => {
                n_62_35_STATE.J = 1 / SAMPLE_RATE
            })
        






            const m_n_65_17_1_sig_STATE = {
                currentValue: 1
            }
        


            const m_n_62_14_0_sig_STATE = {
                currentValue: 0.03
            }
        

            const n_62_14_STATE = {
                phase: 0,
                J: 0,
            }
            
            commons_waitEngineConfigure(() => {
                n_62_14_STATE.J = 2 * Math.PI / SAMPLE_RATE
            })
        

            const m_n_62_15_0_sig_STATE = {
                currentValue: 0.05
            }
        

            const n_62_15_STATE = {
                phase: 0,
                J: 0,
            }
            
            commons_waitEngineConfigure(() => {
                n_62_15_STATE.J = 1 / SAMPLE_RATE
            })
        



            const m_n_65_22_1_sig_STATE = {
                currentValue: 0.7
            }
        



        const n_65_13_STATE = {
            delayName: '',
            buffer: DELAY_BUFFERS_NULL,
        }

        commons_waitEngineConfigure(() => {
            n_65_13_STATE.buffer = buf_create(
                toInt(Math.ceil(computeUnitInSamples(
                    SAMPLE_RATE, 
                    1000,
                    "msec"
                )))
            )
            if ("0-del-L".length) {
                n_delwrite_setDelayName(n_65_13_STATE, "0-del-L")
            }
        })
    

            const m_n_62_11_0_sig_STATE = {
                currentValue: 0.05
            }
        

            const n_62_11_STATE = {
                phase: 0,
                J: 0,
            }
            
            commons_waitEngineConfigure(() => {
                n_62_11_STATE.J = 2 * Math.PI / SAMPLE_RATE
            })
        

            const m_n_62_10_0_sig_STATE = {
                currentValue: 0.03
            }
        

            const n_62_10_STATE = {
                phase: 0,
                J: 0,
            }
            
            commons_waitEngineConfigure(() => {
                n_62_10_STATE.J = 1 / SAMPLE_RATE
            })
        



            const m_n_65_23_1_sig_STATE = {
                currentValue: 0.7
            }
        



        const n_65_14_STATE = {
            delayName: '',
            buffer: DELAY_BUFFERS_NULL,
        }

        commons_waitEngineConfigure(() => {
            n_65_14_STATE.buffer = buf_create(
                toInt(Math.ceil(computeUnitInSamples(
                    SAMPLE_RATE, 
                    1000,
                    "msec"
                )))
            )
            if ("0-del-R".length) {
                n_delwrite_setDelayName(n_65_14_STATE, "0-del-R")
            }
        })
    

        const exports = {
            metadata: {"libVersion":"0.1.0","audioSettings":{"bitDepth":64,"channelCount":{"in":2,"out":2},"sampleRate":0,"blockSize":0},"compilation":{"io":{"messageReceivers":{"n_0_65":{"portletIds":["0"],"metadata":{"group":"control:float","type":"hsl","label":"","position":[989,574],"initValue":0,"minValue":0,"maxValue":20}},"n_0_67":{"portletIds":["0"],"metadata":{"group":"control","type":"msg","position":[986,600]}},"n_0_70":{"portletIds":["0"],"metadata":{"group":"control:float","type":"floatatom","label":"empty","position":[569,140]}},"n_0_74":{"portletIds":["0"],"metadata":{"group":"control","type":"bng","label":"","position":[805,190]}},"n_0_75":{"portletIds":["0"],"metadata":{"group":"control:float","type":"floatatom","label":"empty","position":[986,333]}},"n_0_80":{"portletIds":["0"],"metadata":{"group":"control:float","type":"floatatom","label":"empty","position":[1079,465]}},"n_0_113":{"portletIds":["0"],"metadata":{"group":"control:float","type":"tgl","label":"","position":[54,94],"initValue":0,"minValue":0,"maxValue":1}},"n_0_117":{"portletIds":["0"],"metadata":{"group":"control","type":"msg","position":[845,113]}}},"messageSenders":{}},"variableNamesIndex":{"io":{"messageReceivers":{"n_0_65":{"0":"ioRcv_n_0_65_0"},"n_0_67":{"0":"ioRcv_n_0_67_0"},"n_0_70":{"0":"ioRcv_n_0_70_0"},"n_0_74":{"0":"ioRcv_n_0_74_0"},"n_0_75":{"0":"ioRcv_n_0_75_0"},"n_0_80":{"0":"ioRcv_n_0_80_0"},"n_0_113":{"0":"ioRcv_n_0_113_0"},"n_0_117":{"0":"ioRcv_n_0_117_0"}},"messageSenders":{}}}}},
            configure: (sampleRate, blockSize) => {
                exports.metadata.audioSettings.sampleRate = sampleRate
                exports.metadata.audioSettings.blockSize = blockSize
                SAMPLE_RATE = sampleRate
                BLOCK_SIZE = blockSize
                _commons_emitEngineConfigure()
            },
            loop: (INPUT, OUTPUT) => {
                
        for (F = 0; F < BLOCK_SIZE; F++) {
            _commons_emitFrame(FRAME)
            
        n_0_4_OUTS_0 = n_0_4_STATE.phase % 1
        n_0_4_STATE.phase += (n_0_4_STATE.J * m_n_0_4_0_sig_STATE.currentValue)
    

        setSignalBus(n_0_2_STATE.busName, (n_0_4_OUTS_0 * m_n_0_89_1_sig_STATE.currentValue))
    

        n_0_11_OUTS_0 = Math.cos(n_0_11_STATE.phase)
        n_0_11_STATE.phase += (n_0_11_STATE.J * m_n_0_11_0_sig_STATE.currentValue)
    

        n_0_12_OUTS_0 = Math.cos(n_0_12_STATE.phase)
        n_0_12_STATE.phase += (n_0_12_STATE.J * m_n_0_12_0_sig_STATE.currentValue)
    
n_49_4_OUTS_0 = (readSignalBus(n_49_0_STATE.busName) * readSignalBus(n_49_2_STATE.busName)) * m_n_49_4_1_sig_STATE.currentValue
n_0_105_OUTS_0 = ((Math.max(Math.min(n_0_6_STATE.maxValue, (((n_0_11_OUTS_0 + (readSignalBus(n_0_47_STATE.busName) * readSignalBus(n_0_48_STATE.busName))) * n_0_12_OUTS_0) + (readSignalBus(n_0_8_STATE.busName) * n_49_4_OUTS_0))), n_0_6_STATE.minValue)) + m_n_0_104_1_sig_STATE.currentValue) * m_n_0_105_1_sig_STATE.currentValue

        setSignalBus(n_0_9_STATE.busName, n_0_105_OUTS_0)
    

        setSignalBus(n_0_13_STATE.busName, n_0_105_OUTS_0)
    

        n_0_26_OUTS_0 = Math.cos(n_0_26_STATE.phase)
        n_0_26_STATE.phase += (n_0_26_STATE.J * m_n_0_26_0_sig_STATE.currentValue)
    

        n_0_53_OUTS_0 = Math.cos(n_0_53_STATE.phase)
        n_0_53_STATE.phase += (n_0_53_STATE.J * m_n_0_53_0_sig_STATE.currentValue)
    
n_51_3_OUTS_0 = (readSignalBus(n_51_6_STATE.busName) * readSignalBus(n_51_1_STATE.busName)) * m_n_51_3_1_sig_STATE.currentValue
n_0_107_OUTS_0 = ((Math.max(Math.min(n_0_15_STATE.maxValue, (((n_0_26_OUTS_0 + (readSignalBus(n_0_51_STATE.busName) * readSignalBus(n_0_52_STATE.busName))) * n_0_53_OUTS_0) + (readSignalBus(n_0_34_STATE.busName) * n_51_3_OUTS_0))), n_0_15_STATE.minValue)) + m_n_0_106_1_sig_STATE.currentValue) * m_n_0_107_1_sig_STATE.currentValue

        setSignalBus(n_0_31_STATE.busName, n_0_107_OUTS_0)
    

        n_0_28_OUTS_0 = Math.cos(n_0_28_STATE.phase)
        n_0_28_STATE.phase += (n_0_28_STATE.J * m_n_0_28_0_sig_STATE.currentValue)
    

        n_0_27_OUTS_0 = Math.cos(n_0_27_STATE.phase)
        n_0_27_STATE.phase += (n_0_27_STATE.J * m_n_0_27_0_sig_STATE.currentValue)
    
n_53_2_OUTS_0 = (readSignalBus(n_53_5_STATE.busName) * readSignalBus(n_53_6_STATE.busName)) * m_n_53_2_1_sig_STATE.currentValue
n_0_109_OUTS_0 = ((Math.max(Math.min(n_0_19_STATE.maxValue, (((n_0_28_OUTS_0 + (readSignalBus(n_0_55_STATE.busName) * readSignalBus(n_0_57_STATE.busName))) * n_0_27_OUTS_0) + (readSignalBus(n_0_38_STATE.busName) * n_53_2_OUTS_0))), n_0_19_STATE.minValue)) + m_n_0_108_1_sig_STATE.currentValue) * m_n_0_109_1_sig_STATE.currentValue

        setSignalBus(n_0_32_STATE.busName, n_0_109_OUTS_0)
    

        n_0_29_OUTS_0 = Math.cos(n_0_29_STATE.phase)
        n_0_29_STATE.phase += (n_0_29_STATE.J * m_n_0_29_0_sig_STATE.currentValue)
    

        n_0_30_OUTS_0 = Math.cos(n_0_30_STATE.phase)
        n_0_30_STATE.phase += (n_0_30_STATE.J * m_n_0_30_0_sig_STATE.currentValue)
    
n_55_2_OUTS_0 = (readSignalBus(n_55_6_STATE.busName) * readSignalBus(n_55_5_STATE.busName)) * m_n_55_2_1_sig_STATE.currentValue
n_0_111_OUTS_0 = ((Math.max(Math.min(n_0_23_STATE.maxValue, (((n_0_29_OUTS_0 + (readSignalBus(n_0_59_STATE.busName) * readSignalBus(n_0_60_STATE.busName))) * n_0_30_OUTS_0) + (readSignalBus(n_0_39_STATE.busName) * n_55_2_OUTS_0))), n_0_23_STATE.minValue)) + m_n_0_110_1_sig_STATE.currentValue) * m_n_0_111_1_sig_STATE.currentValue

        setSignalBus(n_0_33_STATE.busName, n_0_111_OUTS_0)
    

        setSignalBus(n_0_35_STATE.busName, n_0_107_OUTS_0)
    

        setSignalBus(n_0_36_STATE.busName, n_0_109_OUTS_0)
    

        setSignalBus(n_0_37_STATE.busName, n_0_111_OUTS_0)
    

        n_0_81_OUTS_0 = Math.cos(n_0_81_STATE.phase)
        n_0_81_STATE.phase += (n_0_81_STATE.J * m_n_0_81_0_sig_STATE.currentValue)
    

        n_0_68_OUTS_0 = Math.cos(n_0_68_STATE.phase)
        n_0_68_STATE.phase += (n_0_68_STATE.J * m_n_0_68_0_sig_STATE.currentValue)
    

    n_0_66_OUTS_0 = n_0_66_STATE.currentValue
    if (toFloat(FRAME) < n_0_66_STATE.currentLine.p1.x) {
        n_0_66_STATE.currentValue += n_0_66_STATE.currentLine.dy
        if (toFloat(FRAME + 1) >= n_0_66_STATE.currentLine.p1.x) {
            n_0_66_STATE.currentValue = n_0_66_STATE.currentLine.p1.y
        }
    }

n_0_63_OUTS_0 = Math.cos((n_0_81_OUTS_0 + (n_0_68_OUTS_0 * n_0_66_OUTS_0)) * 2 * Math.PI)

        setSignalBus(n_0_46_STATE.busName, n_0_63_OUTS_0)
    

        n_0_76_OUTS_0 = n_0_76_STATE.phase % 1
        n_0_76_STATE.phase += (n_0_76_STATE.J * m_n_0_76_0_sig_STATE.currentValue)
    

    n_0_72_STATE.signalMemory = n_0_72_OUTS_0 = n_0_76_OUTS_0 < n_0_72_STATE.controlMemory ? n_0_63_OUTS_0: n_0_72_STATE.signalMemory
    n_0_72_STATE.controlMemory = n_0_76_OUTS_0


    n_0_73_STATE.currentValue = ((n_0_72_OUTS_0 + m_n_0_118_1_sig_STATE.currentValue) * m_n_0_119_1_sig_STATE.currentValue)

n_79_5_OUTS_0 = buf_readSample(n_79_5_STATE.buffer, toInt(Math.round(
            Math.min(
                Math.max(computeUnitInSamples(SAMPLE_RATE, m_n_79_5_0_sig_STATE.currentValue, "msec"), 0), 
                toFloat(n_79_5_STATE.buffer.length - 1)
            )
        )))

    n_79_24_OUTS_0 = n_79_24_STATE.currentValue
    if (toFloat(FRAME) < n_79_24_STATE.currentLine.p1.x) {
        n_79_24_STATE.currentValue += n_79_24_STATE.currentLine.dy
        if (toFloat(FRAME + 1) >= n_79_24_STATE.currentLine.p1.x) {
            n_79_24_STATE.currentValue = n_79_24_STATE.currentLine.p1.y
        }
    }


        addAssignSignalBus(n_29_29_STATE.busName, (n_79_5_OUTS_0 * n_79_24_OUTS_0))
    
n_82_5_OUTS_0 = buf_readSample(n_82_5_STATE.buffer, toInt(Math.round(
            Math.min(
                Math.max(computeUnitInSamples(SAMPLE_RATE, m_n_82_5_0_sig_STATE.currentValue, "msec"), 0), 
                toFloat(n_82_5_STATE.buffer.length - 1)
            )
        )))

    n_82_24_OUTS_0 = n_82_24_STATE.currentValue
    if (toFloat(FRAME) < n_82_24_STATE.currentLine.p1.x) {
        n_82_24_STATE.currentValue += n_82_24_STATE.currentLine.dy
        if (toFloat(FRAME + 1) >= n_82_24_STATE.currentLine.p1.x) {
            n_82_24_STATE.currentValue = n_82_24_STATE.currentLine.p1.y
        }
    }


        addAssignSignalBus(n_29_30_STATE.busName, (n_82_5_OUTS_0 * n_82_24_OUTS_0))
    
n_82_17_OUTS_0 = buf_readSample(n_82_17_STATE.buffer, toInt(Math.round(
            Math.min(
                Math.max(computeUnitInSamples(SAMPLE_RATE, m_n_82_17_0_sig_STATE.currentValue, "msec"), 0), 
                toFloat(n_82_17_STATE.buffer.length - 1)
            )
        )))

        addAssignSignalBus(n_29_31_STATE.busName, (n_82_17_OUTS_0 * n_82_24_OUTS_0))
    
n_81_5_OUTS_0 = buf_readSample(n_81_5_STATE.buffer, toInt(Math.round(
            Math.min(
                Math.max(computeUnitInSamples(SAMPLE_RATE, m_n_81_5_0_sig_STATE.currentValue, "msec"), 0), 
                toFloat(n_81_5_STATE.buffer.length - 1)
            )
        )))

    n_81_24_OUTS_0 = n_81_24_STATE.currentValue
    if (toFloat(FRAME) < n_81_24_STATE.currentLine.p1.x) {
        n_81_24_STATE.currentValue += n_81_24_STATE.currentLine.dy
        if (toFloat(FRAME + 1) >= n_81_24_STATE.currentLine.p1.x) {
            n_81_24_STATE.currentValue = n_81_24_STATE.currentLine.p1.y
        }
    }


        addAssignSignalBus(n_29_32_STATE.busName, (n_81_5_OUTS_0 * n_81_24_OUTS_0))
    
n_81_17_OUTS_0 = buf_readSample(n_81_17_STATE.buffer, toInt(Math.round(
            Math.min(
                Math.max(computeUnitInSamples(SAMPLE_RATE, m_n_81_17_0_sig_STATE.currentValue, "msec"), 0), 
                toFloat(n_81_17_STATE.buffer.length - 1)
            )
        )))

        addAssignSignalBus(n_29_33_STATE.busName, (n_81_17_OUTS_0 * n_81_24_OUTS_0))
    
n_80_5_OUTS_0 = buf_readSample(n_80_5_STATE.buffer, toInt(Math.round(
            Math.min(
                Math.max(computeUnitInSamples(SAMPLE_RATE, m_n_80_5_0_sig_STATE.currentValue, "msec"), 0), 
                toFloat(n_80_5_STATE.buffer.length - 1)
            )
        )))

    n_80_24_OUTS_0 = n_80_24_STATE.currentValue
    if (toFloat(FRAME) < n_80_24_STATE.currentLine.p1.x) {
        n_80_24_STATE.currentValue += n_80_24_STATE.currentLine.dy
        if (toFloat(FRAME + 1) >= n_80_24_STATE.currentLine.p1.x) {
            n_80_24_STATE.currentValue = n_80_24_STATE.currentLine.p1.y
        }
    }


        addAssignSignalBus(n_29_34_STATE.busName, (n_80_5_OUTS_0 * n_80_24_OUTS_0))
    
n_80_17_OUTS_0 = buf_readSample(n_80_17_STATE.buffer, toInt(Math.round(
            Math.min(
                Math.max(computeUnitInSamples(SAMPLE_RATE, m_n_80_17_0_sig_STATE.currentValue, "msec"), 0), 
                toFloat(n_80_17_STATE.buffer.length - 1)
            )
        )))

        addAssignSignalBus(n_29_35_STATE.busName, (n_80_17_OUTS_0 * n_80_24_OUTS_0))
    
n_31_30_OUTS_0 = readSignalBus(n_31_29_STATE.busName) * m_n_31_30_1_sig_STATE.currentValue

        n_31_0_OUTS_0 = n_31_0_STATE.phase % 1
        n_31_0_STATE.phase += (n_31_0_STATE.J * n_31_30_OUTS_0)
    

    n_31_113_OUTS_0 = n_31_113_STATE.currentValue
    if (toFloat(FRAME) < n_31_113_STATE.currentLine.p1.x) {
        n_31_113_STATE.currentValue += n_31_113_STATE.currentLine.dy
        if (toFloat(FRAME + 1) >= n_31_113_STATE.currentLine.p1.x) {
            n_31_113_STATE.currentValue = n_31_113_STATE.currentLine.p1.y
        }
    }

n_31_110_OUTS_0 = (1 + ((n_31_0_OUTS_0 + n_31_113_OUTS_0) % 1)) % 1

    n_71_2_STATE.signalMemory = n_71_2_OUTS_0 = n_31_110_OUTS_0 < n_71_2_STATE.controlMemory ? ((n_71_48_STATE.currentValue * ((Math.abs(readSignalBus(n_31_32_STATE.busName)) + m_n_71_42_1_sig_STATE.currentValue) !== 0 ? n_71_52_STATE.currentValue / (Math.abs(readSignalBus(n_31_32_STATE.busName)) + m_n_71_42_1_sig_STATE.currentValue) : 0)) + ((Math.random() * 2 - 1) * m_n_71_38_1_sig_STATE.currentValue)): n_71_2_STATE.signalMemory
    n_71_2_STATE.controlMemory = n_31_110_OUTS_0


    n_31_106_OUTS_0 = n_31_106_STATE.currentValue
    if (toFloat(FRAME) < n_31_106_STATE.currentLine.p1.x) {
        n_31_106_STATE.currentValue += n_31_106_STATE.currentLine.dy
        if (toFloat(FRAME + 1) >= n_31_106_STATE.currentLine.p1.x) {
            n_31_106_STATE.currentValue = n_31_106_STATE.currentLine.p1.y
        }
    }


    n_71_1_STATE.signalMemory = n_71_1_OUTS_0 = n_31_110_OUTS_0 < n_71_1_STATE.controlMemory ? ((1 + ((n_31_106_OUTS_0 + (((Math.random() * 2 - 1) * m_n_71_23_1_sig_STATE.currentValue) + (readSignalBus(n_71_28_STATE.busName) * m_n_71_40_1_sig_STATE.currentValue))) % 1)) % 1): n_71_1_STATE.signalMemory
    n_71_1_STATE.controlMemory = n_31_110_OUTS_0


    n_lop_t_setFreq(n_71_41_STATE, m_n_71_41_1_sig_STATE.currentValue)
    n_71_41_STATE.previous = n_71_41_OUTS_0 = n_71_41_STATE.coeff * n_71_1_OUTS_0 + (1 - n_71_41_STATE.coeff) * n_71_41_STATE.previous


    n_lop_t_setFreq(n_30_2_STATE, m_n_30_2_1_sig_STATE.currentValue)
    n_30_2_STATE.previous = n_30_2_OUTS_0 = n_30_2_STATE.coeff * (((n_71_53_STATE.array[toInt(Math.max(Math.min(Math.floor((((n_31_110_OUTS_0 * n_71_2_OUTS_0) + n_71_41_OUTS_0) * m_n_71_0_1_sig_STATE.currentValue)), n_71_53_STATE.array.length - 1), 0))]) * (n_71_54_STATE.array[toInt(Math.max(Math.min(Math.floor((n_31_110_OUTS_0 * m_n_71_19_1_sig_STATE.currentValue)), n_71_54_STATE.array.length - 1), 0))])) * m_n_31_116_1_sig_STATE.currentValue) + (1 - n_30_2_STATE.coeff) * n_30_2_STATE.previous


    n_lop_t_setFreq(n_30_3_STATE, m_n_30_3_1_sig_STATE.currentValue)
    n_30_3_STATE.previous = n_30_3_OUTS_0 = n_30_3_STATE.coeff * n_30_2_OUTS_0 + (1 - n_30_3_STATE.coeff) * n_30_3_STATE.previous


    n_lop_t_setFreq(n_30_4_STATE, m_n_30_4_1_sig_STATE.currentValue)
    n_30_4_STATE.previous = n_30_4_OUTS_0 = n_30_4_STATE.coeff * n_30_3_OUTS_0 + (1 - n_30_4_STATE.coeff) * n_30_4_STATE.previous


    n_lop_t_setFreq(n_30_5_STATE, m_n_30_5_1_sig_STATE.currentValue)
    n_30_5_STATE.previous = n_30_5_OUTS_0 = n_30_5_STATE.coeff * n_30_4_OUTS_0 + (1 - n_30_5_STATE.coeff) * n_30_5_STATE.previous

n_29_17_OUTS_0 = n_30_5_OUTS_0 * readSignalBus(n_29_19_STATE.busName)
n_29_16_OUTS_0 = n_29_17_OUTS_0 * m_n_29_16_1_sig_STATE.currentValue
n_31_33_OUTS_0 = readSignalBus(n_31_75_STATE.busName) * m_n_31_33_1_sig_STATE.currentValue

        n_31_14_OUTS_0 = n_31_14_STATE.phase % 1
        n_31_14_STATE.phase += (n_31_14_STATE.J * n_31_33_OUTS_0)
    

    n_31_101_OUTS_0 = n_31_101_STATE.currentValue
    if (toFloat(FRAME) < n_31_101_STATE.currentLine.p1.x) {
        n_31_101_STATE.currentValue += n_31_101_STATE.currentLine.dy
        if (toFloat(FRAME + 1) >= n_31_101_STATE.currentLine.p1.x) {
            n_31_101_STATE.currentValue = n_31_101_STATE.currentLine.p1.y
        }
    }

n_31_1_OUTS_0 = (1 + ((n_31_14_OUTS_0 + n_31_101_OUTS_0) % 1)) % 1

    n_lop_t_setFreq(n_31_89_STATE, m_n_31_89_1_sig_STATE.currentValue)
    n_31_89_STATE.previous = n_31_89_OUTS_0 = n_31_89_STATE.coeff * Math.abs(readSignalBus(n_31_46_STATE.busName)) + (1 - n_31_89_STATE.coeff) * n_31_89_STATE.previous


    n_73_2_STATE.signalMemory = n_73_2_OUTS_0 = n_31_1_OUTS_0 < n_73_2_STATE.controlMemory ? ((n_73_48_STATE.currentValue * ((n_31_89_OUTS_0 + m_n_73_42_1_sig_STATE.currentValue) !== 0 ? n_73_52_STATE.currentValue / (n_31_89_OUTS_0 + m_n_73_42_1_sig_STATE.currentValue) : 0)) + ((Math.random() * 2 - 1) * m_n_73_38_1_sig_STATE.currentValue)): n_73_2_STATE.signalMemory
    n_73_2_STATE.controlMemory = n_31_1_OUTS_0


    n_31_107_OUTS_0 = n_31_107_STATE.currentValue
    if (toFloat(FRAME) < n_31_107_STATE.currentLine.p1.x) {
        n_31_107_STATE.currentValue += n_31_107_STATE.currentLine.dy
        if (toFloat(FRAME + 1) >= n_31_107_STATE.currentLine.p1.x) {
            n_31_107_STATE.currentValue = n_31_107_STATE.currentLine.p1.y
        }
    }


    n_73_1_STATE.signalMemory = n_73_1_OUTS_0 = n_31_1_OUTS_0 < n_73_1_STATE.controlMemory ? ((1 + ((n_31_107_OUTS_0 + (((Math.random() * 2 - 1) * m_n_73_23_1_sig_STATE.currentValue) + (readSignalBus(n_73_28_STATE.busName) * m_n_73_40_1_sig_STATE.currentValue))) % 1)) % 1): n_73_1_STATE.signalMemory
    n_73_1_STATE.controlMemory = n_31_1_OUTS_0


    n_lop_t_setFreq(n_73_41_STATE, m_n_73_41_1_sig_STATE.currentValue)
    n_73_41_STATE.previous = n_73_41_OUTS_0 = n_73_41_STATE.coeff * n_73_1_OUTS_0 + (1 - n_73_41_STATE.coeff) * n_73_41_STATE.previous


    n_lop_t_setFreq(n_38_2_STATE, m_n_38_2_1_sig_STATE.currentValue)
    n_38_2_STATE.previous = n_38_2_OUTS_0 = n_38_2_STATE.coeff * (((n_73_53_STATE.array[toInt(Math.max(Math.min(Math.floor((((n_31_1_OUTS_0 * n_73_2_OUTS_0) + n_73_41_OUTS_0) * m_n_73_0_1_sig_STATE.currentValue)), n_73_53_STATE.array.length - 1), 0))]) * (n_73_54_STATE.array[toInt(Math.max(Math.min(Math.floor((n_31_1_OUTS_0 * m_n_73_19_1_sig_STATE.currentValue)), n_73_54_STATE.array.length - 1), 0))])) * m_n_31_115_1_sig_STATE.currentValue) + (1 - n_38_2_STATE.coeff) * n_38_2_STATE.previous


    n_lop_t_setFreq(n_38_3_STATE, m_n_38_3_1_sig_STATE.currentValue)
    n_38_3_STATE.previous = n_38_3_OUTS_0 = n_38_3_STATE.coeff * n_38_2_OUTS_0 + (1 - n_38_3_STATE.coeff) * n_38_3_STATE.previous


    n_lop_t_setFreq(n_38_4_STATE, m_n_38_4_1_sig_STATE.currentValue)
    n_38_4_STATE.previous = n_38_4_OUTS_0 = n_38_4_STATE.coeff * n_38_3_OUTS_0 + (1 - n_38_4_STATE.coeff) * n_38_4_STATE.previous


    n_lop_t_setFreq(n_38_5_STATE, m_n_38_5_1_sig_STATE.currentValue)
    n_38_5_STATE.previous = n_38_5_OUTS_0 = n_38_5_STATE.coeff * n_38_4_OUTS_0 + (1 - n_38_5_STATE.coeff) * n_38_5_STATE.previous

n_29_21_OUTS_0 = n_38_5_OUTS_0 * readSignalBus(n_29_70_STATE.busName)
n_29_20_OUTS_0 = n_29_21_OUTS_0 * m_n_29_20_1_sig_STATE.currentValue
n_31_34_OUTS_0 = readSignalBus(n_31_76_STATE.busName) * m_n_31_34_1_sig_STATE.currentValue

        n_31_15_OUTS_0 = n_31_15_STATE.phase % 1
        n_31_15_STATE.phase += (n_31_15_STATE.J * n_31_34_OUTS_0)
    

    n_31_99_OUTS_0 = n_31_99_STATE.currentValue
    if (toFloat(FRAME) < n_31_99_STATE.currentLine.p1.x) {
        n_31_99_STATE.currentValue += n_31_99_STATE.currentLine.dy
        if (toFloat(FRAME + 1) >= n_31_99_STATE.currentLine.p1.x) {
            n_31_99_STATE.currentValue = n_31_99_STATE.currentLine.p1.y
        }
    }

n_31_2_OUTS_0 = (1 + ((n_31_15_OUTS_0 + n_31_99_OUTS_0) % 1)) % 1

    n_lop_t_setFreq(n_31_90_STATE, m_n_31_90_1_sig_STATE.currentValue)
    n_31_90_STATE.previous = n_31_90_OUTS_0 = n_31_90_STATE.coeff * Math.abs(readSignalBus(n_31_49_STATE.busName)) + (1 - n_31_90_STATE.coeff) * n_31_90_STATE.previous


    n_75_2_STATE.signalMemory = n_75_2_OUTS_0 = n_31_2_OUTS_0 < n_75_2_STATE.controlMemory ? ((n_75_48_STATE.currentValue * ((n_31_90_OUTS_0 + m_n_75_42_1_sig_STATE.currentValue) !== 0 ? n_75_52_STATE.currentValue / (n_31_90_OUTS_0 + m_n_75_42_1_sig_STATE.currentValue) : 0)) + ((Math.random() * 2 - 1) * m_n_75_38_1_sig_STATE.currentValue)): n_75_2_STATE.signalMemory
    n_75_2_STATE.controlMemory = n_31_2_OUTS_0


    n_31_108_OUTS_0 = n_31_108_STATE.currentValue
    if (toFloat(FRAME) < n_31_108_STATE.currentLine.p1.x) {
        n_31_108_STATE.currentValue += n_31_108_STATE.currentLine.dy
        if (toFloat(FRAME + 1) >= n_31_108_STATE.currentLine.p1.x) {
            n_31_108_STATE.currentValue = n_31_108_STATE.currentLine.p1.y
        }
    }


    n_75_1_STATE.signalMemory = n_75_1_OUTS_0 = n_31_2_OUTS_0 < n_75_1_STATE.controlMemory ? ((1 + ((n_31_108_OUTS_0 + (((Math.random() * 2 - 1) * m_n_75_23_1_sig_STATE.currentValue) + (readSignalBus(n_75_28_STATE.busName) * m_n_75_40_1_sig_STATE.currentValue))) % 1)) % 1): n_75_1_STATE.signalMemory
    n_75_1_STATE.controlMemory = n_31_2_OUTS_0


    n_lop_t_setFreq(n_75_41_STATE, m_n_75_41_1_sig_STATE.currentValue)
    n_75_41_STATE.previous = n_75_41_OUTS_0 = n_75_41_STATE.coeff * n_75_1_OUTS_0 + (1 - n_75_41_STATE.coeff) * n_75_41_STATE.previous


    n_lop_t_setFreq(n_39_2_STATE, m_n_39_2_1_sig_STATE.currentValue)
    n_39_2_STATE.previous = n_39_2_OUTS_0 = n_39_2_STATE.coeff * (((n_75_53_STATE.array[toInt(Math.max(Math.min(Math.floor((((n_31_2_OUTS_0 * n_75_2_OUTS_0) + n_75_41_OUTS_0) * m_n_75_0_1_sig_STATE.currentValue)), n_75_53_STATE.array.length - 1), 0))]) * (n_75_54_STATE.array[toInt(Math.max(Math.min(Math.floor((n_31_2_OUTS_0 * m_n_75_19_1_sig_STATE.currentValue)), n_75_54_STATE.array.length - 1), 0))])) * m_n_31_117_1_sig_STATE.currentValue) + (1 - n_39_2_STATE.coeff) * n_39_2_STATE.previous


    n_lop_t_setFreq(n_39_3_STATE, m_n_39_3_1_sig_STATE.currentValue)
    n_39_3_STATE.previous = n_39_3_OUTS_0 = n_39_3_STATE.coeff * n_39_2_OUTS_0 + (1 - n_39_3_STATE.coeff) * n_39_3_STATE.previous


    n_lop_t_setFreq(n_39_4_STATE, m_n_39_4_1_sig_STATE.currentValue)
    n_39_4_STATE.previous = n_39_4_OUTS_0 = n_39_4_STATE.coeff * n_39_3_OUTS_0 + (1 - n_39_4_STATE.coeff) * n_39_4_STATE.previous


    n_lop_t_setFreq(n_39_5_STATE, m_n_39_5_1_sig_STATE.currentValue)
    n_39_5_STATE.previous = n_39_5_OUTS_0 = n_39_5_STATE.coeff * n_39_4_OUTS_0 + (1 - n_39_5_STATE.coeff) * n_39_5_STATE.previous

n_29_24_OUTS_0 = n_39_5_OUTS_0 * readSignalBus(n_29_71_STATE.busName)
n_29_23_OUTS_0 = n_29_24_OUTS_0 * m_n_29_23_1_sig_STATE.currentValue

    n_lop_t_setFreq(n_40_4_STATE, m_n_40_4_1_sig_STATE.currentValue)
    n_40_4_STATE.previous = n_40_4_OUTS_0 = n_40_4_STATE.coeff * m_n_40_4_0_sig_STATE.currentValue + (1 - n_40_4_STATE.coeff) * n_40_4_STATE.previous


    n_lop_t_setFreq(n_40_5_STATE, m_n_40_5_1_sig_STATE.currentValue)
    n_40_5_STATE.previous = n_40_5_OUTS_0 = n_40_5_STATE.coeff * n_40_4_OUTS_0 + (1 - n_40_5_STATE.coeff) * n_40_5_STATE.previous

n_29_27_OUTS_0 = n_40_5_OUTS_0 * readSignalBus(n_29_72_STATE.busName)
n_29_26_OUTS_0 = n_29_27_OUTS_0 * m_n_29_26_1_sig_STATE.currentValue

        n_29_36_OUTS_0 = readSignalBus(n_29_36_STATE.busName)
        resetSignalBus(n_29_36_STATE.busName)
    
n_29_69_OUTS_0 = readSignalBus(n_29_69_STATE.busName)

    n_29_66_OUTS_0 = n_29_66_STATE.currentValue
    if (toFloat(FRAME) < n_29_66_STATE.currentLine.p1.x) {
        n_29_66_STATE.currentValue += n_29_66_STATE.currentLine.dy
        if (toFloat(FRAME + 1) >= n_29_66_STATE.currentLine.p1.x) {
            n_29_66_STATE.currentValue = n_29_66_STATE.currentLine.p1.y
        }
    }

OUTPUT[0][F] = (((((((n_29_16_OUTS_0 + n_29_20_OUTS_0 + n_29_23_OUTS_0 + n_29_26_OUTS_0 + ((n_29_36_OUTS_0 * m_n_29_61_1_sig_STATE.currentValue) * m_n_29_38_1_sig_STATE.currentValue) + n_29_69_OUTS_0) + m_n_29_49_1_sig_STATE.currentValue) * m_n_29_59_1_sig_STATE.currentValue) * m_n_29_74_1_sig_STATE.currentValue) * m_n_29_78_1_sig_STATE.currentValue) * n_29_66_OUTS_0) * m_n_29_57_1_sig_STATE.currentValue)

        n_29_37_OUTS_0 = readSignalBus(n_29_37_STATE.busName)
        resetSignalBus(n_29_37_STATE.busName)
    
OUTPUT[1][F] = (((((((n_29_16_OUTS_0 + n_29_20_OUTS_0 + n_29_23_OUTS_0 + n_29_26_OUTS_0 + ((n_29_37_OUTS_0 * m_n_29_62_1_sig_STATE.currentValue) * m_n_29_40_1_sig_STATE.currentValue) + n_29_69_OUTS_0) + m_n_29_50_1_sig_STATE.currentValue) * m_n_29_60_1_sig_STATE.currentValue) * m_n_29_73_1_sig_STATE.currentValue) * m_n_29_79_1_sig_STATE.currentValue) * n_29_66_OUTS_0) * m_n_29_58_1_sig_STATE.currentValue)
n_79_17_OUTS_0 = buf_readSample(n_79_17_STATE.buffer, toInt(Math.round(
            Math.min(
                Math.max(computeUnitInSamples(SAMPLE_RATE, m_n_79_17_0_sig_STATE.currentValue, "msec"), 0), 
                toFloat(n_79_17_STATE.buffer.length - 1)
            )
        )))

        addAssignSignalBus(n_29_56_STATE.busName, (n_79_17_OUTS_0 * n_79_24_OUTS_0))
    

        setSignalBus(n_31_31_STATE.busName, n_31_30_OUTS_0)
    
n_31_35_OUTS_0 = readSignalBus(n_31_77_STATE.busName) * m_n_31_35_1_sig_STATE.currentValue

        setSignalBus(n_31_36_STATE.busName, n_31_35_OUTS_0)
    

        setSignalBus(n_31_37_STATE.busName, n_31_34_OUTS_0)
    

        setSignalBus(n_31_38_STATE.busName, n_31_33_OUTS_0)
    
n_79_19_OUTS_0 = (n_29_17_OUTS_0 * readSignalBus(n_29_42_STATE.busName)) * m_n_79_19_1_sig_STATE.currentValue
buf_writeSample(n_79_15_STATE.buffer, ((n_79_5_OUTS_0 * m_n_79_2_1_sig_STATE.currentValue) + n_79_19_OUTS_0))
buf_writeSample(n_79_16_STATE.buffer, ((n_79_17_OUTS_0 * m_n_79_1_1_sig_STATE.currentValue) + n_79_19_OUTS_0))
n_80_19_OUTS_0 = (n_29_27_OUTS_0 * readSignalBus(n_29_47_STATE.busName)) * m_n_80_19_1_sig_STATE.currentValue
buf_writeSample(n_80_15_STATE.buffer, ((n_80_5_OUTS_0 * m_n_80_2_1_sig_STATE.currentValue) + n_80_19_OUTS_0))
buf_writeSample(n_80_16_STATE.buffer, ((n_80_17_OUTS_0 * m_n_80_1_1_sig_STATE.currentValue) + n_80_19_OUTS_0))
n_81_19_OUTS_0 = (n_29_24_OUTS_0 * readSignalBus(n_29_48_STATE.busName)) * m_n_81_19_1_sig_STATE.currentValue
buf_writeSample(n_81_15_STATE.buffer, ((n_81_5_OUTS_0 * m_n_81_2_1_sig_STATE.currentValue) + n_81_19_OUTS_0))
buf_writeSample(n_81_16_STATE.buffer, ((n_81_17_OUTS_0 * m_n_81_1_1_sig_STATE.currentValue) + n_81_19_OUTS_0))
n_82_19_OUTS_0 = (n_29_21_OUTS_0 * readSignalBus(n_29_44_STATE.busName)) * m_n_82_19_1_sig_STATE.currentValue
buf_writeSample(n_82_15_STATE.buffer, ((n_82_5_OUTS_0 * m_n_82_2_1_sig_STATE.currentValue) + n_82_19_OUTS_0))
buf_writeSample(n_82_16_STATE.buffer, ((n_82_17_OUTS_0 * m_n_82_1_1_sig_STATE.currentValue) + n_82_19_OUTS_0))

        n_41_20_OUTS_0 = n_41_20_STATE.phase % 1
        n_41_20_STATE.phase += (n_41_20_STATE.J * m_n_41_20_0_sig_STATE.currentValue)
    

    n_41_18_STATE.signalMemory = n_41_18_OUTS_0 = n_41_20_OUTS_0 < n_41_18_STATE.controlMemory ? n_0_105_OUTS_0: n_41_18_STATE.signalMemory
    n_41_18_STATE.controlMemory = n_41_20_OUTS_0


        setSignalBus(n_41_19_STATE.busName, n_41_18_OUTS_0)
    

        setSignalBus(n_42_43_STATE.busName, (m_n_42_31_0_sig_STATE.currentValue * m_n_42_31_1_sig_STATE.currentValue))
    
n_83_17_OUTS_0 = +(n_0_105_OUTS_0 >= n_83_17_STATE.floatInputs.get(1))

    n_83_1_STATE.currentValue = n_83_17_OUTS_0

n_85_17_OUTS_0 = +(n_0_105_OUTS_0 >= n_85_17_STATE.floatInputs.get(1))

    n_85_1_STATE.currentValue = n_85_17_OUTS_0

n_87_17_OUTS_0 = +(n_0_105_OUTS_0 >= n_87_17_STATE.floatInputs.get(1))

    n_87_1_STATE.currentValue = n_87_17_OUTS_0

n_89_17_OUTS_0 = +(n_0_105_OUTS_0 >= n_89_17_STATE.floatInputs.get(1))

    n_89_1_STATE.currentValue = n_89_17_OUTS_0

n_91_17_OUTS_0 = +(n_0_105_OUTS_0 >= n_91_17_STATE.floatInputs.get(1))

    n_91_1_STATE.currentValue = n_91_17_OUTS_0

n_93_17_OUTS_0 = +(n_0_105_OUTS_0 >= n_93_17_STATE.floatInputs.get(1))

    n_93_1_STATE.currentValue = n_93_17_OUTS_0


        n_43_23_OUTS_0 = n_43_23_STATE.phase % 1
        n_43_23_STATE.phase += (n_43_23_STATE.J * m_n_43_23_0_sig_STATE.currentValue)
    

    n_43_21_STATE.signalMemory = n_43_21_OUTS_0 = n_43_23_OUTS_0 < n_43_21_STATE.controlMemory ? n_0_107_OUTS_0: n_43_21_STATE.signalMemory
    n_43_21_STATE.controlMemory = n_43_23_OUTS_0


        setSignalBus(n_43_22_STATE.busName, n_43_21_OUTS_0)
    

        setSignalBus(n_44_3_STATE.busName, (m_n_44_40_0_sig_STATE.currentValue * m_n_44_40_1_sig_STATE.currentValue))
    
n_95_17_OUTS_0 = +(n_0_107_OUTS_0 >= n_95_17_STATE.floatInputs.get(1))

    n_95_1_STATE.currentValue = n_95_17_OUTS_0

n_97_17_OUTS_0 = +(n_0_107_OUTS_0 >= n_97_17_STATE.floatInputs.get(1))

    n_97_1_STATE.currentValue = n_97_17_OUTS_0

n_99_17_OUTS_0 = +(n_0_107_OUTS_0 >= n_99_17_STATE.floatInputs.get(1))

    n_99_1_STATE.currentValue = n_99_17_OUTS_0

n_101_17_OUTS_0 = +(n_0_107_OUTS_0 >= n_101_17_STATE.floatInputs.get(1))

    n_101_1_STATE.currentValue = n_101_17_OUTS_0

n_103_17_OUTS_0 = +(n_0_107_OUTS_0 >= n_103_17_STATE.floatInputs.get(1))

    n_103_1_STATE.currentValue = n_103_17_OUTS_0

n_105_17_OUTS_0 = +(n_0_107_OUTS_0 >= n_105_17_STATE.floatInputs.get(1))

    n_105_1_STATE.currentValue = n_105_17_OUTS_0


        n_45_24_OUTS_0 = n_45_24_STATE.phase % 1
        n_45_24_STATE.phase += (n_45_24_STATE.J * m_n_45_24_0_sig_STATE.currentValue)
    

    n_45_22_STATE.signalMemory = n_45_22_OUTS_0 = n_45_24_OUTS_0 < n_45_22_STATE.controlMemory ? n_0_109_OUTS_0: n_45_22_STATE.signalMemory
    n_45_22_STATE.controlMemory = n_45_24_OUTS_0


        setSignalBus(n_45_23_STATE.busName, n_45_22_OUTS_0)
    

        setSignalBus(n_46_43_STATE.busName, (m_n_46_31_0_sig_STATE.currentValue * m_n_46_31_1_sig_STATE.currentValue))
    
n_107_17_OUTS_0 = +(n_0_109_OUTS_0 >= n_107_17_STATE.floatInputs.get(1))

    n_107_1_STATE.currentValue = n_107_17_OUTS_0

n_109_17_OUTS_0 = +(n_0_109_OUTS_0 >= n_109_17_STATE.floatInputs.get(1))

    n_109_1_STATE.currentValue = n_109_17_OUTS_0

n_111_17_OUTS_0 = +(n_0_109_OUTS_0 >= n_111_17_STATE.floatInputs.get(1))

    n_111_1_STATE.currentValue = n_111_17_OUTS_0

n_113_17_OUTS_0 = +(n_0_109_OUTS_0 >= n_113_17_STATE.floatInputs.get(1))

    n_113_1_STATE.currentValue = n_113_17_OUTS_0

n_115_17_OUTS_0 = +(n_0_109_OUTS_0 >= n_115_17_STATE.floatInputs.get(1))

    n_115_1_STATE.currentValue = n_115_17_OUTS_0

n_117_17_OUTS_0 = +(n_0_109_OUTS_0 >= n_117_17_STATE.floatInputs.get(1))

    n_117_1_STATE.currentValue = n_117_17_OUTS_0


        n_47_26_OUTS_0 = n_47_26_STATE.phase % 1
        n_47_26_STATE.phase += (n_47_26_STATE.J * m_n_47_26_0_sig_STATE.currentValue)
    

    n_47_25_STATE.signalMemory = n_47_25_OUTS_0 = n_47_26_OUTS_0 < n_47_25_STATE.controlMemory ? n_0_111_OUTS_0: n_47_25_STATE.signalMemory
    n_47_25_STATE.controlMemory = n_47_26_OUTS_0


        setSignalBus(n_47_27_STATE.busName, n_47_25_OUTS_0)
    

        setSignalBus(n_48_43_STATE.busName, (m_n_48_31_0_sig_STATE.currentValue * m_n_48_31_1_sig_STATE.currentValue))
    
n_119_17_OUTS_0 = +(n_0_111_OUTS_0 >= n_119_17_STATE.floatInputs.get(1))

    n_119_1_STATE.currentValue = n_119_17_OUTS_0

n_121_17_OUTS_0 = +(n_0_111_OUTS_0 >= n_121_17_STATE.floatInputs.get(1))

    n_121_1_STATE.currentValue = n_121_17_OUTS_0

n_123_17_OUTS_0 = +(n_0_111_OUTS_0 >= n_123_17_STATE.floatInputs.get(1))

    n_123_1_STATE.currentValue = n_123_17_OUTS_0

n_125_17_OUTS_0 = +(n_0_111_OUTS_0 >= n_125_17_STATE.floatInputs.get(1))

    n_125_1_STATE.currentValue = n_125_17_OUTS_0

n_127_17_OUTS_0 = +(n_0_111_OUTS_0 >= n_127_17_STATE.floatInputs.get(1))

    n_127_1_STATE.currentValue = n_127_17_OUTS_0

n_129_17_OUTS_0 = +(n_0_111_OUTS_0 >= n_129_17_STATE.floatInputs.get(1))

    n_129_1_STATE.currentValue = n_129_17_OUTS_0


    n_50_3_STATE.currentValue = n_49_4_OUTS_0


    n_52_3_STATE.currentValue = n_51_3_OUTS_0


    n_54_3_STATE.currentValue = n_53_2_OUTS_0


    n_56_3_STATE.currentValue = n_55_2_OUTS_0


    n_61_0_OUTS_0 = n_61_0_STATE.currentValue
    if (toFloat(FRAME) < n_61_0_STATE.currentLine.p1.x) {
        n_61_0_STATE.currentValue += n_61_0_STATE.currentLine.dy
        if (toFloat(FRAME + 1) >= n_61_0_STATE.currentLine.p1.x) {
            n_61_0_STATE.currentValue = n_61_0_STATE.currentLine.p1.y
        }
    }

n_61_1_OUTS_0 = n_61_0_OUTS_0 * n_61_0_OUTS_0

        n_57_1_OUTS_0 = Math.cos(n_57_1_STATE.phase)
        n_57_1_STATE.phase += (n_57_1_STATE.J * (((n_61_1_OUTS_0 * n_61_1_OUTS_0) * readSignalBus(n_57_44_STATE.busName)) + n_57_2_STATE.currentValue))
    

    n_58_0_OUTS_0 = n_58_0_STATE.currentValue
    if (toFloat(FRAME) < n_58_0_STATE.currentLine.p1.x) {
        n_58_0_STATE.currentValue += n_58_0_STATE.currentLine.dy
        if (toFloat(FRAME + 1) >= n_58_0_STATE.currentLine.p1.x) {
            n_58_0_STATE.currentValue = n_58_0_STATE.currentLine.p1.y
        }
    }

n_58_1_OUTS_0 = n_58_0_OUTS_0 * n_58_0_OUTS_0

        setSignalBus(n_57_41_STATE.busName, ((n_57_1_OUTS_0 * (n_58_1_OUTS_0 * n_58_1_OUTS_0)) * m_n_57_45_1_sig_STATE.currentValue))
    

    n_57_15_OUTS_0 = n_57_15_STATE.currentValue
    if (toFloat(FRAME) < n_57_15_STATE.currentLine.p1.x) {
        n_57_15_STATE.currentValue += n_57_15_STATE.currentLine.dy
        if (toFloat(FRAME + 1) >= n_57_15_STATE.currentLine.p1.x) {
            n_57_15_STATE.currentValue = n_57_15_STATE.currentLine.p1.y
        }
    }


        n_57_11_OUTS_0 = Math.cos(n_57_11_STATE.phase)
        n_57_11_STATE.phase += (n_57_11_STATE.J * n_57_15_OUTS_0)
    

    n_60_0_OUTS_0 = n_60_0_STATE.currentValue
    if (toFloat(FRAME) < n_60_0_STATE.currentLine.p1.x) {
        n_60_0_STATE.currentValue += n_60_0_STATE.currentLine.dy
        if (toFloat(FRAME + 1) >= n_60_0_STATE.currentLine.p1.x) {
            n_60_0_STATE.currentValue = n_60_0_STATE.currentLine.p1.y
        }
    }


    n_60_3_OUTS_0 = n_60_3_STATE.currentValue
    if (toFloat(FRAME) < n_60_3_STATE.currentLine.p1.x) {
        n_60_3_STATE.currentValue += n_60_3_STATE.currentLine.dy
        if (toFloat(FRAME + 1) >= n_60_3_STATE.currentLine.p1.x) {
            n_60_3_STATE.currentValue = n_60_3_STATE.currentLine.p1.y
        }
    }


        setSignalBus(n_57_43_STATE.busName, ((n_57_11_OUTS_0 * n_60_0_OUTS_0) + n_60_3_OUTS_0))
    
n_65_3_OUTS_0 = buf_readSample(n_65_3_STATE.buffer, toInt(Math.round(
            Math.min(
                Math.max(computeUnitInSamples(SAMPLE_RATE, m_n_65_3_0_sig_STATE.currentValue, "msec"), 0), 
                toFloat(n_65_3_STATE.buffer.length - 1)
            )
        )))
n_65_15_OUTS_0 = buf_readSample(n_65_15_STATE.buffer, toInt(Math.round(
            Math.min(
                Math.max(computeUnitInSamples(SAMPLE_RATE, m_n_65_15_0_sig_STATE.currentValue, "msec"), 0), 
                toFloat(n_65_15_STATE.buffer.length - 1)
            )
        )))

        addAssignSignalBus(n_62_12_STATE.busName, (n_65_3_OUTS_0 + (n_65_15_OUTS_0 * m_n_62_45_1_sig_STATE.currentValue)))
    

        addAssignSignalBus(n_62_23_STATE.busName, (n_65_15_OUTS_0 + (n_65_3_OUTS_0 * m_n_62_44_1_sig_STATE.currentValue)))
    

    n_62_1_STATE.coeff = Math.min(Math.max(1 - m_n_62_1_1_sig_STATE.currentValue * (2 * Math.PI) / SAMPLE_RATE, 0), 1)
    n_62_1_STATE.normal = 0.5 * (1 + n_62_1_STATE.coeff)
    n_62_1_STATE.current = (Math.random() * 2 - 1) + n_62_1_STATE.coeff * n_62_1_STATE.previous
    n_62_1_OUTS_0 = n_62_1_STATE.normal * (n_62_1_STATE.current - n_62_1_STATE.previous)
    n_62_1_STATE.previous = n_62_1_STATE.current

n_62_3_OUTS_0 = readSignalBus(n_62_3_STATE.busName)

        n_62_8_OUTS_0 = n_62_8_STATE.phase % 1
        n_62_8_STATE.phase += (n_62_8_STATE.J * m_n_62_8_0_sig_STATE.currentValue)
    

    n_62_5_STATE.signalMemory = n_62_5_OUTS_0 = n_62_8_OUTS_0 < n_62_5_STATE.controlMemory ? (n_62_3_OUTS_0 + m_n_62_4_1_sig_STATE.currentValue): n_62_5_STATE.signalMemory
    n_62_5_STATE.controlMemory = n_62_8_OUTS_0


    n_lop_t_setFreq(n_62_7_STATE, m_n_62_7_1_sig_STATE.currentValue)
    n_62_7_STATE.previous = n_62_7_OUTS_0 = n_62_7_STATE.coeff * ((n_62_5_OUTS_0 * m_n_62_16_1_sig_STATE.currentValue) + m_n_62_6_1_sig_STATE.currentValue) + (1 - n_62_7_STATE.coeff) * n_62_7_STATE.previous


        n_62_20_OUTS_0 = Math.cos(n_62_20_STATE.phase)
        n_62_20_STATE.phase += (n_62_20_STATE.J * m_n_62_20_0_sig_STATE.currentValue)
    

        n_62_21_OUTS_0 = Math.cos(n_62_21_STATE.phase)
        n_62_21_STATE.phase += (n_62_21_STATE.J * m_n_62_21_0_sig_STATE.currentValue)
    
n_62_19_OUTS_0 = n_62_7_OUTS_0 + (Math.abs((n_62_20_OUTS_0 * n_62_21_OUTS_0)))

    n_lop_t_setFreq(n_63_2_STATE, n_62_19_OUTS_0)
    n_63_2_STATE.previous = n_63_2_OUTS_0 = n_63_2_STATE.coeff * n_62_1_OUTS_0 + (1 - n_63_2_STATE.coeff) * n_63_2_STATE.previous


    n_lop_t_setFreq(n_63_3_STATE, n_62_19_OUTS_0)
    n_63_3_STATE.previous = n_63_3_OUTS_0 = n_63_3_STATE.coeff * n_63_2_OUTS_0 + (1 - n_63_3_STATE.coeff) * n_63_3_STATE.previous


    n_lop_t_setFreq(n_63_4_STATE, n_62_19_OUTS_0)
    n_63_4_STATE.previous = n_63_4_OUTS_0 = n_63_4_STATE.coeff * n_63_3_OUTS_0 + (1 - n_63_4_STATE.coeff) * n_63_4_STATE.previous


    n_lop_t_setFreq(n_63_5_STATE, n_62_19_OUTS_0)
    n_63_5_STATE.previous = n_63_5_OUTS_0 = n_63_5_STATE.coeff * n_63_4_OUTS_0 + (1 - n_63_5_STATE.coeff) * n_63_5_STATE.previous

n_62_43_OUTS_0 = n_63_5_OUTS_0 * m_n_62_43_1_sig_STATE.currentValue

    n_62_28_OUTS_0 = n_62_28_STATE.currentValue
    if (toFloat(FRAME) < n_62_28_STATE.currentLine.p1.x) {
        n_62_28_STATE.currentValue += n_62_28_STATE.currentLine.dy
        if (toFloat(FRAME + 1) >= n_62_28_STATE.currentLine.p1.x) {
            n_62_28_STATE.currentValue = n_62_28_STATE.currentLine.p1.y
        }
    }


    n_62_36_OUTS_0 = n_62_36_STATE.currentValue
    if (toFloat(FRAME) < n_62_36_STATE.currentLine.p1.x) {
        n_62_36_STATE.currentValue += n_62_36_STATE.currentLine.dy
        if (toFloat(FRAME + 1) >= n_62_36_STATE.currentLine.p1.x) {
            n_62_36_STATE.currentValue = n_62_36_STATE.currentLine.p1.y
        }
    }


        n_62_35_OUTS_0 = n_62_35_STATE.phase % 1
        n_62_35_STATE.phase += (n_62_35_STATE.J * n_62_36_OUTS_0)
    

    n_67_0_OUTS_0 = n_67_0_STATE.currentValue
    if (toFloat(FRAME) < n_67_0_STATE.currentLine.p1.x) {
        n_67_0_STATE.currentValue += n_67_0_STATE.currentLine.dy
        if (toFloat(FRAME + 1) >= n_67_0_STATE.currentLine.p1.x) {
            n_67_0_STATE.currentValue = n_67_0_STATE.currentLine.p1.y
        }
    }


    n_68_0_OUTS_0 = n_68_0_STATE.currentValue
    if (toFloat(FRAME) < n_68_0_STATE.currentLine.p1.x) {
        n_68_0_STATE.currentValue += n_68_0_STATE.currentLine.dy
        if (toFloat(FRAME + 1) >= n_68_0_STATE.currentLine.p1.x) {
            n_68_0_STATE.currentValue = n_68_0_STATE.currentLine.p1.y
        }
    }

n_65_17_OUTS_0 = (((n_62_43_OUTS_0 * (n_62_28_OUTS_0 * n_62_35_OUTS_0)) * n_67_0_OUTS_0) + (n_62_43_OUTS_0 * n_68_0_OUTS_0)) * m_n_65_17_1_sig_STATE.currentValue

        n_62_14_OUTS_0 = Math.cos(n_62_14_STATE.phase)
        n_62_14_STATE.phase += (n_62_14_STATE.J * m_n_62_14_0_sig_STATE.currentValue)
    

        n_62_15_OUTS_0 = n_62_15_STATE.phase % 1
        n_62_15_STATE.phase += (n_62_15_STATE.J * m_n_62_15_0_sig_STATE.currentValue)
    
buf_writeSample(n_65_13_STATE.buffer, ((n_65_17_OUTS_0 * (n_62_14_OUTS_0 * n_62_15_OUTS_0)) + (n_65_3_OUTS_0 * m_n_65_22_1_sig_STATE.currentValue)))

        n_62_11_OUTS_0 = Math.cos(n_62_11_STATE.phase)
        n_62_11_STATE.phase += (n_62_11_STATE.J * m_n_62_11_0_sig_STATE.currentValue)
    

        n_62_10_OUTS_0 = n_62_10_STATE.phase % 1
        n_62_10_STATE.phase += (n_62_10_STATE.J * m_n_62_10_0_sig_STATE.currentValue)
    
buf_writeSample(n_65_14_STATE.buffer, ((n_65_17_OUTS_0 * (n_62_11_OUTS_0 * n_62_10_OUTS_0)) + (n_65_15_OUTS_0 * m_n_65_23_1_sig_STATE.currentValue)))
n_131_17_OUTS_0 = +(n_62_3_OUTS_0 >= n_131_17_STATE.floatInputs.get(1))

    n_131_1_STATE.currentValue = n_131_17_OUTS_0

n_133_17_OUTS_0 = +(n_0_76_OUTS_0 >= n_133_17_STATE.floatInputs.get(1))

    n_133_1_STATE.currentValue = n_133_17_OUTS_0

            FRAME++
        }
    
            },
            io: {
                messageReceivers: {
                    n_0_65: {
                            "0": ioRcv_n_0_65_0,
                        },
n_0_67: {
                            "0": ioRcv_n_0_67_0,
                        },
n_0_70: {
                            "0": ioRcv_n_0_70_0,
                        },
n_0_74: {
                            "0": ioRcv_n_0_74_0,
                        },
n_0_75: {
                            "0": ioRcv_n_0_75_0,
                        },
n_0_80: {
                            "0": ioRcv_n_0_80_0,
                        },
n_0_113: {
                            "0": ioRcv_n_0_113_0,
                        },
n_0_117: {
                            "0": ioRcv_n_0_117_0,
                        },
                },
                messageSenders: {
                    
                },
            }
        }

        
                exports.i_fs_readSoundFile = () => { throw new Error('import for i_fs_readSoundFile not provided') }
                const i_fs_readSoundFile = (...args) => exports.i_fs_readSoundFile(...args)
            

                exports.i_fs_writeSoundFile = () => { throw new Error('import for i_fs_writeSoundFile not provided') }
                const i_fs_writeSoundFile = (...args) => exports.i_fs_writeSoundFile(...args)
            
exports.commons_getArray = commons_getArray
exports.commons_setArray = commons_setArray
exports.x_fs_onReadSoundFileResponse = x_fs_onReadSoundFileResponse
exports.x_fs_onWriteSoundFileResponse = x_fs_onWriteSoundFileResponse
    